{"version":3,"sources":["..\\node_modules\\grunt-browserify\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js","core\\events\\EventsBase.js","streaming\\constants\\ProtectionConstants.js","streaming\\protection\\CommonEncryption.js","streaming\\protection\\Protection.js","streaming\\protection\\ProtectionEvents.js","streaming\\protection\\controllers\\ProtectionController.js","streaming\\protection\\controllers\\ProtectionKeyController.js","streaming\\protection\\drm\\KeySystemClearKey.js","streaming\\protection\\drm\\KeySystemPlayReady.js","streaming\\protection\\drm\\KeySystemW3CClearKey.js","streaming\\protection\\drm\\KeySystemWidevine.js","streaming\\protection\\models\\ProtectionModel_01b.js","streaming\\protection\\models\\ProtectionModel_21Jan2015.js","streaming\\protection\\models\\ProtectionModel_3Feb2014.js","streaming\\protection\\servers\\ClearKey.js","streaming\\protection\\servers\\DRMToday.js","streaming\\protection\\servers\\PlayReady.js","streaming\\protection\\servers\\Widevine.js","streaming\\protection\\vo\\ClearKeyKeySet.js","streaming\\protection\\vo\\KeyError.js","streaming\\protection\\vo\\KeyMessage.js","streaming\\protection\\vo\\KeyPair.js","streaming\\protection\\vo\\KeySystemAccess.js","streaming\\protection\\vo\\KeySystemConfiguration.js","streaming\\protection\\vo\\MediaCapability.js","streaming\\protection\\vo\\NeedKey.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","Protection","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","EventsBase","events","config","override","publicOnly","evt","hasOwnProperty","indexOf","ProtectionConstants","init","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","constants","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","decodeArray","__text","buffer","data","dv","done","byteCursor","size","undefined","nextBox","systemID","boxStart","byteLength","val","toString","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","context","getInstance","setConfig","log","initialize","protectionModel","getProtectionModel","_controllersProtectionController2","create","adapter","eventBus","Constants","capabilities","setEncryptedMediaSupported","errHandler","videoElement","videoModel","getElement","onencrypted","mediaKeys","MediaKeys","navigator","requestMediaKeySystemAccess","getAPI","APIS_ProtectionModel_3Feb2014","_modelsProtectionModel_3Feb20142","api","APIS_ProtectionModel_01b","_modelsProtectionModel_01b2","_modelsProtectionModel_21Jan20152","apis","Object","keys","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","setMediaKeys","release","error","message","ready","close","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","updateClassFactory","ProtectionEvents","_EventsBase","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","setup","pendingNeedKeyData","initialized","sessionType","robustnessLevel","manifest","aInfo","vInfo","streamInfo","getStreamsInfo","audioInfo","getMediaInfoForType","AUDIO","videoInfo","VIDEO","mediaInfo","on","onKeyMessage","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","selectKeySystem","cps","createKeySession","cdmData","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","protData","getProtData","isLoadedInitData","getSessionType","trigger","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","onNeedKey","off","setSessionType","setRobustnessLevel","level","setProtectionData","protDataSet","reset","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","push","_voMediaCapability2","codec","_voKeySystemConfiguration2","isPendingInitData","ksIdx","initDataEquals","currentInitData","getAllInitData","fromManifest","requestedKeySystems","ks","configs","onKeySystemAccessComplete","event","offlineSessionId","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","kids","clearkeys","TextEncoder","encode","JSON","stringify","sendLicenseRequestCompleteEvent","keyMessage","messageType","licenseServerData","getLicenseServer","eventData","getSessionID","isClearKey","processClearKeyLicenseRequest","updateKeySession","xhr","XMLHttpRequest","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","reportError","errorMsg","response","getErrorResponse","statusText","status","readyState","open","getHTTPMethod","responseType","getResponseType","onload","licenseMessage","getLicenseMessage","onabort","onerror","updateHeaders","headers","key","withCredentials","setRequestHeader","httpRequestHeaders","getRequestHeadersFromMessage","send","getLicenseRequestFromMessage","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","getKeySystems","instance","ProtectionKeyController","keySystems","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","clearkeyKeySystem","_drmKeySystemW3CClearKey2","clearkeyW3CKeySystem","getKeySystemBySystemString","initData1","initData2","data1","data2","j","cpIdx","schemeIdURI","getInitData","getCDMData","getOfflineSessionId","shouldNotFilterOutKeySystem","_serversDRMToday2","_constantsProtectionConstants2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","protectionDataSet","getProtectionData","getSingletonFactory","KeySystemClearKey","protectionData","clearkeySet","jsonMsg","parse","keyPairs","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","parseInitDataFromContentProtection","KeySystemPlayReady","checkConfig","msg","xmlDoc","parser","DOMParser","dataview","messageFormat","Uint16Array","parseFromString","headerNameList","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","pro","prheader","setUint32","set","setPlayReadyMessageFormat","format","customData","cdmDataBytes","charCodeAt","PRCDMData","replace","KeySystemW3CClearKey","KeySystemWidevine","replaceKID","KID","pssh_array","kidLen","pos","ProtectionModel_01b","pendingSessions","sessions","eventHandler","createEventHandler","removeEventListeners","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","moreSessionsAllowed","newSession","getExpirationTime","NaN","keyID","handleEvent","type","_voNeedKey2","findSessionByID","sessionId","errorCode","systemCode","_voKeyError2","shift","mediaKeyMessageError","_voKeyMessage2","defaultURL","sessionArray","len","removeEventListener","ProtectionModel_21Jan2015","numSessions","session","removeSession","then","closed","closeKeySessionInternal","requestKeySystemAccessInternal","mksa","createMediaKeys","mkeys","name","createSession","createSessionToken","dataType","generateRequest","toJWK","update","load","success","remove","idx","mediaKeySystemAccess","configuration","getConfiguration","token","splice","expiration","getKeyStatuses","keyStatuses","ProtectionModel_3Feb2014","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","boundDoSetKeys","doSetKeys","bind","keySession","destinationURL","ClearKey","substring","serverResponse","keypair","keyid","kid","k","DRMToday","keySystemStr","license","PlayReady","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","parseServerResponse","stringResponse","envelope","getElementsByTagNameNS","soap","body","parseErrorResponse","faultstring","statusCode","idStart","idEnd","fault","detail","exception","node","firstChild","lastIndexOf","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","buf","bView","KeyError","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey"],"mappings":";CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,SAAAL,EAAAK,YAAAC,WAAAX,MAAA,WAAA,MAAA,SAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAjB,GAAA,GAAAsB,OAAA,uBAAAL,EAAA,IAAA,MAAAjB,GAAAuB,KAAA,mBAAAvB,EAAA,GAAAwB,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAoB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAC,EAAA1B,EAAAD,wZCkCM4B,EAAU,mBAAVA,YAAAA,YAAAA,uBACK,SAACC,EAAQC,GACZ,GAAKD,EAAL,CAEA,GAAIE,KAAWD,GAASA,EAAOC,SAC3BC,IAAaF,GAASA,EAAOE,UAGjC,KAAK,GAAMC,KAAOJ,IACTA,EAAOK,eAAeD,IAASzB,KAAKyB,KAASF,GAC9CC,IAAkD,IAApCH,EAAOI,GAAKE,QAAQ,aACtC3B,KAAKyB,GAAOJ,EAAOI,SAXzBL,eAiBSA,mcCfTQ,EAAmB,WAQT,QARVA,YAAAA,GASE5B,KAAK6B,gBATPD,qBAEG,WACD5B,KAAK8B,wBAA0B,kBAC/B9B,KAAK+B,wBAA0B,qBAC/B/B,KAAKgC,yBAA2B,8BALlCJ,KAaFK,EAAY,GAAIL,aACLK,mcCnBTC,EAAgB,mBAAhBA,YAAAA,YAAAA,EAAgB,6CASc,SAACC,GAE7B,IAAK,GADDC,GAAS,KACJxB,EAAI,EAAGA,EAAIuB,EAAQlB,SAAUL,EAAG,CACrC,GAAIyB,GAAKF,EAAQvB,EACoB,sCAAjCyB,EAAGC,YAAYC,eACgB,SAA3BF,EAAGG,MAAMD,gBACbH,EAASC,GAEjB,MAAOD,8BASO,SAACK,GACf,GAAIC,GAAS,EACTC,EAAO,GAAIC,UAASH,GAGpBI,EAAUF,EAAKG,SAASJ,EAS5B,OAPAA,IAAU,GAENG,EAAU,IACVH,GAAU,EAAK,GAAKC,EAAKI,UAAUL,IAGvCA,GAAU,EACHD,EAAKO,MAAMN,sCAaI,SAACO,EAAWC,GAClC,GAAIC,GAAWjB,EAAiBkB,cAAcF,EAC9C,OAAIC,GAASzB,eAAeuB,EAAUI,KAAKd,eAChCY,EAASF,EAAUI,KAAKd,eAE5B,uDAW8B,SAACe,EAAQC,GAC9C,MAAI,QAAUD,GACHC,EAAOC,YAAYF,EAAOb,KAAKgB,QAAQC,OAE3C,kCAYS,SAACC,GAEjB,GAAa,OAATA,EACA,QAQJ,KANA,GAAIC,GAAK,GAAIhB,UAASe,EAAKD,QAAUC,GACjCE,GAAO,EACPpB,KAGAqB,EAAa,GACTD,GAAM,CAEV,GAAIE,OAAIC,GACJC,MAAOD,GACPnB,MAAOmB,GACPE,MAAQF,GAERG,EAAWL,CAEf,IAAIA,GAAcF,EAAGF,OAAOU,WACxB,KAQJ,IALAL,EAAOH,EAAGb,UAAUe,GACpBG,EAAUH,EAAaC,EACvBD,GAAc,EAGmB,aAA7BF,EAAGb,UAAUe,GAQjB,GAJAA,GAAc,EAIE,KADhBjB,EAAUe,EAAGd,SAASgB,KACW,IAAZjB,EAArB,CAIAiB,IAEAA,GAAc,EAGdI,EAAW,EACX,IAAItD,OAACoD,GAAEK,MAAGL,EACV,KAAKpD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAIjD,KAFAP,GAAc,EACdI,GAAY,IACPtD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAIjD,KAFAP,GAAc,EACdI,GAAY,IACPtD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAIjD,KAFAP,GAAc,EACdI,GAAY,IACPtD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAIjD,KAFAP,GAAc,EACdI,GAAY,IACPtD,EAAI,EAAGA,EAAI,EAAGA,IACfyD,EAAMT,EAAGd,SAASgB,EAAalD,GAAG0D,SAAS,IAC3CJ,GAA4B,IAAhBG,EAAKpD,OAAgB,IAAMoD,EAAMA,CAEjDP,IAAc,EAEdI,EAAWA,EAAS3B,cAGLqB,EAAGb,UAAUe,GAC5BA,GAAc,EAGdrB,EAAKyB,GAAYN,EAAGF,OAAOV,MAAMmB,EAAUF,GAC3CH,EAAaG,MAhDTH,GAAaG,MARbH,GAAaG,EA2DrB,MAAOxB,OA9KTP,eAkLSA,8GC5Gf,QAAShC,KAaL,QAASqE,GAAuBjD,GAE5B,GAAIkD,GAAa,KAEbC,GAA0B,EAAAC,EAAA,SAAwBC,GAASC,aAC/DH,GAAwBI,WAAWC,IAAKxD,EAAOwD,IAAKvB,OAAQjC,EAAOiC,SACnEkB,EAAwBM,YAExB,IAAIC,GAAmBC,EAAmB3D,EAe1C,QAbKkD,GAAcQ,IACfR,GAAa,EAAAU,EAAA,SAAqBP,GAASQ,QACvCH,gBAAiBA,EACjBP,wBAAyBA,EACzBW,QAAS9D,EAAO8D,QAChBC,SAAU/D,EAAO+D,SACjBP,IAAKxD,EAAOwD,IACZzD,OAAQC,EAAOD,OACfkC,OAAQjC,EAAOiC,OACf+B,UAAWhE,EAAOgE,YAEtBhE,EAAOiE,aAAaC,4BAA2B,IAE5ChB,EAGX,QAASS,GAAmB3D,GAExB,GAAIwD,GAAMxD,EAAOwD,IACbO,EAAW/D,EAAO+D,SAClBI,EAAanE,EAAOmE,WACpBC,EAAepE,EAAOqE,WAAarE,EAAOqE,WAAWC,aAAe,IAExE,OAAMF,QAA6C1B,KAA7B0B,EAAaG,aAC7BH,OAA2C1B,KAA3B0B,EAAaI,eACV9B,KAArBnE,OAAOkG,eACmC/B,KAA1CgC,UAAUC,6BACuC,kBAA1CD,WAAUC,4BAKVC,EAAOR,EAAcS,IAE5BrB,EAAI,gEACG,EAAAsB,EAAA,SAAyBzB,GAASQ,QAAQL,IAAKA,EAAKO,SAAUA,EAAUhE,OAAQC,EAAOD,OAAQgF,IAAKH,EAAOR,EAAcS,MAEzHD,EAAOR,EAAcY,IAE5BxB,EAAI,2DACG,EAAAyB,EAAA,SAAoB5B,GAASQ,QAAQL,IAAKA,EAAKO,SAAUA,EAAUI,WAAYA,EAAYpE,OAAQC,EAAOD,OAAQgF,IAAKH,EAAOR,EAAcY,OAInJxB,EAAI,4GACG,OAhBPA,EAAI,iEACG,EAAA0B,EAAA,SAA0B7B,GAASQ,QAAQL,IAAKA,EAAKO,SAAUA,EAAUhE,OAAQC,EAAOD,UAoBvG,QAAS6E,GAAOR,EAAce,GAE1B,IAAK,GAAI7F,GAAI,EAAGA,EAAI6F,EAAKxF,OAAQL,IAAK,CAClC,GAAIyF,GAAMI,EAAK7F,EAGf,IAAsD,kBAA3C8E,GAAaW,EAAIK,OAAOC,KAAKN,GAAK,KAI7C,MAAOA,GAGX,MAAO,MApFX,GACI1B,GAAU3E,KAAK2E,OA0FnB,QAHIJ,uBAAwBA,4DAjKC,cACG,cACP,cACS,eACD,eACL,WAE1B+B,IAIEM,mBAAoB,qBACpBC,OAAQ,SACRC,iBAAkB,mBAGlBC,QAAS,UACTC,SAAU,WACVC,SAAU,WACVC,WAAY,eAKZN,mBAAoB,2BACpBC,OAAQ,eACRC,iBAAkB,yBAGlBC,QAAS,gBACTC,SAAU,iBACVC,SAAU,iBACVC,WAAY,qBAIdf,IAKEgB,aAAc,eAEdpB,UAAW,YAEXqB,QAAS,QAGTL,QAAS,UACTM,MAAO,WACPC,QAAS,aACTC,MAAO,WACPC,MAAO,aAKPL,aAAc,iBAEdpB,UAAW,cAEXqB,QAAS,QAETL,QAAS,YACTM,MAAO,aACPC,QAAS,eACTC,MAAO,aACPC,MAAO,cAoGftH,GAAWuH,sBAAwB,YACnC,IAAIC,GAAUzH,OAAO0H,aAAaC,gBAAgB1H,EAClDwH,GAAQrG,OAAMwG,EAAA,QACd5H,OAAO0H,aAAaG,mBAAmB5H,EAAWuH,sBAAuBC,aAC1DA,g5BC3KQ,UAKjBK,EAAgB,SAAAC,GAMN,QANVD,YAAAA,GAOEE,EAAAvB,OAAAwB,eAPFH,EAAgBI,WAAA,cAAAnI,MAAAgB,KAAAhB,MAedA,KAAKoI,qBAAuB,qBAO5BpI,KAAKqI,6BAA+B,4BAWpCrI,KAAKsI,UAAY,kBAMjBtI,KAAKuI,UAAY,kBAOjBvI,KAAKwI,YAAc,oBAOnBxI,KAAKyI,mBAAqB,0BAO1BzI,KAAK0I,oBAAsB,2BAO3B1I,KAAK2I,oBAAsB,2BAQ3B3I,KAAK4I,qBAAuB,4BAO5B5I,KAAK6I,2BAA6B,0BAOlC7I,KAAK8I,oBAAsB,2BAO3B9I,KAAK+I,yBAA2B,gCAMhC/I,KAAKgJ,SAAW,UAMhBhJ,KAAKiJ,mBAAqB,2BAM1BjJ,KAAKkJ,qBAAuB,6BAO5BlJ,KAAKmJ,2BAA6B,2BAOlCnJ,KAAKoJ,kBAAqB,6BAO1BpJ,KAAKqJ,uBAAyB,gCAvIhCtB,EAAgBC,GAAhBD,cA2IFuB,EAAmB,GAAIvB,aACZuB,iHC9Hf,QAASC,GAAqBjI,GAsB1B,QAASkI,KACLC,KACAC,GAAc,EACdC,EAAc,YACdC,EAAkB,GAkBtB,QAAS7E,GAAW8E,EAAUC,EAAOC,GAKjC,IAAKL,EAAa,CACd,GAAIM,OAAUhG,EAET8F,IAAUC,IAGXC,EAAa5E,EAAQ6E,iBAAiB,IAG1CC,EAAYJ,IAAUE,EAAa5E,EAAQ+E,oBAAoBH,EAAY1E,EAAU8E,OAAS,MAC9FC,EAAYN,IAAUC,EAAa5E,EAAQ+E,oBAAoBH,EAAY1E,EAAUgF,OAAS,KAC9F,IAAMC,GAAYF,GAA0BH,CAE5C7E,GAASmF,GAAGnJ,EAAO+G,qBAAsBqC,EAAczK,KAIvD,IAAM0K,GAAcjG,EAAwBkG,4CAA4CJ,EAAUK,kBAC9FF,IAAeA,EAAYzJ,OAAS,GACpC4J,EAAgBH,GAAa,GAGjChB,GAAc,GAkBtB,QAASiB,GAA4CG,GACjD,MAAOrG,GAAwBkG,4CAA4CG,GAiB/E,QAASC,GAAiB7H,EAAU8H,GAChC,GAAMC,GAAgBC,EAAA,QAAiBC,oBAAoBlI,EAAWC,GAChEkI,EAAWC,EAAYpI,EAC7B,IAAIgI,EAAe,CACf,GAAIK,EAAiBL,GAEjB,WADAnG,GAAI,0DAGR,KACIE,EAAgB+F,iBAAiBE,EAAeG,EAAUG,EAAetI,GAAY+H,GACvF,MAAO3D,GACLhC,EAASmG,QAAQnK,EAAOqH,qBAAsB/E,KAAM,KAAM0D,MAAO,+BAAiCA,EAAMC,eAErGpE,GACP8B,EAAgB+F,iBAAiB7H,EAAUkI,EAAUG,EAAetI,GAAY+H,GAEhF3F,EAASmG,QAAQnK,EAAOqH,qBAAsB/E,KAAM,KAAM0D,MAAO,0BAA4BpE,EAAUwI,aAAe,sFAa9H,QAASC,GAAeC,GACpB3G,EAAgB0G,eAAeC,EAAWJ,EAAetI,IAe7D,QAAS2I,GAAiBC,GACtB7G,EAAgB4G,iBAAiBC,GAarC,QAASC,GAAgBD,GACrB7G,EAAgB8G,gBAAgBD,GAcpC,QAASE,GAAqBC,GAC1BhH,EAAgB+G,qBAAqBC,GAazC,QAASC,GAAgBC,GACjBA,GACAlH,EAAgBiH,gBAAgBC,GAChC7G,EAASmF,GAAGnJ,EAAO2H,SAAUmD,EAAWnM,MACxCqF,EAASmF,GAAGnJ,EAAO+G,qBAAsBqC,EAAczK,OACpC,OAAZkM,IACPlH,EAAgBiH,gBAAgBC,GAChC7G,EAAS+G,IAAI/K,EAAO2H,SAAUmD,EAAWnM,MACzCqF,EAAS+G,IAAI/K,EAAO+G,qBAAsBqC,EAAczK,OAYhE,QAASqM,GAAe7J,GACpBmH,EAAcnH,EAWlB,QAAS8J,GAAmBC,GACxB3C,EAAkB2C,EAYtB,QAASC,GAAkB7I,GACvB8I,EAAc9I,EACdc,EAAwB+H,kBAAkB7I,GAY9C,QAAS+I,KAELrH,EAAS+G,IAAI/K,EAAO+G,qBAAsBqC,EAAczK,MAExDiM,EAAgB,MAEhBhJ,MAAYe,GAERgB,IACAA,EAAgB0H,QAChB1H,EAAkB,MAQ1B,QAASqG,GAAYpI,GACjB,GAAImI,GAAW,KACTuB,EAAkB1J,EAAUwI,YAKlC,OAHIgB,KACArB,EAAWuB,IAAoBF,GAAeA,EAAYE,GAAmB,MAE1EvB,EAGX,QAASwB,GAA0B3J,GAC/B,GAAMmI,GAAWC,EAAYpI,GACvB4J,KACAC,KACAC,EAAkB3B,GAAaA,EAAS2B,iBAAmB3B,EAAS2B,gBAAgB9L,OAAS,EAAKmK,EAAS2B,gBAAkBnD,EAC7HoD,EAAkB5B,GAAaA,EAAS4B,iBAAmB5B,EAAS4B,gBAAgB/L,OAAS,EAAKmK,EAAS4B,gBAAkBpD,EAC7HqD,EAAgB1B,EAAetI,EASrC,OAPIiH,IACA2C,EAAkBK,KAAK,GAAAC,GAAA,QAAoBjD,EAAUkD,MAAOL,IAE5D1C,GACAyC,EAAkBI,KAAK,GAAAC,GAAA,QAAoB9C,EAAU+C,MAAOJ,IAGzD,GAAAK,GAAA,QACHR,EAAmBC,EAAmB,WACnB,cAAnBG,EAAkC,WAAa,YAC9CA,IAGT,QAAS1B,GAAetI,GACpB,GAAMmI,GAAWC,EAAYpI,EAE7B,OADsBmI,IAAaA,EAASzB,YAAeyB,EAASzB,YAAcA,EAItF,QAAS2D,GAAkBpK,GACvB,IAAK,GAAItC,GAAI,EAAGA,EAAI6I,EAAmBxI,OAAQL,IAC3C,IAAK,GAAI2M,GAAQ,EAAGA,EAAQ9D,EAAmB7I,GAAGK,OAAQsM,IACtD,GAAI9I,EAAwB+I,eAAetK,EAAUuG,EAAmB7I,GAAG2M,GAAOrK,UAC9E,OAAO,CAInB,QAAO,EAGX,QAASoI,GAAiBpI,GAEtB,IAAK,GADCuK,GAAkBzI,EAAgB0I,iBAC/B9M,EAAI,EAAGA,EAAI6M,EAAgBxM,OAAQL,IACxC,GAAI6D,EAAwB+I,eAAetK,EAAUuK,EAAgB7M,IACjE,OAAO,CAGf,QAAO,EAGX,QAASiK,GAAgBH,EAAaiD,GAClC,GAAM5N,GAAOC,KACP4N,KAEFL,MAAKvJ,EACT,IAAIf,GAEA,IAAKsK,EAAQ,EAAGA,EAAQ7C,EAAYzJ,OAAQsM,IACxC,GAAItK,IAAcyH,EAAY6C,GAAOM,GAAI,kBAErCD,EAAoBV,MAAMW,GAAInD,EAAY6C,GAAOM,GAAIC,SAAUlB,EAA0B3J,KAIzF,IAAM8K,GAA4B,QAA5BA,GAAsCC,GACxC3I,EAAS+G,IAAI/K,EAAOwH,2BAA4BkF,EAA2BhO,GACvEiO,EAAM3G,MACDsG,GACDtI,EAASmG,QAAQnK,EAAOyH,qBAAsBzB,MAAO,oCAAsC2G,EAAM3G,SAGrGvC,EAAI,iCACJO,EAASmG,QAAQnK,EAAOyH,qBAAsBnF,KAAMqK,EAAMrK,OACtD+G,EAAY6C,GAAOU,iBACnBvC,EAAehB,EAAY6C,GAAOU,kBAElClD,EAAiBL,EAAY6C,GAAOrK,SAAUwH,EAAY6C,GAAOvC,UAM7E,OAFA3F,GAASmF,GAAGnJ,EAAOwH,2BAA4BkF,EAA2BhO,GAC1EiF,EAAgBkJ,uBAAuBN,GACvC,0BAAA,WAIP,QAAkB5J,KAAdf,EAAyB,IA0B1BkL,eAxBJlL,EAAY,KACZwG,EAAmByD,KAAKxC,EAGxB,KAAK,GAAI9J,GAAI,EAAGA,EAAI8J,EAAYzJ,OAAQL,IACpCgN,EAAoBV,MAAMW,GAAInD,EAAY9J,GAAGiN,GAAIC,SAAUlB,EAA0BlC,EAAY9J,GAAGiN,MAGxG,IAAIO,OAAepK,GACb+J,EAA4B,QAA5BA,GAAsCC,GACxC3I,EAAS+G,IAAI/K,EAAOwH,2BAA4BkF,EAA2BhO,GACvEiO,EAAM3G,OACNpE,MAAYe,GACZqB,EAAS+G,IAAI/K,EAAOgH,6BAA8B8F,EAAqBpO,GAElE4N,GACDtI,EAASmG,QAAQnK,EAAOyH,qBAAsBnF,KAAM,KAAM0D,MAAO,oCAAsC2G,EAAM3G,UAGjH+G,EAAkBJ,EAAMrK,KACxBmB,EAAI,kCAAoCsJ,EAAgBnL,UAAUwI,aAAe,+BACjFzG,EAAgB6F,gBAAgBuD,IAGpCD,GAAsB,QAAtBA,GAAgCH,GAGhC,GAFA3I,EAAS+G,IAAI/K,EAAOgH,6BAA8B8F,EAAqBpO,GACvEsF,EAAS+G,IAAI/K,EAAOwH,2BAA4BkF,EAA2BhO,GACtEiO,EAAM3G,MA2BPpE,MAAYe,GACP2J,GACDtI,EAASmG,QAAQnK,EAAOyH,qBAAsBnF,KAAM,KAAM0D,MAAO,uCAAyC2G,EAAM3G,YA7BtG,CACdpE,EAAY+B,EAAgBqJ,eAC5BhJ,EAASmG,QAAQnK,EAAOyH,qBAAsBnF,KAAMyK,GAEpD,IAAMhD,GAAWC,EAAYpI,EACzBmI,IAAYA,EAASY,mBAAqBZ,EAASY,kBAAkB/K,OAAS,GAC9E+D,EAAgB+G,qBAAqBxI,EAAOC,YAAY4H,EAASY,mBAAmBtI,OAExF,KAAK,GAAI9C,GAAI,EAAGA,EAAI6I,EAAmBxI,OAAQL,IAC3C,IAAK2M,EAAQ,EAAGA,EAAQ9D,EAAmB7I,GAAGK,OAAQsM,IAClD,GAAItK,IAAcwG,EAAmB7I,GAAG2M,GAAOM,GAAI,CAC/C,GAA8C,OAA1CpE,EAAmB7I,GAAG2M,GAAOrK,UAAqBkI,GAAYA,EAAS1J,eAAe,aAAc,CACpG,GAAMwB,IAAaoL,KAAM5H,OAAOC,KAAKyE,EAASmD,WAC9C9E,GAAmB7I,GAAG2M,GAAOrK,UAAW,GAAIsL,cAAcC,OAAOC,KAAKC,UAAUzL,IAIhFuG,EAAmB7I,GAAG2M,GAAOU,iBAC7BvC,EAAejC,EAAmB7I,GAAG2M,GAAOU,kBACK,OAA1CxE,EAAmB7I,GAAG2M,GAAOrK,UACpC6H,EAAiBtB,EAAmB7I,GAAG2M,GAAOrK,SAAUuG,EAAmB7I,GAAG2M,GAAOvC,QAEzF,UAWpB3F,EAASmF,GAAGnJ,EAAOgH,6BAA8B8F,EAAqBpO,GACtEsF,EAASmF,GAAGnJ,EAAOwH,2BAA4BkF,EAA2BhO,GAC1EiF,EAAgBkJ,uBAAuBN,UAGvCnE,GAAmByD,KAAKxC,GAIhC,QAASkE,GAAgCjL,EAAM0D,GAC3ChC,EAASmG,QAAQnK,EAAO0H,0BAA2BpF,KAAMA,EAAM0D,MAAOA,IAG1E,QAASoD,GAAatK,GAElB,GADA2E,EAAI,qBACA3E,EAAEkH,MAEF,WADAvC,GAAI3E,EAAEkH,MAKV,IAAMwH,GAAa1O,EAAEwD,IACrB0B,GAASmG,QAAQnK,EAAOmH,aAAc7E,KAAMkL,GAC5C,IAAMC,GAAcD,EAAYC,YAAeD,EAAWC,YAAc,kBAClExH,EAAUuH,EAAWvH,QACrBuE,EAAegD,EAAWhD,aAC1BT,EAAWC,EAAYpI,GACvB0J,EAAkB1J,EAAUwI,aAC5BsD,EAAoBtK,EAAwBuK,iBAAiB/L,EAAWmI,EAAU0D,GAClFG,GAAcpD,aAAcA,EAAciD,YAAaA,EAG7D,KAAKC,EAGD,MAFAjK,GAAI,qEAAuE3E,EAAEwD,KAAKmL,YAAc,oBAAsBjD,EAAaqD,oBACnIN,GAAgCK,EAKpC,IAAIxK,EAAwB0K,WAAWlM,GAAY,CAC/C,GAAMsL,GAAY9J,EAAwB2K,8BAA8BnM,EAAWmI,EAAU9D,EAC7F,IAAIiH,EAIA,MAHAzJ,GAAI,yDACJ8J,EAAgCK,OAChCjK,GAAgBqK,iBAAiBxD,EAAc0C,GAMvD,GAAMe,GAAM,GAAIC,gBAGZC,EAAM,IACV,IAAIpE,GAAYA,EAASqE,UAAW,CAChC,GAAMA,GAAYrE,EAASqE,SACF,iBAAdA,IAAwC,KAAdA,EACjCD,EAAMC,EACsB,gBAAdA,IAA0BA,EAAU/N,eAAeoN,KACjEU,EAAMC,EAAUX,QAEb1D,IAAYA,EAASsE,OAA4B,KAAnBtE,EAASsE,MAE9CF,EAAMpE,EAASsE,OAEfF,EAAMvM,EAAU0M,gCAAgCzE,EAAA,QAAiB0E,YAAY/D,EAAa3I,cAEtFsM,EAAMrP,EAAEwD,KAAK+L,MAOrB,MAHAF,EAAMT,EAAkBc,wBAAwBL,EAAKlI,EAASwH,IAK1D,WADAF,GAAgCK,EAAW,wCAI/C,IAAMa,GAAc,SAAUR,EAAKL,EAAWtC,EAAiBmC,GAC3D,GAAMiB,GAAYT,EAAKU,SAAYjB,EAAkBkB,iBAAiBX,EAAIU,SAAUrD,EAAiBmC,GAAe,MACpHF,GAAgCK,EAAW,QAAUtC,EAAkB,qCAAuC2C,EAAIY,WAAa,MAAQZ,EAAIa,OAAS,oBAAsBb,EAAIc,WAAa,kBAAoBL,GAGnNT,GAAIe,KAAKtB,EAAkBuB,cAAcxB,GAAcU,GAAK,GAC5DF,EAAIiB,aAAexB,EAAkByB,gBAAgB7D,EAAiBmC,GACtEQ,EAAImB,OAAS,WACT,GAAmB,KAAfzQ,KAAKmQ,OAAe,CACpB,GAAMO,GAAiB3B,EAAkB4B,kBAAkB3Q,KAAKgQ,SAAUrD,EAAiBmC,EACpE,QAAnB4B,GACA9B,EAAgCK,GAChCjK,EAAgBqK,iBAAiBxD,EAAc6E,IAE/CZ,EAAY9P,KAAMiP,EAAWtC,EAAiBmC,OAGlDgB,GAAY9P,KAAMiP,EAAWtC,EAAiBmC,IAGtDQ,EAAIsB,QAAU,WACVhC,EAAgCK,EAAW,QAAUtC,EAAkB,oCAAsC3M,KAAKkQ,WAAa,MAAQlQ,KAAKmQ,OAAS,oBAAsBnQ,KAAKoQ,aAEpLd,EAAIuB,QAAU,WACVjC,EAAgCK,EAAW,QAAUtC,EAAkB,kCAAoC3M,KAAKkQ,WAAa,MAAQlQ,KAAKmQ,OAAS,oBAAsBnQ,KAAKoQ,YAIlL,IAAMU,GAAgB,SAAUC,GAC5B,GAAIA,EACA,IAAK,GAAMC,KAAOD,GACV,kBAAoBC,EAAIzO,gBACxB+M,EAAI2B,iBAAkB,GAE1B3B,EAAI4B,iBAAiBF,EAAKD,EAAQC,IAI1C5F,IACA0F,EAAc1F,EAAS+F,oBAE3BL,EAAc7N,EAAUmO,6BAA6B9J,IAGjD8D,GAA+C,iBAA5BA,GAAS6F,kBAC5B3B,EAAI2B,gBAAkB7F,EAAS6F,iBAGnC3B,EAAI+B,KAAKpO,EAAUqO,6BAA6BhK,IAGpD,QAAS6E,GAAU6B,GAGf,GAFAlJ,EAAI,kBAE2B,SAA3BkJ,EAAMgD,IAAIO,aAEV,WADAzM,GAAI,wEAA4EkJ,EAAMgD,IAAIO,aAM9F,IAAIC,GAAaxD,EAAMgD,IAAI9N,QAM3B,IALIuO,YAAYC,OAAOF,KACnBA,EAAaA,EAAW9N,QAIxBT,EAAW,CACX,GAAMgI,GAAgBC,EAAA,QAAiBC,oBAAoBlI,EAAWuO,EACtE,IAAIvG,IAAkBqC,EAAkBrC,IAAkBK,EAAiBL,IAEvE,WADAnG,GAAI,2DAKZA,EAAI,iBAAkB6M,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWN,IAErE,IAAM9G,GAAcjG,EAAwBsN,uBAAuBP,EAAY/E,EAC/E,IAA2B,IAAvB/B,EAAYzJ,OAEZ,WADA6D,GAAI,0FAIR+F,GAAgBH,GAAa,GAGjC,QAASsH,KACL,MAAOvN,GAA0BA,EAAwBuN,mBAhlB7D1Q,EAASA,KACT,IAAMmD,GAA0BnD,EAAOmD,wBACnCO,EAAkB1D,EAAO0D,gBACzBI,EAAU9D,EAAO8D,QACjBC,EAAW/D,EAAO+D,SAChBhE,EAASC,EAAOD,OAClByD,EAAMxD,EAAOwD,IACbvB,EAASjC,EAAOiC,OACd+B,EAAYhE,EAAOgE,UAErB2M,MAAQjO,GACRyF,MAAkBzF,GAClBkG,MAASlG,GACTqG,MAASrG,GACTyI,MAAWzI,GACX0F,MAAW1F,GACX2F,MAAW3F,GACX4F,MAAe5F,GACff,MAASe,EAklBb,OAjBAiO,IACIlN,WAAYA,EACZgG,iBAAkBA,EAClBW,eAAgBA,EAChBE,iBAAkBA,EAClBE,gBAAiBA,EACjBC,qBAAsBA,EACtBE,gBAAiBA,EACjBI,eAAgBA,EAChBC,mBAAoBA,EACpBE,kBAAmBA,EACnB7B,4CAA6CA,EAC7CqH,cAAeA,EACftF,MAAOA,GAGXlD,IACOyI,2DAxnBkB,cACD,eACO,UAynBnC1I,GAAqB9B,sBAAwB,iCAC9BxH,OAAO0H,aAAaC,gBAAgB2B,8HC9mBnD,QAAS2I,KAWL,QAASrN,GAAUvD,GACVA,IAEDA,EAAOwD,MACPA,EAAMxD,EAAOwD,KAGbxD,EAAOiC,SACPA,EAASjC,EAAOiC,SAIxB,QAASwB,KACLoN,IAEA,IAAIlP,OAASe,EAGbf,IAAY,EAAAmP,EAAA,SAAmBzN,GAASC,aAAcrB,OAAQA,IAC9D4O,EAAWjF,KAAKjK,GAGhBA,GAAY,EAAAoP,EAAA,SAAkB1N,GAASC,aAAcrB,OAAQA,IAC7D4O,EAAWjF,KAAKjK,GAGhBA,GAAY,EAAAqP,EAAA,SAAkB3N,GAASC,aAAcrB,OAAQA,IAC7D4O,EAAWjF,KAAKjK,GAChBsP,EAAoBtP,EAGpBA,GAAY,EAAAuP,EAAA,SAAqB7N,GAASC,aAAcrB,OAAQA,EAAQuB,IAAKA,IAC7EqN,EAAWjF,KAAKjK,GAChBwP,EAAuBxP,EAa3B,QAAS+O,KACL,MAAOG,GAcX,QAASO,GAA2BjH,GAChC,IAAK,GAAI7K,GAAI,EAAGA,EAAIuR,EAAWlR,OAAQL,IACnC,GAAIuR,EAAWvR,GAAG6K,eAAiBA,EAC/B,MAAO0G,GAAWvR,EAG1B,OAAO,MAiBX,QAASuO,GAAWlM,GAChB,MAAQA,KAAcsP,GAAqBtP,IAAcwP,EAa7D,QAASjF,GAAemF,EAAWC,GAC/B,IAAKD,IAAcC,EACf,OAAO,CAEX,IAAID,EAAUvO,aAAewO,EAAUxO,WAAY,CAI/C,IAAK,GAHDyO,GAAQ,GAAIf,YAAWa,GACvBG,EAAQ,GAAIhB,YAAWc,GAElBG,EAAI,EAAGA,EAAIF,EAAM5R,OAAQ8R,IAC9B,GAAIF,EAAME,KAAOD,EAAMC,GACnB,OAAO,CAGf,QAAO,EAEX,OAAO,EAiBX,QAASpI,GAA4CG,GACjD,GAAIzI,OAAE2B,GAAE6J,MAAE7J,GAAEuJ,MAAKvJ,GAAEgP,MAAKhP,GACpB0G,IAEJ,IAAII,EACA,IAAKyC,EAAQ,EAAGA,EAAQ4E,EAAWlR,SAAUsM,EAEzC,IADAM,EAAKsE,EAAW5E,GACXyF,EAAQ,EAAGA,EAAQlI,EAAI7J,SAAU+R,EAClC3Q,EAAKyI,EAAIkI,GACL3Q,EAAGC,YAAYC,gBAAkBsL,EAAGoF,aAEpCvI,EAAYwC,MACRW,GAAIsE,EAAW5E,GACfrK,SAAU2K,EAAGqF,YAAY7Q,GACzB2I,QAAS6C,EAAGsF,aACZlF,iBAAkBJ,EAAGuF,oBAAoB/Q,IAM7D,OAAOqI,GAmBX,QAASqH,GAAuB7O,EAAUuJ,GAItC,IAAK,GAHD/B,MACAjI,EAAOyI,EAAA,QAAiB9H,cAAcF,GAEjCqK,EAAQ,EAAGA,EAAQ4E,EAAWlR,SAAUsM,EAAO,CACpD,GAAIZ,GAAkBwF,EAAW5E,GAAO9B,aACpC4H,GAA8B5G,GAAgBE,IAAmBF,EAEjE0F,GAAW5E,GAAOlK,OAAQZ,IAAQ4Q,GAClC3I,EAAYwC,MACRW,GAAIsE,EAAW5E,GACfrK,SAAUT,EAAK0P,EAAW5E,GAAOlK,QAI7C,MAAOqH,GAoBX,QAASsE,GAAiB/L,EAAWmI,EAAU0D,GAI3C,GAAoB,oBAAhBA,GAAqD,8BAAhBA,EACrC,MAAO,KAGX,IAAIC,GAAoB,IAWxB,OAVI3D,IAAYA,EAAS1J,eAAe,YACpCqN,GAAoB,EAAAuE,EAAA,SAAS3O,GAASC,aAAcrB,OAAQA,IACrDN,EAAUwI,eAAiB8H,EAAA,QAAoBxR,wBACtDgN,GAAoB,EAAAyE,EAAA,SAAS7O,GAASC,cAC/B3B,EAAUwI,eAAiB8H,EAAA,QAAoBvR,yBACtD+M,GAAoB,EAAA0E,EAAA,SAAU9O,GAASC,cAChC3B,EAAUwI,eAAiB8H,EAAA,QAAoBzR,0BACtDiN,GAAoB,EAAA2E,EAAA,SAAS/O,GAASC,eAGnCmK,EAeX,QAASK,GAA8BmD,EAAmBnH,EAAU9D,GAChE,IACI,MAAOiL,GAAkBoB,+BAA+BvI,EAAU9D,GACpE,MAAOD,GAEL,MADAvC,GAAI,oDACG,MAIf,QAAS0H,GAAkBoH,GASvB,IAAK,GARDC,IAAoB,SAAUlH,GAC9B,GAAIvB,GAAW,IAIf,OAHIwI,KACAxI,EAAWuB,IAAoBiH,GAAqBA,EAAkBjH,GAAmB,MAEtFvB,IAGFxK,EAAI,EAAGA,EAAIuR,EAAWlR,OAAQL,IAAK,CACxC,GAAIqC,GAAYkP,EAAWvR,EACvBqC,GAAUvB,eAAe,SACzBuB,EAAUpB,KAAKgS,EAAkB5Q,EAAUwI,gBA7QvD,GAAI9G,GAAU3E,KAAK2E,QAGfG,MAAGd,GACHmO,MAAUnO,GACVT,MAAMS,GACNuO,MAAiBvO,GACjByO,MAAoBzO,EAyRxB,QAbIe,WAAYA,EACZyH,kBAAmBA,EACnB2C,WAAYA,EACZ3B,eAAgBA,EAChBwE,cAAeA,EACfU,2BAA4BA,EAC5B/H,4CAA6CA,EAC7CoH,uBAAwBA,EACxB/C,iBAAkBA,EAClBI,8BAA+BA,EAC/BvK,UAAWA,4DA9SU,cACC,cACG,eACH,eACC,cACV,eACC,eACD,eACA,eACW,SA2ShCqN,GAAwBzK,sBAAwB,oCACjCxH,OAAO0H,aAAamM,oBAAoB5B,kKC3SvD,QAAS6B,GAAkBzS,GAgBvB,QAASqS,GAA+BK,EAAgB1M,GACpD,GAAI2M,GAAc,IAClB,IAAID,EAAgB,CAKhB,IAAK,GAFCE,GAAUxF,KAAKyF,MAAMxC,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWxK,KACpE8M,KACGxT,EAAI,EAAGA,EAAIsT,EAAQ5F,KAAKrN,OAAQL,IAAK,CAC1C,GAAMyT,GAAaH,EAAQ5F,KAAK1N,GAC1B0T,EAAWN,EAAgBzF,WAAayF,EAAezF,UAAU7M,eAAe2S,GAAeL,EAAezF,UAAU8F,GAAc,IAC5I,KAAKC,EACD,KAAM,IAAIzT,OAAM,wBAA0BwT,EAAa,kBAG3DD,GAASlH,KAAK,GAAAqH,GAAA,QAAYF,EAAYC,IAE1CL,EAAc,GAAAO,GAAA,QAAmBJ,GAErC,MAAOH,GAGX,QAASf,GAAY7Q,GACjB,MAAO6I,GAAA,QAAiBuJ,mCAAmCpS,EAAIkB,GAGnE,QAAS6N,KACL,MAAO,MAGX,QAASE,GAA6BhK,GAClC,MAAO,IAAIwK,YAAWxK,GAG1B,QAASqI,KACL,MAAO,MAGX,QAASwD,KACL,MAAO,MAGX,QAASC,KACL,MAAO,MAxDX9R,EAASA,KACT,IACMiC,GAASjC,EAAOiC,MAsEtB,QAZIF,KAAMA,EACN4P,YAAaA,EACbxH,aAAcA,EACdyH,YAAaA,EACb9B,6BAA8BA,EAC9BE,6BAA8BA,EAC9B3B,gCAAiCA,EACjCwD,WAAYA,EACZC,oBAAqBA,EACrBO,+BAAgCA,4DAhFpB,eACO,eACE,cACG,UAE1BtQ,EAAO,uCACPoI,EAAe8H,EAAA,QAAoBzR,wBACnCmR,EAAc,YAAc5P,CA+ElC0Q,GAAkBtM,sBAAwB,8BAC3BxH,OAAO0H,aAAamM,oBAAoBC,kICxEvD,QAASW,GAAmBpT,GAOxB,QAASqT,KACL,IAAKpR,IAAWA,EAAO7B,eAAe,iBAAmB6B,EAAO7B,eAAe,eAC3E,KAAM,IAAIb,OAAM,+BAIxB,QAASuQ,GAA6B9J,GAClC,GAAIsN,OAAG5Q,GACH6Q,MAAM7Q,GACJ+M,KACA+D,EAAS,GAAIC,WACbC,EAA8B,UAAnBC,EAA8B,GAAIC,aAAY5N,GAAW,GAAIwK,YAAWxK,EAEzFsN,GAAMjD,OAAOC,aAAaC,MAAM,KAAMmD,GACtCH,EAASC,EAAOK,gBAAgBP,EAAK,kBAIrC,KAAK,GAFCQ,GAAiBP,EAAOQ,qBAAqB,QAC7CC,EAAkBT,EAAOQ,qBAAqB,SAC3CzU,EAAI,EAAGA,EAAIwU,EAAenU,OAAQL,IACvCmQ,EAAQqE,EAAexU,GAAG2U,WAAW,GAAGC,WAAaF,EAAgB1U,GAAG2U,WAAW,GAAGC,SAS1F,OAJIzE,GAAQrP,eAAe,aACvBqP,EAAQ,gBAAkBA,EAAQ0E,cAC3B1E,GAAQ0E,SAEZ1E,EAGX,QAASO,GAA6BhK,GAClC,GAAIsN,OAAG5Q,GACH6Q,MAAM7Q,GACN0R,EAAiB,KACfZ,EAAS,GAAIC,WACbC,EAA8B,UAAnBC,EAA8B,GAAIC,aAAY5N,GAAW,GAAIwK,YAAWxK,EAMzF,IAJAqN,IACAC,EAAMjD,OAAOC,aAAaC,MAAM,KAAMmD,GACtCH,EAASC,EAAOK,gBAAgBP,EAAK,mBAEjCC,EAAOQ,qBAAqB,aAAa,GAAI,CAC7C,GAAMM,GAAYd,EAAOQ,qBAAqB,aAAa,GAAGE,WAAW,GAAGC,SACxEG,KACAD,EAAiBnS,EAAOqS,OAAOD,IAGvC,MAAOD,GAGX,QAAS/F,GAAgCzM,GACrC,GAAIA,EAMA,IAAK,GALCS,GAAO,GAAIf,UAASM,GACpB2S,EAAalS,EAAKmS,UAAU,GAAG,GACjCpT,EAAS,EACPoS,EAAS,GAAIC,WAEVnU,EAAI,EAAGA,EAAIiV,EAAYjV,IAAK,CAEjC,GAAMmV,GAAapS,EAAKmS,UAAUpT,GAAQ,EAC1CA,IAAU,CACV,IAAMsT,GAAerS,EAAKmS,UAAUpT,GAAQ,EAE5C,IADAA,GAAU,EACS,IAAfqT,EAAJ,CAKA,GAAME,GAAa/S,EAASF,MAAMN,EAAQA,EAASsT,GAC7CE,EAASvE,OAAOC,aAAaC,MAAM,KAAM,GAAIqD,aAAYe,IACzDpB,EAASC,EAAOK,gBAAgBe,EAAQ,kBAG9C,IAAIrB,EAAOQ,qBAAqB,UAAU,GAAI,CAC1C,GAAMc,GAAQtB,EAAOQ,qBAAqB,UAAU,GAAGE,WAAW,GAAGC,SACrE,IAAIW,EACA,MAAOA,GAKf,GAAItB,EAAOQ,qBAAqB,WAAW,GAAI,CAC3C,GAAMe,GAASvB,EAAOQ,qBAAqB,WAAW,GAAGE,WAAW,GAAGC,SACvE,IAAIY,EACA,MAAOA,QApBX1T,IAAUsT,EA0BtB,MAAO,MAGX,QAAS9C,GAAY5P,GASjB,GAAM+S,GAAc,GAAIvE,aAAY,IAAM,IAAM,IAAM,IAAM,EAAM,EAAM,EAAM,IACxEwE,EAAoB,GAAIxE,aAAY,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAEhIhO,EAAa,EACbyS,EAA6B,KAE7BC,MAAOxS,GACPyS,MAAQzS,GACR0S,MAAa1S,GACb2S,MAAO3S,GACP4S,MAAQ5S,EAIZ,IAFA2Q,IAEI,QAAUrR,GACV,MAAO4H,GAAA,QAAiBuJ,mCAAmCnR,EAAQC,EAGvE,IAAI,OAASD,GACTiT,EAA6BhT,EAAOC,YAAYF,EAAOuT,IAAIpT,YAE1D,CAAA,KAAI,YAAcH,IAInB,MAAO,KAHPiT,GAA6BhT,EAAOC,YAAYF,EAAOwT,SAASrT,QA6BpE,MAvBA+S,GAAUD,EAA2BtV,OACrCwV,EAAW,EAAMJ,EAAYpV,OAASqV,EAAkBrV,OAAS,EAAMuV,EAEvEE,EAAgB,GAAIjF,aAAYgF,GAEhCE,EAAU,GAAI7E,YAAW4E,GACzBE,EAAW,GAAIhU,UAAS8T,GAExBE,EAASG,UAAUjT,EAAY2S,GAC/B3S,GAAc,EAEd6S,EAAQK,IAAIX,EAAavS,GACzBA,GAAcuS,EAAYpV,OAE1B0V,EAAQK,IAAIV,EAAmBxS,GAC/BA,GAAcwS,EAAkBrV,OAEhC2V,EAASG,UAAUjT,EAAY0S,GAC/B1S,GAAc,EAEd6S,EAAQK,IAAIT,EAA4BzS,GACxCA,GAAc0S,EAEPG,EAAQjT,OAWnB,QAASuT,GAA0BC,GAC/B,GAAe,SAAXA,GAAgC,UAAXA,EACrB,KAAM,IAAIrW,OAAM,wCAA0CqW,EAE9DjC,GAAgBiC,EAOpB,QAASrV,GAAKmS,GACNA,IACA5I,EAAW4I,GAQnB,QAASb,KACL,GAAIgE,OAAUnT,GACVgH,MAAOhH,GACPoT,MAAYpT,GACZpD,MAACoD,EAGL,IADA2Q,IACIvJ,GAAYA,EAASJ,QAAS,CAG9B,IADAmM,KACKvW,EAAI,EAAGA,EAAIwK,EAASJ,QAAQ/J,SAAUL,EACvCuW,EAAWjK,KAAK9B,EAASJ,QAAQqM,WAAWzW,IAC5CuW,EAAWjK,KAAK,EAapB,KAXAiK,EAAaxF,OAAOC,aAAaC,MAAM,KAAMsF,GAG7CA,EAAa5T,EAAOkL,OAAO0I,GAI3BnM,EAAUsM,EAAUC,QAAQ,eAAgBJ,GAG5CC,KACKxW,EAAI,EAAGA,EAAIoK,EAAQ/J,SAAUL,EAC9BwW,EAAalK,KAAKlC,EAAQqM,WAAWzW,IACrCwW,EAAalK,KAAK,EAGtB,OAAO,IAAI4E,YAAWsF,GAAc1T,OAGxC,MAAO,MAGX,QAAS0P,KACL,MAAO,MApOX9R,EAASA,KACT,IACI2T,GAAgB,QACd1R,EAASjC,EAAOiC,MAkPtB,QAbIF,KAAMA,EACN4P,YAAaA,EACbxH,aAAcA,EACdyH,YAAaA,EACb9B,6BAA8BA,EAC9BE,6BAA8BA,EAC9B3B,gCAAiCA,EACjCwD,WAAYA,EACZC,oBAAqBA,EACrB6D,0BAA2BA,EAC3BpV,KAAMA,4DA7Pe,cACG,UAE1BwB,EAAO,uCACPoI,EAAe8H,EAAA,QAAoBvR,yBACnCiR,EAAc,YAAc5P,EAC5BiU,EAAY,yMACdlM,MAAQpH,EA4PZ0Q,GAAmBjN,sBAAwB,+BAC5BxH,OAAO0H,aAAamM,oBAAoBY,uHCjQvD,QAAS8C,GAAqBlW,GAc1B,QAASqS,GAA+BK,EAAgB1M,GACpD,GAAI2M,GAAc,IAClB,IAAID,EAAgB,CAKhB,IAAK,GAFCE,GAAUxF,KAAKyF,MAAMxC,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWxK,KACpE8M,KACGxT,EAAI,EAAGA,EAAIsT,EAAQ5F,KAAKrN,OAAQL,IAAK,CAC1C,GAAMyT,GAAaH,EAAQ5F,KAAK1N,GAC1B0T,EAAWN,EAAgBzF,WAAayF,EAAezF,UAAU7M,eAAe2S,GAAeL,EAAezF,UAAU8F,GAAc,IAC5I,KAAKC,EACD,KAAM,IAAIzT,OAAM,wBAA0BwT,EAAa,kBAG3DD,GAASlH,KAAK,GAAAqH,GAAA,QAAYF,EAAYC,IAE1CL,EAAc,GAAAO,GAAA,QAAmBJ,GAEjCtP,EAAI,sKAER,MAAOmP,GAGX,QAASf,GAAY7Q,GACjB,MAAO6I,GAAA,QAAiBuJ,mCAAmCpS,EAAIkB,GAGnE,QAAS6N,KACL,MAAO,MAGX,QAASE,GAA6BhK,GAClC,MAAO,IAAIwK,YAAWxK,GAG1B,QAASqI,KACL,MAAO,MAGX,QAASwD,KACL,MAAO,MAGX,QAASC,KACL,MAAO,MAzDX,GACM7P,GAASjC,EAAOiC,OAChBuB,EAAMxD,EAAOwD,GAuEnB,QAZIzB,KAAMA,EACN4P,YAAaA,EACbxH,aAAcA,EACdyH,YAAaA,EACb9B,6BAA8BA,EAC9BE,6BAA8BA,EAC9B3B,gCAAiCA,EACjCwD,WAAYA,EACZC,oBAAqBA,EACrBO,+BAAgCA,4DAhFpB,eACO,eACE,cACG,UAE1BtQ,EAAO,uCACPoI,EAAe8H,EAAA,QAAoBzR,wBACnCmR,EAAc,YAAc5P,CA+ElCmU,GAAqB/P,sBAAwB,iCAC9BxH,OAAO0H,aAAamM,oBAAoB0D,mICzEvD,QAASC,GAAkBnW,GAOvB,QAASO,GAAKmS,GACNA,IACA5I,EAAW4I,GAInB,QAAS0D,GAAWjV,EAAMkV,GACtB,GAAIC,OAAU5T,GACVuT,GAAU,EACVM,EAAS,GACTC,MAAG9T,GACHpD,MAACoD,GAAE+O,MAAC/O,EAIR,KAFA4T,EAAa,GAAI9F,YAAWrP,GAEvB7B,EAAI,EAAGA,GAAKgX,EAAW3W,QAAU4W,EAAS,GAAIjX,IAC/C,GAAsB,KAAlBgX,EAAWhX,IAAqC,KAAtBgX,EAAWhX,EAAI,GAAa,CAEtD,IADAkX,EAAMlX,EAAI,EACLmS,EAAI+E,EAAK/E,EAAK+E,EAAMD,EAAS9E,IAC9B,GAAsB,MAAlB6E,EAAW7E,GAAa,CACxBwE,GAAU,CACV,OAGR,MAQR,MAJIA,IACAK,EAAWZ,IAAIW,EAAKG,GAGjBF,EAAWlU,OAGtB,QAASwP,GAAY7Q,GACjB,GAAII,GAAO,IAaX,OAVIA,GADA2I,GAAYA,EAAS3I,KACdc,EAAOC,YAAY4H,EAAS3I,MAAMiB,OAElCwH,EAAA,QAAiBuJ,mCAAmCpS,EAAIkB,GAI/Dd,IACAA,EAAOiV,EAAWjV,EAAMJ,EAAG,sBAGxBI,EAGX,QAAS2O,KACL,MAAO,MAGX,QAASE,GAA6BhK,GAClC,MAAO,IAAIwK,YAAWxK,GAG1B,QAASqI,KACL,MAAO,MAGX,QAASwD,KACL,MAAO,MAGX,QAASC,GAAoB/Q,GAEzB,MAAI+I,IAAYA,EAAS6C,iBACd7C,EAAS6C,iBACT5L,EAAG4L,iBACH5L,EAAG4L,iBAEP,KAhFX3M,EAASA,KACT,IACI8J,GAAW,KACT7H,EAASjC,EAAOiC,MA6FtB,QAZIF,KAAMA,EACN4P,YAAaA,EACbxH,aAAcA,EACd5J,KAAMA,EACNqR,YAAaA,EACb9B,6BAA8BA,EAC9BE,6BAA8BA,EAC9B3B,gCAAiCA,EACjCwD,WAAYA,EACZC,oBAAqBA,4DAtGA,cACG,UAE1B/P,EAAO,uCACPoI,EAAe8H,EAAA,QAAoBxR,wBACnCkR,EAAc,YAAc5P,CAuGlCoU,GAAkBhQ,sBAAwB,8BAC3BxH,OAAO0H,aAAamM,oBAAoB2D,uHCrGvD,QAASM,GAAoBzW,GAsCzB,QAASkI,KACL9D,EAAe,KACfzC,EAAY,KACZ+U,KACAC,KACAxT,GAA0B,EAAAC,EAAA,SAAwBC,GAASC,cAC3DsT,EAAeC,IAGnB,QAASzL,KACDhH,GACA0S,GAEJ,KAAK,GAAIxX,GAAI,EAAGA,EAAIqX,EAAShX,OAAQL,IACjCkL,EAAgBmM,EAASrX,GAE7ByE,GAASmG,QAAQnK,EAAO+H,mBAG5B,QAASiF,KACL,MAAOpL,GAGX,QAASyK,KAEL,IAAK,GADCtL,MACGxB,EAAI,EAAGA,EAAIoX,EAAgB/W,OAAQL,IACxCwB,EAAO8K,KAAK8K,EAAgBpX,GAAGsC,SAEnC,KAAK,GAAItC,GAAI,EAAGA,EAAIqX,EAAShX,OAAQL,IACjCwB,EAAO8K,KAAK+K,EAASrX,GAAGsC,SAE5B,OAAOd,GAGX,QAAS8L,GAAuBmK,GAC5B,GAAIC,GAAK5S,CACJ4S,KACDA,EAAKC,SAASC,cAAc,SAMhC,KAAK,GADDC,IAAQ,EACHlL,EAAQ,EAAGA,EAAQ8K,EAAiBpX,OAAQsM,IAQjD,IAAK,GAPC9B,GAAe4M,EAAiB9K,GAAOM,GAAGpC,aAC1CqC,EAAUuK,EAAiB9K,GAAOO,QACpC4K,EAAiB,KACjBC,EAAiB,KAIZC,EAAY,EAAGA,EAAY9K,EAAQ7M,OAAQ2X,IAAa,CAE7D,GAAMC,GAAS/K,EAAQ8K,GAAW9L,iBAElC,IAAI+L,GAA4B,IAAlBA,EAAO5X,OAAc,CAC/B0X,IACA,KAAK,GAAIG,GAAW,EAAGA,EAAWD,EAAO5X,OAAQ6X,IACsB,KAA/DR,EAAGS,YAAYF,EAAOC,GAAUE,YAAavN,IAC7CkN,EAAezL,KAAK2L,EAAOC,IAOvC,MAAMJ,IAAmBC,GACpBD,GAA4C,IAA1BA,EAAezX,QACjC0X,GAA4C,IAA1BA,EAAe1X,QAFtC,CAOAwX,GAAQ,CACR,IAAMQ,GAAW,GAAA5L,GAAA,QAA2BqL,EAAgBC,GACtD9K,EAAKpJ,EAAwBiO,2BAA2BjH,EAC9DpG,GAASmG,QAAQnK,EAAOwH,4BAA8BlF,KAAM,GAAAuV,GAAA,QAAoBrL,EAAIoL,IACpF,QAGHR,GACDpT,EAASmG,QAAQnK,EAAOwH,4BAA6BxB,MAAO,uFAIpE,QAASwD,GAAgBuD,GACrBnL,EAAYmL,EAAgBnL,UAC5BoC,EAASmG,QAAQnK,EAAOgH,8BAG5B,QAAS4D,GAAgBkN,GACjBzT,IAAiByT,IAKjBzT,GACA0S,KAGJ1S,EAAeyT,KAIXzT,EAAa0T,iBAAiB/S,EAAIW,SAAUkR,GAC5CxS,EAAa0T,iBAAiB/S,EAAIU,QAASmR,GAC3CxS,EAAa0T,iBAAiB/S,EAAIa,WAAYgR,GAC9CxS,EAAa0T,iBAAiB/S,EAAIY,SAAUiR,GAC5C7S,EAASmG,QAAQnK,EAAOgI,0BAIhC,QAAS0B,GAAiB7H,GACtB,IAAKD,EACD,KAAM,IAAIpC,OAAM,+DAIpB,IAAIwY,GAA2C,IAApBpB,EAAShX,OAAc,CAC9C,GAAMqY,IACF3N,UAAW,KACXzI,SAAUA,EACVgM,aAAc,WACV,MAAOlP,MAAK2L,WAGhB4N,kBAAmB,WACf,MAAOC,MAGXjO,eAAgB,WACZ,MAAO,aAQf,OALAyM,GAAgB9K,KAAKoM,GAGrB5T,EAAaW,EAAIO,oBAAoB3D,EAAUwI,aAAc,GAAIqG,YAAW5O,IAErEoW,EAGP,KAAM,IAAIzY,OAAM,kCAKxB,QAASwO,GAAiBxD,EAAcvE,GACpC,GAAMqE,GAAYE,EAAaF,SAC/B,IAAKlH,EAAwB0K,WAAWlM,GAMpC,IAAK,GAAIrC,GAAI,EAAGA,EAAI0G,EAAQ8M,SAASnT,OAAQL,IACzC8E,EAAaW,EAAIQ,QAAQ5D,EAAUwI,aAC/BnE,EAAQ8M,SAASxT,GAAGoQ,IAAK1J,EAAQ8M,SAASxT,GAAG6Y,MAAO9N,OAN5DjG,GAAaW,EAAIQ,QAAQ5D,EAAUwI,aAC/B,GAAIqG,YAAWxK,GAAU,GAAIwK,YAAWjG,EAAa3I,UAAWyI,GAU5E,QAASG,GAAgBD,GAErBnG,EAAaW,EAAIS,kBAAkB7D,EAAUwI,aAAcI,EAAaF,WAG5E,QAASI,MACT,QAASL,MACT,QAASE,MAET,QAASuM,KACL,OACIuB,YAAa,SAAU1L,GACnB,GAAInC,GAAe,IACnB,QAAQmC,EAAM2L,MACV,IAAKtT,GAAIU,QACL,GAAI7D,GAAWuO,YAAYC,OAAO1D,EAAM9K,UAAY8K,EAAM9K,SAASQ,OAASsK,EAAM9K,QAClFmC,GAASmG,QAAQnK,EAAO2H,UAAWgI,IAAK,GAAA4I,GAAA,QAAY1W,EAAU,SAC9D,MAAM,KAELmD,GAAIW,SAML,GALA6E,EAAegO,EAAgB5B,EAAUjK,EAAM8L,WAC1CjO,IACDA,EAAegO,EAAgB7B,EAAiBhK,EAAM8L,YAGtDjO,EAAc,CACd,GAAI+I,GAAM,EACV,QAAQ5G,EAAM+L,UAAUjZ,MACpB,IAAK,GACD8T,GAAO,8HACP,MAAM,KACL,GACDA,GAAO,yEACP,MAAM,KACL,GACDA,GAAO,oGACP,MAAM,KACL,GACDA,GAAO,gIACP,MAAM,KACL,GACDA,GAAO,kGACP,MAAM,KACL,GACDA,GAAO,mJAGfA,GAAO,mBAAqB5G,EAAMgM,WAElC3U,EAASmG,QAAQnK,EAAOkH,WAAY5E,KAAM,GAAAsW,GAAA,QAAapO,EAAc+I,SAErE9P,GAAI,uCAER,MAAM,KAELuB,GAAIY,SACL4E,EAAegO,EAAgB5B,EAAUjK,EAAM8L,WAC1CjO,IACDA,EAAegO,EAAgB7B,EAAiBhK,EAAM8L,YAGtDjO,GACA/G,EAAI,mBACJO,EAASmG,QAAQnK,EAAOiH,WAAY3E,KAAMkI,KAE1C/G,EAAI,uCAER,MAAM,KAELuB,GAAIa,WA0BL,GAvBAmS,EAA2C,OAArBrL,EAAO8L,eAA4C9V,KAApBgK,EAAM8L,UAGvDT,IAEAxN,EAAegO,EAAgB5B,EAAUjK,EAAM8L,aAC1B9B,EAAgB/W,OAAS,IAI1C4K,EAAemM,EAAgBkC,QAC/BjC,EAAS/K,KAAKrB,GACdA,EAAaF,UAAYqC,EAAM8L,WAE5B9B,EAAgB/W,OAAS,IAChC4K,EAAemM,EAAgBkC,QAC/BjC,EAAS/K,KAAKrB,GAEiB,IAA3BmM,EAAgB/W,QAChBwE,EAAW0U,qBAAqB,0HAIpCtO,EAAc,CACd,GAAIvE,GAAUmK,YAAYC,OAAO1D,EAAM1G,SAAW0G,EAAM1G,QAAQ5D,OAASsK,EAAM1G,OAK/EuE,GAAagD,WAAavH,EAC1BjC,EAASmG,QAAQnK,EAAO+G,sBAAuBzE,KAAM,GAAAyW,GAAA,QAAevO,EAAcvE,EAAS0G,EAAMqM,kBAGjGvV,GAAI,6CAiB5B,QAAS+U,GAAgBS,EAAc3O,GACnC,GAAKA,GAAc2O,EAEZ,CAEH,IAAK,GADCC,GAAMD,EAAarZ,OAChBL,EAAI,EAAGA,EAAI2Z,EAAK3Z,IACrB,GAAI0Z,EAAa1Z,GAAG+K,WAAaA,EAC7B,MAAO2O,GAAa1Z,EAG5B,OAAO,MARP,MAAO,MAYf,QAASwX,KACL1S,EAAa8U,oBAAoBnU,EAAIW,SAAUkR,GAC/CxS,EAAa8U,oBAAoBnU,EAAIU,QAASmR,GAC9CxS,EAAa8U,oBAAoBnU,EAAIa,WAAYgR,GACjDxS,EAAa8U,oBAAoBnU,EAAIY,SAAUiR,GAlVnD5W,EAASA,KACT,IAAMqD,GAAU3E,KAAK2E,QACfU,EAAW/D,EAAO+D,SAClBhE,EAASC,EAAOD,OAChByD,EAAMxD,EAAOwD,IACbuB,EAAM/E,EAAO+E,IACbZ,EAAanE,EAAOmE,WAEtBwM,MAAQjO,GACR0B,MAAY1B,GACZf,MAASe,GACTS,MAAuBT,GAQvBgU,MAAehU,GAIfiU,MAAQjU,GAMRqV,MAAmBrV,GAKnBkU,MAAYlU,EAoUhB,OAjBAiO,IACIvE,eAAgBA,EAChBQ,uBAAwBA,EACxBG,aAAcA,EACdxD,gBAAiBA,EACjBoB,gBAAiBA,EACjBlB,iBAAkBA,EAClBsE,iBAAkBA,EAClBvD,gBAAiBA,EACjBC,qBAAsBA,EACtBL,eAAgBA,EAChBE,iBAAkBA,EAClBc,MAAOA,GAGXlD,IAEOyI,2DA/WyB,cAChB,eACC,eACE,eACY,eACP,UA6W5B8F,GAAoBtQ,sBAAwB,gCAC7BxH,OAAO0H,aAAaC,gBAAgBmQ,iJC5WnD,QAAS0C,GAA0BnZ,GAgB/B,QAASkI,KACLvG,EAAY,KACZyC,EAAe,KACfI,EAAY,KACZmS,KACAxT,GAA0B,EAAAC,EAAA,SAAwBC,GAASC,cAC3DsT,EAAeC,IAGnB,QAASzL,KACL,GAAMgO,GAAczC,EAAShX,OACzB0Z,MAAO3W,EAES,KAAhB0W,aAeA,IAAK,GAbC7W,GAAO,SAAU8W,GACnBC,EAAcD,GACU,IAApB1C,EAAShX,SACLyE,GACAA,EAAa8U,oBAAoB,YAAatC,GAC9CxS,EAAayB,aAAa,MAAM0T,KAAK,WACjCxV,EAASmG,QAAQnK,EAAO+H,sBAG5B/D,EAASmG,QAAQnK,EAAO+H,qBAI3BxI,EAAI,EAAGA,EAAI8Z,EAAa9Z,IAC7B+Z,EAAU1C,EAASrX,GACnB,SAAWL,GAEPoa,EAAQA,QAAQG,OAAOD,KAAK,WACxBhX,EAAKtD,KAITwa,EAAwBJ,GAAQ,MAAO,WACnC9W,EAAKtD,MAGVoa,MAGPtV,EAASmG,QAAQnK,EAAO+H,mBAIhC,QAASiF,KACL,MAAOpL,GAGX,QAASyK,KAEL,IAAK,GADCtL,MACGxB,EAAI,EAAGA,EAAIqX,EAAShX,OAAQL,IACjCwB,EAAO8K,KAAK+K,EAASrX,GAAGsC,SAE5B,OAAOd,GAGX,QAAS8L,GAAuBmK,GAC5B2C,EAA+B3C,EAAkB,GAGrD,QAASxN,GAAgBuD,GACrBA,EAAgB6M,KAAKC,kBAAkBL,KAAK,SAAUM,GAClDlY,EAAYmL,EAAgBnL,UAC5B6C,EAAYqV,EACRzV,EACAA,EAAayB,aAAarB,GAAW+U,KAAK,WACtCxV,EAASmG,QAAQnK,EAAOgH;4CAG5BhD,EAASmG,QAAQnK,EAAOgH,gCAG9B,MAAO,WACLhD,EAASmG,QAAQnK,EAAOgH,8BAA+BhB,MAAO,gCAAkC+G,EAAgBnL,UAAUwI,aAAe,4CAIjJ,QAASQ,GAAgBkN,GACjBzT,IAAiByT,IAIjBzT,IACAA,EAAa8U,oBAAoB,YAAatC,GAC9CxS,EAAayB,aAAa,QAG9BzB,EAAeyT,KAIXzT,EAAa0T,iBAAiB,YAAalB,GACvCpS,GACAJ,EAAayB,aAAarB,KAKtC,QAASiG,GAAqBC,GAC1B,IAAK/I,IAAc6C,EACf,KAAM,IAAIjF,OAAM,sEAEpBiF,GAAUiG,qBAAqBC,GAAmB6O,KAAK,WACnD/V,EAAI,yDACJO,EAASmG,QAAQnK,EAAO8H,8BAC1B,MAAO,SAAU9B,GACfhC,EAASmG,QAAQnK,EAAO8H,4BAA6B9B,MAAO,wCAA0CA,EAAM+T,SAIpH,QAASrQ,GAAiB7H,EAAUkI,EAAUzB,GAC1C,IAAK1G,IAAc6C,EACf,KAAM,IAAIjF,OAAM,+DAGpB,IAAM8Z,GAAU7U,EAAUuV,cAAc1R,GAClCkC,EAAeyP,EAAmBX,EAASzX,EAAUyG,GACrDkE,EAAK7N,KAAKqO,eAIVkN,EAAW1N,EAAGpC,eAAiB8H,EAAA,QAAoBzR,yBAA2BsJ,GAAYA,EAASmD,UAAY,SAAW,MAChIoM,GAAQa,gBAAgBD,EAAUrY,GAAU2X,KAAK,WAC7C/V,EAAI,sCAAwC+G,EAAaqD,gBACzD7J,EAASmG,QAAQnK,EAAOqH,qBAAsB/E,KAAMkI,MACtD,MAAO,SAAUxE,GAEfuT,EAAc/O,GACdxG,EAASmG,QAAQnK,EAAOqH,qBAAsB/E,KAAM,KAAM0D,MAAO,mCAAqCA,EAAM+T,SAIpH,QAAS/L,GAAiBxD,EAAcvE,GACpC,GAAMqT,GAAU9O,EAAa8O,OAGzBlW,GAAwB0K,WAAWlM,KACnCqE,EAAUA,EAAQmU,SAEtBd,EAAQe,OAAOpU,GAAQ,MAAO,SAAUD,GACpChC,EAASmG,QAAQnK,EAAOkH,WAAY5E,KAAM,GAAAsW,GAAA,QAAapO,EAAc,mCAAqCxE,EAAM+T,UAIxH,QAAS1P,GAAeC,EAAWhC,GAC/B,IAAK1G,IAAc6C,EACf,KAAM,IAAIjF,OAAM,6DAGpBiE,GAAI,mCAAqC6G,EACzC,IAAMgP,GAAU7U,EAAUuV,cAAc1R,EAGxCgR,GAAQgB,KAAKhQ,GAAWkP,KAAK,SAAUe,GACnC,GAAIA,EAAS,CACT,GAAM/P,GAAeyP,EAAmBX,EACxC7V,GAAI,qCAAuC+G,EAAaqD,gBACxD7J,EAASmG,QAAQnK,EAAOqH,qBAAsB/E,KAAMkI,QAEpDxG,GAASmG,QAAQnK,EAAOqH,qBAAsB/E,KAAM,KAAM0D,MAAO,+CAAiDsE,EAAY,QAEpI,MAAO,SAAUtE,GACfhC,EAASmG,QAAQnK,EAAOqH,qBAAsB/E,KAAM,KAAM0D,MAAO,2BAA6BsE,EAAY,MAAQtE,EAAM+T,SAIhI,QAASxP,GAAiBC,GACNA,EAAa8O,QAErBkB,SAAShB,KAAK,WAClB/V,EAAI,sCAAwC+G,EAAaqD,gBACzD7J,EAASmG,QAAQnK,EAAOsH,qBAAsBhF,KAAMkI,EAAaqD,kBAClE,SAAU7H,GACThC,EAASmG,QAAQnK,EAAOsH,qBAAsBhF,KAAM,KAAM0D,MAAO,2BAA6BwE,EAAaqD,eAAiB,MAAQ7H,EAAM+T,SAKlJ,QAAStP,GAAgBD,GAErBkP,EAAwBlP,GAAa,MAAO,SAAUxE,GAClDuT,EAAc/O,GACdxG,EAASmG,QAAQnK,EAAOoH,oBAAqB9E,KAAM,KAAM0D,MAAO,0BAA4BwE,EAAaqD,eAAiB,KAAO7H,EAAM+T,SAI/I,QAASJ,GAA+B3C,EAAkByD,IACtD,SAAWlb,GACP,GAAMqC,GAAYoV,EAAiBzX,GAAGiN,GAChCC,EAAUuK,EAAiBzX,GAAGkN,OACpC9H,WAAUC,4BAA4BhD,EAAUwI,aAAcqC,GAAS+M,KAAK,SAAUkB,GAElF,GAAMC,GAAkE,kBAA1CD,GAAqBE,iBAC3CF,EAAqBE,mBAAqB,KAC5C7N,EAAkB,GAAA8K,GAAA,QAAoBjW,EAAW+Y,EACvD5N,GAAgB6M,KAAOc,EACvB1W,EAASmG,QAAQnK,EAAOwH,4BAA6BlF,KAAMyK,MAE7D,MAAO,aACCxN,EAAIyX,EAAiBpX,OACvB+Z,EAA+B3C,EAAkBzX,GAEjDyE,EAASmG,QAAQnK,EAAOwH,4BAA6BxB,MAAO,iCAGrEyU,GAGP,QAASf,GAAwBlP,GAC7B,GAAM8O,GAAU9O,EAAa8O,OAO7B,OAJAA,GAAQH,oBAAoB,oBAAqB3O,GACjD8O,EAAQH,oBAAoB,UAAW3O,GAGhC8O,EAAQnT,QAMnB,QAAS2Q,KACL,OACIuB,YAAa,SAAU1L,GACnB,OAAQA,EAAM2L,MACV,IAAK,YACD,GAAI3L,EAAM9K,SAAU,CAChB,GAAIA,GAAWuO,YAAYC,OAAO1D,EAAM9K,UAAY8K,EAAM9K,SAASQ,OAASsK,EAAM9K,QAClFmC,GAASmG,QAAQnK,EAAO2H,UAAWgI,IAAK,GAAA4I,GAAA,QAAY1W,EAAU8K,EAAMuD,oBAQ5F,QAASqJ,GAAcsB,GAEnB,IAAK,GAAItb,GAAI,EAAGA,EAAIqX,EAAShX,OAAQL,IACjC,GAAIqX,EAASrX,KAAOsb,EAAO,CACvBjE,EAASkE,OAAOvb,EAAE,EAClB,QAOZ,QAAS0a,GAAmBX,EAASzX,EAAUyG,GAC3C,GAAMuS,IACFvB,QAASA,EACTzX,SAAUA,EAKVwW,YAAa,SAAU1L,GACnB,OAAQA,EAAM2L,MACV,IAAK,oBACDtU,EAASmG,QAAQnK,EAAOuH,sBAAuBjF,KAAM3D,MACrD,MAAM,KAEL,UACD,GAAIsH,GAAUmK,YAAYC,OAAO1D,EAAM1G,SAAW0G,EAAM1G,QAAQ5D,OAASsK,EAAM1G,OAC/EjC,GAASmG,QAAQnK,EAAO+G,sBAAuBzE,KAAM,GAAAyW,GAAA,QAAepa,KAAMsH,MAAStD,GAAWgK,EAAMc,iBAKhHI,aAAc,WACV,MAAOyL,GAAQb,WAGnBP,kBAAmB,WACf,MAAOoB,GAAQyB,YAGnBC,eAAgB,WACZ,MAAO1B,GAAQ2B,aAGnB/Q,eAAgB,WACZ,MAAO5B,IAkBf,OAbAgR,GAAQvB,iBAAiB,oBAAqB8C,GAC9CvB,EAAQvB,iBAAiB,UAAW8C,GAGpCvB,EAAQG,OAAOD,KAAK,WAChBD,EAAcsB,GACdpX,EAAI,qCAAuCoX,EAAMhN,gBACjD7J,EAASmG,QAAQnK,EAAOoH,oBAAqB9E,KAAMuY,EAAMhN,mBAI7D+I,EAAS/K,KAAKgP,GAEPA,EA/TX5a,EAASA,KACT,IAAMqD,GAAU3E,KAAK2E,QACfU,EAAW/D,EAAO+D,SAClBhE,EAASC,EAAOD,OAChByD,EAAMxD,EAAOwD,IAEfmN,MAAQjO,GACRf,MAASe,GACT0B,MAAY1B,GACZ8B,MAAS9B,GACTiU,MAAQjU,GACRkU,MAAYlU,GACZS,MAAuBT,EAuU3B,OAjBAiO,IACIvE,eAAgBA,EAChBQ,uBAAwBA,EACxBG,aAAcA,EACdxD,gBAAiBA,EACjBoB,gBAAiBA,EACjBF,qBAAsBA,EACtBhB,iBAAkBA,EAClBsE,iBAAkBA,EAClB3D,eAAgBA,EAChBE,iBAAkBA,EAClBE,gBAAiBA,EACjBY,MAAOA,GAGXlD,IAEOyI,2DA5VyB,cAChB,eACC,eACE,eACK,eACI,SA0VhCwI,GAA0BhT,sBAAwB,sCACnCxH,OAAO0H,aAAaC,gBAAgB6S,+ICxVnD,QAAS8B,GAAyBjb,GAmB9B,QAASkI,KACL9D,EAAe,KACfzC,EAAY,KACZ6C,EAAY,KACZsI,EAAkB,KAClB6J,KACAxT,GAA0B,EAAAC,EAAA,SAAwBC,GAASC,cAC3DsT,EAAeC,IAGnB,QAASzL,KACL,IACI,IAAK,GAAI9L,GAAI,EAAGA,EAAIqX,EAAShX,OAAQL,IACjCkL,EAAgBmM,EAASrX,GAEzB8E,IACAA,EAAa8U,oBAAoBnU,EAAIU,QAASmR,GAElD7S,EAASmG,QAAQnK,EAAO+H,mBAC1B,MAAO/B,GACLhC,EAASmG,QAAQnK,EAAO+H,mBAAoB/B,MAAO,qDAAuDA,EAAMC,WAIxH,QAAS+G,KACL,MAAOpL,GAGX,QAASyK,KAEL,IAAK,GADDtL,MACKxB,EAAI,EAAGA,EAAIqX,EAAShX,OAAQL,IACjCwB,EAAO8K,KAAK+K,EAASrX,GAAGsC,SAE5B,OAAOd,GAGX,QAAS8L,GAAuBmK,GAK5B,IAAK,GADDI,IAAQ,EACHlL,EAAQ,EAAGA,EAAQ8K,EAAiBpX,OAAQsM,IAQjD,IAAK,GAPD9B,GAAe4M,EAAiB9K,GAAOM,GAAGpC,aAC1CqC,EAAUuK,EAAiB9K,GAAOO,QAClC4K,EAAiB,KACjBC,EAAiB,KAIZC,EAAY,EAAGA,EAAY9K,EAAQ7M,OAAQ2X,IAAa,CAC7D,GAAI4D,GAAS1O,EAAQ8K,GAAW/L,kBAC5BgM,EAAS/K,EAAQ8K,GAAW9L,iBAGhC,IAAI0P,GAA4B,IAAlBA,EAAOvb,OAAc,CAC/ByX,IACA,KAAK,GAAI+D,GAAW,EAAGA,EAAWD,EAAOvb,OAAQwb,IACzC5c,OAAOwG,EAAIN,WAAW2W,gBAAgBjR,EAAc+Q,EAAOC,GAAUzD,cACrEN,EAAexL,KAAKsP,EAAOC,IAMvC,GAAI5D,GAA4B,IAAlBA,EAAO5X,OAAc,CAC/B0X,IACA,KAAK,GAAIG,GAAW,EAAGA,EAAWD,EAAO5X,OAAQ6X,IACzCjZ,OAAOwG,EAAIN,WAAW2W,gBAAgBjR,EAAcoN,EAAOC,GAAUE,cACrEL,EAAezL,KAAK2L,EAAOC,IAOvC,MAAMJ,IAAmBC,GACpBD,GAA4C,IAA1BA,EAAezX,QACjC0X,GAA4C,IAA1BA,EAAe1X,QAFtC,CAOAwX,GAAQ,CACR,IAAIQ,GAAW,GAAA5L,GAAA,QAA2BqL,EAAgBC,GACtD9K,EAAKpJ,EAAwBiO,2BAA2BjH,EAC5DpG,GAASmG,QAAQnK,EAAOwH,4BAA6BlF,KAAM,GAAAuV,GAAA,QAAoBrL,EAAIoL,IACnF,QAGHR,GACDpT,EAASmG,QAAQnK,EAAOwH,4BAA6BxB,MAAO,uFAIpE,QAASwD,GAAgB8R,GACrB,IACI7W,EAAY6W,EAAS7W,UAAY,GAAIjG,QAAOwG,EAAIN,WAAW4W,EAAS1Z,UAAUwI,cAC9ExI,EAAY0Z,EAAS1Z,UACrBmL,EAAkBuO,EACdjX,GACAyB,IAEJ9B,EAASmG,QAAQnK,EAAOgH,8BAC1B,MAAOhB,GACLhC,EAASmG,QAAQnK,EAAOgH,8BAA+BhB,MAAO,gCAAkCpE,EAAUwI,aAAe,2CAIjI,QAASQ,GAAgBkN,GACjBzT,IAAiByT,IAIjBzT,GACAA,EAAa8U,oBAAoBnU,EAAIU,QAASmR,IAGlDxS,EAAeyT,KAIXzT,EAAa0T,iBAAiB/S,EAAIU,QAASmR,GACvCpS,GACAqB,MAKZ,QAAS4D,GAAiB7H,EAAUkI,EAAUzB,EAAaqB,GAEvD,IAAK/H,IAAc6C,IAAcsI,EAC7B,KAAM,IAAIvN,OAAM,+DAOpB,IAAI0E,GAAe,IAQnB,IAN0D,OAAtD6I,EAAgBwO,gBAAgB9P,mBAA8BsB,EAAgBwO,gBAAgB9P,kBAAkB7L,OAAS,IAC3HsE,EAAe6I,EAAgBwO,gBAAgB9P,kBAAkB,IAE9C,OAAjBvH,GAA+E,OAAtD6I,EAAgBwO,gBAAgB/P,mBAA8BuB,EAAgBwO,gBAAgB/P,kBAAkB5L,OAAS,IACpJsE,EAAe6I,EAAgBwO,gBAAgB/P,kBAAkB,IAE9C,OAAjBtH,EACF,KAAM,IAAI1E,OAAM,qDAElB,IAAImY,GAAczT,EAAayT,YAC3B2B,EAAU7U,EAAUuV,cAAcrC,EAAa,GAAIlH,YAAW5O,GAAW8H,EAAU,GAAI8G,YAAW9G,GAAW,MAC7Ga,EAAeyP,EAAmBX,EAASzX,EAG/CyX,GAAQvB,iBAAiB/S,EAAIgB,MAAOwE,GACpC8O,EAAQvB,iBAAiB/S,EAAIiB,QAASuE,GACtC8O,EAAQvB,iBAAiB/S,EAAIkB,MAAOsE,GACpC8O,EAAQvB,iBAAiB/S,EAAImB,MAAOqE,GAGpCoM,EAAS/K,KAAKrB,GACd/G,EAAI,sCAAwC+G,EAAaqD,gBACzD7J,EAASmG,QAAQnK,EAAOqH,qBAAsB/E,KAAMkI,IAGxD,QAASwD,GAAiBxD,EAAcvE,GAEpC,GAAIqT,GAAU9O,EAAa8O,OAEtBlW,GAAwB0K,WAAWlM,GAKpC0X,EAAQe,OAAO,GAAI5J,YAAWxK,EAAQmU,UAHtCd,EAAQe,OAAO,GAAI5J,YAAWxK,IAatC,QAASwE,GAAgBD,GAErB,GAAI8O,GAAU9O,EAAa8O,OAG3BA,GAAQH,oBAAoBnU,EAAIgB,MAAOwE,GACvC8O,EAAQH,oBAAoBnU,EAAIiB,QAASuE,GACzC8O,EAAQH,oBAAoBnU,EAAIkB,MAAOsE,GACvC8O,EAAQH,oBAAoBnU,EAAImB,MAAOqE,EAGvC,KAAK,GAAIjL,GAAI,EAAGA,EAAIqX,EAAShX,OAAQL,IACjC,GAAIqX,EAASrX,KAAOiL,EAAc,CAC9BoM,EAASkE,OAAOvb,EAAE,EAClB,OAKR+Z,EAAQtU,EAAIe,WAGhB,QAAS2E,MACT,QAASL,MACT,QAASE,MAGT,QAASuM,KACL,OACIuB,YAAa,SAAU1L,GACnB,OAAQA,EAAM2L,MAEV,IAAKtT,GAAIU,QACL,GAAIiH,EAAM9K,SAAU,CAChB,GAAIA,GAAWuO,YAAYC,OAAO1D,EAAM9K,UAAY8K,EAAM9K,SAASQ,OAASsK,EAAM9K,QAClFmC,GAASmG,QAAQnK,EAAO2H,UAAWgI,IAAK,GAAA4I,GAAA,QAAY1W,EAAU,cAYtF,QAASiE,KACL,GAAI0V,GAAiB,KACfC,EAAY,WACdpX,EAAa8U,oBAAoB,iBAAkBqC,GACnDnX,EAAaW,EAAIc,cAAcrB,GAC/BT,EAASmG,QAAQnK,EAAOgI,wBAExB3D,GAAa0K,YAAc,EAC3B0M,KAEAD,EAAiBC,EAAUC,KAAK/c,MAChC0F,EAAa0T,iBAAiB,iBAAkByD,IAOxD,QAASvB,GAAmB0B,EAAY9Z,GACpC,OAEIyX,QAASqC,EACT9Z,SAAUA,EAEVgM,aAAc,WACV,MAAOlP,MAAK2a,QAAQb,WAGxBP,kBAAmB,WACf,MAAOC,MAGXjO,eAAgB,WACZ,MAAO,aAKXmO,YAAa,SAAU1L,GACnB,OAAQA,EAAM2L,MAEV,IAAKtT,GAAIgB,MAELhC,EAASmG,QAAQnK,EAAOkH,WAAa5E,KAAM,GAAAsW,GAAA,QAAaja,KADzC,aAEf,MAAM,KACLqG,GAAIiB,QACL,GAAIA,GAAUmK,YAAYC,OAAO1D,EAAM1G,SAAW0G,EAAM1G,QAAQ5D,OAASsK,EAAM1G,OAC/EjC,GAASmG,QAAQnK,EAAO+G,sBAAwBzE,KAAM,GAAAyW,GAAA,QAAepa,KAAMsH,EAAS0G,EAAMiP,iBAC1F,MAAM,KACL5W,GAAIkB,MACLzC,EAAI,mBACJO,EAASmG,QAAQnK,EAAOiH,UACxB,MAAM,KAELjC,GAAImB,MACL1C,EAAI,qCAAuC9E,KAAKkP,gBAChD7J,EAASmG,QAAQnK,EAAOoH,oBAAsB9E,KAAM3D,KAAKkP,oBAhT7E5N,EAASA,KACT,IAAIqD,GAAU3E,KAAK2E,QACfU,EAAW/D,EAAO+D,SAChBhE,EAASC,EAAOD,OAClByD,EAAMxD,EAAOwD,IACbuB,EAAM/E,EAAO+E,IAGb4L,MAAQjO,GACR0B,MAAY1B,GACZf,MAASe,GACT8B,MAAS9B,GACToK,MAAepK,GACfiU,MAAQjU,GACRkU,MAAYlU,GACZS,MAAuBT,EAyT3B,OAjBAiO,IACIvE,eAAgBA,EAChBQ,uBAAwBA,EACxBG,aAAcA,EACdxD,gBAAiBA,EACjBoB,gBAAiBA,EACjBlB,iBAAkBA,EAClBsE,iBAAkBA,EAClBvD,gBAAiBA,EACjBC,qBAAsBA,EACtBL,eAAgBA,EAChBE,iBAAkBA,EAClBc,MAAOA,GAGXlD,IAEOyI,2DAjVyB,cAChB,eACC,eACE,eACY,eACP,UA+U5BsK,GAAyB9U,sBAAwB,qCAClCxH,OAAO0H,aAAaC,gBAAgB2U,iJClVnD,QAASW,KAIL,QAASrN,GAAwBL,EAAKlI,GAElC,GAAM4M,GAAUxF,KAAKyF,MAAMxC,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWxK,IAC1EkI,IAAO,IACP,KAAK,GAAI5O,GAAI,EAAGA,EAAIsT,EAAQ5F,KAAKrN,OAAQL,IACrC4O,GAAO0E,EAAQ5F,KAAK1N,GAAK,GAG7B,OADA4O,GAAMA,EAAI2N,UAAU,EAAG3N,EAAIvO,OAAS,GAIxC,QAASqP,KACL,MAAO,MAGX,QAASE,KACL,MAAO,OAGX,QAASG,GAAkByM,GACvB,IAAKA,EAAe1b,eAAe,QAC/B,MAAO,KAGX,KAAK,GADD0S,MACKxT,EAAI,EAAGA,EAAIwc,EAAezW,KAAK1F,OAAQL,IAAK,CACjD,GAAIyc,GAAUD,EAAezW,KAAK/F,GAC9B0c,EAAQD,EAAQE,IAAIhG,QAAQ,KAAM,IAClCvG,EAAMqM,EAAQG,EAAEjG,QAAQ,KAAM,GAElCnD,GAASlH,KAAK,GAAAqH,GAAA,QAAY+I,EAAOtM,IAErC,MAAO,IAAAwD,GAAA,QAAmBJ,GAG9B,QAASnE,GAAiBmN,GACtB,MAAOzL,QAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWsL,IAW1D,OAPIvN,wBAAyBA,EACzBS,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBV,iBAAkBA,4DAlDN,eACO,UAuD3BiN,GAASzV,sBAAwB,qBAClBxH,OAAO0H,aAAamM,oBAAoBoJ,2HCzDvD,QAASO,GAASnc,GA2Bd,QAASqT,KACL,IAAKpR,IAAWA,EAAO7B,eAAe,eAClC,KAAM,IAAIb,OAAM,+BAIxB,QAASgP,GAAwBL,GAC7B,MAAOA,GAGX,QAASc,KACL,MAAO,OAGX,QAASE,GAAgBkN,GACrB,MAAOvL,GAAWuL,GAAcnN,aAGpC,QAASI,GAAkByM,EAAgBM,GAEvC,MADA/I,KACOxC,EAAWuL,GAAc/M,kBAAkByM,GAGtD,QAASnN,GAAiBmN,EAAgBM,GACtC,MAAOvL,GAAWuL,GAAczN,iBAAiBmN,GAjDrD9b,EAASA,KACT,IAAMiC,GAASjC,EAAOiC,OAEhB4O,IACNA,GAAWoB,EAAA,QAAoBxR,0BAC3BwO,aAAc,OACdI,kBAAmB,SAAUX,GACzB,MAAOzM,GAAOC,YAAYwM,EAAS2N,UAEvC1N,iBAAkB,SAAUD,GACxB,MAAOA,KAGfmC,EAAWoB,EAAA,QAAoBvR,2BAC3BuO,aAAc,cACdI,kBAAmB,SAAUX,GACzB,MAAOA,IAEXC,iBAAkB,SAAUD,GACxB,MAAO2B,QAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAW9B,KAyC9D,QAPIH,wBAAyBA,EACzBS,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBV,iBAAkBA,4DA7DM,SAmEhCwN,GAAShW,sBAAwB,qBAClBxH,OAAO0H,aAAamM,oBAAoB2J,+DChEvD,SAASG,KAML,QAASC,GAAaC,GAClB,GAAMC,GAAgBpM,OAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWgM,GAErE,OADsBE,oBAAmBC,OAAOF,IAIpD,QAASG,GAAoBd,GACzB,GAAIvd,OAAOkV,UAAW,CAClB,GAAMoJ,GAAiBN,EAAaT,GAC9BtI,EAAS,GAAIjV,QAAOkV,UACpBF,EAASC,EAAOK,gBAAgBgJ,EAAgB,YAChDC,EAAWvJ,EAASA,EAAOwJ,uBAAuBC,EAAM,YAAY,GAAK,KACzEC,EAAOH,EAAWA,EAASC,uBAAuBC,EAAM,QAAQ,GAAK,IAG3E,IAFcC,EAAOA,EAAKF,uBAAuBC,EAAM,SAAS,GAAK,KAGjE,MAAO,MAGf,MAAOlB,GAGX,QAASoB,GAAmBpB,GACxB,GAAIqB,GAAc,GACdC,EAAa,GACbpX,EAAU,GACVqX,GAAW,EACXC,GAAS,CAEb,IAAI/e,OAAOkV,UAAW,CAClB,GAAMoJ,GAAiBN,EAAaT,GAC9BtI,EAAS,GAAIjV,QAAOkV,UACpBF,EAASC,EAAOK,gBAAgBgJ,EAAgB,YAChDC,EAAWvJ,EAASA,EAAOwJ,uBAAuBC,EAAM,YAAY,GAAK,KACzEC,EAAOH,EAAWA,EAASC,uBAAuBC,EAAM,QAAQ,GAAK,KACrEO,EAAQN,EAAOA,EAAKF,uBAAuBC,EAAM,SAAS,GAAK,KAC/DQ,EAASD,EAAQA,EAAMxJ,qBAAqB,UAAU,GAAK,KAC3D0J,EAAYD,EAASA,EAAOzJ,qBAAqB,aAAa,GAAK,KACrE2J,EAAO,IAEX,IAAc,OAAVH,EACA,MAAOV,EAGXa,GAAOH,EAAMxJ,qBAAqB,eAAe,GAAG4J,WACpDR,EAAcO,EAAOA,EAAKxJ,UAAY,KAEpB,OAAduJ,IACAC,EAAOD,EAAU1J,qBAAqB,cAAc,GACpDqJ,EAAaM,EAAOA,EAAKC,WAAWzJ,UAAY,KAChDwJ,EAAOD,EAAU1J,qBAAqB,WAAW,GACjD/N,EAAU0X,EAAOA,EAAKC,WAAWzJ,UAAY,KAC7CmJ,EAAUrX,EAAUA,EAAQ4X,YAAY,KAAO,GAAK,EACpDN,EAAQtX,EAAUA,EAAQ3F,QAAQ,MAAQ,EAC1C2F,EAAUA,EAAUA,EAAQ6V,UAAUwB,EAASC,GAAS,IAIhE,GAAIO,GAAW,SAAYT,EAAU,WAAWD,CAKhD,OAJInX,KACA6X,GAAW,cAAkB7X,GAG1B6X,EAGX,QAAStP,GAAwBL,GAC7B,MAAOA,GAGX,QAASc,KACL,MAAO,OAGX,QAASE,KACL,MAAO,cAGX,QAASG,GAAkByM,GACvB,MAAOc,GAAoBld,KAAKhB,KAAMod,GAG1C,QAASnN,GAAiBmN,GACtB,MAAOoB,GAAmBxd,KAAKhB,KAAMod,GAvFzC,GAEMkB,GAAO,2CAgGb,QAPIzO,wBAAyBA,EACzBS,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBV,iBAAkBA,oDAM1B2N,EAAUnW,sBAAwB,sBACnBxH,OAAO0H,aAAamM,oBAAoB8J,4DCnHvD,SAASwB,KAIL,QAASvP,GAAwBL,GAC7B,MAAOA,GAGX,QAASc,KACL,MAAO,OAGX,QAASE,KACL,MAAO,cAGX,QAASG,GAAkByM,GACvB,MAAOA,GAGX,QAASnN,GAAiBmN,GACtB,MAAOzL,QAAOC,aAAaC,MAAM,KAAM,GAAIC,YAAWsL,IAW1D,OAPIvN,wBAAyBA,EACzBS,cAAeA,EACfE,gBAAiBA,EACjBG,kBAAmBA,EACnBV,iBAAkBA,oDAM1BmP,EAAS3X,sBAAwB,qBAClBxH,OAAO0H,aAAamM,oBAAoBsL,qcC/BjDC,EAAc,WAQL,QARTA,GAQUjL,EAAUuF,GAClB,UATF0F,GASM1F,GAAiB,eAATA,GAAkC,cAATA,EACjC,KAAM,IAAI9Y,OAAM,6EACpBb,MAAKoU,SAAWA,EAChBpU,KAAK2Z,KAAOA,WAZd0F,sBAoBG,WACD,GAAIze,OAACoD,GACDsb,EAAUtf,KAAKoU,SAASnT,OACxBse,GAAO5Y,QAEX,KAAK/F,EAAI,EAAGA,EAAI0e,EAAS1e,IAAK,CAC1B,GAAIoQ,IACAwO,IAAK,MACLC,IAAK,SACLlC,IAAKvd,KAAKoU,SAASxT,GAAG6Y,MACtB+D,EAAGxd,KAAKoU,SAASxT,GAAGoQ,IAExBuO,GAAI5Y,KAAKuG,KAAK8D,GAEdhR,KAAK2Z,OACL4F,EAAI5F,KAAO3Z,KAAK2Z,KAEpB,IAAI+F,GAAYhR,KAAKC,UAAU4Q,GACzBhF,EAAMmF,EAAUze,OAGlB0e,EAAM,GAAIlO,aAAY8I,GACtBqF,EAAQ,GAAI9N,YAAW6N,EAC3B,KAAK/e,EAAI,EAAGA,EAAI2Z,EAAK3Z,IACjBgf,EAAMhf,GAAK8e,EAAUrI,WAAWzW,EACpC,OAAO+e,OA7CTN,eAiDSA,8MClDTQ,GAOS,QAPTA,GAOUhU,EAAcsT,UAPxBU,GAQE7f,KAAK6L,aAAeA,EACpB7L,KAAKqH,MAAQ8X,aAINU,8MCdTC,GAUS,QAVTA,GAUUjU,EAAcvE,EAAS+S,EAAYvL,UAV7CgR,GAWE9f,KAAK6L,aAAeA,EACpB7L,KAAKsH,QAAUA,EACftH,KAAKqa,WAAaA,EAClBra,KAAK8O,YAAcA,GAA4B,6BAIxCgR,8MClBTC,GAOS,QAPTA,GAOUtG,EAAOzI,UAPjB+O,GAQE/f,KAAKyZ,MAAQA,EACbzZ,KAAKgR,IAAMA,aAIJ+O,8MCXTC,GASS,QATTA,GASU/c,EAAW2Z,UATrBoD,GAUEhgB,KAAKiD,UAAYA,EACjBjD,KAAK4c,gBAAkBA,aAIhBoD,8MCfTC,GAgBS,QAhBTA,GAgBUpT,EAAmBC,EAAmBoT,EAAuBC,EAAiBC,UAhBxFH,GAiBEjgB,KAAKqgB,eAAkB,QACnBxT,GAAqBA,EAAkB5L,SACvCjB,KAAK6M,kBAAoBA,GAEzBC,GAAqBA,EAAkB7L,SACvCjB,KAAK8M,kBAAoBA,GAE7B9M,KAAKkgB,sBAAwBA,EAC7BlgB,KAAKmgB,gBAAkBA,EACvBngB,KAAKogB,aAAeA,aAIbH,8MChCTK,GAOS,QAPTA,GAOUtH,EAAauH,UAPvBD,GAQEtgB,KAAKgZ,YAAcA,EACnBhZ,KAAKugB,WAAaA,aAIXD,8MCbTE,GAMS,QANTA,GAMUtd,EAAUqO,UANpBiP,GAOExgB,KAAKkD,SAAWA,EAChBlD,KAAKuR,aAAeA,aAIbiP","file":"dash.protection.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Protection Constants declaration\n * @class\n * @ignore\n */\nclass ProtectionConstants {\n\n    init () {\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new ProtectionConstants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n\n    let instance;\n    let context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n\n        let controller = null;\n\n        let protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({log: config.log, BASE64: config.BASE64});\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                adapter: config.adapter,\n                eventBus: config.eventBus,\n                log: config.log,\n                events: config.events,\n                BASE64: config.BASE64,\n                Constants: config.Constants\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n\n        let log = config.log;\n        let eventBus = config.eventBus;\n        let errHandler = config.errHandler;\n        let videoElement = config.videoModel ? config.videoModel.getElement() : null;\n\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\n            (!videoElement || videoElement.mediaKeys !== undefined) &&\n            window.MediaKeys !== undefined &&\n            navigator.requestMediaKeySystemAccess !== undefined &&\n            typeof navigator.requestMediaKeySystemAccess === 'function') {\n\n            log('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({log: log, eventBus: eventBus, events: config.events});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n\n            log('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({log: log, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014)});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n\n            log('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({log: log, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b)});\n\n        } else {\n\n            log('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n\n        for (let i = 0; i < apis.length; i++) {\n            let api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nlet factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    let adapter = config.adapter;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    let log = config.log;\n    let BASE64 = config.BASE64;\n    const Constants = config.Constants;\n\n    let instance,\n        pendingNeedKeyData,\n        audioInfo,\n        videoInfo,\n        protDataSet,\n        initialized,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        pendingNeedKeyData = [];\n        initialized = false;\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    /**\n     * Initialize this protection system with a given manifest and optional audio\n     * and video stream information.\n     *\n     * @param {Object} manifest the json version of the manifest XML document for the\n     * desired content.  Applications can download their manifest using\n     * {@link module:MediaPlayer#retrieveManifest}\n     * @param {StreamInfo} [aInfo] audio stream information\n     * @param {StreamInfo} [vInfo] video stream information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initialize(manifest, aInfo, vInfo) {\n        // TODO: We really need to do much more here... We need to be smarter about knowing\n        // which adaptation sets for which we have initialized, including the default key ID\n        // value from the ContentProtection elements so we know whether or not we still need to\n        // select key systems and acquire keys.\n        if (!initialized) {\n            let streamInfo;\n\n            if (!aInfo && !vInfo) {\n                // Look for ContentProtection elements.  InitData can be provided by either the\n                // dash264drm:Pssh ContentProtection format or a DRM-specific format.\n                streamInfo = adapter.getStreamsInfo()[0]; // TODO: Single period only for now. See TODO above\n            }\n\n            audioInfo = aInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.AUDIO) : null);\n            videoInfo = vInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.VIDEO) : null);\n            const mediaInfo = (videoInfo) ? videoInfo : audioInfo; // We could have audio or video only\n\n            eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n\n            // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n            // and video will be the same.  Just use one valid MediaInfo object\n            const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n            if (supportedKS && supportedKS.length > 0) {\n                selectKeySystem(supportedKS, true);\n            }\n\n            initialized = true;\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n            if (isLoadedInitData(initDataForKS)) {\n                log('DRM: Ignoring initData because we have already seen it!');\n                return;\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error creating key session! ' + error.message});\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!'});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID) {\n        protectionModel.loadKeySession(sessionID, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n            eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n            eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions.  In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        const keySystemString = keySystem.systemString;\n\n        if (protDataSet) {\n            protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n\n        if (audioInfo) {\n            audioCapabilities.push(new MediaCapability(audioInfo.codec, audioRobustness));\n        }\n        if (videoInfo) {\n            videoCapabilities.push(new MediaCapability(videoInfo.codec, videoRobustness));\n        }\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, 'optional',\n            (ksSessionType === 'temporary') ? 'optional' : 'required',\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function isPendingInitData(initData) {\n        for (let i = 0; i < pendingNeedKeyData.length; i++) {\n            for (let ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                if (protectionKeyController.initDataEquals(initData, pendingNeedKeyData[i][ksIdx].initData)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function isLoadedInitData(initData) {\n        const currentInitData = protectionModel.getAllInitData();\n        for (let i = 0; i < currentInitData.length; i++) {\n            if (protectionKeyController.initDataEquals(initData, currentInitData[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                            }\n                        } else {\n                            log('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            if (supportedKS[ksIdx].offlineSessionId) {\n                                loadKeySession(supportedKS[ksIdx].offlineSessionId);\n                            } else {\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                            }\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    log('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                if (pendingNeedKeyData[i][ksIdx].initData === null && protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                                // If no iniiData is provided then do not create session\n                                // Use case: select key system in order to load existing key sessions\n                                if (pendingNeedKeyData[i][ksIdx].offlineSessionId) {\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].offlineSessionId);\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: Error selecting key system! -- ' + event.error});\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyMessage(e) {\n        log('DRM: onKeyMessage');\n        if (e.error) {\n            log(e.error);\n            return;\n        }\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem.systemString;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            log('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys)  {\n                log('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        const xhr = new XMLHttpRequest();\n\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: No license server URL specified!');\n            return;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR complete. status is \"' + xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg);\n        };\n\n        xhr.open(licenseServerData.getHTTPMethod(messageType), url, true);\n        xhr.responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        xhr.onload = function () {\n            if (this.status == 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(this.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(this, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(this, eventData, keySystemString, messageType);\n            }\n        };\n        xhr.onabort = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR aborted. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n        xhr.onerror = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR error. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        xhr.withCredentials = true;\n                    }\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            xhr.withCredentials = protData.withCredentials;\n        }\n\n        xhr.send(keySystem.getLicenseRequestFromMessage(message));\n    }\n\n    function onNeedKey(event) {\n        log('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            log('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS && (isPendingInitData(initDataForKS) || isLoadedInitData(initDataForKS))) {\n                log('DRM: Ignoring initData because we have already seen it!');\n                return;\n            }\n        }\n\n        log('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            log('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    instance = {\n        initialize: initialize,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport CommonEncryption from './../CommonEncryption';\r\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\r\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\r\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\r\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\r\nimport DRMToday from './../servers/DRMToday';\r\nimport PlayReady from './../servers/PlayReady';\r\nimport Widevine from './../servers/Widevine';\r\nimport ClearKey from './../servers/ClearKey';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\n/**\r\n * @module ProtectionKeyController\r\n * @description Media protection key system functionality that can be modified/overridden by applications\r\n */\r\nfunction ProtectionKeyController() {\r\n\r\n    let context = this.context;\r\n\r\n    let instance,\r\n        log,\r\n        keySystems,\r\n        BASE64,\r\n        clearkeyKeySystem,\r\n        clearkeyW3CKeySystem;\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.log) {\r\n            log = config.log;\r\n        }\r\n\r\n        if (config.BASE64) {\r\n            BASE64 = config.BASE64;\r\n        }\r\n    }\r\n\r\n    function initialize() {\r\n        keySystems = [];\r\n\r\n        let keySystem;\r\n\r\n        // PlayReady\r\n        keySystem = KeySystemPlayReady(context).getInstance({ BASE64: BASE64 });\r\n        keySystems.push(keySystem);\r\n\r\n        // Widevine\r\n        keySystem = KeySystemWidevine(context).getInstance({ BASE64: BASE64 });\r\n        keySystems.push(keySystem);\r\n\r\n        // ClearKey\r\n        keySystem = KeySystemClearKey(context).getInstance({ BASE64: BASE64 });\r\n        keySystems.push(keySystem);\r\n        clearkeyKeySystem = keySystem;\r\n\r\n        // W3C ClearKey\r\n        keySystem = KeySystemW3CClearKey(context).getInstance({ BASE64: BASE64, log: log });\r\n        keySystems.push(keySystem);\r\n        clearkeyW3CKeySystem = keySystem;\r\n    }\r\n\r\n    /**\r\n     * Returns a prioritized list of key systems supported\r\n     * by this player (not necessarily those supported by the\r\n     * user agent)\r\n     *\r\n     * @returns {Array.<KeySystem>} a prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystems() {\r\n        return keySystems;\r\n    }\r\n\r\n    /**\r\n     * Returns the key system associated with the given key system string\r\n     * name (i.e. 'org.w3.clearkey')\r\n     *\r\n     * @param {string} systemString the system string\r\n     * @returns {KeySystem|null} the key system\r\n     * or null if no supported key system is associated with the given key\r\n     * system string\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystemBySystemString(systemString) {\r\n        for (let i = 0; i < keySystems.length; i++) {\r\n            if (keySystems[i].systemString === systemString) {\r\n                return keySystems[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Determines whether the given key system is ClearKey.  This is\r\n     * necessary because the EME spec defines ClearKey and its method\r\n     * for providing keys to the key session; and this method has changed\r\n     * between the various API versions.  Our EME-specific ProtectionModels\r\n     * must know if the system is ClearKey so that it can format the keys\r\n     * according to the particular spec version.\r\n     *\r\n     * @param {Object} keySystem the key\r\n     * @returns {boolean} true if this is the ClearKey key system, false\r\n     * otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function isClearKey(keySystem) {\r\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\r\n    }\r\n\r\n    /**\r\n     * Check equality of initData array buffers.\r\n     *\r\n     * @param {ArrayBuffer} initData1 - first initData\r\n     * @param {ArrayBuffer} initData2 - second initData\r\n     * @returns {boolean} true if the initData arrays are equal in size and\r\n     * contents, false otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function initDataEquals(initData1, initData2) {\r\n        if (!initData1 || !initData2) {\r\n            return false;\r\n        }\r\n        if (initData1.byteLength === initData2.byteLength) {\r\n            let data1 = new Uint8Array(initData1);\r\n            let data2 = new Uint8Array(initData2);\r\n\r\n            for (let j = 0; j < data1.length; j++) {\r\n                if (data1[j] !== data2[j]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        let cp, ks, ksIdx, cpIdx;\r\n        let supportedKS = [];\r\n\r\n        if (cps) {\r\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n                ks = keySystems[ksIdx];\r\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\r\n                    cp = cps[cpIdx];\r\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\r\n                        // Look for DRM-specific ContentProtection\r\n                        supportedKS.push({\r\n                            ks: keySystems[ksIdx],\r\n                            initData: ks.getInitData(cp),\r\n                            cdmData: ks.getCDMData(),\r\n                            offlineSessionId: ks.getOfflineSessionId(cp)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns key systems supported by this player for the given PSSH\r\n     * initializationData. Only key systems supported by this player\r\n     * that have protection data present will be returned.  Key systems are returned in priority order\r\n     * (highest priority first)\r\n     *\r\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\r\n     * supported by the content\r\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\r\n     * supported by the content\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystems(initData, protDataSet) {\r\n        let supportedKS = [];\r\n        let pssh = CommonEncryption.parsePSSHList(initData);\r\n\r\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n            let keySystemString = keySystems[ksIdx].systemString;\r\n            let shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\r\n\r\n            if (keySystems[ksIdx].uuid in pssh && shouldNotFilterOutKeySystem) {\r\n                supportedKS.push({\r\n                    ks: keySystems[ksIdx],\r\n                    initData: pssh[keySystems[ksIdx].uuid]\r\n                });\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns the license server implementation data that should be used for this request.\r\n     *\r\n     * @param {KeySystem} keySystem the key system\r\n     * associated with this license request\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\r\n     * request.  Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @returns {LicenseServer|null} the license server\r\n     * implementation that should be used for this request or null if the player should not\r\n     * pass messages of the given type to a license server\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     *\r\n     */\r\n    function getLicenseServer(keySystem, protData, messageType) {\r\n\r\n        // Our default server implementations do not do anything with \"license-release\" or\r\n        // \"individualization-request\" messages, so we just send a success event\r\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\r\n            return null;\r\n        }\r\n\r\n        let licenseServerData = null;\r\n        if (protData && protData.hasOwnProperty('drmtoday')) {\r\n            licenseServerData = DRMToday(context).getInstance({ BASE64: BASE64 });\r\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\r\n            licenseServerData = Widevine(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\r\n            licenseServerData = PlayReady(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\r\n            licenseServerData = ClearKey(context).getInstance();\r\n        }\r\n\r\n        return licenseServerData;\r\n    }\r\n\r\n    /**\r\n     * Allows application-specific retrieval of ClearKey keys.\r\n     *\r\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {ArrayBuffer} message the key message from the CDM\r\n     * @return {ClearKeyKeySet|null} the clear keys associated with\r\n     * the request or null if no keys can be returned by this function\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\r\n        try {\r\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\r\n        } catch (error) {\r\n            log('Failed to retrieve clearkeys from ProtectionData');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function setProtectionData(protectionDataSet) {\r\n        var getProtectionData = function (keySystemString) {\r\n            var protData = null;\r\n            if (protectionDataSet) {\r\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\r\n            }\r\n            return protData;\r\n        };\r\n\r\n        for (var i = 0; i < keySystems.length; i++) {\r\n            var keySystem = keySystems[i];\r\n            if (keySystem.hasOwnProperty('init')) {\r\n                keySystem.init(getProtectionData(keySystem.systemString));\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setProtectionData: setProtectionData,\r\n        isClearKey: isClearKey,\r\n        initDataEquals: initDataEquals,\r\n        getKeySystems: getKeySystems,\r\n        getKeySystemBySystemString: getKeySystemBySystemString,\r\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\r\n        getSupportedKeySystems: getSupportedKeySystems,\r\n        getLicenseServer: getLicenseServer,\r\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\r\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getOfflineSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getOfflineSessionId: getOfflineSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let msg,\n            xmlDoc;\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        }\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getOfflineSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getOfflineSessionId: getOfflineSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const log = config.log;\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            log('Warning: ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getOfflineSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getOfflineSessionId: getOfflineSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    config = config || {};\n    let instance;\n    let protData = null;\n    const BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function replaceKID(pssh, KID) {\n        let pssh_array;\n        let replace = true;\n        let kidLen = 16;\n        let pos;\n        let i, j;\n\n        pssh_array = new Uint8Array(pssh);\n\n        for (i = 0; i <= pssh_array.length - (kidLen + 2); i++) {\n            if (pssh_array[i] === 0x12 && pssh_array[i + 1] === 0x10) {\n                pos = i + 2;\n                for (j = pos; j < (pos + kidLen); j++) {\n                    if (pssh_array[j] !== 0xFF) {\n                        replace = false;\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n        if (replace) {\n            pssh_array.set(KID, pos);\n        }\n\n        return pssh_array.buffer;\n    }\n\n    function getInitData(cp) {\n        var pssh = null;\n        // Get pssh from protectionData or from manifest\n        if (protData && protData.pssh) {\n            pssh = BASE64.decodeArray(protData.pssh).buffer;\n        } else {\n            pssh = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n        }\n\n        // Check if KID within pssh is empty, in that case set KID value according to 'cenc:default_KID' value\n        if (pssh) {\n            pssh = replaceKID(pssh, cp['cenc:default_KID']);\n        }\n\n        return pssh;\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getOfflineSessionId(cp) {\n        // Get offlineSessionId from protectionData or from manifest\n        if (protData && protData.offlineSessionId) {\n            return protData.offlineSessionId;\n        } else if (cp.offlineSessionId) {\n            return cp.offlineSessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getOfflineSessionId: getOfflineSessionId\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const log = config.log;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n                                    break;\n                                case 2:\n                                    msg += 'MEDIA_KEYERR_CLIENT - The Key System could not be installed or updated.';\n                                    break;\n                                case 3:\n                                    msg += 'MEDIA_KEYERR_SERVICE - The message passed into update indicated an error from the license service.';\n                                    break;\n                                case 4:\n                                    msg += 'MEDIA_KEYERR_OUTPUT - There is no available output device with the required characteristics for the content protection system.';\n                                    break;\n                                case 5:\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - A hardware configuration change caused a content protection error.';\n                                    break;\n                                case 6:\n                                    msg += 'MEDIA_KEYERR_DOMAIN - An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, msg)});\n                        } else {\n                            log('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            log('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            log('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError('Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!');\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            log('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const log = config.log;\n\n    let instance,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            } else {\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            videoElement.setMediaKeys(null);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            log('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: 'Error updating server certificate -- ' + error.name});\n        });\n    }\n\n    function createKeySession(initData, protData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType);\n        const ks = this.getKeySystem();\n\n        // Generate initial key request.\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && protData && protData.clearkeys ? 'keyids' : 'cenc';\n        session.generateRequest(dataType, initData).then(function () {\n            log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error generating key request -- ' + error.name});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, 'Error sending update() message! ' + error.name)});\n        });\n    }\n\n    function loadKeySession(sessionID, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        log('DRM: Load session.  SessionID = ' + sessionID);\n        const session = mediaKeys.createSession(sessionType);\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                const sessionToken = createSessionToken(session);\n                log('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session! Invalid Session ID (' + sessionID + ')'});\n            }\n        }).catch(function (error) {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session (' + sessionID + ')! ' + error.name});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        session.remove().then(function () {\n            log('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n        (function (i) {\n            const keySystem = ksConfigurations[i].ks;\n            const configs = ksConfigurations[i].configs;\n            navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function (mediaKeySystemAccess) {\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function () {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied!'});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType) {\n        const token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            log('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    let log = config.log;\n    let api = config.api;\n\n\n    let instance,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, {error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message});\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: new KeySystemAccess(ks, ksConfig)});\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities !== null && keySystemAccess.ksConfiguration.videoCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities !== null && keySystemAccess.ksConfiguration.audioCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n\n        if (capabilities === null)\n          throw new Error('Can not create sessions for unknown content types.');\n\n        let contentType = capabilities.contentType;\n        let session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        let sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new KeyError(this, errorStr) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        log('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        log('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url, message/*, messageType*/) {\n        // Build ClearKey server query string\n        const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n        url += '/?';\n        for (let i = 0; i < jsonMsg.kids.length; i++) {\n            url += jsonMsg.kids[i] + '&';\n        }\n        url = url.substring(0, url.length - 1);\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'GET';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc EME-independent KeyError\n * @ignore\n */\nclass KeyError {\n    /**\n     * @param {Object} sessionToken the key session to which this error is associated\n     * @param {string} errorString an informational error message\n     * @class\n     * @deprecated Newest versions of EME APIs will not use this error object\n     */\n    constructor(sessionToken, errorString) {\n        this.sessionToken = sessionToken;\n        this.error = errorString;\n    }\n}\n\nexport default KeyError;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n"]}