{"version":3,"sources":["../../../../../src/dash/utils/SegmentsGetter.js"],"names":["SegmentsGetter","config","isDynamic","context","instance","timelineSegmentsGetter","templateSegmentsGetter","listSegmentsGetter","setup","create","getSegments","representation","requestedTime","index","onSegmentListUpdatedCallback","availabilityUpperLimit","segments","type","segmentInfoType","DashConstants","SEGMENT_BASE","BASE_URL","isSegmentListUpdateRequired","SEGMENT_TIMELINE","SEGMENT_TEMPLATE","SEGMENT_LIST","updateRequired","upperIdx","lowerIdx","length","availabilityIdx","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":";;;;;;AA8BA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;;AAEvC,QAAMC,UAAU,KAAKA,OAArB;;AAEA,QAAIC,iBAAJ;AAAA,QACIC,+BADJ;AAAA,QAEIC,+BAFJ;AAAA,QAGIC,2BAHJ;;AAKA,aAASC,KAAT,GAAiB;AACbH,iCAAyB,sCAAuBF,OAAvB,EAAgCM,MAAhC,CAAuCR,MAAvC,EAA+CC,SAA/C,CAAzB;AACAI,iCAAyB,sCAAuBH,OAAvB,EAAgCM,MAAhC,CAAuCR,MAAvC,EAA+CC,SAA/C,CAAzB;AACAK,6BAAqB,kCAAmBJ,OAAnB,EAA4BM,MAA5B,CAAmCR,MAAnC,EAA2CC,SAA3C,CAArB;AACH;;AAED;AACA;AACA,aAASQ,WAAT,CAAqBC,cAArB,EAAqCC,aAArC,EAAoDC,KAApD,EAA2DC,4BAA3D,EAAyFC,sBAAzF,EAAiH;AAC7G,YAAIC,iBAAJ;AACA,YAAMC,OAAON,eAAeO,eAA5B;;AAEA;AACA,YAAID,SAASE,wBAAcC,YAAvB,IAAuCH,SAASE,wBAAcE,QAA9D,IAA0E,CAACC,4BAA4BX,cAA5B,EAA4CE,KAA5C,CAA/E,EAAmI;AAC/HG,uBAAWL,eAAeK,QAA1B;AACH,SAFD,MAEO;AACH,gBAAIC,SAASE,wBAAcI,gBAA3B,EAA6C;AACzCP,2BAAWX,uBAAuBK,WAAvB,CAAmCC,cAAnC,EAAmDC,aAAnD,EAAkEC,KAAlE,EAAyEE,sBAAzE,CAAX;AACH,aAFD,MAEO,IAAIE,SAASE,wBAAcK,gBAA3B,EAA6C;AAChDR,2BAAWV,uBAAuBI,WAAvB,CAAmCC,cAAnC,EAAmDC,aAAnD,EAAkEC,KAAlE,EAAyEE,sBAAzE,CAAX;AACH,aAFM,MAEA,IAAIE,SAASE,wBAAcM,YAA3B,EAAyC;AAC5CT,2BAAWT,mBAAmBG,WAAnB,CAA+BC,cAA/B,EAA+CC,aAA/C,EAA8DC,KAA9D,EAAqEE,sBAArE,CAAX;AACH;;AAED,gBAAID,4BAAJ,EAAkC;AAC9BA,6CAA6BH,cAA7B,EAA6CK,QAA7C;AACH;AACJ;AACJ;;AAED,aAASM,2BAAT,CAAqCX,cAArC,EAAqDE,KAArD,EAA4D;AACxD,YAAMG,WAAWL,eAAeK,QAAhC;AACA,YAAIU,iBAAiB,KAArB;;AAEA,YAAIC,iBAAJ;AAAA,YACIC,iBADJ;;AAGA,YAAI,CAACZ,QAAD,IAAaA,SAASa,MAAT,KAAoB,CAArC,EAAwC;AACpCH,6BAAiB,IAAjB;AACH,SAFD,MAEO;AACHE,uBAAWZ,SAAS,CAAT,EAAYc,eAAvB;AACAH,uBAAWX,SAASA,SAASa,MAAT,GAAkB,CAA3B,EAA8BC,eAAzC;AACAJ,6BAAkBb,QAAQe,QAAT,IAAuBf,QAAQc,QAAhD;AACH;;AAED,eAAOD,cAAP;AACH;;AAEDtB,eAAW;AACPM,qBAAaA;AADN,KAAX;;AAIAF;;AAEA,WAAOJ,QAAP;AACH,C,CApGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGAJ,eAAe+B,qBAAf,GAAuC,gBAAvC;AACA,IAAMC,UAAUC,uBAAaC,eAAb,CAA6BlC,cAA7B,CAAhB;kBACegC,O","file":"SegmentsGetter.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport DashConstants from '../constants/DashConstants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport TimelineSegmentsGetter from './TimelineSegmentsGetter';\r\nimport TemplateSegmentsGetter from './TemplateSegmentsGetter';\r\nimport ListSegmentsGetter from './ListSegmentsGetter';\r\n\r\nfunction SegmentsGetter(config, isDynamic) {\r\n\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        timelineSegmentsGetter,\r\n        templateSegmentsGetter,\r\n        listSegmentsGetter;\r\n\r\n    function setup() {\r\n        timelineSegmentsGetter = TimelineSegmentsGetter(context).create(config, isDynamic);\r\n        templateSegmentsGetter = TemplateSegmentsGetter(context).create(config, isDynamic);\r\n        listSegmentsGetter = ListSegmentsGetter(context).create(config, isDynamic);\r\n    }\r\n\r\n    // availabilityUpperLimit parameter is not used directly by any dash.js function, but it is needed as a helper\r\n    // for other developments that extend dash.js, and provide their own transport layers (ex: P2P transport)\r\n    function getSegments(representation, requestedTime, index, onSegmentListUpdatedCallback, availabilityUpperLimit) {\r\n        let segments;\r\n        const type = representation.segmentInfoType;\r\n\r\n        // Already figure out the segments.\r\n        if (type === DashConstants.SEGMENT_BASE || type === DashConstants.BASE_URL || !isSegmentListUpdateRequired(representation, index)) {\r\n            segments = representation.segments;\r\n        } else {\r\n            if (type === DashConstants.SEGMENT_TIMELINE) {\r\n                segments = timelineSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\r\n            } else if (type === DashConstants.SEGMENT_TEMPLATE) {\r\n                segments = templateSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\r\n            } else if (type === DashConstants.SEGMENT_LIST) {\r\n                segments = listSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\r\n            }\r\n\r\n            if (onSegmentListUpdatedCallback) {\r\n                onSegmentListUpdatedCallback(representation, segments);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isSegmentListUpdateRequired(representation, index) {\r\n        const segments = representation.segments;\r\n        let updateRequired = false;\r\n\r\n        let upperIdx,\r\n            lowerIdx;\r\n\r\n        if (!segments || segments.length === 0) {\r\n            updateRequired = true;\r\n        } else {\r\n            lowerIdx = segments[0].availabilityIdx;\r\n            upperIdx = segments[segments.length - 1].availabilityIdx;\r\n            updateRequired = (index < lowerIdx) || (index > upperIdx);\r\n        }\r\n\r\n        return updateRequired;\r\n    }\r\n\r\n    instance = {\r\n        getSegments: getSegments\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentsGetter.__dashjs_factory_name = 'SegmentsGetter';\r\nconst factory = FactoryMaker.getClassFactory(SegmentsGetter);\r\nexport default factory;\r\n"]}