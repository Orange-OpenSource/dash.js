{"version":3,"sources":["../../../../../src/dash/controllers/RepresentationController.js"],"names":["RepresentationController","config","eventBus","events","errors","abrController","dashMetrics","playbackController","timelineConverter","type","streamInfo","dashConstants","instance","realAdaptation","updating","voAvailableRepresentations","currentVoRepresentation","setup","resetInitialSettings","on","QUALITY_CHANGE_REQUESTED","onQualityChanged","REPRESENTATION_UPDATE_COMPLETED","onRepresentationUpdated","WALLCLOCK_TIME_UPDATED","onWallclockTimeUpdated","MANIFEST_VALIDITY_CHANGED","onManifestValidityChanged","getStreamId","id","getType","checkConfig","Error","Constants","MISSING_CONFIG_ERROR","getData","isUpdating","getCurrentRepresentation","reset","off","updateData","newRealAdaptation","availableRepresentations","quality","startDataUpdate","getRepresentationForQuality","VIDEO","AUDIO","FRAGMENTED_TEXT","endDataUpdate","updateAvailabilityWindow","getIsDynamic","addRepresentationSwitch","now","Date","currentRepresentation","currentVideoTimeMs","getTime","adaptation","undefined","length","getQualityForRepresentation","voRepresentation","indexOf","isAllRepresentationsUpdated","i","ln","segmentInfoType","segmentAvailabilityRange","hasInitialization","SEGMENT_BASE","BASE_URL","segments","setExpectedLiveEdge","liveEdge","updateManifestUpdateInfo","presentationStartTime","updateRepresentation","representation","isDynamic","calcSegmentAvailabilityRange","end","start","useCalculatedLiveEdgeTime","error","DashJSError","SEGMENTS_UNAVAILABLE_ERROR_CODE","SEGMENTS_UNAVAILABLE_ERROR_MESSAGE","availabilityDelay","notifyUpdate","trigger","REPRESENTATION_UPDATE_STARTED","resetAvailabilityWindow","forEach","rep","DATA_UPDATE_STARTED","DATA_UPDATE_COMPLETED","data","postponeUpdate","postponeTimePeriod","delay","update","AST_IN_FUTURE","setTimeout","e","r","manifestUpdateInfo","getCurrentManifestUpdate","alreadyAdded","repInfo","err","repSwitch","period","mpd","manifest","DYNAMIC","ignorePostponeTimePeriod","getStreamController","getStreams","getRepresentationUpdatePostponeTimePeriod","SEGMENTS_UPDATE_FAILED_ERROR_CODE","SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE","representationInfo","index","mediaType","addManifestUpdateRepresentationInfo","setPlaybackQuality","latency","getCurrentRepresentationSwitch","streamController","activeStreamInfo","getActiveStreamInfo","startTimeAnchor","Math","min","segmentAvailabilityTimePeriod","liveDelay","getLiveDelay","newQuality","newDuration","duration","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"RepresentationController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../streaming/constants/Constants';\r\nimport DashJSError from '../../streaming/vo/DashJSError';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction RepresentationController(config) {\r\n\r\n    config = config || {};\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const errors = config.errors;\r\n    const abrController = config.abrController;\r\n    const dashMetrics = config.dashMetrics;\r\n    const playbackController = config.playbackController;\r\n    const timelineConverter = config.timelineConverter;\r\n    const type = config.type;\r\n    const streamInfo = config.streamInfo;\r\n    const dashConstants = config.dashConstants;\r\n\r\n    let instance,\r\n        realAdaptation,\r\n        updating,\r\n        voAvailableRepresentations,\r\n        currentVoRepresentation;\r\n\r\n    function setup() {\r\n        resetInitialSettings();\r\n\r\n        eventBus.on(events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.on(events.REPRESENTATION_UPDATE_COMPLETED, onRepresentationUpdated, instance);\r\n        eventBus.on(events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\r\n        eventBus.on(events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!abrController || !dashMetrics || !playbackController || !timelineConverter) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getData() {\r\n        return realAdaptation;\r\n    }\r\n\r\n    function isUpdating() {\r\n        return updating;\r\n    }\r\n\r\n    function getCurrentRepresentation() {\r\n        return currentVoRepresentation;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        realAdaptation = null;\r\n        updating = true;\r\n        voAvailableRepresentations = [];\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.off(events.REPRESENTATION_UPDATE_COMPLETED, onRepresentationUpdated, instance);\r\n        eventBus.off(events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\r\n        eventBus.off(events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function updateData(newRealAdaptation, availableRepresentations, type, quality) {\r\n        checkConfig();\r\n\r\n        startDataUpdate();\r\n\r\n        voAvailableRepresentations = availableRepresentations;\r\n\r\n        currentVoRepresentation = getRepresentationForQuality(quality);\r\n        realAdaptation = newRealAdaptation;\r\n\r\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO && type !== Constants.FRAGMENTED_TEXT) {\r\n            endDataUpdate();\r\n            return;\r\n        }\r\n\r\n        updateAvailabilityWindow(playbackController.getIsDynamic(), true);\r\n    }\r\n\r\n    function addRepresentationSwitch() {\r\n        checkConfig();\r\n        const now = new Date();\r\n        const currentRepresentation = getCurrentRepresentation();\r\n        const currentVideoTimeMs = playbackController.getTime() * 1000;\r\n        if (currentRepresentation) {\r\n            dashMetrics.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\r\n        }\r\n    }\r\n\r\n    function getRepresentationForQuality(quality) {\r\n        return quality === null || quality === undefined || quality >= voAvailableRepresentations.length ? null : voAvailableRepresentations[quality];\r\n    }\r\n\r\n    function getQualityForRepresentation(voRepresentation) {\r\n        return voAvailableRepresentations.indexOf(voRepresentation);\r\n    }\r\n\r\n    function isAllRepresentationsUpdated() {\r\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\r\n            let segmentInfoType = voAvailableRepresentations[i].segmentInfoType;\r\n            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !voAvailableRepresentations[i].hasInitialization() ||\r\n                ((segmentInfoType === dashConstants.SEGMENT_BASE || segmentInfoType === dashConstants.BASE_URL) && !voAvailableRepresentations[i].segments)\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setExpectedLiveEdge(liveEdge) {\r\n        timelineConverter.setExpectedLiveEdge(liveEdge);\r\n        dashMetrics.updateManifestUpdateInfo({presentationStartTime: liveEdge});\r\n    }\r\n\r\n    function updateRepresentation(representation, isDynamic) {\r\n        representation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic);\r\n\r\n        if ((representation.segmentAvailabilityRange.end < representation.segmentAvailabilityRange.start) && !representation.useCalculatedLiveEdgeTime) {\r\n            let error = new DashJSError(errors.SEGMENTS_UNAVAILABLE_ERROR_CODE, errors.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE, {availabilityDelay: representation.segmentAvailabilityRange.start - representation.segmentAvailabilityRange.end});\r\n            endDataUpdate(error);\r\n            return;\r\n        }\r\n\r\n        if (isDynamic) {\r\n            setExpectedLiveEdge(representation.segmentAvailabilityRange.end);\r\n        }\r\n    }\r\n\r\n    function updateAvailabilityWindow(isDynamic, notifyUpdate) {\r\n        checkConfig();\r\n\r\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\r\n            updateRepresentation(voAvailableRepresentations[i], isDynamic);\r\n            if (notifyUpdate) {\r\n                eventBus.trigger(events.REPRESENTATION_UPDATE_STARTED, { representation: voAvailableRepresentations[i] }, streamInfo.id, type);\r\n            }\r\n        }\r\n    }\r\n\r\n    function resetAvailabilityWindow() {\r\n        voAvailableRepresentations.forEach(rep => {\r\n            rep.segmentAvailabilityRange = null;\r\n        });\r\n    }\r\n\r\n    function startDataUpdate() {\r\n        updating = true;\r\n        eventBus.trigger(events.DATA_UPDATE_STARTED, {}, streamInfo.id, type);\r\n    }\r\n\r\n    function endDataUpdate(error) {\r\n        updating = false;\r\n        eventBus.trigger(events.DATA_UPDATE_COMPLETED, {\r\n            data: realAdaptation,\r\n            currentRepresentation: currentVoRepresentation,\r\n            error: error\r\n        }, streamInfo.id, type);\r\n    }\r\n\r\n    function postponeUpdate(postponeTimePeriod) {\r\n        let delay = postponeTimePeriod;\r\n        let update = function () {\r\n            if (isUpdating()) return;\r\n\r\n            startDataUpdate();\r\n\r\n            // clear the segmentAvailabilityRange for all reps.\r\n            // this ensures all are updated before the live edge search starts\r\n            resetAvailabilityWindow();\r\n\r\n            updateAvailabilityWindow(playbackController.getIsDynamic(), true);\r\n        };\r\n        eventBus.trigger(events.AST_IN_FUTURE, {delay: delay});\r\n        setTimeout(update, delay);\r\n    }\r\n\r\n    function onRepresentationUpdated(e) {\r\n        if (!isUpdating()) return;\r\n\r\n        if (e.error) {\r\n            endDataUpdate(e.error);\r\n            return;\r\n        }\r\n\r\n        let r = e.representation;\r\n        let manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate();\r\n        let alreadyAdded = false;\r\n        let postponeTimePeriod = 0;\r\n        let repInfo,\r\n            err,\r\n            repSwitch;\r\n\r\n        if (r.adaptation.period.mpd.manifest.type === dashConstants.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod && playbackController.getStreamController().getStreams().length <= 1) {\r\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\r\n            postponeTimePeriod = getRepresentationUpdatePostponeTimePeriod(r);\r\n        }\r\n\r\n        if (postponeTimePeriod > 0) {\r\n            postponeUpdate(postponeTimePeriod);\r\n            err = new DashJSError(errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE, errors.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);\r\n            endDataUpdate(err);\r\n            return;\r\n        }\r\n\r\n        if (manifestUpdateInfo) {\r\n            for (let i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {\r\n                repInfo = manifestUpdateInfo.representationInfo[i];\r\n                if (repInfo.index === r.index && repInfo.mediaType === getType()) {\r\n                    alreadyAdded = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!alreadyAdded) {\r\n                dashMetrics.addManifestUpdateRepresentationInfo(r, getType());\r\n            }\r\n        }\r\n\r\n        if (isAllRepresentationsUpdated()) {\r\n            abrController.setPlaybackQuality(getType(), streamInfo, getQualityForRepresentation(currentVoRepresentation));\r\n            dashMetrics.updateManifestUpdateInfo({latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\r\n\r\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(getCurrentRepresentation().adaptation.type);\r\n\r\n            if (!repSwitch) {\r\n                addRepresentationSwitch();\r\n            }\r\n            endDataUpdate();\r\n        }\r\n    }\r\n\r\n    function getRepresentationUpdatePostponeTimePeriod(representation) {\r\n        try {\r\n            const streamController = playbackController.getStreamController();\r\n            const activeStreamInfo = streamController.getActiveStreamInfo();\r\n            let startTimeAnchor = representation.segmentAvailabilityRange.start;\r\n\r\n            if (activeStreamInfo && activeStreamInfo.id && activeStreamInfo.id !== streamInfo.id) {\r\n                // We need to consider the currently playing period if a period switch is performed.\r\n                startTimeAnchor = Math.min(playbackController.getTime(), startTimeAnchor);\r\n            }\r\n\r\n            let segmentAvailabilityTimePeriod = representation.segmentAvailabilityRange.end - startTimeAnchor;\r\n            let liveDelay = playbackController.getLiveDelay();\r\n\r\n            return (liveDelay - segmentAvailabilityTimePeriod) * 1000;\r\n        } catch (e) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function onWallclockTimeUpdated(e) {\r\n        if (e.isDynamic) {\r\n            updateAvailabilityWindow(e.isDynamic);\r\n        }\r\n    }\r\n\r\n    function onQualityChanged(e) {\r\n        currentVoRepresentation = getRepresentationForQuality(e.newQuality);\r\n        addRepresentationSwitch();\r\n    }\r\n\r\n    function onManifestValidityChanged(e) {\r\n        if (e.newDuration) {\r\n            const representation = getCurrentRepresentation();\r\n            if (representation && representation.adaptation.period) {\r\n                const period = representation.adaptation.period;\r\n                period.duration = e.newDuration;\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        getData: getData,\r\n        isUpdating: isUpdating,\r\n        updateData: updateData,\r\n        updateRepresentation: updateRepresentation,\r\n        getCurrentRepresentation: getCurrentRepresentation,\r\n        getRepresentationForQuality: getRepresentationForQuality,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\r\nexport default FactoryMaker.getClassFactory(RepresentationController);\r\n"]}