{"version":3,"sources":["../../../../../src/streaming/text/NotFragmentedTextBufferController.js"],"names":["BUFFER_CONTROLLER_TYPE","NotFragmentedTextBufferController","config","context","eventBus","getInstance","textController","errHandler","streamInfo","type","mimeType","fragmentModel","instance","isBufferingCompleted","initialized","mediaSource","buffer","initCache","setup","on","Events","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","INIT_FRAGMENT_LOADED","onInitFragmentLoaded","getBufferControllerType","initialize","source","setMediaSource","createBuffer","mediaInfoArr","mediaInfo","create","textBuffer","getBuffer","hasOwnProperty","Constants","INITIALIZE","e","isText","codec","indexOf","getTextSourceBuffer","error","DashJSError","Errors","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE","message","getType","value","getMediaSource","getIsPruningInProgress","dischargePreBuffer","getBufferLevel","getIsBufferingCompleted","reset","errored","off","abort","extract","id","currentRepresentation","trigger","INIT_FRAGMENT_NEEDED","representationId","appendInitSegment","chunk","bytes","save","append","STREAM_COMPLETED","request","getRangeAt","updateTimestampOffset","MSETimeOffset","timestampOffset","isNaN","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"NotFragmentedTextBufferController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport InitCache from '../utils/InitCache';\r\nimport SourceBufferSink from '../SourceBufferSink';\r\nimport TextController from '../../streaming/text/TextController';\r\nimport DashJSError from '../../streaming/vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\n\r\nconst BUFFER_CONTROLLER_TYPE = 'NotFragmentedTextBufferController';\r\nfunction NotFragmentedTextBufferController(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const textController = TextController(context).getInstance();\r\n\r\n    const errHandler = config.errHandler;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n    const mimeType = config.mimeType;\r\n    const fragmentModel = config.fragmentModel;\r\n\r\n    let instance,\r\n        isBufferingCompleted,\r\n        initialized,\r\n        mediaSource,\r\n        buffer,\r\n        initCache;\r\n\r\n    function setup() {\r\n        initialized = false;\r\n        mediaSource = null;\r\n        isBufferingCompleted = false;\r\n\r\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n        eventBus.on(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\r\n    }\r\n\r\n    function getBufferControllerType() {\r\n        return BUFFER_CONTROLLER_TYPE;\r\n    }\r\n\r\n    function initialize(source) {\r\n        setMediaSource(source);\r\n        initCache = InitCache(context).getInstance();\r\n    }\r\n\r\n    function createBuffer(mediaInfoArr) {\r\n        const mediaInfo = mediaInfoArr[0];\r\n        try {\r\n            buffer = SourceBufferSink(context).create(mediaSource, mediaInfo);\r\n            if (!initialized) {\r\n                const textBuffer = buffer.getBuffer();\r\n                if (textBuffer.hasOwnProperty(Constants.INITIALIZE)) {\r\n                    textBuffer.initialize(mimeType, streamInfo, mediaInfoArr, fragmentModel);\r\n                }\r\n                initialized = true;\r\n            }\r\n            return buffer;\r\n        } catch (e) {\r\n            if (mediaInfo && ((mediaInfo.isText) || (mediaInfo.codec.indexOf('codecs=\"stpp') !== -1) || (mediaInfo.codec.indexOf('codecs=\"wvtt') !== -1))) {\r\n                try {\r\n                    buffer = textController.getTextSourceBuffer();\r\n                } catch (e) {\r\n                    errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type + ' : ' + e.message));\r\n                }\r\n            } else {\r\n                errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));\r\n            }\r\n        }\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getBuffer() {\r\n        return buffer;\r\n    }\r\n\r\n    function setMediaSource(value) {\r\n        mediaSource = value;\r\n    }\r\n\r\n    function getMediaSource() {\r\n        return mediaSource;\r\n    }\r\n\r\n    function getIsPruningInProgress() {\r\n        return false;\r\n    }\r\n\r\n    function dischargePreBuffer() {\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        return 0;\r\n    }\r\n\r\n    function getIsBufferingCompleted() {\r\n        return isBufferingCompleted;\r\n    }\r\n\r\n    function reset(errored) {\r\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n        eventBus.off(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\r\n\r\n        if (!errored && buffer) {\r\n            buffer.abort();\r\n            buffer.reset();\r\n            buffer = null;\r\n        }\r\n    }\r\n\r\n    function onDataUpdateCompleted(e) {\r\n        if (initCache.extract(streamInfo.id, e.currentRepresentation.id) !== null) {\r\n            return;\r\n        }\r\n\r\n        // Representation has changed, clear buffer\r\n        isBufferingCompleted = false;\r\n\r\n        // // Text data file is contained in initialization segment\r\n        eventBus.trigger(Events.INIT_FRAGMENT_NEEDED, {\r\n            representationId: e.currentRepresentation.id\r\n        }, streamInfo.id, type);\r\n    }\r\n\r\n    function appendInitSegment(representationId) {\r\n        // If text data file already in cache then no need to append it again\r\n        return initCache.extract(streamInfo.id, representationId) !== null;\r\n    }\r\n\r\n    function onInitFragmentLoaded(e) {\r\n        if (!e.chunk.bytes) return;\r\n\r\n        initCache.save(e.chunk);\r\n        buffer.append(e.chunk);\r\n\r\n        isBufferingCompleted = true;\r\n\r\n        eventBus.trigger(Events.STREAM_COMPLETED, {\r\n            request: e.request\r\n        });\r\n    }\r\n\r\n    function getRangeAt() {\r\n        return null;\r\n    }\r\n\r\n    function updateTimestampOffset(MSETimeOffset) {\r\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\r\n            buffer.timestampOffset = MSETimeOffset;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getBufferControllerType: getBufferControllerType,\r\n        initialize: initialize,\r\n        createBuffer: createBuffer,\r\n        getType: getType,\r\n        getBuffer: getBuffer,\r\n        getBufferLevel: getBufferLevel,\r\n        setMediaSource: setMediaSource,\r\n        getMediaSource: getMediaSource,\r\n        getIsBufferingCompleted: getIsBufferingCompleted,\r\n        getIsPruningInProgress: getIsPruningInProgress,\r\n        dischargePreBuffer: dischargePreBuffer,\r\n        appendInitSegment: appendInitSegment,\r\n        getRangeAt: getRangeAt,\r\n        reset: reset,\r\n        updateTimestampOffset: updateTimestampOffset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nNotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;\r\nexport default FactoryMaker.getClassFactory(NotFragmentedTextBufferController);\r\n"]}