{"version":3,"sources":["../../../../../src/streaming/controllers/AbrController.js"],"names":["DEFAULT_VIDEO_BITRATE","DEFAULT_AUDIO_BITRATE","QUALITY_DEFAULT","AbrController","context","debug","getInstance","eventBus","instance","logger","abrRulesCollection","streamController","topQualities","qualityDict","streamProcessorDict","abandonmentStateDict","abandonmentTimeout","windowResizeEventCalled","elementWidth","elementHeight","adapter","videoModel","mediaPlayerModel","domStorage","playbackIndex","switchHistoryDict","droppedFramesHistory","throughputHistory","isUsingBufferOccupancyABRDict","dashMetrics","settings","setup","getLogger","resetInitialSettings","registerStreamType","type","streamProcessor","create","state","MetricsConstants","ALLOW_LOAD","on","Events","LOADING_PROGRESS","onFragmentLoadProgress","Constants","VIDEO","QUALITY_CHANGE_RENDERED","onQualityChangeRendered","setElementSize","METRIC_ADDED","onMetricAdded","PERIOD_SWITCH_COMPLETED","createAbrRulesCollection","unRegisterStreamType","initialize","undefined","clearTimeout","reset","off","setConfig","config","checkConfig","hasOwnProperty","Error","MISSING_CONFIG_ERROR","e","mediaType","oldQuality","push","getPlaybackQuality","metric","HTTP_REQUEST","value","HTTPRequest","MEDIA_SEGMENT_TYPE","AUDIO","get","streaming","abr","useDeadTimeLatency","BUFFER_LEVEL","updateIsUsingBufferOccupancyABR","level","getTopQualityIndexFor","id","idx","checkMaxBitrate","checkMaxRepresentationRatio","checkPortalSize","getTopBitrateInfoFor","streamInfo","getStreamInfo","bitrates","getBitrateList","getMediaInfo","getInitialBitrateFor","TEXT","FRAGMENTED_TEXT","NaN","savedBitrate","getSavedBitrateSettings","configBitrate","initialBitrate","configRatio","initialRepresentationRatio","representation","getAdaptationForType","Representation","Array","isArray","repIdx","Math","max","round","length","bandwidth","isNaN","getMaxAllowedBitrateFor","maxBitrate","getMinAllowedBitrateFor","minBitrate","getMaxAllowedIndexFor","getQualityForBitrate","getMinAllowedIndexFor","mediaInfo","bitrateList","minIdx","bitrate","checkPlaybackQuality","streamId","getQualityFor","rulesContext","abrController","currentValue","switchHistory","useBufferOccupancyABR","playbackQuality","autoSwitchBitrate","topQualityIdx","switchRequest","getMaxQuality","newQuality","quality","SwitchRequest","NO_CHANGE","oldValue","newValue","changeQuality","reason","logLevel","Debug","LOG_LEVEL_DEBUG","bufferLevel","getCurrentBufferLevel","setPlaybackQuality","info","JSON","stringify","setQualityFor","trigger","QUALITY_CHANGE_REQUESTED","getAverageThroughput","setSavedBitrateSettings","setAbandonmentStateFor","getAbandonmentStateFor","latency","voRepresentation","getRepresentationInfo","fragmentDuration","deadTimeRatio","i","bitrateInfo","infoList","ln","BitrateInfo","qualityIndex","width","height","scanType","strategy","ABRStrategy","ABR_STRATEGY_BOLA","ABR_STRATEGY_THROUGHPUT","stableBufferTime","getStableBufferTime","switchOnThreshold","switchOffThreshold","useBufferABR","newUseBufferABR","toFixed","getThroughputHistory","updateTopQualityIndex","representationCount","setTopQualityIndex","isPlayingAtTopQuality","audioQuality","videoQuality","isAtTop","newIdx","maxIdx","min","maxRepresentationRatio","setWindowResizeEventCalled","hasPixelRatio","usePixelRatioInLimitBitrateByPortal","window","pixelRatio","devicePixelRatio","getClientWidth","getClientHeight","limitBitrateByPortal","request","currentRequest","shouldAbandonFragment","fragmentModel","getFragmentModel","getRequests","FragmentModel","FRAGMENT_MODEL_LOADING","index","abortRequests","ABANDON_LOAD","confidence","getActiveStreamInfo","setTimeout","abandonLoadTimeout","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"AbrController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport ABRRulesCollection from '../rules/abr/ABRRulesCollection';\r\nimport Constants from '../constants/Constants';\r\nimport MetricsConstants from '../constants/MetricsConstants';\r\nimport BitrateInfo from '../vo/BitrateInfo';\r\nimport FragmentModel from '../models/FragmentModel';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport RulesContext from '../rules/RulesContext';\r\nimport SwitchRequest from '../rules/SwitchRequest';\r\nimport SwitchRequestHistory from '../rules/SwitchRequestHistory';\r\nimport DroppedFramesHistory from '../rules/DroppedFramesHistory';\r\nimport ThroughputHistory from '../rules/ThroughputHistory';\r\nimport Debug from '../../core/Debug';\r\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\r\nimport { checkInteger } from '../utils/SupervisorTools';\r\n\r\nconst DEFAULT_VIDEO_BITRATE = 1000;\r\nconst DEFAULT_AUDIO_BITRATE = 100;\r\nconst QUALITY_DEFAULT = 0;\r\n\r\nfunction AbrController() {\r\n\r\n    const context = this.context;\r\n    const debug = Debug(context).getInstance();\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        abrRulesCollection,\r\n        streamController,\r\n        topQualities,\r\n        qualityDict,\r\n        streamProcessorDict,\r\n        abandonmentStateDict,\r\n        abandonmentTimeout,\r\n        windowResizeEventCalled,\r\n        elementWidth,\r\n        elementHeight,\r\n        adapter,\r\n        videoModel,\r\n        mediaPlayerModel,\r\n        domStorage,\r\n        playbackIndex,\r\n        switchHistoryDict,\r\n        droppedFramesHistory,\r\n        throughputHistory,\r\n        isUsingBufferOccupancyABRDict,\r\n        dashMetrics,\r\n        settings;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function registerStreamType(type, streamProcessor) {\r\n        switchHistoryDict[type] = switchHistoryDict[type] || SwitchRequestHistory(context).create();\r\n        streamProcessorDict[type] = streamProcessor;\r\n        abandonmentStateDict[type] = abandonmentStateDict[type] || {};\r\n        abandonmentStateDict[type].state = MetricsConstants.ALLOW_LOAD;\r\n        isUsingBufferOccupancyABRDict[type] = false;\r\n        eventBus.on(Events.LOADING_PROGRESS, onFragmentLoadProgress, instance);\r\n        if (type == Constants.VIDEO) {\r\n            eventBus.on(Events.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, instance);\r\n            droppedFramesHistory = droppedFramesHistory || DroppedFramesHistory(context).create();\r\n            setElementSize();\r\n        }\r\n        eventBus.on(Events.METRIC_ADDED, onMetricAdded, instance);\r\n        eventBus.on(Events.PERIOD_SWITCH_COMPLETED, createAbrRulesCollection, instance);\r\n\r\n        throughputHistory = throughputHistory || ThroughputHistory(context).create({\r\n            settings: settings\r\n        });\r\n    }\r\n\r\n    function unRegisterStreamType(type) {\r\n        delete streamProcessorDict[type];\r\n    }\r\n\r\n    function createAbrRulesCollection() {\r\n        abrRulesCollection = ABRRulesCollection(context).create({\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            settings: settings\r\n        });\r\n\r\n        abrRulesCollection.initialize();\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        topQualities = {};\r\n        qualityDict = {};\r\n        abandonmentStateDict = {};\r\n        streamProcessorDict = {};\r\n        switchHistoryDict = {};\r\n        isUsingBufferOccupancyABRDict = {};\r\n        if (windowResizeEventCalled === undefined) {\r\n            windowResizeEventCalled = false;\r\n        }\r\n        playbackIndex = undefined;\r\n        droppedFramesHistory = undefined;\r\n        throughputHistory = undefined;\r\n        clearTimeout(abandonmentTimeout);\r\n        abandonmentTimeout = null;\r\n    }\r\n\r\n    function reset() {\r\n\r\n        resetInitialSettings();\r\n\r\n        eventBus.off(Events.LOADING_PROGRESS, onFragmentLoadProgress, instance);\r\n        eventBus.off(Events.QUALITY_CHANGE_RENDERED, onQualityChangeRendered, instance);\r\n        eventBus.off(Events.METRIC_ADDED, onMetricAdded, instance);\r\n        eventBus.off(Events.PERIOD_SWITCH_COMPLETED, createAbrRulesCollection, instance);\r\n\r\n        if (abrRulesCollection) {\r\n            abrRulesCollection.reset();\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.domStorage) {\r\n            domStorage = config.domStorage;\r\n        }\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!domStorage || !domStorage.hasOwnProperty('getSavedBitrateSettings')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function onQualityChangeRendered(e) {\r\n        if (e.mediaType === Constants.VIDEO) {\r\n            playbackIndex = e.oldQuality;\r\n            droppedFramesHistory.push(playbackIndex, videoModel.getPlaybackQuality());\r\n        }\r\n    }\r\n\r\n    function onMetricAdded(e) {\r\n        if (e.metric === MetricsConstants.HTTP_REQUEST && e.value && e.value.type === HTTPRequest.MEDIA_SEGMENT_TYPE && (e.mediaType === Constants.AUDIO || e.mediaType === Constants.VIDEO)) {\r\n            throughputHistory.push(e.mediaType, e.value, settings.get().streaming.abr.useDeadTimeLatency);\r\n        }\r\n\r\n        if (e.metric === MetricsConstants.BUFFER_LEVEL && (e.mediaType === Constants.AUDIO || e.mediaType === Constants.VIDEO)) {\r\n            updateIsUsingBufferOccupancyABR(e.mediaType, 0.001 * e.value.level);\r\n        }\r\n    }\r\n\r\n    function getTopQualityIndexFor(type, id) {\r\n        let idx;\r\n        topQualities[id] = topQualities[id] || {};\r\n\r\n        if (!topQualities[id].hasOwnProperty(type)) {\r\n            topQualities[id][type] = 0;\r\n        }\r\n\r\n        idx = checkMaxBitrate(topQualities[id][type], type);\r\n        idx = checkMaxRepresentationRatio(idx, type, topQualities[id][type]);\r\n        idx = checkPortalSize(idx, type);\r\n        return idx;\r\n    }\r\n\r\n    /**\r\n     * Gets top BitrateInfo for the player\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @returns {BitrateInfo | null}\r\n     */\r\n    function getTopBitrateInfoFor(type) {\r\n        if (type  && streamProcessorDict && streamProcessorDict[type]) {\r\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\r\n            if (streamInfo && streamInfo.id) {\r\n                const idx = getTopQualityIndexFor(type, streamInfo.id);\r\n                const bitrates = getBitrateList(streamProcessorDict[type].getMediaInfo());\r\n                return bitrates[idx] ? bitrates[idx] : null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {number} A value of the initial bitrate, kbps\r\n     * @memberof AbrController#\r\n     */\r\n    function getInitialBitrateFor(type) {\r\n        checkConfig();\r\n        if (type === Constants.TEXT || type === Constants.FRAGMENTED_TEXT) {\r\n            return NaN;\r\n        }\r\n        const savedBitrate = domStorage.getSavedBitrateSettings(type);\r\n        let configBitrate = settings.get().streaming.abr.initialBitrate[type];\r\n        let configRatio = settings.get().streaming.abr.initialRepresentationRatio[type];\r\n\r\n        if (configBitrate === -1) {\r\n            if (configRatio > -1) {\r\n                const representation = adapter.getAdaptationForType(0, type).Representation;\r\n                if (Array.isArray(representation)) {\r\n                    const repIdx = Math.max(Math.round(representation.length * configRatio) - 1, 0);\r\n                    configBitrate = representation[repIdx].bandwidth;\r\n                } else {\r\n                    configBitrate = 0;\r\n                }\r\n            } else if (!isNaN(savedBitrate)) {\r\n                configBitrate = savedBitrate;\r\n            } else {\r\n                configBitrate = (type === Constants.VIDEO) ? DEFAULT_VIDEO_BITRATE : DEFAULT_AUDIO_BITRATE;\r\n            }\r\n        }\r\n\r\n        return configBitrate;\r\n    }\r\n\r\n    function getMaxAllowedBitrateFor(type) {\r\n        return settings.get().streaming.abr.maxBitrate[type];\r\n    }\r\n\r\n    function getMinAllowedBitrateFor(type) {\r\n        return settings.get().streaming.abr.minBitrate[type];\r\n    }\r\n\r\n    function getMaxAllowedIndexFor(type) {\r\n        const maxBitrate = getMaxAllowedBitrateFor(type);\r\n        if (maxBitrate > -1) {\r\n            return getQualityForBitrate(streamProcessorDict[type].getMediaInfo(), maxBitrate);\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    function getMinAllowedIndexFor(type) {\r\n        const minBitrate = getMinAllowedBitrateFor(type);\r\n\r\n        if (minBitrate > -1) {\r\n            const mediaInfo = streamProcessorDict[type].getMediaInfo();\r\n            const bitrateList = getBitrateList(mediaInfo);\r\n            // This returns the quality index <= for the given bitrate\r\n            let minIdx = getQualityForBitrate(mediaInfo, minBitrate);\r\n            if (bitrateList[minIdx] && minIdx < bitrateList.length - 1 && bitrateList[minIdx].bitrate < minBitrate * 1000) {\r\n                minIdx++; // Go to the next bitrate\r\n            }\r\n            return minIdx;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    function checkPlaybackQuality(type) {\r\n        if (type  && streamProcessorDict && streamProcessorDict[type]) {\r\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\r\n            const streamId = streamInfo ? streamInfo.id : null;\r\n            const oldQuality = getQualityFor(type);\r\n            const rulesContext = RulesContext(context).create({\r\n                abrController: instance,\r\n                streamProcessor: streamProcessorDict[type],\r\n                currentValue: oldQuality,\r\n                switchHistory: switchHistoryDict[type],\r\n                droppedFramesHistory: droppedFramesHistory,\r\n                useBufferOccupancyABR: useBufferOccupancyABR(type)\r\n            });\r\n\r\n            if (droppedFramesHistory) {\r\n                const playbackQuality = videoModel.getPlaybackQuality();\r\n                if (playbackQuality) {\r\n                    droppedFramesHistory.push(playbackIndex, playbackQuality);\r\n                }\r\n            }\r\n            if (!!settings.get().streaming.abr.autoSwitchBitrate[type]) {\r\n                const minIdx = getMinAllowedIndexFor(type);\r\n                const topQualityIdx = getTopQualityIndexFor(type, streamId);\r\n                const switchRequest = abrRulesCollection.getMaxQuality(rulesContext);\r\n                let newQuality = switchRequest.quality;\r\n                if (minIdx !== undefined && ((newQuality > SwitchRequest.NO_CHANGE) ? newQuality : oldQuality) < minIdx) {\r\n                    newQuality = minIdx;\r\n                }\r\n                if (newQuality > topQualityIdx) {\r\n                    newQuality = topQualityIdx;\r\n                }\r\n\r\n                switchHistoryDict[type].push({oldValue: oldQuality, newValue: newQuality});\r\n\r\n                if (newQuality > SwitchRequest.NO_CHANGE && newQuality != oldQuality) {\r\n                    if (abandonmentStateDict[type].state === MetricsConstants.ALLOW_LOAD || newQuality > oldQuality) {\r\n                        changeQuality(type, oldQuality, newQuality, topQualityIdx, switchRequest.reason);\r\n                    }\r\n                } else if (settings.get().debug.logLevel === Debug.LOG_LEVEL_DEBUG) {\r\n                    const bufferLevel = dashMetrics.getCurrentBufferLevel(type);\r\n                    logger.debug('[' + type + '] stay on ' + oldQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ')');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setPlaybackQuality(type, streamInfo, newQuality, reason) {\r\n        const id = streamInfo.id;\r\n        const oldQuality = getQualityFor(type);\r\n\r\n        checkInteger(newQuality);\r\n\r\n        const topQualityIdx = getTopQualityIndexFor(type, id);\r\n        if (newQuality !== oldQuality && newQuality >= 0 && newQuality <= topQualityIdx) {\r\n            changeQuality(type, oldQuality, newQuality, topQualityIdx, reason);\r\n        }\r\n    }\r\n\r\n    function changeQuality(type, oldQuality, newQuality, topQualityIdx, reason) {\r\n        if (type  && streamProcessorDict[type]) {\r\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\r\n            const id = streamInfo ? streamInfo.id : null;\r\n            if (settings.get().debug.logLevel === Debug.LOG_LEVEL_DEBUG) {\r\n                const bufferLevel = dashMetrics.getCurrentBufferLevel(type);\r\n                logger.info('[' + type + '] switch from ' + oldQuality + ' to ' + newQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ') ' + (reason ? JSON.stringify(reason) : '.'));\r\n            }\r\n            setQualityFor(type, id, newQuality);\r\n            eventBus.trigger(Events.QUALITY_CHANGE_REQUESTED, {\r\n                oldQuality: oldQuality,\r\n                newQuality: newQuality,\r\n                reason: reason}, streamInfo.id, type);\r\n            const bitrate = throughputHistory.getAverageThroughput(type);\r\n            if (!isNaN(bitrate)) {\r\n                domStorage.setSavedBitrateSettings(type, bitrate);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setAbandonmentStateFor(type, state) {\r\n        abandonmentStateDict[type].state = state;\r\n    }\r\n\r\n    function getAbandonmentStateFor(type) {\r\n        return abandonmentStateDict[type] ? abandonmentStateDict[type].state : null;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} mediaInfo\r\n     * @param {number} bitrate A bitrate value, kbps\r\n     * @param {number} latency Expected latency of connection, ms\r\n     * @returns {number} A quality index <= for the given bitrate\r\n     * @memberof AbrController#\r\n     */\r\n    function getQualityForBitrate(mediaInfo, bitrate, latency) {\r\n        const voRepresentation = mediaInfo && mediaInfo.type ? streamProcessorDict[mediaInfo.type].getRepresentationInfo() : null;\r\n\r\n        if (settings.get().streaming.abr.useDeadTimeLatency && latency && voRepresentation && voRepresentation.fragmentDuration) {\r\n            latency = latency / 1000;\r\n            const fragmentDuration = voRepresentation.fragmentDuration;\r\n            if (latency > fragmentDuration) {\r\n                return 0;\r\n            } else {\r\n                const deadTimeRatio = latency / fragmentDuration;\r\n                bitrate = bitrate * (1 - deadTimeRatio);\r\n            }\r\n        }\r\n\r\n        const bitrateList = getBitrateList(mediaInfo);\r\n\r\n        for (let i = bitrateList.length - 1; i >= 0; i--) {\r\n            const bitrateInfo = bitrateList[i];\r\n            if (bitrate * 1000 >= bitrateInfo.bitrate) {\r\n                return i;\r\n            }\r\n        }\r\n        return QUALITY_DEFAULT;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} mediaInfo\r\n     * @returns {Array|null} A list of {@link BitrateInfo} objects\r\n     * @memberof AbrController#\r\n     */\r\n    function getBitrateList(mediaInfo) {\r\n        const infoList = [];\r\n        if (!mediaInfo || !mediaInfo.bitrateList) return infoList;\r\n\r\n        const bitrateList = mediaInfo.bitrateList;\r\n        const type = mediaInfo.type;\r\n\r\n        let bitrateInfo;\r\n\r\n        for (let i = 0, ln = bitrateList.length; i < ln; i++) {\r\n            bitrateInfo = new BitrateInfo();\r\n            bitrateInfo.mediaType = type;\r\n            bitrateInfo.qualityIndex = i;\r\n            bitrateInfo.bitrate = bitrateList[i].bandwidth;\r\n            bitrateInfo.width = bitrateList[i].width;\r\n            bitrateInfo.height = bitrateList[i].height;\r\n            bitrateInfo.scanType = bitrateList[i].scanType;\r\n            infoList.push(bitrateInfo);\r\n        }\r\n\r\n        return infoList;\r\n    }\r\n\r\n    function updateIsUsingBufferOccupancyABR(mediaType, bufferLevel) {\r\n        const strategy = settings.get().streaming.abr.ABRStrategy;\r\n\r\n        if (strategy === Constants.ABR_STRATEGY_BOLA) {\r\n            isUsingBufferOccupancyABRDict[mediaType] = true;\r\n            return;\r\n        } else if (strategy === Constants.ABR_STRATEGY_THROUGHPUT) {\r\n            isUsingBufferOccupancyABRDict[mediaType] = false;\r\n            return;\r\n        }\r\n        // else ABR_STRATEGY_DYNAMIC\r\n\r\n        const stableBufferTime = mediaPlayerModel.getStableBufferTime();\r\n        const switchOnThreshold = stableBufferTime;\r\n        const switchOffThreshold = 0.5 * stableBufferTime;\r\n\r\n        const useBufferABR = isUsingBufferOccupancyABRDict[mediaType];\r\n        const newUseBufferABR = bufferLevel > (useBufferABR ? switchOffThreshold : switchOnThreshold); // use hysteresis to avoid oscillating rules\r\n        isUsingBufferOccupancyABRDict[mediaType] = newUseBufferABR;\r\n\r\n        if (newUseBufferABR !== useBufferABR) {\r\n            if (newUseBufferABR) {\r\n                logger.info('[' + mediaType + '] switching from throughput to buffer occupancy ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');\r\n            } else {\r\n                logger.info('[' + mediaType + '] switching from buffer occupancy to throughput ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');\r\n            }\r\n        }\r\n    }\r\n\r\n    function useBufferOccupancyABR(mediaType) {\r\n        return isUsingBufferOccupancyABRDict[mediaType];\r\n    }\r\n\r\n    function getThroughputHistory() {\r\n        return throughputHistory;\r\n    }\r\n\r\n    function updateTopQualityIndex(mediaInfo) {\r\n        if (mediaInfo) {\r\n            const type = mediaInfo.type;\r\n            const streamId = mediaInfo.streamInfo.id;\r\n            const max = mediaInfo.representationCount - 1;\r\n\r\n            setTopQualityIndex(type, streamId, max);\r\n\r\n            return max;\r\n        }\r\n    }\r\n\r\n    function isPlayingAtTopQuality(streamInfo) {\r\n        const streamId = streamInfo ? streamInfo.id : null;\r\n        const audioQuality = getQualityFor(Constants.AUDIO);\r\n        const videoQuality = getQualityFor(Constants.VIDEO);\r\n\r\n        const isAtTop = (audioQuality === getTopQualityIndexFor(Constants.AUDIO, streamId)) &&\r\n            (videoQuality === getTopQualityIndexFor(Constants.VIDEO, streamId));\r\n\r\n        return isAtTop;\r\n    }\r\n\r\n    function getQualityFor(type) {\r\n        if (type && streamProcessorDict[type]) {\r\n            const streamInfo = streamProcessorDict[type].getStreamInfo();\r\n            const id = streamInfo ? streamInfo.id : null;\r\n            let quality;\r\n\r\n            if (id) {\r\n                qualityDict[id] = qualityDict[id] || {};\r\n\r\n                if (!qualityDict[id].hasOwnProperty(type)) {\r\n                    qualityDict[id][type] = QUALITY_DEFAULT;\r\n                }\r\n\r\n                quality = qualityDict[id][type];\r\n                return quality;\r\n            }\r\n        }\r\n        return QUALITY_DEFAULT;\r\n    }\r\n\r\n    function setQualityFor(type, id, value) {\r\n        qualityDict[id] = qualityDict[id] || {};\r\n        qualityDict[id][type] = value;\r\n    }\r\n\r\n    function setTopQualityIndex(type, id, value) {\r\n        topQualities[id] = topQualities[id] || {};\r\n        topQualities[id][type] = value;\r\n    }\r\n\r\n    function checkMaxBitrate(idx, type) {\r\n        let newIdx = idx;\r\n\r\n        if (!streamProcessorDict[type]) {\r\n            return newIdx;\r\n        }\r\n\r\n        const minIdx = getMinAllowedIndexFor(type);\r\n        if (minIdx !== undefined) {\r\n            newIdx = Math.max (idx , minIdx);\r\n        }\r\n\r\n        const maxIdx = getMaxAllowedIndexFor(type);\r\n        if (maxIdx !== undefined) {\r\n            newIdx = Math.min (newIdx , maxIdx);\r\n        }\r\n\r\n        return newIdx;\r\n    }\r\n\r\n    function checkMaxRepresentationRatio(idx, type, maxIdx) {\r\n        const maxRepresentationRatio = settings.get().streaming.abr.maxRepresentationRatio[type];\r\n        if (isNaN(maxRepresentationRatio) || maxRepresentationRatio >= 1 || maxRepresentationRatio < 0) {\r\n            return idx;\r\n        }\r\n        return Math.min(idx , Math.round(maxIdx * maxRepresentationRatio) );\r\n    }\r\n\r\n    function setWindowResizeEventCalled(value) {\r\n        windowResizeEventCalled = value;\r\n    }\r\n\r\n    function setElementSize() {\r\n        if (videoModel) {\r\n            const hasPixelRatio = settings.get().streaming.abr.usePixelRatioInLimitBitrateByPortal && window.hasOwnProperty('devicePixelRatio');\r\n            const pixelRatio = hasPixelRatio ? window.devicePixelRatio : 1;\r\n            elementWidth = videoModel.getClientWidth() * pixelRatio;\r\n            elementHeight = videoModel.getClientHeight() * pixelRatio;\r\n        }\r\n    }\r\n\r\n    function checkPortalSize(idx, type) {\r\n        if (type !== Constants.VIDEO || !settings.get().streaming.abr.limitBitrateByPortal || !streamProcessorDict[type]) {\r\n            return idx;\r\n        }\r\n\r\n        if (!windowResizeEventCalled) {\r\n            setElementSize();\r\n        }\r\n\r\n        const representation = adapter.getAdaptationForType(0, type).Representation;\r\n        let newIdx = idx;\r\n\r\n        if (elementWidth > 0 && elementHeight > 0) {\r\n            while (\r\n                newIdx > 0 &&\r\n                representation[newIdx] &&\r\n                elementWidth < representation[newIdx].width &&\r\n                elementWidth - representation[newIdx - 1].width < representation[newIdx].width - elementWidth) {\r\n                newIdx = newIdx - 1;\r\n            }\r\n\r\n            // Make sure that in case of multiple representation elements have same\r\n            // resolution, every such element is included\r\n            while (newIdx < representation.length - 1 && representation[newIdx].width === representation[newIdx + 1].width) {\r\n                newIdx = newIdx + 1;\r\n            }\r\n        }\r\n\r\n        return newIdx;\r\n    }\r\n\r\n    function onFragmentLoadProgress(e) {\r\n        const type = e.request.mediaType;\r\n        if (!!settings.get().streaming.abr.autoSwitchBitrate[type]) {\r\n            const streamProcessor = streamProcessorDict[type];\r\n            if (!streamProcessor) return; // There may be a fragment load in progress when we switch periods and recreated some controllers.\r\n\r\n            const rulesContext = RulesContext(context).create({\r\n                abrController: instance,\r\n                streamProcessor: streamProcessor,\r\n                currentRequest: e.request,\r\n                useBufferOccupancyABR: useBufferOccupancyABR(type)\r\n            });\r\n            const switchRequest = abrRulesCollection.shouldAbandonFragment(rulesContext);\r\n\r\n            if (switchRequest.quality > SwitchRequest.NO_CHANGE) {\r\n                const fragmentModel = streamProcessor.getFragmentModel();\r\n                const request = fragmentModel.getRequests({state: FragmentModel.FRAGMENT_MODEL_LOADING, index: e.request.index})[0];\r\n                if (request) {\r\n                    //TODO Check if we should abort or if better to finish download. check bytesLoaded/Total\r\n                    fragmentModel.abortRequests();\r\n                    setAbandonmentStateFor(type, MetricsConstants.ABANDON_LOAD);\r\n                    switchHistoryDict[type].reset();\r\n                    switchHistoryDict[type].push({oldValue: getQualityFor(type), newValue: switchRequest.quality, confidence: 1, reason: switchRequest.reason});\r\n                    setPlaybackQuality(type, streamController.getActiveStreamInfo(), switchRequest.quality, switchRequest.reason);\r\n\r\n                    clearTimeout(abandonmentTimeout);\r\n                    abandonmentTimeout = setTimeout(\r\n                        () => {setAbandonmentStateFor(type, MetricsConstants.ALLOW_LOAD); abandonmentTimeout = null;},\r\n                        settings.get().streaming.abandonLoadTimeout\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        isPlayingAtTopQuality: isPlayingAtTopQuality,\r\n        updateTopQualityIndex: updateTopQualityIndex,\r\n        getThroughputHistory: getThroughputHistory,\r\n        getBitrateList: getBitrateList,\r\n        getQualityForBitrate: getQualityForBitrate,\r\n        getTopBitrateInfoFor: getTopBitrateInfoFor,\r\n        getMaxAllowedIndexFor: getMaxAllowedIndexFor,\r\n        getMinAllowedIndexFor: getMinAllowedIndexFor,\r\n        getInitialBitrateFor: getInitialBitrateFor,\r\n        getQualityFor: getQualityFor,\r\n        getAbandonmentStateFor: getAbandonmentStateFor,\r\n        setPlaybackQuality: setPlaybackQuality,\r\n        checkPlaybackQuality: checkPlaybackQuality,\r\n        getTopQualityIndexFor: getTopQualityIndexFor,\r\n        setElementSize: setElementSize,\r\n        setWindowResizeEventCalled: setWindowResizeEventCalled,\r\n        createAbrRulesCollection: createAbrRulesCollection,\r\n        registerStreamType: registerStreamType,\r\n        unRegisterStreamType: unRegisterStreamType,\r\n        setConfig: setConfig,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nAbrController.__dashjs_factory_name = 'AbrController';\r\nconst factory = FactoryMaker.getSingletonFactory(AbrController);\r\nfactory.QUALITY_DEFAULT = QUALITY_DEFAULT;\r\nFactoryMaker.updateSingletonFactory(AbrController.__dashjs_factory_name, factory);\r\nexport default factory;\r\n"]}