{"version":3,"sources":["../../../../../src/streaming/controllers/EventController.js"],"names":["EventController","MPD_RELOAD_SCHEME","MPD_RELOAD_VALUE","MPD_CALLBACK_SCHEME","MPD_CALLBACK_VALUE","REFRESH_DELAY","REMAINING_EVENTS_THRESHOLD","context","eventBus","getInstance","instance","logger","inlineEvents","inbandEvents","activeEvents","eventInterval","lastEventTimerCall","manifestUpdater","playbackController","eventHandlingInProgress","isStarted","setup","getLogger","_resetInitialSettings","checkConfig","Error","Date","now","_stop","clearInterval","_onStopEventController","e","start","debug","isNaN","setInterval","_onEventTimer","addInlineEvents","values","i","length","event","id","addInbandEvents","eventStream","schemeIdUri","undefined","_handleManifestReloadEvent","value","timescale","validUntil","calculatedPresentationTime","newDuration","NaN","duration","info","trigger","Events","MANIFEST_VALIDITY_CHANGED","newManifestValidAfter","_removeEvents","currentVideoTime","getTime","eventIds","Object","keys","eventId","presentationTimeThreshold","Math","max","_triggerEvents","_triggerRemainingEvents","events","calculatedPresentationTimeInSeconds","_startEvent","_eventHasExpired","_eventIsInvalid","periodEndTime","period","currentTime","periodDuration","periodStart","forEach","abs","presentationTimeDelta","_refreshManifest","_sendCallbackRequest","messageData","refreshManifest","url","loader","create","load","method","request","responseType","setConfig","config","reset","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"EventController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport XHRLoader from '../net/XHRLoader';\r\n\r\nfunction EventController() {\r\n\r\n    const MPD_RELOAD_SCHEME = 'urn:mpeg:dash:event:2012';\r\n    const MPD_RELOAD_VALUE = 1;\r\n\r\n    const MPD_CALLBACK_SCHEME = 'urn:mpeg:dash:event:callback:2015';\r\n    const MPD_CALLBACK_VALUE = 1;\r\n\r\n    const REFRESH_DELAY = 100;\r\n    const REMAINING_EVENTS_THRESHOLD = 300;\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        inlineEvents, // Holds all Inline Events not triggered yet\r\n        inbandEvents, // Holds all Inband Events not triggered yet\r\n        activeEvents, // Holds all Events currently running\r\n        eventInterval, // variable holding the setInterval\r\n        lastEventTimerCall,\r\n        manifestUpdater,\r\n        playbackController,\r\n        eventHandlingInProgress,\r\n        isStarted;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!manifestUpdater || !playbackController) {\r\n            throw new Error('setConfig function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function _resetInitialSettings() {\r\n        isStarted = false;\r\n        inlineEvents = {};\r\n        inbandEvents = {};\r\n        activeEvents = {};\r\n        eventInterval = null;\r\n        eventHandlingInProgress = false;\r\n        lastEventTimerCall = Date.now() / 1000;\r\n    }\r\n\r\n    function _stop() {\r\n        try {\r\n            if (eventInterval !== null && isStarted) {\r\n                clearInterval(eventInterval);\r\n                eventInterval = null;\r\n                isStarted = false;\r\n                _onStopEventController();\r\n            }\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function start() {\r\n        try {\r\n            checkConfig();\r\n            logger.debug('Start Event Controller');\r\n            if (!isStarted && !isNaN(REFRESH_DELAY)) {\r\n                isStarted = true;\r\n                eventInterval = setInterval(_onEventTimer, REFRESH_DELAY);\r\n            }\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted\r\n     * @param {Array.<Object>} values\r\n     */\r\n    function addInlineEvents(values) {\r\n        try {\r\n            checkConfig();\r\n\r\n            if (values) {\r\n                for (let i = 0; i < values.length; i++) {\r\n                    let event = values[i];\r\n                    inlineEvents[event.id] = event;\r\n                    logger.debug('Add inline event with id ' + event.id);\r\n                }\r\n            }\r\n            logger.debug(`Added ${values.length} inline events`);\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * i.e. processing of any one event message box with the same id is sufficient\r\n     * @param {Array.<Object>} values\r\n     */\r\n    function addInbandEvents(values) {\r\n        try {\r\n            checkConfig();\r\n\r\n            for (let i = 0; i < values.length; i++) {\r\n                let event = values[i];\r\n                if (!(event.id in inbandEvents)) {\r\n                    if (event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && inbandEvents[event.id] === undefined) {\r\n                        _handleManifestReloadEvent(event);\r\n                    }\r\n                    inbandEvents[event.id] = event;\r\n                    logger.debug('Add inband event with id ' + event.id);\r\n                } else {\r\n                    logger.debug('Repeated event with id ' + event.id);\r\n                }\r\n            }\r\n            _onEventTimer();\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function _handleManifestReloadEvent(event) {\r\n        try {\r\n            if (event.eventStream.value == MPD_RELOAD_VALUE) {\r\n                const timescale = event.eventStream.timescale || 1;\r\n                const validUntil = event.calculatedPresentationTime / timescale;\r\n                let newDuration;\r\n                if (event.calculatedPresentationTime == 0xFFFFFFFF) {//0xFF... means remaining duration unknown\r\n                    newDuration = NaN;\r\n                } else {\r\n                    newDuration = (event.calculatedPresentationTime + event.duration) / timescale;\r\n                }\r\n                logger.info('Manifest validity changed: Valid until: ' + validUntil + '; remaining duration: ' + newDuration);\r\n                eventBus.trigger(Events.MANIFEST_VALIDITY_CHANGED, {\r\n                    id: event.id,\r\n                    validUntil: validUntil,\r\n                    newDuration: newDuration,\r\n                    newManifestValidAfter: NaN //event.message_data - this is an arraybuffer with a timestring in it, but not used yet\r\n                });\r\n            }\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove expired events from the list\r\n     */\r\n    function _removeEvents() {\r\n        try {\r\n            if (activeEvents) {\r\n                let currentVideoTime = playbackController.getTime();\r\n                let eventIds = Object.keys(activeEvents);\r\n\r\n                for (let i = 0; i < eventIds.length; i++) {\r\n                    let eventId = eventIds[i];\r\n                    let event = activeEvents[eventId];\r\n                    if (event !== null && (event.duration + event.calculatedPresentationTime) / event.eventStream.timescale < currentVideoTime) {\r\n                        logger.debug('Remove Event ' + eventId + ' at time ' + currentVideoTime);\r\n                        event = null;\r\n                        delete activeEvents[eventId];\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate through the eventList and trigger/remove the events\r\n     */\r\n    function _onEventTimer() {\r\n        try {\r\n            if (!eventHandlingInProgress) {\r\n                const currentVideoTime = playbackController.getTime();\r\n                let presentationTimeThreshold = (currentVideoTime - lastEventTimerCall);\r\n\r\n                // For dynamic streams lastEventTimeCall will be large in the first iteration. Avoid firing all events at once.\r\n                presentationTimeThreshold = lastEventTimerCall > 0 ? Math.max(0, presentationTimeThreshold) : 0;\r\n\r\n                _triggerEvents(inbandEvents, presentationTimeThreshold, currentVideoTime);\r\n                _triggerEvents(inlineEvents, presentationTimeThreshold, currentVideoTime);\r\n                _removeEvents();\r\n\r\n                lastEventTimerCall = currentVideoTime;\r\n            }\r\n            eventHandlingInProgress = false;\r\n        } catch (e) {\r\n            eventHandlingInProgress = false;\r\n        }\r\n    }\r\n\r\n    function _onStopEventController() {\r\n        try {\r\n            // EventController might be stopped before the period is over. Before we stop the event controller we check for events that needs to be triggered at the period boundary.\r\n            _triggerRemainingEvents(inbandEvents);\r\n            _triggerRemainingEvents(inlineEvents);\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _triggerEvents(events, presentationTimeThreshold, currentVideoTime) {\r\n        try {\r\n            if (events) {\r\n                let eventIds = Object.keys(events);\r\n\r\n                for (let i = 0; i < eventIds.length; i++) {\r\n                    let eventId = eventIds[i];\r\n                    let event = events[eventId];\r\n\r\n                    if (event !== undefined) {\r\n                        const calculatedPresentationTimeInSeconds = event.calculatedPresentationTime / event.eventStream.timescale;\r\n\r\n                        if (calculatedPresentationTimeInSeconds <= currentVideoTime && calculatedPresentationTimeInSeconds + presentationTimeThreshold >= currentVideoTime) {\r\n                            _startEvent(eventId, event, events);\r\n                        } else if (_eventHasExpired(currentVideoTime, presentationTimeThreshold, calculatedPresentationTimeInSeconds) || _eventIsInvalid(event)) {\r\n                            logger.debug(`Deleting event ${eventId} as it is expired or invalid`);\r\n                            delete events[eventId];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function _eventHasExpired(currentVideoTime, presentationTimeThreshold, calculatedPresentationTimeInSeconds) {\r\n        try {\r\n            return currentVideoTime - presentationTimeThreshold > calculatedPresentationTimeInSeconds;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _eventIsInvalid(event) {\r\n        try {\r\n            const periodEndTime = event.eventStream.period.start + event.eventStream.period.duration;\r\n\r\n            return event.calculatedPresentationTime / 1000 > periodEndTime;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _triggerRemainingEvents(events) {\r\n        try {\r\n            const eventIds = Object.keys(events);\r\n            const currentTime = playbackController.getTime();\r\n\r\n            if (!eventIds || eventIds.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const periodDuration = events[eventIds[0]].eventStream && events[eventIds[0]].eventStream.period && !isNaN(events[eventIds[0]].eventStream.period.duration) ? events[eventIds[0]].eventStream.period.duration : NaN;\r\n            const periodStart = events[eventIds[0]].eventStream && events[eventIds[0]].eventStream.period && !isNaN(events[eventIds[0]].eventStream.period.start) ? events[eventIds[0]].eventStream.period.start : NaN;\r\n\r\n            if (isNaN(periodDuration) || isNaN(periodStart)) {\r\n                return;\r\n            }\r\n\r\n            eventIds.forEach((eventId) => {\r\n                const event = events[eventId];\r\n                const calculatedPresentationTimeInSeconds = event.calculatedPresentationTime / event.eventStream.timescale;\r\n\r\n                if (Math.abs(calculatedPresentationTimeInSeconds - currentTime) < REMAINING_EVENTS_THRESHOLD) {\r\n                    _startEvent(eventId, event, events);\r\n                }\r\n            });\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _startEvent(eventId, event, events) {\r\n        try {\r\n            const currentVideoTime = playbackController.getTime();\r\n\r\n            if (event.duration > 0) {\r\n                activeEvents[eventId] = event;\r\n            }\r\n\r\n            if (event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && event.eventStream.value == MPD_RELOAD_VALUE) {\r\n                if (event.duration !== 0 || event.presentationTimeDelta !== 0) { //If both are set to zero, it indicates the media is over at this point. Don't reload the manifest.\r\n                    logger.debug(`Starting manifest refresh event ${eventId} at ${currentVideoTime}`);\r\n                    _refreshManifest();\r\n                }\r\n            } else if (event.eventStream.schemeIdUri === MPD_CALLBACK_SCHEME && event.eventStream.value == MPD_CALLBACK_VALUE) {\r\n                logger.debug(`Starting callback event ${eventId} at ${currentVideoTime}`);\r\n                _sendCallbackRequest(event.messageData);\r\n            } else {\r\n                logger.debug(`Starting event ${eventId} at ${currentVideoTime}`);\r\n                eventBus.trigger(event.eventStream.schemeIdUri, { event: event });\r\n            }\r\n\r\n            delete events[eventId];\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function _refreshManifest() {\r\n        try {\r\n            checkConfig();\r\n            manifestUpdater.refreshManifest();\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function _sendCallbackRequest(url) {\r\n        try {\r\n            let loader = XHRLoader(context).create({});\r\n            loader.load({\r\n                method: 'get',\r\n                url: url,\r\n                request: {\r\n                    responseType: 'arraybuffer'\r\n                }\r\n            });\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        try {\r\n            if (!config) {\r\n                return;\r\n            }\r\n\r\n            if (config.manifestUpdater) {\r\n                manifestUpdater = config.manifestUpdater;\r\n            }\r\n\r\n            if (config.playbackController) {\r\n                playbackController = config.playbackController;\r\n            }\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        _stop();\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        addInlineEvents,\r\n        addInbandEvents,\r\n        start,\r\n        setConfig,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nEventController.__dashjs_factory_name = 'EventController';\r\nexport default FactoryMaker.getSingletonFactory(EventController);\r\n"]}