{"version":3,"sources":["../../../../../src/streaming/controllers/MediaController.js"],"names":["MediaController","context","eventBus","getInstance","instance","logger","tracks","settings","initialSettings","domStorage","validTrackSwitchModes","Constants","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","validTrackSelectionModes","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_WIDEST_RANGE","setup","getLogger","reset","checkInitialMediaSettingsForType","type","streamInfo","getInitialSettings","tracksForType","getTracksFor","getSavedMediaSettings","setInitialSettings","length","forEach","track","matchSettings","push","setTrack","selectInitialTrack","addTrack","mediaType","isMultiTrackSupportedByType","streamId","id","createTrackInfo","mediaTracks","list","i","len","isTracksEqual","initSettings","getCurrentTrackFor","current","isCurrentTrack","noSettingsSave","FRAGMENTED_TEXT","trigger","Events","CURRENT_TRACK_CHANGED","oldMediaInfo","newMediaInfo","switchMode","getSwitchMode","extractSettings","storeLastSettings","roles","role","accessibility","audioChannelConfiguration","setSavedMediaSettings","value","saveTextSettingsDisabled","setSwitchMode","mode","warn","isModeSupported","indexOf","update","streaming","trackSwitchMode","get","setSelectionModeForInitialTrack","selectionModeForInitialTrack","getSelectionModeForInitialTrack","AUDIO","VIDEO","TEXT","IMAGE","t1","t2","sameId","sameViewpoint","viewpoint","sameLang","lang","sameRoles","toString","sameAccessibility","sameAudioChannelConfiguration","setConfig","config","resetInitialSettings","mediaInfo","notEmpty","matchLang","match","matchViewPoint","matchRole","filter","item","matchAccessibility","matchAudioChannelConfiguration","audio","video","fragmentedText","tmpArr","getTracksWithHighestBitrate","trackArr","max","result","tmp","Math","apply","bitrateList","map","obj","bandwidth","getTracksWithWidestRange","representationCount","text","image","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"MediaController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport Events from '../../core/events/Events';\r\nimport EventBus from '../../core/EventBus';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction MediaController() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        tracks,\r\n        settings,\r\n        initialSettings,\r\n        domStorage;\r\n\r\n    const validTrackSwitchModes = [\r\n        Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE,\r\n        Constants.TRACK_SWITCH_MODE_NEVER_REPLACE\r\n    ];\r\n\r\n    const validTrackSelectionModes = [\r\n        Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE,\r\n        Constants.TRACK_SELECTION_MODE_WIDEST_RANGE\r\n    ];\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        reset();\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @memberof MediaController#\r\n     */\r\n    function checkInitialMediaSettingsForType(type, streamInfo) {\r\n        let settings = getInitialSettings(type);\r\n        const tracksForType = getTracksFor(type, streamInfo);\r\n        const tracks = [];\r\n\r\n        if (!settings) {\r\n            settings = domStorage.getSavedMediaSettings(type);\r\n            setInitialSettings(type, settings);\r\n        }\r\n\r\n        if (!tracksForType || (tracksForType.length === 0)) return;\r\n\r\n        if (settings) {\r\n            tracksForType.forEach(function (track) {\r\n                if (matchSettings(settings, track)) {\r\n                    tracks.push(track);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (tracks.length === 0) {\r\n            setTrack(selectInitialTrack(type, tracksForType), true);\r\n        } else {\r\n            if (tracks.length > 1) {\r\n                setTrack(selectInitialTrack(type, tracks));\r\n            } else {\r\n                setTrack(tracks[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @memberof MediaController#\r\n     */\r\n    function addTrack(track) {\r\n        if (!track) return;\r\n\r\n        const mediaType = track.type;\r\n        if (!isMultiTrackSupportedByType(mediaType)) return;\r\n\r\n        let streamId = track.streamInfo.id;\r\n        if (!tracks[streamId]) {\r\n            tracks[streamId] = createTrackInfo();\r\n        }\r\n\r\n        const mediaTracks = tracks[streamId][mediaType].list;\r\n        for (let i = 0, len = mediaTracks.length; i < len; ++i) {\r\n            //track is already set.\r\n            if (isTracksEqual(mediaTracks[i], track)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        mediaTracks.push(track);\r\n\r\n        let initSettings = getInitialSettings(mediaType);\r\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\r\n            setTrack(track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @returns {Array}\r\n     * @memberof MediaController#\r\n     */\r\n    function getTracksFor(type, streamInfo) {\r\n        if (!type || !streamInfo) return [];\r\n\r\n        const id = streamInfo.id;\r\n\r\n        if (!tracks[id] || !tracks[id][type]) return [];\r\n\r\n        return tracks[id][type].list;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @returns {Object|null}\r\n     * @memberof MediaController#\r\n     */\r\n    function getCurrentTrackFor(type, streamInfo) {\r\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\r\n        return tracks[streamInfo.id][type].current;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isCurrentTrack(track) {\r\n        if (!track) {\r\n            return false;\r\n        }\r\n        const type = track.type;\r\n        const id = track.streamInfo.id;\r\n\r\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @param {boolean} noSettingsSave specify if settings must be not be saved\r\n     * @memberof MediaController#\r\n     */\r\n    function setTrack(track, noSettingsSave) {\r\n        if (!track || !track.streamInfo) return;\r\n\r\n        const type = track.type;\r\n        const streamInfo = track.streamInfo;\r\n        const id = streamInfo.id;\r\n        const current = getCurrentTrackFor(type, streamInfo);\r\n\r\n        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;\r\n\r\n        tracks[id][type].current = track;\r\n\r\n        if (tracks[id][type].current && !(noSettingsSave && type === Constants.FRAGMENTED_TEXT)) {\r\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {\r\n                oldMediaInfo: current,\r\n                newMediaInfo: track,\r\n                switchMode: getSwitchMode(type)\r\n            });\r\n        }\r\n\r\n        if (!noSettingsSave) {\r\n\r\n            let settings = extractSettings(track);\r\n\r\n            if (!settings || !tracks[id][type].storeLastSettings) return;\r\n\r\n            if (settings.roles) {\r\n                settings.role = settings.roles[0];\r\n                delete settings.roles;\r\n            }\r\n\r\n            if (settings.accessibility) {\r\n                settings.accessibility = settings.accessibility[0];\r\n            }\r\n\r\n            if (settings.audioChannelConfiguration) {\r\n                settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\r\n            }\r\n\r\n            domStorage.setSavedMediaSettings(type, settings);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {Object} value\r\n     * @memberof MediaController#\r\n     */\r\n    function setInitialSettings(type, value) {\r\n        if (!type || !value) return;\r\n\r\n        initialSettings[type] = value;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {Object|null}\r\n     * @memberof MediaController#\r\n     */\r\n    function getInitialSettings(type) {\r\n        if (!type) return null;\r\n\r\n        return initialSettings[type];\r\n    }\r\n\r\n    /**\r\n     * @memberof MediaController#\r\n     */\r\n    function saveTextSettingsDisabled() {\r\n        domStorage.setSavedMediaSettings(Constants.FRAGMENTED_TEXT, null);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {string} mode\r\n     * @memberof MediaController#\r\n     * @deprecated Please use updateSettings({streaming: { trackSwitchMode: mode } }) instead\r\n     */\r\n    function setSwitchMode(type, mode) {\r\n        logger.warn('deprecated: Please use updateSettings({streaming: { trackSwitchMode: mode } }) instead');\r\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\r\n\r\n        if (!isModeSupported) {\r\n            logger.warn('Track switch mode is not supported: ' + mode);\r\n            return;\r\n        }\r\n\r\n        let switchMode = {};\r\n        switchMode[type] = mode;\r\n\r\n        settings.update({\r\n            streaming: {\r\n                trackSwitchMode: switchMode\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {string} mode\r\n     * @memberof MediaController#\r\n     */\r\n    function getSwitchMode(type) {\r\n        return settings.get().streaming.trackSwitchMode[type];\r\n    }\r\n\r\n    /**\r\n     * @param {string} mode\r\n     * @memberof MediaController#\r\n     * @deprecated Please use updateSettings({streaming: { selectionModeForInitialTrack: mode } }) instead\r\n     */\r\n    function setSelectionModeForInitialTrack(mode) {\r\n        logger.warn('deprecated: Please use updateSettings({streaming: { selectionModeForInitialTrack: mode } }) instead');\r\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\r\n\r\n        if (!isModeSupported) {\r\n            logger.warn('Track selection mode is not supported: ' + mode);\r\n            return;\r\n        }\r\n\r\n        settings.update({\r\n            streaming: {\r\n                selectionModeForInitialTrack: mode\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {string} mode\r\n     * @memberof MediaController#\r\n     */\r\n    function getSelectionModeForInitialTrack() {\r\n        return settings.get().streaming.selectionModeForInitialTrack;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isMultiTrackSupportedByType(type) {\r\n        return (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.TEXT ||\r\n            type === Constants.FRAGMENTED_TEXT || type === Constants.IMAGE);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} t1 - first track to compare\r\n     * @param {MediaInfo} t2 - second track to compare\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isTracksEqual(t1, t2) {\r\n        if (!t1 && !t2) {\r\n            return true;\r\n        }\r\n\r\n        if (!t1 || !t2) {\r\n            return false;\r\n        }\r\n\r\n        const sameId = t1.id === t2.id;\r\n        const sameViewpoint = t1.viewpoint === t2.viewpoint;\r\n        const sameLang = t1.lang === t2.lang;\r\n        const sameRoles = t1.roles.toString() === t2.roles.toString();\r\n        const sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\r\n        const sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\r\n\r\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.domStorage) {\r\n            domStorage = config.domStorage;\r\n        }\r\n\r\n        if (config.settings) {\r\n            settings = config.settings;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @memberof MediaController#\r\n     */\r\n    function reset() {\r\n        tracks = {};\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function extractSettings(mediaInfo) {\r\n        const settings = {\r\n            lang: mediaInfo.lang,\r\n            viewpoint: mediaInfo.viewpoint,\r\n            roles: mediaInfo.roles,\r\n            accessibility: mediaInfo.accessibility,\r\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\r\n        };\r\n        let notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\r\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\r\n\r\n        return notEmpty ? settings : null;\r\n    }\r\n\r\n    function matchSettings(settings, track) {\r\n        const matchLang = !settings.lang || (track.lang.match(settings.lang));\r\n        const matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\r\n        const matchRole = !settings.role || !!track.roles.filter(function (item) {\r\n            return item === settings.role;\r\n        })[0];\r\n        let matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\r\n            return item === settings.accessibility;\r\n        })[0];\r\n        let matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\r\n            return item === settings.audioChannelConfiguration;\r\n        })[0];\r\n\r\n        return (matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        initialSettings = {\r\n            audio: null,\r\n            video: null,\r\n            fragmentedText: null\r\n        };\r\n    }\r\n\r\n    function selectInitialTrack(type, tracks) {\r\n        if (type === Constants.FRAGMENTED_TEXT) return tracks[0];\r\n\r\n        let mode = getSelectionModeForInitialTrack();\r\n        let tmpArr = [];\r\n\r\n        const getTracksWithHighestBitrate = function (trackArr) {\r\n            let max = 0;\r\n            let result = [];\r\n            let tmp;\r\n\r\n            trackArr.forEach(function (track) {\r\n                tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\r\n\r\n                if (tmp > max) {\r\n                    max = tmp;\r\n                    result = [track];\r\n                } else if (tmp === max) {\r\n                    result.push(track);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        };\r\n        const getTracksWithWidestRange = function (trackArr) {\r\n            let max = 0;\r\n            let result = [];\r\n            let tmp;\r\n\r\n            trackArr.forEach(function (track) {\r\n                tmp = track.representationCount;\r\n\r\n                if (tmp > max) {\r\n                    max = tmp;\r\n                    result = [track];\r\n                } else if (tmp === max) {\r\n                    result.push(track);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        };\r\n\r\n        switch (mode) {\r\n            case Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE:\r\n                tmpArr = getTracksWithHighestBitrate(tracks);\r\n\r\n                if (tmpArr.length > 1) {\r\n                    tmpArr = getTracksWithWidestRange(tmpArr);\r\n                }\r\n                break;\r\n            case Constants.TRACK_SELECTION_MODE_WIDEST_RANGE:\r\n                tmpArr = getTracksWithWidestRange(tracks);\r\n\r\n                if (tmpArr.length > 1) {\r\n                    tmpArr = getTracksWithHighestBitrate(tracks);\r\n                }\r\n                break;\r\n            default:\r\n                logger.warn('Track selection mode is not supported: ' + mode);\r\n                break;\r\n        }\r\n\r\n        return tmpArr[0];\r\n    }\r\n\r\n    function createTrackInfo() {\r\n        return {\r\n            audio: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            video: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            text: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            fragmentedText: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            image: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            }\r\n        };\r\n    }\r\n\r\n    instance = {\r\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\r\n        addTrack: addTrack,\r\n        getTracksFor: getTracksFor,\r\n        getCurrentTrackFor: getCurrentTrackFor,\r\n        isCurrentTrack: isCurrentTrack,\r\n        setTrack: setTrack,\r\n        setInitialSettings: setInitialSettings,\r\n        getInitialSettings: getInitialSettings,\r\n        setSwitchMode: setSwitchMode,\r\n        getSwitchMode: getSwitchMode,\r\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\r\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\r\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\r\n        isTracksEqual: isTracksEqual,\r\n        matchSettings: matchSettings,\r\n        saveTextSettingsDisabled: saveTextSettingsDisabled,\r\n        setConfig: setConfig,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMediaController.__dashjs_factory_name = 'MediaController';\r\nconst factory = FactoryMaker.getSingletonFactory(MediaController);\r\nFactoryMaker.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);\r\nexport default factory;\r\n"]}