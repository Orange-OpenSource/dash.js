{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/NextFragmentRequestRule.js"],"names":["NextFragmentRequestRule","config","context","adapter","textController","playbackController","instance","logger","setup","getInstance","getLogger","execute","streamProcessor","seekTarget","requestToReplace","representationInfo","getRepresentationInfo","mediaType","getType","hasSeekTarget","isNaN","bufferController","getBufferController","currentTime","getNormalizedTime","time","getIndexHandlerTime","bufferIsDivided","request","Constants","FRAGMENTED_TEXT","isTextEnabled","range","getRangeAt","playingRange","hasDiscontinuities","getBuffer","hasDiscontinuitiesAfter","start","end","getFragmentModel","removeExecutedRequestsAfterTime","debug","startTime","duration","getFragmentRequest","timeThreshold","ignoreIsFinished","keepIdx","action","FragmentRequest","ACTION_COMPLETE","isFragmentLoaded","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"NextFragmentRequestRule.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../constants/Constants';\r\nimport Debug from '../../../core/Debug';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport FragmentRequest from '../../../streaming/vo/FragmentRequest';\r\n\r\nfunction NextFragmentRequestRule(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const adapter = config.adapter;\r\n    const textController = config.textController;\r\n    const playbackController = config.playbackController;\r\n\r\n    let instance,\r\n        logger;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function execute(streamProcessor, seekTarget, requestToReplace) {\r\n        if (!streamProcessor) {\r\n            return null;\r\n        }\r\n        const representationInfo = streamProcessor.getRepresentationInfo();\r\n        const mediaType = streamProcessor.getType();\r\n        const hasSeekTarget = !isNaN(seekTarget);\r\n        const bufferController = streamProcessor.getBufferController();\r\n        const currentTime = playbackController.getNormalizedTime();\r\n        let time = hasSeekTarget ? seekTarget : adapter.getIndexHandlerTime(streamProcessor);\r\n        let bufferIsDivided = false;\r\n        let request;\r\n\r\n        if (isNaN(time) || (mediaType === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\r\n            return null;\r\n        }\r\n        /**\r\n         * This is critical for IE/Safari/EDGE\r\n         * */\r\n        if (bufferController) {\r\n            let range = bufferController.getRangeAt(time);\r\n            const playingRange = bufferController.getRangeAt(currentTime);\r\n            const hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);\r\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\r\n                if (!range || (playingRange && playingRange.start != range.start && playingRange.end != range.end)) {\r\n                    if (hasDiscontinuities && mediaType !== Constants.FRAGMENTED_TEXT) {\r\n                        streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(playingRange.end);\r\n                        bufferIsDivided = true;\r\n                    }\r\n                    range = playingRange;\r\n                }\r\n                if (time !== range.end) {\r\n                    logger.debug('Prior to making a request for time, NextFragmentRequestRule is aligning index handler\\'s currentTime with bufferedRange.end for', mediaType, '.', time, 'was changed to', range.end);\r\n                    time = range.end;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (requestToReplace) {\r\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\r\n            request = adapter.getFragmentRequest(streamProcessor, representationInfo, time, {\r\n                timeThreshold: 0,\r\n                ignoreIsFinished: true\r\n            });\r\n        } else {\r\n            request = adapter.getFragmentRequest(streamProcessor, representationInfo, time, {\r\n                keepIdx: !hasSeekTarget && !bufferIsDivided\r\n            });\r\n\r\n            // Then, check if this request was downloaded or not\r\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && streamProcessor.getFragmentModel().isFragmentLoaded(request)) {\r\n                // loop until we found not loaded fragment, or no fragment\r\n                request = adapter.getFragmentRequest(streamProcessor, representationInfo);\r\n            }\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    instance = {\r\n        execute: execute\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nNextFragmentRequestRule.__dashjs_factory_name = 'NextFragmentRequestRule';\r\nexport default FactoryMaker.getClassFactory(NextFragmentRequestRule);\r\n"]}