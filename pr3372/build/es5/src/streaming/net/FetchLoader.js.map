{"version":3,"sources":["../../../../../src/streaming/net/FetchLoader.js"],"names":["FetchLoader","cfg","requestModifier","boxParser","instance","load","httpRequest","requestStartTime","Date","request","headers","Headers","range","append","requestStartDate","modifyRequestHeader","setRequestHeader","header","value","abortController","window","AbortController","signal","onabort","reqOptions","method","credentials","withCredentials","undefined","fetch","url","then","response","status","statusText","responseURL","ok","onerror","responseHeaders","keys","key","get","body","arrayBuffer","buffer","event","loaded","byteLength","total","stream","progress","onload","onend","totalBytes","parseInt","bytesReceived","signaledFirstByte","remaining","Uint8Array","offset","reader","getReader","downLoadedData","processResult","done","isNaN","lengthComputable","time","calculateDownloadedTime","length","concatTypedArray","push","ts","now","bytes","boxesInfo","findLastTopIsoBoxCompleted","found","end","lastCompletedOffset","size","data","subarray","noTrace","read","catch","e","result","set","abort","cancel","datum","filter","avgTimeDistance","forEach","index","next","distance","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"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","file":"FetchLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * @module FetchLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP using fetch.\r\n * @param {Object} cfg - dependencies from parent\r\n */\r\nfunction FetchLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const requestModifier = cfg.requestModifier;\r\n    const boxParser = cfg.boxParser;\r\n\r\n    let instance;\r\n\r\n    function load(httpRequest) {\r\n\r\n        // Variables will be used in the callback functions\r\n        const requestStartTime = new Date();\r\n        const request = httpRequest.request;\r\n\r\n        const headers = new Headers(); /*jshint ignore:line*/\r\n        if (request.range) {\r\n            headers.append('Range', 'bytes=' + request.range);\r\n        }\r\n\r\n        if (!request.requestStartDate) {\r\n            request.requestStartDate = requestStartTime;\r\n        }\r\n\r\n        if (requestModifier) {\r\n            // modifyRequestHeader expects a XMLHttpRequest object so,\r\n            // to keep backward compatibility, we should expose a setRequestHeader method\r\n            // TODO: Remove RequestModifier dependency on XMLHttpRequest object and define\r\n            // a more generic way to intercept/modify requests\r\n            requestModifier.modifyRequestHeader({\r\n                setRequestHeader: function (header, value) {\r\n                    headers.append(header, value);\r\n                }\r\n            });\r\n        }\r\n\r\n        let abortController;\r\n        if (typeof window.AbortController === 'function') {\r\n            abortController = new AbortController(); /*jshint ignore:line*/\r\n            httpRequest.abortController = abortController;\r\n            abortController.signal.onabort = httpRequest.onabort;\r\n        }\r\n\r\n        const reqOptions = {\r\n            method: httpRequest.method,\r\n            headers: headers,\r\n            credentials: httpRequest.withCredentials ? 'include' : undefined,\r\n            signal: abortController ? abortController.signal : undefined\r\n        };\r\n\r\n        fetch(httpRequest.url, reqOptions).then(function (response) {\r\n            if (!httpRequest.response) {\r\n                httpRequest.response = {};\r\n            }\r\n            httpRequest.response.status = response.status;\r\n            httpRequest.response.statusText = response.statusText;\r\n            httpRequest.response.responseURL = response.url;\r\n\r\n            if (!response.ok) {\r\n                httpRequest.onerror();\r\n            }\r\n\r\n            let responseHeaders = '';\r\n            for (const key of response.headers.keys()) {\r\n                responseHeaders += key + ': ' + response.headers.get(key) + '\\r\\n';\r\n            }\r\n            httpRequest.response.responseHeaders = responseHeaders;\r\n\r\n            if (!response.body) {\r\n                // Fetch returning a ReadableStream response body is not currently supported by all browsers.\r\n                // Browser compatibility: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n                // If it is not supported, returning the whole segment when it's ready (as xhr)\r\n                return response.arrayBuffer().then(function (buffer) {\r\n                    httpRequest.response.response = buffer;\r\n                    const event = {\r\n                        loaded: buffer.byteLength,\r\n                        total: buffer.byteLength,\r\n                        stream: false\r\n                    };\r\n                    httpRequest.progress(event);\r\n                    httpRequest.onload();\r\n                    httpRequest.onend();\r\n                    return;\r\n                });\r\n            }\r\n\r\n            const totalBytes = parseInt(response.headers.get('Content-Length'), 10);\r\n            let bytesReceived = 0;\r\n            let signaledFirstByte = false;\r\n            let remaining = new Uint8Array();\r\n            let offset = 0;\r\n\r\n            httpRequest.reader = response.body.getReader();\r\n            let downLoadedData = [];\r\n\r\n            const processResult = function ({value, done}) {\r\n                if (done) {\r\n                    if (remaining) {\r\n                        // If there is pending data, call progress so network metrics\r\n                        // are correctly generated\r\n                        // Same structure as https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress\r\n                        httpRequest.progress({\r\n                            loaded: bytesReceived,\r\n                            total: isNaN(totalBytes) ? bytesReceived : totalBytes,\r\n                            lengthComputable: true,\r\n                            time: calculateDownloadedTime(downLoadedData, bytesReceived),\r\n                            stream: true\r\n                        });\r\n\r\n                        httpRequest.response.response = remaining.buffer;\r\n                    }\r\n                    httpRequest.onload();\r\n                    httpRequest.onend();\r\n                    return;\r\n                }\r\n\r\n                if (value && value.length > 0) {\r\n                    remaining = concatTypedArray(remaining, value);\r\n                    bytesReceived += value.length;\r\n                    downLoadedData.push({\r\n                        ts: Date.now(),\r\n                        bytes: value.length\r\n                    });\r\n\r\n                    const boxesInfo = boxParser.findLastTopIsoBoxCompleted(['moov', 'mdat'], remaining, offset);\r\n                    if (boxesInfo.found) {\r\n                        const end = boxesInfo.lastCompletedOffset + boxesInfo.size;\r\n\r\n                        // If we are going to pass full buffer, avoid copying it and pass\r\n                        // complete buffer. Otherwise clone the part of the buffer that is completed\r\n                        // and adjust remaining buffer. A clone is needed because ArrayBuffer of a typed-array\r\n                        // keeps a reference to the original data\r\n                        let data;\r\n                        if (end === remaining.length) {\r\n                            data = remaining;\r\n                            remaining = new Uint8Array();\r\n                        } else {\r\n                            data = new Uint8Array(remaining.subarray(0, end));\r\n                            remaining = remaining.subarray(end);\r\n                        }\r\n\r\n                        // Announce progress but don't track traces. Throughput measures are quite unstable\r\n                        // when they are based in small amount of data\r\n                        httpRequest.progress({\r\n                            data: data.buffer,\r\n                            lengthComputable: false,\r\n                            noTrace: true\r\n                        });\r\n\r\n                        offset = 0;\r\n                    } else {\r\n                        offset = boxesInfo.lastCompletedOffset;\r\n\r\n                        // Call progress so it generates traces that will be later used to know when the first byte\r\n                        // were received\r\n                        if (!signaledFirstByte) {\r\n                            httpRequest.progress({\r\n                                lengthComputable: false,\r\n                                noTrace: true\r\n                            });\r\n                            signaledFirstByte = true;\r\n                        }\r\n                    }\r\n                }\r\n                read(httpRequest, processResult);\r\n            };\r\n\r\n            read(httpRequest, processResult);\r\n        })\r\n            .catch(function (e) {\r\n                if (httpRequest.onerror) {\r\n                    httpRequest.onerror(e);\r\n                }\r\n            });\r\n    }\r\n\r\n    function read(httpRequest, processResult) {\r\n        httpRequest.reader.read()\r\n            .then(processResult)\r\n            .catch(function (e) {\r\n                if (httpRequest.onerror && httpRequest.response.status === 200) {\r\n                    // Error, but response code is 200, trigger error\r\n                    httpRequest.onerror(e);\r\n                }\r\n            });\r\n    }\r\n\r\n    function concatTypedArray(remaining, data) {\r\n        if (remaining.length === 0) {\r\n            return data;\r\n        }\r\n        const result = new Uint8Array(remaining.length + data.length);\r\n        result.set(remaining);\r\n        result.set(data, remaining.length);\r\n        return result;\r\n    }\r\n\r\n    function abort(request) {\r\n        if (request.abortController) {\r\n            // For firefox and edge\r\n            request.abortController.abort();\r\n        } else if (request.reader) {\r\n            // For Chrome\r\n            try {\r\n                request.reader.cancel();\r\n                request.onabort();\r\n            } catch (e) {\r\n                // throw exceptions (TypeError) when reader was previously closed,\r\n                // for example, because a network issue\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateDownloadedTime(datum, bytesReceived) {\r\n        datum = datum.filter(data => data.bytes > ((bytesReceived / 4) / datum.length));\r\n        if (datum.length > 1) {\r\n            let time = 0;\r\n            const avgTimeDistance = (datum[datum.length - 1].ts - datum[0].ts) / datum.length;\r\n            datum.forEach((data, index) => {\r\n                // To be counted the data has to be over a threshold\r\n                const next = datum[index + 1];\r\n                if (next) {\r\n                    const distance = next.ts - data.ts;\r\n                    time += distance < avgTimeDistance ? distance : 0;\r\n                }\r\n            });\r\n            return time;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort,\r\n        calculateDownloadedTime: calculateDownloadedTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nFetchLoader.__dashjs_factory_name = 'FetchLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(FetchLoader);\r\nexport default factory;\r\n"]}