{"version":3,"sources":["../../../../src/streaming/StreamProcessor.js"],"names":["StreamProcessor","config","context","eventBus","getInstance","streamInfo","type","errHandler","mimeType","timelineConverter","adapter","manifestModel","mediaPlayerModel","fragmentModel","abrController","playbackController","mediaController","textController","dashMetrics","settings","boxParser","instance","logger","isDynamic","mediaInfo","mediaInfoArr","bufferController","scheduleController","representationController","liveEdgeFinder","indexHandler","bufferingTime","bufferPruned","setup","getLogger","resetInitialSettings","on","Events","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","EventBus","EVENT_PRIORITY_HIGH","QUALITY_CHANGE_REQUESTED","onQualityChanged","INIT_FRAGMENT_NEEDED","onInitFragmentNeeded","MEDIA_FRAGMENT_NEEDED","onMediaFragmentNeeded","MEDIA_FRAGMENT_LOADED","onMediaFragmentLoaded","BUFFER_LEVEL_UPDATED","onBufferLevelUpdated","BUFFER_LEVEL_STATE_CHANGED","onBufferLevelStateChanged","BUFFER_CLEARED","onBufferCleared","SEEK_TARGET","onSeekTarget","initialize","mediaSource","hasVideoTrack","create","baseURLController","events","errors","Errors","debug","requestModifier","dashConstants","DashConstants","constants","Constants","urlUtils","manifestInfo","registerStreamType","createBufferControllerForType","getStreamId","id","getType","reset","errored","keepBuffers","unRegisterStreamType","off","isUpdating","e","error","setCurrentRepresentation","convertDataToRepresentationInfo","currentRepresentation","code","SEGMENTS_UPDATE_FAILED_ERROR_CODE","activeStreamId","getStreamController","getActiveStreamInfo","addDVRMetric","representationInfo","getRepresentationInfo","newQuality","pushPlayListTraceMetrics","Date","PlayListTrace","REPRESENTATION_SWITCH_STOP_REASON","createPlaylistTraceMetrics","getTime","getPlaybackRate","addBufferLevel","bufferLevel","getValue","doNotUpdateDVRWindowOnBufferUpdated","addBufferState","state","getBufferTarget","MetricsConstants","BUFFER_EMPTY","isSeeking","REBUFFERING_REASON","syncExecutedRequestsWithBufferedRange","getBuffer","getAllBufferRanges","duration","from","range","calcSegmentAvailabilityRange","getCurrentRepresentation","addDVRInfo","getRepresentationController","setBuffer","buffer","getBufferController","getFragmentModel","updateStreamInfo","newStreamInfo","get","streaming","useAppendWindow","updateAppendWindow","getStreamInfo","selectMediaInfo","newMediaInfo","newRealAdaptation","getRealAdaptation","voRepresentations","getVoRepresentations","realAdaptation","getData","maxQuality","getTopQualityIndexFor","minIdx","getMinAllowedIndexFor","quality","averageThroughput","bitrate","FRAGMENTED_TEXT","getThroughputHistory","getAverageThroughput","getInitialBitrateFor","getQualityForBitrate","getQualityFor","undefined","setMimeType","updateData","addMediaInfo","selectNewMediaInfo","indexOf","push","getMediaInfoArr","getMediaInfo","getMediaSource","setMediaSource","dischargePreBuffer","getScheduleController","voRepresentation","getRepresentationForQuality","isBufferingCompleted","getIsBufferingCompleted","getBufferLevel","getIsTextTrack","isTextEnabled","representationId","appendInitSegment","request","getInitRequest","processInitRequest","getIsPruningInProgress","findNextRequest","seekTarget","replacement","setSeekTarget","NaN","isNaN","startTime","delayLoadingTime","getTimeToLoadDelay","setTimeToLoadDelay","processMediaRequest","requestToReplace","hasSeekTarget","currentTime","getNormalizedTime","time","bufferIsDivided","getRangeAt","playingRange","start","end","hasDiscontinuities","hasDiscontinuitiesAfter","removeExecutedRequestsAfterTime","getFragmentRequest","timeThreshold","ignoreIsFinished","useTime","keepIdx","action","FragmentRequest","ACTION_COMPLETE","isFragmentLoaded","chunk","bytes","eventStreamMedia","getEventsFor","eventStreamTrack","length","getRequests","FragmentModel","FRAGMENT_MODEL_EXECUTED","index","handleInbandEvents","trigger","INBAND_EVENTS","streamId","data","mediaInbandEvents","trackInbandEvents","fragmentStartTime","Math","max","eventStreams","inbandEvents","concat","i","ln","schemeIdUri","value","isoFile","parse","eventBoxes","getBoxes","event","getEvent","createBuffer","previousBuffers","switchTrackAsked","controller","DashJSError","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE","VIDEO","AUDIO","getLiveStartTime","liveStartTime","currentRepresentationInfo","liveEdge","getLiveEdge","findRequestForLiveEdge","lowLatencyEnabled","getLiveDelay","liveDelay","dvrWindowSize","DVRWindowSize","dvrWindowSafetyMargin","isFinite","setLiveDelay","setBufferingTime","resetIndexHandler","resetIndex","representation","options","fragRequest","getSegmentRequestForTime","getNextSegmentRequest","finalisePlayList","reason","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"StreamProcessor.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport DashConstants from '../dash/constants/DashConstants';\r\nimport MetricsConstants from './constants/MetricsConstants';\r\nimport FragmentModel from './models/FragmentModel';\r\nimport BufferController from './controllers/BufferController';\r\nimport TextBufferController from './text/TextBufferController';\r\nimport ScheduleController from './controllers/ScheduleController';\r\nimport RepresentationController from '../dash/controllers/RepresentationController';\r\nimport LiveEdgeFinder from './utils/LiveEdgeFinder';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport {checkInteger} from './utils/SupervisorTools';\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport DashHandler from '../dash/DashHandler';\r\nimport Errors from '../core/errors/Errors';\r\nimport DashJSError from './vo/DashJSError';\r\nimport Debug from '../core/Debug';\r\nimport RequestModifier from './utils/RequestModifier';\r\nimport URLUtils from '../streaming/utils/URLUtils';\r\nimport BoxParser from './utils/BoxParser';\r\nimport FragmentRequest from './vo/FragmentRequest';\r\nimport {PlayListTrace} from './vo/metrics/PlayList';\r\n\r\nfunction StreamProcessor(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n\r\n    let streamInfo = config.streamInfo;\r\n    let type = config.type;\r\n    let errHandler = config.errHandler;\r\n    let mimeType = config.mimeType;\r\n    let timelineConverter = config.timelineConverter;\r\n    let adapter = config.adapter;\r\n    let manifestModel = config.manifestModel;\r\n    let mediaPlayerModel = config.mediaPlayerModel;\r\n    let fragmentModel = config.fragmentModel;\r\n    let abrController = config.abrController;\r\n    let playbackController = config.playbackController;\r\n    let mediaController = config.mediaController;\r\n    let textController = config.textController;\r\n    let dashMetrics = config.dashMetrics;\r\n    let settings = config.settings;\r\n    let boxParser = config.boxParser;\r\n\r\n    let instance,\r\n        logger,\r\n        isDynamic,\r\n        mediaInfo,\r\n        mediaInfoArr,\r\n        bufferController,\r\n        scheduleController,\r\n        representationController,\r\n        liveEdgeFinder,\r\n        indexHandler,\r\n        bufferingTime,\r\n        bufferPruned;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n\r\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance, EventBus.EVENT_PRIORITY_HIGH); // High priority to be notified before Stream\r\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.on(Events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance);\r\n        eventBus.on(Events.MEDIA_FRAGMENT_NEEDED, onMediaFragmentNeeded, instance);\r\n        eventBus.on(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\r\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\r\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, instance);\r\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, instance);\r\n        eventBus.on(Events.SEEK_TARGET, onSeekTarget, instance);\r\n    }\r\n\r\n    function initialize(mediaSource, hasVideoTrack) {\r\n        indexHandler = DashHandler(context).create({\r\n            streamInfo: streamInfo,\r\n            type: type,\r\n            timelineConverter: timelineConverter,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            baseURLController: config.baseURLController,\r\n            errHandler: errHandler,\r\n            settings: settings,\r\n            boxParser: boxParser,\r\n            events: Events,\r\n            eventBus: eventBus,\r\n            errors: Errors,\r\n            debug: Debug(context).getInstance(),\r\n            requestModifier: RequestModifier(context).getInstance(),\r\n            dashConstants: DashConstants,\r\n            constants: Constants,\r\n            urlUtils: URLUtils(context).getInstance()\r\n        });\r\n\r\n        // Create live edge finder for dynamic streams\r\n        isDynamic = streamInfo.manifestInfo.isDynamic;\r\n        if (isDynamic) {\r\n            liveEdgeFinder = LiveEdgeFinder(context).create({\r\n                timelineConverter: timelineConverter\r\n            });\r\n        }\r\n\r\n        // Create/initialize controllers\r\n        indexHandler.initialize(isDynamic);\r\n        abrController.registerStreamType(type, instance);\r\n\r\n        representationController = RepresentationController(context).create({\r\n            streamInfo: streamInfo,\r\n            type: type,\r\n            abrController: abrController,\r\n            dashMetrics: dashMetrics,\r\n            playbackController: playbackController,\r\n            timelineConverter: timelineConverter,\r\n            dashConstants: DashConstants,\r\n            events: Events,\r\n            eventBus: eventBus,\r\n            errors: Errors\r\n        });\r\n\r\n        bufferController = createBufferControllerForType(type);\r\n        if (bufferController) {\r\n            bufferController.initialize(mediaSource);\r\n        }\r\n\r\n        scheduleController = ScheduleController(context).create({\r\n            streamInfo: streamInfo,\r\n            type: type,\r\n            mimeType: mimeType,\r\n            adapter: adapter,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            fragmentModel: fragmentModel,\r\n            abrController: abrController,\r\n            playbackController: playbackController,\r\n            textController: textController,\r\n            mediaController: mediaController,\r\n            bufferController: bufferController,\r\n            settings: settings\r\n        });\r\n\r\n        scheduleController.initialize(hasVideoTrack);\r\n\r\n        bufferingTime = 0;\r\n        bufferPruned = false;\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        mediaInfoArr = [];\r\n        mediaInfo = null;\r\n        bufferingTime = 0;\r\n    }\r\n\r\n    function reset(errored, keepBuffers) {\r\n        if (indexHandler) {\r\n            indexHandler.reset();\r\n        }\r\n\r\n        if (bufferController) {\r\n            bufferController.reset(errored, keepBuffers);\r\n            bufferController = null;\r\n        }\r\n\r\n        if (scheduleController) {\r\n            scheduleController.reset();\r\n            scheduleController = null;\r\n        }\r\n\r\n        if (representationController) {\r\n            representationController.reset();\r\n            representationController = null;\r\n        }\r\n\r\n        if (liveEdgeFinder) {\r\n            liveEdgeFinder.reset();\r\n            liveEdgeFinder = null;\r\n        }\r\n\r\n        if (abrController) {\r\n            abrController.unRegisterStreamType(type);\r\n        }\r\n\r\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.off(Events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance);\r\n        eventBus.off(Events.MEDIA_FRAGMENT_NEEDED, onMediaFragmentNeeded, instance);\r\n        eventBus.off(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\r\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\r\n        eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, instance);\r\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, instance);\r\n        eventBus.off(Events.SEEK_TARGET, onSeekTarget, instance);\r\n\r\n        resetInitialSettings();\r\n        type = null;\r\n        streamInfo = null;\r\n    }\r\n\r\n    function isUpdating() {\r\n        return representationController ? representationController.isUpdating() : false;\r\n    }\r\n\r\n\r\n    function onDataUpdateCompleted(e) {\r\n        if (!e.error) {\r\n            // Update representation if no error\r\n            scheduleController.setCurrentRepresentation(adapter.convertDataToRepresentationInfo(e.currentRepresentation));\r\n        }\r\n        if (!e.error || e.error.code === Errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE) {\r\n            // Update has been postponed, update nevertheless DVR info\r\n            const activeStreamId = playbackController.getStreamController().getActiveStreamInfo().id;\r\n            if (activeStreamId === streamInfo.id) {\r\n                addDVRMetric();\r\n            }\r\n        }\r\n    }\r\n\r\n    function onQualityChanged(e) {\r\n        let representationInfo = getRepresentationInfo(e.newQuality);\r\n        scheduleController.setCurrentRepresentation(representationInfo);\r\n        dashMetrics.pushPlayListTraceMetrics(new Date(), PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);\r\n        dashMetrics.createPlaylistTraceMetrics(representationInfo.id, playbackController.getTime() * 1000, playbackController.getPlaybackRate());\r\n    }\r\n\r\n    function onBufferLevelUpdated(e) {\r\n        dashMetrics.addBufferLevel(type, new Date(), e.bufferLevel * 1000);\r\n        const activeStreamId = playbackController.getStreamController().getActiveStreamInfo().id;\r\n        if (!manifestModel.getValue().doNotUpdateDVRWindowOnBufferUpdated && streamInfo.id === activeStreamId) {\r\n            addDVRMetric();\r\n        }\r\n    }\r\n\r\n    function onBufferLevelStateChanged(e) {\r\n        dashMetrics.addBufferState(type, e.state, scheduleController.getBufferTarget());\r\n        if (e.state === MetricsConstants.BUFFER_EMPTY && !playbackController.isSeeking()) {\r\n            // logger.info('Buffer is empty! Stalling!');\r\n            dashMetrics.pushPlayListTraceMetrics(new Date(), PlayListTrace.REBUFFERING_REASON);\r\n        }\r\n    }\r\n\r\n    function onBufferCleared(e) {\r\n        // Remove executed requests not buffered anymore\r\n        fragmentModel.syncExecutedRequestsWithBufferedRange(\r\n            bufferController.getBuffer().getAllBufferRanges(),\r\n            streamInfo.duration);\r\n\r\n        // If buffer removed ahead current time (QuotaExceededError or automatic buffer pruning) then adjust current index handler time\r\n        if (e.from > playbackController.getTime()) {\r\n            bufferingTime = e.from;\r\n            bufferPruned = true;\r\n        }\r\n    }\r\n\r\n    function addDVRMetric() {\r\n        const manifestInfo = streamInfo.manifestInfo;\r\n        const isDynamic = manifestInfo.isDynamic;\r\n        const range = timelineConverter.calcSegmentAvailabilityRange(representationController.getCurrentRepresentation(), isDynamic);\r\n        dashMetrics.addDVRInfo(getType(), playbackController.getTime(), manifestInfo, range);\r\n    }\r\n\r\n    function getRepresentationController() {\r\n        return representationController;\r\n    }\r\n\r\n    function getBuffer() {\r\n        return bufferController ? bufferController.getBuffer() : null;\r\n    }\r\n\r\n    function setBuffer(buffer) {\r\n        bufferController.setBuffer(buffer);\r\n    }\r\n\r\n    function getBufferController() {\r\n        return bufferController;\r\n    }\r\n\r\n    function getFragmentModel() {\r\n        return fragmentModel;\r\n    }\r\n\r\n    function updateStreamInfo(newStreamInfo) {\r\n        streamInfo = newStreamInfo;\r\n        if (settings.get().streaming.useAppendWindow) {\r\n            bufferController.updateAppendWindow();\r\n        }\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        return streamInfo;\r\n    }\r\n\r\n    function selectMediaInfo(newMediaInfo) {\r\n        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || (newMediaInfo.type === mediaInfo.type))) {\r\n            mediaInfo = newMediaInfo;\r\n        }\r\n\r\n        const newRealAdaptation = adapter.getRealAdaptation(streamInfo, mediaInfo);\r\n        const voRepresentations = adapter.getVoRepresentations(mediaInfo);\r\n\r\n        if (representationController) {\r\n            const realAdaptation = representationController.getData();\r\n            const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\r\n            const minIdx = abrController.getMinAllowedIndexFor(type);\r\n\r\n            let quality,\r\n                averageThroughput;\r\n            let bitrate = null;\r\n\r\n            if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\r\n                averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\r\n                bitrate = averageThroughput || abrController.getInitialBitrateFor(type);\r\n                quality = abrController.getQualityForBitrate(mediaInfo, bitrate);\r\n            } else {\r\n                quality = abrController.getQualityFor(type);\r\n            }\r\n\r\n            if (minIdx !== undefined && quality < minIdx) {\r\n                quality = minIdx;\r\n            }\r\n            if (quality > maxQuality) {\r\n                quality = maxQuality;\r\n            }\r\n            indexHandler.setMimeType(mediaInfo ? mediaInfo.mimeType : null);\r\n            representationController.updateData(newRealAdaptation, voRepresentations, type, quality);\r\n        }\r\n    }\r\n\r\n    function addMediaInfo(newMediaInfo, selectNewMediaInfo) {\r\n        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {\r\n            mediaInfoArr.push(newMediaInfo);\r\n        }\r\n\r\n        if (selectNewMediaInfo) {\r\n            this.selectMediaInfo(newMediaInfo);\r\n        }\r\n    }\r\n\r\n    function getMediaInfoArr() {\r\n        return mediaInfoArr;\r\n    }\r\n\r\n    function getMediaInfo() {\r\n        return mediaInfo;\r\n    }\r\n\r\n    function getMediaSource() {\r\n        return bufferController.getMediaSource();\r\n    }\r\n\r\n    function setMediaSource(mediaSource) {\r\n        bufferController.setMediaSource(mediaSource, getMediaInfoArr());\r\n    }\r\n\r\n    function dischargePreBuffer() {\r\n        bufferController.dischargePreBuffer();\r\n    }\r\n\r\n    function getScheduleController() {\r\n        return scheduleController;\r\n    }\r\n\r\n    /**\r\n     * Get a specific voRepresentation. If quality parameter is defined, this function will return the voRepresentation for this quality.\r\n     * Otherwise, this function will return the current voRepresentation used by the representationController.\r\n     * @param {number} quality - quality index of the voRepresentaion expected.\r\n     */\r\n    function getRepresentationInfo(quality) {\r\n        let voRepresentation;\r\n\r\n        if (quality !== undefined) {\r\n            checkInteger(quality);\r\n            voRepresentation = representationController ? representationController.getRepresentationForQuality(quality) : null;\r\n        } else {\r\n            voRepresentation = representationController ? representationController.getCurrentRepresentation() : null;\r\n        }\r\n\r\n        return adapter.convertDataToRepresentationInfo(voRepresentation);\r\n    }\r\n\r\n    function isBufferingCompleted() {\r\n        return bufferController ? bufferController.getIsBufferingCompleted() : false;\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        return bufferController ? bufferController.getBufferLevel() : 0;\r\n    }\r\n\r\n    function onInitFragmentNeeded(e) {\r\n        if (adapter.getIsTextTrack(mimeType) && !textController.isTextEnabled()) return;\r\n\r\n        if (bufferController && e.representationId) {\r\n            if (!bufferController.appendInitSegment(e.representationId)) {\r\n                // Init segment not in cache, send new request\r\n                const request = indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representationController.getCurrentRepresentation()) : null;\r\n                scheduleController.processInitRequest(request);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onMediaFragmentNeeded(e) {\r\n        let request;\r\n\r\n        // Don't schedule next fragments while pruning to avoid buffer inconsistencies\r\n        if (!bufferController.getIsPruningInProgress()) {\r\n            request = findNextRequest(e.seekTarget, e.replacement);\r\n            if (request) {\r\n                scheduleController.setSeekTarget(NaN);\r\n                if (!e.replacement) {\r\n                    if (!isNaN(request.startTime + request.duration)) {\r\n                        bufferingTime = request.startTime + request.duration;\r\n                    }\r\n                    request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay();\r\n                    scheduleController.setTimeToLoadDelay(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        scheduleController.processMediaRequest(request);\r\n    }\r\n\r\n    function findNextRequest(seekTarget, requestToReplace) {\r\n        const representationInfo = getRepresentationInfo();\r\n        const hasSeekTarget = !isNaN(seekTarget);\r\n        const currentTime = playbackController.getNormalizedTime();\r\n        let time = hasSeekTarget ? seekTarget : bufferingTime;\r\n        let bufferIsDivided = false;\r\n        let request;\r\n\r\n        if (isNaN(time) || (getType() === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\r\n            return null;\r\n        }\r\n        /**\r\n         * This is critical for IE/Safari/EDGE\r\n         * */\r\n        if (bufferController) {\r\n            let range = bufferController.getRangeAt(time);\r\n            const playingRange = bufferController.getRangeAt(currentTime);\r\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\r\n                if (!range || (playingRange && playingRange.start != range.start && playingRange.end != range.end)) {\r\n                    const hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);\r\n                    if (hasDiscontinuities && getType() !== Constants.FRAGMENTED_TEXT) {\r\n                        fragmentModel.removeExecutedRequestsAfterTime(playingRange.end);\r\n                        bufferIsDivided = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (requestToReplace) {\r\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\r\n            request = getFragmentRequest(representationInfo, time, {\r\n                timeThreshold: 0,\r\n                ignoreIsFinished: true\r\n            });\r\n        } else {\r\n            // Use time just whenever is strictly needed\r\n            const useTime = hasSeekTarget || bufferPruned || bufferIsDivided;\r\n            request = getFragmentRequest(representationInfo,\r\n                useTime ? time : undefined, {\r\n                    keepIdx: !useTime\r\n                });\r\n            bufferPruned = false;\r\n\r\n            // Then, check if this request was downloaded or not\r\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && fragmentModel.isFragmentLoaded(request)) {\r\n                // loop until we found not loaded fragment, or no fragment\r\n                request = getFragmentRequest(representationInfo);\r\n            }\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    function onMediaFragmentLoaded(e) {\r\n        const chunk = e.chunk;\r\n\r\n        const bytes = chunk.bytes;\r\n        const quality = chunk.quality;\r\n        const currentRepresentation = getRepresentationInfo(quality);\r\n\r\n        const voRepresentation = representationController && currentRepresentation ? representationController.getRepresentationForQuality(currentRepresentation.quality) : null;\r\n        const eventStreamMedia = adapter.getEventsFor(currentRepresentation.mediaInfo);\r\n        const eventStreamTrack = adapter.getEventsFor(currentRepresentation, voRepresentation);\r\n\r\n        if (eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0) {\r\n            const request = fragmentModel.getRequests({\r\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\r\n                quality: quality,\r\n                index: chunk.index\r\n            })[0];\r\n\r\n            const events = handleInbandEvents(bytes, request, eventStreamMedia, eventStreamTrack);\r\n            eventBus.trigger(Events.INBAND_EVENTS,\r\n                { events: events },\r\n                { streamId: streamInfo.id }\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleInbandEvents(data, request, mediaInbandEvents, trackInbandEvents) {\r\n        const fragmentStartTime = Math.max(!request || isNaN(request.startTime) ? 0 : request.startTime, 0);\r\n        const eventStreams = [];\r\n        const events = [];\r\n\r\n        /* Extract the possible schemeIdUri : If a DASH client detects an event message box with a scheme that is not defined in MPD, the client is expected to ignore it */\r\n        const inbandEvents = mediaInbandEvents.concat(trackInbandEvents);\r\n        for (let i = 0, ln = inbandEvents.length; i < ln; i++) {\r\n            eventStreams[inbandEvents[i].schemeIdUri + '/' + inbandEvents[i].value] = inbandEvents[i];\r\n        }\r\n\r\n        const isoFile = BoxParser(context).getInstance().parse(data);\r\n        const eventBoxes = isoFile.getBoxes('emsg');\r\n\r\n        for (let i = 0, ln = eventBoxes.length; i < ln; i++) {\r\n            const event = adapter.getEvent(eventBoxes[i], eventStreams, fragmentStartTime);\r\n\r\n            if (event) {\r\n                events.push(event);\r\n            }\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    function createBuffer(previousBuffers) {\r\n        return (getBuffer() || bufferController ? bufferController.createBuffer(mediaInfoArr, previousBuffers) : null);\r\n    }\r\n\r\n    function switchTrackAsked() {\r\n        scheduleController.switchTrackAsked();\r\n    }\r\n\r\n    function createBufferControllerForType(type) {\r\n        let controller = null;\r\n\r\n        if (!type) {\r\n            errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + 'not properly defined'));\r\n            return null;\r\n        }\r\n\r\n        if (type === Constants.VIDEO || type === Constants.AUDIO) {\r\n            controller = BufferController(context).create({\r\n                streamInfo: streamInfo,\r\n                type: type,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                manifestModel: manifestModel,\r\n                fragmentModel: fragmentModel,\r\n                errHandler: errHandler,\r\n                mediaController: mediaController,\r\n                representationController: representationController,\r\n                adapter: adapter,\r\n                textController: textController,\r\n                abrController: abrController,\r\n                playbackController: playbackController,\r\n                settings: settings\r\n            });\r\n        } else {\r\n            controller = TextBufferController(context).create({\r\n                streamInfo: streamInfo,\r\n                type: type,\r\n                mimeType: mimeType,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                manifestModel: manifestModel,\r\n                fragmentModel: fragmentModel,\r\n                errHandler: errHandler,\r\n                mediaController: mediaController,\r\n                representationController: representationController,\r\n                adapter: adapter,\r\n                textController: textController,\r\n                abrController: abrController,\r\n                playbackController: playbackController,\r\n                settings: settings\r\n            });\r\n        }\r\n\r\n        return controller;\r\n    }\r\n\r\n\r\n    function getLiveStartTime() {\r\n        if (!isDynamic) return NaN;\r\n        if (!liveEdgeFinder) return NaN;\r\n\r\n        let liveStartTime = NaN;\r\n        const currentRepresentationInfo = getRepresentationInfo();\r\n        const liveEdge = liveEdgeFinder.getLiveEdge(currentRepresentationInfo);\r\n\r\n        if (isNaN(liveEdge)) {\r\n            return NaN;\r\n        }\r\n\r\n        const request = findRequestForLiveEdge(liveEdge, currentRepresentationInfo);\r\n\r\n        if (request) {\r\n            // When low latency mode is selected but browser doesn't support fetch\r\n            // start at the beginning of the segment to avoid consuming the whole buffer\r\n            if (settings.get().streaming.lowLatencyEnabled) {\r\n                liveStartTime = request.duration < mediaPlayerModel.getLiveDelay() ? request.startTime : request.startTime + request.duration - mediaPlayerModel.getLiveDelay();\r\n            } else {\r\n                liveStartTime = request.startTime;\r\n            }\r\n        }\r\n\r\n        return liveStartTime;\r\n    }\r\n\r\n    function findRequestForLiveEdge(liveEdge, currentRepresentationInfo) {\r\n        try {\r\n            let request = null;\r\n            let liveDelay = playbackController.getLiveDelay();\r\n            const dvrWindowSize = !isNaN(streamInfo.manifestInfo.DVRWindowSize) ? streamInfo.manifestInfo.DVRWindowSize : liveDelay;\r\n            const dvrWindowSafetyMargin = 0.1 * dvrWindowSize;\r\n            let startTime;\r\n\r\n            // Make sure that we have at least a valid request for the end of the DVR window, otherwise we might try forever\r\n            if (!isFinite(dvrWindowSize) || getFragmentRequest(currentRepresentationInfo, liveEdge - dvrWindowSize + dvrWindowSafetyMargin, {\r\n                ignoreIsFinished: true\r\n            })) {\r\n\r\n                // Try to find a request as close as possible to the targeted live edge\r\n                while (!request && liveDelay <= dvrWindowSize) {\r\n                    startTime = liveEdge - liveDelay;\r\n                    request = getFragmentRequest(currentRepresentationInfo, startTime, {\r\n                        ignoreIsFinished: true\r\n                    });\r\n                    if (!request) {\r\n                        liveDelay += 1; // Increase by one second for each iteration\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (request) {\r\n                playbackController.setLiveDelay(liveDelay, true);\r\n            }\r\n            logger.debug('live edge: ' + liveEdge + ', live delay: ' + liveDelay + ', live target: ' + startTime);\r\n            return request;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function onSeekTarget(e) {\r\n        bufferingTime = e.time;\r\n        scheduleController.setSeekTarget(e.time);\r\n    }\r\n\r\n    function setBufferingTime(value) {\r\n        bufferingTime = value;\r\n    }\r\n\r\n    function resetIndexHandler() {\r\n        if (indexHandler) {\r\n            indexHandler.resetIndex();\r\n        }\r\n    }\r\n\r\n    function getInitRequest(quality) {\r\n        checkInteger(quality);\r\n        const representation = representationController ? representationController.getRepresentationForQuality(quality) : null;\r\n        return indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representation) : null;\r\n    }\r\n\r\n    function getFragmentRequest(representationInfo, time, options) {\r\n        let fragRequest = null;\r\n\r\n        if (indexHandler) {\r\n            const representation = representationController && representationInfo ? representationController.getRepresentationForQuality(representationInfo.quality) : null;\r\n\r\n            // if time and options are undefined, it means the next segment is requested\r\n            // otherwise, the segment at this specific time is requested.\r\n            if (time !== undefined && options !== undefined) {\r\n                fragRequest = indexHandler.getSegmentRequestForTime(getMediaInfo(), representation, time, options);\r\n            } else {\r\n                fragRequest = indexHandler.getNextSegmentRequest(getMediaInfo(), representation);\r\n            }\r\n        }\r\n\r\n        return fragRequest;\r\n    }\r\n\r\n    function finalisePlayList(time, reason) {\r\n        dashMetrics.pushPlayListTraceMetrics(time, reason);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        isUpdating: isUpdating,\r\n        getBufferController: getBufferController,\r\n        getFragmentModel: getFragmentModel,\r\n        getScheduleController: getScheduleController,\r\n        getRepresentationController: getRepresentationController,\r\n        getRepresentationInfo: getRepresentationInfo,\r\n        getBufferLevel: getBufferLevel,\r\n        isBufferingCompleted: isBufferingCompleted,\r\n        createBuffer: createBuffer,\r\n        updateStreamInfo: updateStreamInfo,\r\n        getStreamInfo: getStreamInfo,\r\n        selectMediaInfo: selectMediaInfo,\r\n        addMediaInfo: addMediaInfo,\r\n        getLiveStartTime: getLiveStartTime,\r\n        switchTrackAsked: switchTrackAsked,\r\n        getMediaInfoArr: getMediaInfoArr,\r\n        getMediaInfo: getMediaInfo,\r\n        getMediaSource: getMediaSource,\r\n        setMediaSource: setMediaSource,\r\n        dischargePreBuffer: dischargePreBuffer,\r\n        getBuffer: getBuffer,\r\n        setBuffer: setBuffer,\r\n        setBufferingTime: setBufferingTime,\r\n        resetIndexHandler: resetIndexHandler,\r\n        getInitRequest: getInitRequest,\r\n        getFragmentRequest: getFragmentRequest,\r\n        finalisePlayList: finalisePlayList,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nStreamProcessor.__dashjs_factory_name = 'StreamProcessor';\r\nexport default FactoryMaker.getClassFactory(StreamProcessor);\r\n"]}