{"version":3,"file":"dash.offline.min.js","sourceRoot":"./src/","sources":["..\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js","..\\externals\\xml2json.js","..\\node_modules\\codem-isoboxer\\dist\\iso_boxer.js","..\\node_modules\\fast-deep-equal\\index.js","..\\node_modules\\html-entities\\index.js","..\\node_modules\\html-entities\\lib\\html4-entities.js","..\\node_modules\\html-entities\\lib\\html5-entities.js","..\\node_modules\\html-entities\\lib\\xml-entities.js","..\\node_modules\\localforage\\dist\\localforage.js","core\\Debug.js","core\\EventBus.js","core\\FactoryMaker.js","core\\Settings.js","core\\Utils.js","core\\errors\\Errors.js","core\\errors\\ErrorsBase.js","core\\events\\CoreEvents.js","core\\events\\Events.js","core\\events\\EventsBase.js","dash\\DashHandler.js","dash\\constants\\DashConstants.js","dash\\controllers\\RepresentationController.js","dash\\controllers\\SegmentsController.js","dash\\models\\DashManifestModel.js","dash\\parser\\DashParser.js","dash\\parser\\maps\\CommonProperty.js","dash\\parser\\maps\\MapNode.js","dash\\parser\\maps\\RepresentationBaseValuesMap.js","dash\\parser\\maps\\SegmentValuesMap.js","dash\\parser\\matchers\\BaseMatcher.js","dash\\parser\\matchers\\DateTimeMatcher.js","dash\\parser\\matchers\\DurationMatcher.js","dash\\parser\\matchers\\NumericMatcher.js","dash\\parser\\matchers\\StringMatcher.js","dash\\parser\\objectiron.js","dash\\utils\\ListSegmentsGetter.js","dash\\utils\\SegmentBaseGetter.js","dash\\utils\\SegmentsUtils.js","dash\\utils\\TemplateSegmentsGetter.js","dash\\utils\\TimelineSegmentsGetter.js","dash\\vo\\AdaptationSet.js","dash\\vo\\BaseURL.js","dash\\vo\\Event.js","dash\\vo\\EventStream.js","dash\\vo\\Mpd.js","dash\\vo\\Period.js","dash\\vo\\Representation.js","dash\\vo\\Segment.js","dash\\vo\\UTCTiming.js","offline\\OfflineDownload.js","offline\\OfflineStream.js","offline\\OfflineStreamProcessor.js","offline\\constants\\OfflineConstants.js","offline\\controllers\\OfflineController.js","offline\\controllers\\OfflineStoreController.js","offline\\errors\\OfflineErrors.js","offline\\events\\OfflineEvents.js","offline\\index.js","offline\\net\\IndexDBOfflineLoader.js","offline\\storage\\IndexDBStore.js","offline\\utils\\OfflineIndexDBManifestParser.js","offline\\utils\\OfflineUrlUtils.js","offline\\vo\\OfflineDownloadVo.js","streaming\\FragmentLoader.js","streaming\\MediaPlayerEvents.js","streaming\\constants\\Constants.js","streaming\\metrics\\MetricsReportingEvents.js","streaming\\models\\CmcdModel.js","streaming\\models\\FragmentModel.js","streaming\\net\\FetchLoader.js","streaming\\net\\HTTPLoader.js","streaming\\net\\SchemeLoaderFactory.js","streaming\\net\\URLLoader.js","streaming\\net\\XHRLoader.js","streaming\\thumbnail\\ThumbnailTracks.js","streaming\\utils\\BoxParser.js","streaming\\utils\\DefaultURLUtils.js","streaming\\utils\\IsoFile.js","streaming\\utils\\ObjectUtils.js","streaming\\utils\\RequestModifier.js","streaming\\utils\\URLUtils.js","streaming\\vo\\DashJSError.js","streaming\\vo\\FragmentRequest.js","streaming\\vo\\HeadRequest.js","streaming\\vo\\IsoBox.js","streaming\\vo\\IsoBoxSearchInfo.js","streaming\\vo\\ThumbnailTrackInfo.js","streaming\\vo\\metrics\\HTTPRequest.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\r\n Copyright 2011-2013 Abdulla Abdurakhmanov\r\n Original sources are available at https://code.google.com/p/x2js/\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/*\r\n  Further modified for dashjs to:\r\n  - keep track of children nodes in order in attribute __children.\r\n  - add type conversion matchers\r\n  - re-add ignoreRoot\r\n  - allow zero-length attributePrefix\r\n  - don't add white-space text nodes\r\n  - remove explicit RequireJS support\r\n*/\r\n\r\nfunction X2JS(config) {\r\n    'use strict';\r\n\r\n    var VERSION = \"1.2.0\";\r\n\r\n    config = config || {};\r\n    initConfigDefaults();\r\n    initRequiredPolyfills();\r\n\r\n    function initConfigDefaults() {\r\n        if(config.escapeMode === undefined) {\r\n            config.escapeMode = true;\r\n        }\r\n\r\n        if (config.attributePrefix === undefined) {\r\n            config.attributePrefix = \"_\";\r\n        }\r\n\r\n        config.arrayAccessForm = config.arrayAccessForm || \"none\";\r\n        config.emptyNodeForm = config.emptyNodeForm || \"text\";\r\n\r\n        if(config.enableToStringFunc === undefined) {\r\n            config.enableToStringFunc = true;\r\n        }\r\n        config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];\r\n        if(config.skipEmptyTextNodesForObj === undefined) {\r\n            config.skipEmptyTextNodesForObj = true;\r\n        }\r\n        if(config.stripWhitespaces === undefined) {\r\n            config.stripWhitespaces = true;\r\n        }\r\n        config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];\r\n\r\n        if(config.useDoubleQuotes === undefined) {\r\n            config.useDoubleQuotes = false;\r\n        }\r\n\r\n        config.xmlElementsFilter = config.xmlElementsFilter || [];\r\n        config.jsonPropertiesFilter = config.jsonPropertiesFilter || [];\r\n\r\n        if(config.keepCData === undefined) {\r\n            config.keepCData = false;\r\n        }\r\n\r\n        if (config.ignoreRoot === undefined) {\r\n            config.ignoreRoot = false;\r\n        }\r\n    }\r\n\r\n    var DOMNodeTypes = {\r\n        ELEMENT_NODE \t   : 1,\r\n        TEXT_NODE    \t   : 3,\r\n        CDATA_SECTION_NODE : 4,\r\n        COMMENT_NODE\t   : 8,\r\n        DOCUMENT_NODE \t   : 9\r\n    };\r\n\r\n    function initRequiredPolyfills() {\r\n    }\r\n\r\n    function getNodeLocalName( node ) {\r\n        var nodeLocalName = node.localName;\r\n        if(nodeLocalName == null) // Yeah, this is IE!!\r\n            nodeLocalName = node.baseName;\r\n        if(nodeLocalName == null || nodeLocalName==\"\") // ==\"\" is IE too\r\n            nodeLocalName = node.nodeName;\r\n        return nodeLocalName;\r\n    }\r\n\r\n    function getNodePrefix(node) {\r\n        return node.prefix;\r\n    }\r\n\r\n    function escapeXmlChars(str) {\r\n        if(typeof(str) == \"string\")\r\n            return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\r\n        else\r\n            return str;\r\n    }\r\n\r\n    function unescapeXmlChars(str) {\r\n        return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&apos;/g, \"'\").replace(/&amp;/g, '&');\r\n    }\r\n\r\n    function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {\r\n        var idx = 0;\r\n        for(; idx < stdFiltersArrayForm.length; idx++) {\r\n            var filterPath = stdFiltersArrayForm[idx];\r\n            if( typeof filterPath === \"string\" ) {\r\n                if(filterPath == path)\r\n                    break;\r\n            }\r\n            else\r\n            if( filterPath instanceof RegExp) {\r\n                if(filterPath.test(path))\r\n                    break;\r\n            }\r\n            else\r\n            if( typeof filterPath === \"function\") {\r\n                if(filterPath(obj, name, path))\r\n                    break;\r\n            }\r\n        }\r\n        return idx!=stdFiltersArrayForm.length;\r\n    }\r\n\r\n    function toArrayAccessForm(obj, childName, path) {\r\n        switch(config.arrayAccessForm) {\r\n            case \"property\":\r\n                if(!(obj[childName] instanceof Array))\r\n                    obj[childName+\"_asArray\"] = [obj[childName]];\r\n                else\r\n                    obj[childName+\"_asArray\"] = obj[childName];\r\n                break;\r\n            /*case \"none\":\r\n                break;*/\r\n        }\r\n\r\n        if(!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {\r\n            if(checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path)) {\r\n                obj[childName] = [obj[childName]];\r\n            }\r\n        }\r\n    }\r\n\r\n    function fromXmlDateTime(prop) {\r\n        // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object\r\n        // Improved to support full spec and optional parts\r\n        var bits = prop.split(/[-T:+Z]/g);\r\n\r\n        var d = new Date(bits[0], bits[1]-1, bits[2]);\r\n        var secondBits = bits[5].split(\"\\.\");\r\n        d.setHours(bits[3], bits[4], secondBits[0]);\r\n        if(secondBits.length>1)\r\n            d.setMilliseconds(secondBits[1]);\r\n\r\n        // Get supplied time zone offset in minutes\r\n        if(bits[6] && bits[7]) {\r\n            var offsetMinutes = bits[6] * 60 + Number(bits[7]);\r\n            var sign = /\\d\\d-\\d\\d:\\d\\d$/.test(prop)? '-' : '+';\r\n\r\n            // Apply the sign\r\n            offsetMinutes = 0 + (sign == '-'? -1 * offsetMinutes : offsetMinutes);\r\n\r\n            // Apply offset and local timezone\r\n            d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())\r\n        }\r\n        else\r\n            if(prop.indexOf(\"Z\", prop.length - 1) !== -1) {\r\n                d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\r\n            }\r\n\r\n        // d is now a local time equivalent to the supplied time\r\n        return d;\r\n    }\r\n\r\n    function checkFromXmlDateTimePaths(value, childName, fullPath) {\r\n        if(config.datetimeAccessFormPaths.length > 0) {\r\n            var path = fullPath.split(\"\\.#\")[0];\r\n            if(checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path)) {\r\n                return fromXmlDateTime(value);\r\n            }\r\n            else\r\n                return value;\r\n        }\r\n        else\r\n            return value;\r\n    }\r\n\r\n    function checkXmlElementsFilter(obj, childType, childName, childPath) {\r\n        if( childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) {\r\n            return checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);\r\n        }\r\n        else\r\n            return true;\r\n    }\r\n\r\n    function parseDOMChildren( node, path ) {\r\n        if(node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {\r\n            var result = new Object;\r\n            var nodeChildren = node.childNodes;\r\n            // Alternative for firstElementChild which is not supported in some environments\r\n            for(var cidx=0; cidx <nodeChildren.length; cidx++) {\r\n                var child = nodeChildren[cidx];\r\n                if(child.nodeType == DOMNodeTypes.ELEMENT_NODE) {\r\n                    if (config.ignoreRoot) {\r\n                        result = parseDOMChildren(child);\r\n                    } else {\r\n                        result = {};\r\n                        var childName = getNodeLocalName(child);\r\n                        result[childName] = parseDOMChildren(child);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        else\r\n        if(node.nodeType == DOMNodeTypes.ELEMENT_NODE) {\r\n            var result = new Object;\r\n            result.__cnt=0;\r\n\r\n            var children = [];\r\n            var nodeChildren = node.childNodes;\r\n\r\n            // Children nodes\r\n            for(var cidx=0; cidx <nodeChildren.length; cidx++) {\r\n                var child = nodeChildren[cidx];\r\n                var childName = getNodeLocalName(child);\r\n\r\n                if(child.nodeType!= DOMNodeTypes.COMMENT_NODE) {\r\n                    var childPath = path+\".\"+childName;\r\n                    if (checkXmlElementsFilter(result,child.nodeType,childName,childPath)) {\r\n                        result.__cnt++;\r\n                        if(result[childName] == null) {\r\n                            var c = parseDOMChildren(child, childPath);\r\n                            if (childName != \"#text\" || /[^\\s]/.test(c)) {\r\n                                var o = {};\r\n                                o[childName] = c;\r\n                                children.push(o);\r\n                            }\r\n                            result[childName] = c;\r\n                            toArrayAccessForm(result, childName, childPath);\r\n                        }\r\n                        else {\r\n                            if(result[childName] != null) {\r\n                                if( !(result[childName] instanceof Array)) {\r\n                                    result[childName] = [result[childName]];\r\n                                    toArrayAccessForm(result, childName, childPath);\r\n                                }\r\n                            }\r\n\r\n                            var c = parseDOMChildren(child, childPath);\r\n                            if (childName != \"#text\" || /[^\\s]/.test(c)) { // Don't add white-space text nodes\r\n                                var o = {};\r\n                                o[childName] = c;\r\n                                children.push( o );\r\n                            }\r\n                            (result[childName])[result[childName].length] = c;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            result.__children = children;\r\n\r\n            // Attributes\r\n            var nodeLocalName = getNodeLocalName(node)\r\n            for(var aidx=0; aidx <node.attributes.length; aidx++) {\r\n                var attr = node.attributes[aidx];\r\n                result.__cnt++;\r\n\r\n                var value2 = attr.value;\r\n                for(var m=0, ml=config.matchers.length; m < ml; m++) {\r\n                    var matchobj = config.matchers[m];\r\n                    if (matchobj.test(attr, nodeLocalName))\r\n                        value2 = matchobj.converter(attr.value);\r\n                }\r\n\r\n                result[config.attributePrefix+attr.name]=value2;\r\n            }\r\n\r\n            // Node namespace prefix\r\n            var nodePrefix = getNodePrefix(node);\r\n            if(nodePrefix!=null && nodePrefix!=\"\") {\r\n                result.__cnt++;\r\n                result.__prefix=nodePrefix;\r\n            }\r\n\r\n            if(result[\"#text\"]!=null) {\r\n                result.__text = result[\"#text\"];\r\n                if(result.__text instanceof Array) {\r\n                    result.__text = result.__text.join(\"\\n\");\r\n                }\r\n                //if(config.escapeMode)\r\n                //\tresult.__text = unescapeXmlChars(result.__text);\r\n                if(config.stripWhitespaces)\r\n                    result.__text = result.__text.trim();\r\n                delete result[\"#text\"];\r\n                if(config.arrayAccessForm==\"property\")\r\n                    delete result[\"#text_asArray\"];\r\n                result.__text = checkFromXmlDateTimePaths(result.__text, childName, path+\".\"+childName);\r\n            }\r\n            if(result[\"#cdata-section\"]!=null) {\r\n                result.__cdata = result[\"#cdata-section\"];\r\n                delete result[\"#cdata-section\"];\r\n                if(config.arrayAccessForm==\"property\")\r\n                    delete result[\"#cdata-section_asArray\"];\r\n            }\r\n\r\n            if( result.__cnt == 0 && config.emptyNodeForm==\"text\" ) {\r\n                result = '';\r\n            }\r\n            else\r\n            if( result.__cnt == 1 && result.__text!=null  ) {\r\n                result = result.__text;\r\n            }\r\n            else\r\n            if( result.__cnt == 1 && result.__cdata!=null && !config.keepCData  ) {\r\n                result = result.__cdata;\r\n            }\r\n            else\r\n            if ( result.__cnt > 1 && result.__text!=null && config.skipEmptyTextNodesForObj) {\r\n                if( (config.stripWhitespaces && result.__text==\"\") || (result.__text.trim()==\"\")) {\r\n                    delete result.__text;\r\n                }\r\n            }\r\n            delete result.__cnt;\r\n\r\n            if( config.enableToStringFunc && (result.__text!=null || result.__cdata!=null )) {\r\n                result.toString = function() {\r\n                    return (this.__text!=null? this.__text:'')+( this.__cdata!=null ? this.__cdata:'');\r\n                };\r\n            }\r\n\r\n            return result;\r\n        }\r\n        else\r\n        if(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {\r\n            return node.nodeValue;\r\n        }\r\n    }\r\n\r\n    function startTag(jsonObj, element, attrList, closed) {\r\n        var resultStr = \"<\"+ ( (jsonObj!=null && jsonObj.__prefix!=null)? (jsonObj.__prefix+\":\"):\"\") + element;\r\n        if(attrList!=null) {\r\n            for(var aidx = 0; aidx < attrList.length; aidx++) {\r\n                var attrName = attrList[aidx];\r\n                var attrVal = jsonObj[attrName];\r\n                if(config.escapeMode)\r\n                    attrVal=escapeXmlChars(attrVal);\r\n                resultStr+=\" \"+attrName.substr(config.attributePrefix.length)+\"=\";\r\n                if(config.useDoubleQuotes)\r\n                    resultStr+='\"'+attrVal+'\"';\r\n                else\r\n                    resultStr+=\"'\"+attrVal+\"'\";\r\n            }\r\n        }\r\n        if(!closed)\r\n            resultStr+=\">\";\r\n        else\r\n            resultStr+=\"/>\";\r\n        return resultStr;\r\n    }\r\n\r\n    function endTag(jsonObj,elementName) {\r\n        return \"</\"+ (jsonObj.__prefix!=null? (jsonObj.__prefix+\":\"):\"\")+elementName+\">\";\r\n    }\r\n\r\n    function endsWith(str, suffix) {\r\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n    }\r\n\r\n    function jsonXmlSpecialElem ( jsonObj, jsonObjField ) {\r\n        if((config.arrayAccessForm==\"property\" && endsWith(jsonObjField.toString(),(\"_asArray\")))\r\n                || jsonObjField.toString().indexOf(config.attributePrefix)==0\r\n                || jsonObjField.toString().indexOf(\"__\")==0\r\n                || (jsonObj[jsonObjField] instanceof Function) )\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    function jsonXmlElemCount ( jsonObj ) {\r\n        var elementsCnt = 0;\r\n        if(jsonObj instanceof Object ) {\r\n            for( var it in jsonObj  ) {\r\n                if(jsonXmlSpecialElem ( jsonObj, it) )\r\n                    continue;\r\n                elementsCnt++;\r\n            }\r\n        }\r\n        return elementsCnt;\r\n    }\r\n\r\n    function checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {\r\n        return config.jsonPropertiesFilter.length == 0\r\n            || jsonObjPath==\"\"\r\n            || checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);\r\n    }\r\n\r\n    function parseJSONAttributes ( jsonObj ) {\r\n        var attrList = [];\r\n        if(jsonObj instanceof Object ) {\r\n            for( var ait in jsonObj  ) {\r\n                if(ait.toString().indexOf(\"__\")== -1 && ait.toString().indexOf(config.attributePrefix)==0) {\r\n                    attrList.push(ait);\r\n                }\r\n            }\r\n        }\r\n        return attrList;\r\n    }\r\n\r\n    function parseJSONTextAttrs ( jsonTxtObj ) {\r\n        var result =\"\";\r\n\r\n        if(jsonTxtObj.__cdata!=null) {\r\n            result+=\"<![CDATA[\"+jsonTxtObj.__cdata+\"]]>\";\r\n        }\r\n\r\n        if(jsonTxtObj.__text!=null) {\r\n            if(config.escapeMode)\r\n                result+=escapeXmlChars(jsonTxtObj.__text);\r\n            else\r\n                result+=jsonTxtObj.__text;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function parseJSONTextObject ( jsonTxtObj ) {\r\n        var result =\"\";\r\n\r\n        if( jsonTxtObj instanceof Object ) {\r\n            result+=parseJSONTextAttrs ( jsonTxtObj );\r\n        }\r\n        else\r\n            if(jsonTxtObj!=null) {\r\n                if(config.escapeMode)\r\n                    result+=escapeXmlChars(jsonTxtObj);\r\n                else\r\n                    result+=jsonTxtObj;\r\n            }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getJsonPropertyPath(jsonObjPath, jsonPropName) {\r\n        if (jsonObjPath===\"\") {\r\n            return jsonPropName;\r\n        }\r\n        else\r\n            return jsonObjPath+\".\"+jsonPropName;\r\n    }\r\n\r\n    function parseJSONArray ( jsonArrRoot, jsonArrObj, attrList, jsonObjPath ) {\r\n        var result = \"\";\r\n        if(jsonArrRoot.length == 0) {\r\n            result+=startTag(jsonArrRoot, jsonArrObj, attrList, true);\r\n        }\r\n        else {\r\n            for(var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {\r\n                result+=startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);\r\n                result+=parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath,jsonArrObj));\r\n                result+=endTag(jsonArrRoot[arIdx],jsonArrObj);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function parseJSONObject ( jsonObj, jsonObjPath ) {\r\n        var result = \"\";\r\n\r\n        var elementsCnt = jsonXmlElemCount ( jsonObj );\r\n\r\n        if(elementsCnt > 0) {\r\n            for( var it in jsonObj ) {\r\n\r\n                if(jsonXmlSpecialElem ( jsonObj, it) || (jsonObjPath!=\"\" && !checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath,it))) )\r\n                    continue;\r\n\r\n                var subObj = jsonObj[it];\r\n\r\n                var attrList = parseJSONAttributes( subObj )\r\n\r\n                if(subObj == null || subObj == undefined) {\r\n                    result+=startTag(subObj, it, attrList, true);\r\n                }\r\n                else\r\n                if(subObj instanceof Object) {\r\n\r\n                    if(subObj instanceof Array) {\r\n                        result+=parseJSONArray( subObj, it, attrList, jsonObjPath );\r\n                    }\r\n                    else if(subObj instanceof Date) {\r\n                        result+=startTag(subObj, it, attrList, false);\r\n                        result+=subObj.toISOString();\r\n                        result+=endTag(subObj,it);\r\n                    }\r\n                    else {\r\n                        var subObjElementsCnt = jsonXmlElemCount ( subObj );\r\n                        if(subObjElementsCnt > 0 || subObj.__text!=null || subObj.__cdata!=null) {\r\n                            result+=startTag(subObj, it, attrList, false);\r\n                            result+=parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath,it));\r\n                            result+=endTag(subObj,it);\r\n                        }\r\n                        else {\r\n                            result+=startTag(subObj, it, attrList, true);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    result+=startTag(subObj, it, attrList, false);\r\n                    result+=parseJSONTextObject(subObj);\r\n                    result+=endTag(subObj,it);\r\n                }\r\n            }\r\n        }\r\n        result+=parseJSONTextObject(jsonObj);\r\n\r\n        return result;\r\n    }\r\n\r\n    this.parseXmlString = function(xmlDocStr) {\r\n        var isIEParser = window.ActiveXObject || \"ActiveXObject\" in window;\r\n        if (xmlDocStr === undefined) {\r\n            return null;\r\n        }\r\n        var xmlDoc;\r\n        if (window.DOMParser) {\r\n            var parser=new window.DOMParser();\r\n            var parsererrorNS = null;\r\n            try {\r\n                xmlDoc = parser.parseFromString( xmlDocStr, \"text/xml\" );\r\n                if(xmlDoc.getElementsByTagNameNS(\"*\", \"parsererror\").length > 0) {\r\n                    xmlDoc = null;\r\n                }\r\n            }\r\n            catch(err) {\r\n                xmlDoc = null;\r\n            }\r\n        }\r\n        else {\r\n            // IE :(\r\n            if(xmlDocStr.indexOf(\"<?\")==0) {\r\n                xmlDocStr = xmlDocStr.substr( xmlDocStr.indexOf(\"?>\") + 2 );\r\n            }\r\n            xmlDoc=new ActiveXObject(\"Microsoft.XMLDOM\");\r\n            xmlDoc.async=\"false\";\r\n            xmlDoc.loadXML(xmlDocStr);\r\n        }\r\n        return xmlDoc;\r\n    };\r\n\r\n    this.asArray = function(prop) {\r\n        if (prop === undefined || prop == null)\r\n            return [];\r\n        else\r\n        if(prop instanceof Array)\r\n            return prop;\r\n        else\r\n            return [prop];\r\n    };\r\n\r\n    this.toXmlDateTime = function(dt) {\r\n        if(dt instanceof Date)\r\n            return dt.toISOString();\r\n        else\r\n        if(typeof(dt) === 'number' )\r\n            return new Date(dt).toISOString();\r\n        else\r\n            return null;\r\n    };\r\n\r\n    this.asDateTime = function(prop) {\r\n        if(typeof(prop) == \"string\") {\r\n            return fromXmlDateTime(prop);\r\n        }\r\n        else\r\n            return prop;\r\n    };\r\n\r\n    this.xml2json = function (xmlDoc) {\r\n        return parseDOMChildren ( xmlDoc );\r\n    };\r\n\r\n    this.xml_str2json = function (xmlDocStr) {\r\n        var xmlDoc = this.parseXmlString(xmlDocStr);\r\n        if(xmlDoc!=null)\r\n            return this.xml2json(xmlDoc);\r\n        else\r\n            return null;\r\n    };\r\n\r\n    this.json2xml_str = function (jsonObj) {\r\n        return parseJSONObject ( jsonObj, \"\" );\r\n    };\r\n\r\n    this.json2xml = function (jsonObj) {\r\n        var xmlDocStr = this.json2xml_str (jsonObj);\r\n        return this.parseXmlString(xmlDocStr);\r\n    };\r\n\r\n    this.getVersion = function () {\r\n        return VERSION;\r\n    };\r\n}\r\n\r\nexport default X2JS;\r\n","/*! codem-isoboxer v0.3.6 https://github.com/madebyhiro/codem-isoboxer/blob/master/LICENSE.txt */\nvar ISOBoxer = {};\n\nISOBoxer.parseBuffer = function(arrayBuffer) {\n  return new ISOFile(arrayBuffer).parse();\n};\n\nISOBoxer.addBoxProcessor = function(type, parser) {\n  if (typeof type !== 'string' || typeof parser !== 'function') {\n    return;\n  }\n  ISOBox.prototype._boxProcessors[type] = parser;\n};\n\nISOBoxer.createFile = function() {\n  return new ISOFile();\n};\n\n// See ISOBoxer.append() for 'pos' parameter syntax\nISOBoxer.createBox = function(type, parent, pos) {\n  var newBox = ISOBox.create(type);\n  if (parent) {\n    parent.append(newBox, pos);\n  }\n  return newBox;\n};\n\n// See ISOBoxer.append() for 'pos' parameter syntax\nISOBoxer.createFullBox = function(type, parent, pos) {\n  var newBox = ISOBoxer.createBox(type, parent, pos);\n  newBox.version = 0;\n  newBox.flags = 0;\n  return newBox;\n};\n\nISOBoxer.Utils = {};\nISOBoxer.Utils.dataViewToString = function(dataView, encoding) {\n  var impliedEncoding = encoding || 'utf-8';\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder(impliedEncoding).decode(dataView);\n  }\n  var a = [];\n  var i = 0;\n\n  if (impliedEncoding === 'utf-8') {\n    /* The following algorithm is essentially a rewrite of the UTF8.decode at\n    http://bannister.us/weblog/2007/simple-base64-encodedecode-javascript/\n    */\n\n    while (i < dataView.byteLength) {\n      var c = dataView.getUint8(i++);\n      if (c < 0x80) {\n        // 1-byte character (7 bits)\n      } else if (c < 0xe0) {\n        // 2-byte character (11 bits)\n        c = (c & 0x1f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      } else if (c < 0xf0) {\n        // 3-byte character (16 bits)\n        c = (c & 0xf) << 12;\n        c |= (dataView.getUint8(i++) & 0x3f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      } else {\n        // 4-byte character (21 bits)\n        c = (c & 0x7) << 18;\n        c |= (dataView.getUint8(i++) & 0x3f) << 12;\n        c |= (dataView.getUint8(i++) & 0x3f) << 6;\n        c |= (dataView.getUint8(i++) & 0x3f);\n      }\n      a.push(String.fromCharCode(c));\n    }\n  } else { // Just map byte-by-byte (probably wrong)\n    while (i < dataView.byteLength) {\n      a.push(String.fromCharCode(dataView.getUint8(i++)));\n    }\n  }\n  return a.join('');\n};\n\nISOBoxer.Utils.utf8ToByteArray = function(string) {\n  // Only UTF-8 encoding is supported by TextEncoder\n  var u, i;\n  if (typeof TextEncoder !== 'undefined') {\n    u = new TextEncoder().encode(string);\n  } else {\n    u = [];\n    for (i = 0; i < string.length; ++i) {\n      var c = string.charCodeAt(i);\n      if (c < 0x80) {\n        u.push(c);\n      } else if (c < 0x800) {\n        u.push(0xC0 | (c >> 6));\n        u.push(0x80 | (63 & c));\n      } else if (c < 0x10000) {\n        u.push(0xE0 | (c >> 12));\n        u.push(0x80 | (63 & (c >> 6)));\n        u.push(0x80 | (63 & c));\n      } else {\n        u.push(0xF0 | (c >> 18));\n        u.push(0x80 | (63 & (c >> 12)));\n        u.push(0x80 | (63 & (c >> 6)));\n        u.push(0x80 | (63 & c));\n      }\n    }\n  }\n  return u;\n};\n\n// Method to append a box in the list of child boxes\n// The 'pos' parameter can be either:\n//   - (number) a position index at which to insert the new box\n//   - (string) the type of the box after which to insert the new box\n//   - (object) the box after which to insert the new box\nISOBoxer.Utils.appendBox = function(parent, box, pos) {\n  box._offset = parent._cursor.offset;\n  box._root = (parent._root ? parent._root : parent);\n  box._raw = parent._raw;\n  box._parent = parent;\n\n  if (pos === -1) {\n    // The new box is a sub-box of the parent but not added in boxes array,\n    // for example when the new box is set as an entry (see dref and stsd for example)\n    return;\n  }\n\n  if (pos === undefined || pos === null) {\n    parent.boxes.push(box);\n    return;\n  }\n\n  var index = -1,\n      type;\n\n  if (typeof pos === \"number\") {\n    index = pos;\n  } else {\n    if (typeof pos === \"string\") {\n      type = pos;\n    } else if (typeof pos === \"object\" && pos.type) {\n      type = pos.type;\n    } else {\n      parent.boxes.push(box);\n      return;\n    }\n\n    for (var i = 0; i < parent.boxes.length; i++) {\n      if (type === parent.boxes[i].type) {\n        index = i + 1;\n        break;\n      }\n    }\n  }\n  parent.boxes.splice(index, 0, box);\n};\n\nif (typeof exports !== 'undefined') {\n  exports.parseBuffer     = ISOBoxer.parseBuffer;\n  exports.addBoxProcessor = ISOBoxer.addBoxProcessor;\n  exports.createFile      = ISOBoxer.createFile;\n  exports.createBox       = ISOBoxer.createBox;\n  exports.createFullBox   = ISOBoxer.createFullBox;\n  exports.Utils           = ISOBoxer.Utils;\n}\n\nISOBoxer.Cursor = function(initialOffset) {\n  this.offset = (typeof initialOffset == 'undefined' ? 0 : initialOffset);\n};\n\nvar ISOFile = function(arrayBuffer) {\n  this._cursor = new ISOBoxer.Cursor();\n  this.boxes = [];\n  if (arrayBuffer) {\n    this._raw = new DataView(arrayBuffer);\n  }\n};\n\nISOFile.prototype.fetch = function(type) {\n  var result = this.fetchAll(type, true);\n  return (result.length ? result[0] : null);\n};\n\nISOFile.prototype.fetchAll = function(type, returnEarly) {\n  var result = [];\n  ISOFile._sweep.call(this, type, result, returnEarly);\n  return result;\n};\n\nISOFile.prototype.parse = function() {\n  this._cursor.offset = 0;\n  this.boxes = [];\n  while (this._cursor.offset < this._raw.byteLength) {\n    var box = ISOBox.parse(this);\n\n    // Box could not be parsed\n    if (typeof box.type === 'undefined') break;\n\n    this.boxes.push(box);\n  }\n  return this;\n};\n\nISOFile._sweep = function(type, result, returnEarly) {\n  if (this.type && this.type == type) result.push(this);\n  for (var box in this.boxes) {\n    if (result.length && returnEarly) return;\n    ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);\n  }\n};\n\nISOFile.prototype.write = function() {\n\n  var length = 0,\n      i;\n\n  for (i = 0; i < this.boxes.length; i++) {\n    length += this.boxes[i].getLength(false);\n  }\n\n  var bytes = new Uint8Array(length);\n  this._rawo = new DataView(bytes.buffer);\n  this.bytes = bytes;\n  this._cursor.offset = 0;\n\n  for (i = 0; i < this.boxes.length; i++) {\n    this.boxes[i].write();\n  }\n\n  return bytes.buffer;\n};\n\nISOFile.prototype.append = function(box, pos) {\n  ISOBoxer.Utils.appendBox(this, box, pos);\n};\nvar ISOBox = function() {\n  this._cursor = new ISOBoxer.Cursor();\n};\n\nISOBox.parse = function(parent) {\n  var newBox = new ISOBox();\n  newBox._offset = parent._cursor.offset;\n  newBox._root = (parent._root ? parent._root : parent);\n  newBox._raw = parent._raw;\n  newBox._parent = parent;\n  newBox._parseBox();\n  parent._cursor.offset = newBox._raw.byteOffset + newBox._raw.byteLength;\n  return newBox;\n};\n\nISOBox.create = function(type) {\n  var newBox = new ISOBox();\n  newBox.type = type;\n  newBox.boxes = [];\n  return newBox;\n};\n\nISOBox.prototype._boxContainers = ['dinf', 'edts', 'mdia', 'meco', 'mfra', 'minf', 'moof', 'moov', 'mvex', 'stbl', 'strk', 'traf', 'trak', 'tref', 'udta', 'vttc', 'sinf', 'schi', 'encv', 'enca'];\n\nISOBox.prototype._boxProcessors = {};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Generic read/write functions\n\nISOBox.prototype._procField = function (name, type, size) {\n  if (this._parsing) {\n    this[name] = this._readField(type, size);\n  }\n  else {\n    this._writeField(type, size, this[name]);\n  }\n};\n\nISOBox.prototype._procFieldArray = function (name, length, type, size) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name][i] = this._readField(type, size);\n    }\n  }\n  else {\n    for (i = 0; i < this[name].length; i++) {\n      this._writeField(type, size, this[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procFullBox = function() {\n  this._procField('version', 'uint', 8);\n  this._procField('flags', 'uint', 24);\n};\n\nISOBox.prototype._procEntries = function(name, length, fn) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name].push({});\n      fn.call(this, this[name][i]);\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      fn.call(this, this[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procSubEntries = function(entry, name, length, fn) {\n  var i;\n  if (this._parsing) {\n    entry[name] = [];\n    for (i = 0; i < length; i++) {\n      entry[name].push({});\n      fn.call(this, entry[name][i]);\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      fn.call(this, entry[name][i]);\n    }\n  }\n};\n\nISOBox.prototype._procEntryField = function (entry, name, type, size) {\n  if (this._parsing) {\n    entry[name] = this._readField(type, size);\n  }\n  else {\n    this._writeField(type, size, entry[name]);\n  }\n};\n\nISOBox.prototype._procSubBoxes = function(name, length) {\n  var i;\n  if (this._parsing) {\n    this[name] = [];\n    for (i = 0; i < length; i++) {\n      this[name].push(ISOBox.parse(this));\n    }\n  }\n  else {\n    for (i = 0; i < length; i++) {\n      if (this._rawo) {\n        this[name][i].write();\n      } else {\n        this.size += this[name][i].getLength();\n      }\n    }\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Read/parse functions\n\nISOBox.prototype._readField = function(type, size) {\n  switch (type) {\n    case 'uint':\n      return this._readUint(size);\n    case 'int':\n      return this._readInt(size);\n    case 'template':\n      return this._readTemplate(size);\n    case 'string':\n      return (size === -1) ? this._readTerminatedString() : this._readString(size);\n    case 'data':\n      return this._readData(size);\n    case 'utf8':\n      return this._readUTF8String();\n    default:\n      return -1;\n  }\n};\n\nISOBox.prototype._readInt = function(size) {\n  var result = null,\n      offset = this._cursor.offset - this._raw.byteOffset;\n  switch(size) {\n  case 8:\n    result = this._raw.getInt8(offset);\n    break;\n  case 16:\n    result = this._raw.getInt16(offset);\n    break;\n  case 32:\n    result = this._raw.getInt32(offset);\n    break;\n  case 64:\n    // Warning: JavaScript cannot handle 64-bit integers natively.\n    // This will give unexpected results for integers >= 2^53\n    var s1 = this._raw.getInt32(offset);\n    var s2 = this._raw.getInt32(offset + 4);\n    result = (s1 * Math.pow(2,32)) + s2;\n    break;\n  }\n  this._cursor.offset += (size >> 3);\n  return result;\n};\n\nISOBox.prototype._readUint = function(size) {\n  var result = null,\n      offset = this._cursor.offset - this._raw.byteOffset,\n      s1, s2;\n  switch(size) {\n  case 8:\n    result = this._raw.getUint8(offset);\n    break;\n  case 16:\n    result = this._raw.getUint16(offset);\n    break;\n  case 24:\n    s1 = this._raw.getUint16(offset);\n    s2 = this._raw.getUint8(offset + 2);\n    result = (s1 << 8) + s2;\n    break;\n  case 32:\n    result = this._raw.getUint32(offset);\n    break;\n  case 64:\n    // Warning: JavaScript cannot handle 64-bit integers natively.\n    // This will give unexpected results for integers >= 2^53\n    s1 = this._raw.getUint32(offset);\n    s2 = this._raw.getUint32(offset + 4);\n    result = (s1 * Math.pow(2,32)) + s2;\n    break;\n  }\n  this._cursor.offset += (size >> 3);\n  return result;\n};\n\nISOBox.prototype._readString = function(length) {\n  var str = '';\n  for (var c = 0; c < length; c++) {\n    var char = this._readUint(8);\n    str += String.fromCharCode(char);\n  }\n  return str;\n};\n\nISOBox.prototype._readTemplate = function(size) {\n  var pre = this._readUint(size / 2);\n  var post = this._readUint(size / 2);\n  return pre + (post / Math.pow(2, size / 2));\n};\n\nISOBox.prototype._readTerminatedString = function() {\n  var str = '';\n  while (this._cursor.offset - this._offset < this._raw.byteLength) {\n    var char = this._readUint(8);\n    if (char === 0) break;\n    str += String.fromCharCode(char);\n  }\n  return str;\n};\n\nISOBox.prototype._readData = function(size) {\n  var length = (size > 0) ? size : (this._raw.byteLength - (this._cursor.offset - this._offset));\n  if (length > 0) {\n    var data = new Uint8Array(this._raw.buffer, this._cursor.offset, length);\n\n    this._cursor.offset += length;\n    return data;\n  }\n  else {\n    return null;\n  }\n};\n\nISOBox.prototype._readUTF8String = function() {\n  var length = this._raw.byteLength - (this._cursor.offset - this._offset);\n  var data = null;\n  if (length > 0) {\n    data = new DataView(this._raw.buffer, this._cursor.offset, length);\n    this._cursor.offset += length;\n  }\n \n  return data ? ISOBoxer.Utils.dataViewToString(data) : data;\n};\n\nISOBox.prototype._parseBox = function() {\n  this._parsing = true;\n  this._cursor.offset = this._offset;\n\n  // return immediately if there are not enough bytes to read the header\n  if (this._offset + 8 > this._raw.buffer.byteLength) {\n    this._root._incomplete = true;\n    return;\n  }\n\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  switch(this.size) {\n  case 0:\n    this._raw = new DataView(this._raw.buffer, this._offset, (this._raw.byteLength - this._cursor.offset + 8));\n    break;\n  case 1:\n    if (this._offset + this.size > this._raw.buffer.byteLength) {\n      this._incomplete = true;\n      this._root._incomplete = true;\n    } else {\n      this._raw = new DataView(this._raw.buffer, this._offset, this.largesize);\n    }\n    break;\n  default:\n    if (this._offset + this.size > this._raw.buffer.byteLength) {\n      this._incomplete = true;\n      this._root._incomplete = true;\n    } else {\n      this._raw = new DataView(this._raw.buffer, this._offset, this.size);\n    }\n  }\n\n  // additional parsing\n  if (!this._incomplete) {\n    if (this._boxProcessors[this.type]) {\n      this._boxProcessors[this.type].call(this);\n    }\n    if (this._boxContainers.indexOf(this.type) !== -1) {\n      this._parseContainerBox();\n    } else{\n      // Unknown box => read and store box content\n      this._data = this._readData();\n    }\n  }\n};\n\nISOBox.prototype._parseFullBox = function() {\n  this.version = this._readUint(8);\n  this.flags = this._readUint(24);\n};\n\nISOBox.prototype._parseContainerBox = function() {\n  this.boxes = [];\n  while (this._cursor.offset - this._raw.byteOffset < this._raw.byteLength) {\n    this.boxes.push(ISOBox.parse(this));\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Write functions\n\nISOBox.prototype.append = function(box, pos) {\n  ISOBoxer.Utils.appendBox(this, box, pos);\n};\n\nISOBox.prototype.getLength = function() {\n  this._parsing = false;\n  this._rawo = null;\n\n  this.size = 0;\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  if (this._boxProcessors[this.type]) {\n    this._boxProcessors[this.type].call(this);\n  }\n\n  if (this._boxContainers.indexOf(this.type) !== -1) {\n    for (var i = 0; i < this.boxes.length; i++) {\n      this.size += this.boxes[i].getLength();\n    }\n  } \n\n  if (this._data) {\n    this._writeData(this._data);\n  }\n\n  return this.size;\n};\n\nISOBox.prototype.write = function() {\n  this._parsing = false;\n  this._cursor.offset = this._parent._cursor.offset;\n\n  switch(this.size) {\n  case 0:\n    this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, (this.parent._rawo.byteLength - this._cursor.offset));\n    break;\n  case 1:\n      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.largesize);\n    break;\n  default:\n      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.size);\n  }\n\n  this._procField('size', 'uint', 32);\n  this._procField('type', 'string', 4);\n\n  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }\n  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }\n\n  if (this._boxProcessors[this.type]) {\n    this._boxProcessors[this.type].call(this);\n  }\n\n  if (this._boxContainers.indexOf(this.type) !== -1) {\n    for (var i = 0; i < this.boxes.length; i++) {\n      this.boxes[i].write();\n    }\n  } \n\n  if (this._data) {\n    this._writeData(this._data);\n  }\n\n  this._parent._cursor.offset += this.size;\n\n  return this.size;\n};\n\nISOBox.prototype._writeInt = function(size, value) {\n  if (this._rawo) {\n    var offset = this._cursor.offset - this._rawo.byteOffset;\n    switch(size) {\n    case 8:\n      this._rawo.setInt8(offset, value);\n      break;\n    case 16:\n      this._rawo.setInt16(offset, value);\n      break;\n    case 32:\n      this._rawo.setInt32(offset, value);\n      break;\n    case 64:\n      // Warning: JavaScript cannot handle 64-bit integers natively.\n      // This will give unexpected results for integers >= 2^53\n      var s1 = Math.floor(value / Math.pow(2,32));\n      var s2 = value - (s1 * Math.pow(2,32));\n      this._rawo.setUint32(offset, s1);\n      this._rawo.setUint32(offset + 4, s2);\n      break;\n    }\n    this._cursor.offset += (size >> 3);\n  } else {\n    this.size += (size >> 3);\n  }\n};\n\nISOBox.prototype._writeUint = function(size, value) {\n\n  if (this._rawo) {\n    var offset = this._cursor.offset - this._rawo.byteOffset,\n        s1, s2;\n    switch(size) {\n    case 8:\n      this._rawo.setUint8(offset, value);\n      break;\n    case 16:\n      this._rawo.setUint16(offset, value);\n      break;\n    case 24:\n      s1 = (value & 0xFFFF00) >> 8;\n      s2 = (value & 0x0000FF);\n      this._rawo.setUint16(offset, s1);\n      this._rawo.setUint8(offset + 2, s2);\n      break;\n    case 32:\n      this._rawo.setUint32(offset, value);\n      break;\n    case 64:\n      // Warning: JavaScript cannot handle 64-bit integers natively.\n      // This will give unexpected results for integers >= 2^53\n      s1 = Math.floor(value / Math.pow(2,32));\n      s2 = value - (s1 * Math.pow(2,32));\n      this._rawo.setUint32(offset, s1);\n      this._rawo.setUint32(offset + 4, s2);\n      break;\n    }\n    this._cursor.offset += (size >> 3);\n  } else {\n    this.size += (size >> 3);\n  }\n};\n\nISOBox.prototype._writeString = function(size, str) {\n  for (var c = 0; c < size; c++) {\n    this._writeUint(8, str.charCodeAt(c));\n  }\n};\n\nISOBox.prototype._writeTerminatedString = function(str) {\n  if (str.length === 0) {\n    return;\n  }\n  for (var c = 0; c < str.length; c++) {\n    this._writeUint(8, str.charCodeAt(c));\n  }\n  this._writeUint(8, 0);\n};\n\nISOBox.prototype._writeTemplate = function(size, value) {\n  var pre = Math.floor(value);\n  var post = (value - pre) * Math.pow(2, size / 2);\n  this._writeUint(size / 2, pre);\n  this._writeUint(size / 2, post);\n};\n\nISOBox.prototype._writeData = function(data) {\n  var i;\n  //data to copy\n  if (data) {\n    if (this._rawo) {\n      //Array and Uint8Array has also to be managed\n      if (data instanceof Array) {\n        var offset = this._cursor.offset - this._rawo.byteOffset;\n        for (var i = 0; i < data.length; i++) {\n          this._rawo.setInt8(offset + i, data[i]);\n        }\n        this._cursor.offset += data.length;\n      } \n\n      if (data instanceof Uint8Array) {\n        this._root.bytes.set(data, this._cursor.offset);\n        this._cursor.offset += data.length;\n      }\n\n    } else {\n      //nothing to copy only size to compute\n      this.size += data.length;\n    }\n  }\n};\n\nISOBox.prototype._writeUTF8String = function(string) {\n  var u = ISOBoxer.Utils.utf8ToByteArray(string);\n  if (this._rawo) {\n    var dataView = new DataView(this._rawo.buffer, this._cursor.offset, u.length);\n    for (var i = 0; i < u.length; i++) {\n      dataView.setUint8(i, u[i]);\n    }\n  } else {\n    this.size += u.length;\n  }\n};\n\nISOBox.prototype._writeField = function(type, size, value) {\n  switch (type) {\n  case 'uint':\n    this._writeUint(size, value);\n    break;\n  case 'int':\n    this._writeInt(size, value);\n    break;\n  case 'template':\n    this._writeTemplate(size, value);\n    break;\n  case 'string':\n      if (size == -1) {\n        this._writeTerminatedString(value);\n      } else {\n        this._writeString(size, value);\n      }\n      break;\n  case 'data':\n    this._writeData(value);\n    break;\n  case 'utf8':\n    this._writeUTF8String(value);\n    break;\n  default:\n    break;\n  }\n};\n\n// ISO/IEC 14496-15:2014 - avc1 box\nISOBox.prototype._boxProcessors['avc1'] = ISOBox.prototype._boxProcessors['encv'] = function() {\n  // SampleEntry fields\n  this._procFieldArray('reserved1', 6,    'uint', 8);\n  this._procField('data_reference_index', 'uint', 16);\n  // VisualSampleEntry fields\n  this._procField('pre_defined1',         'uint',     16);\n  this._procField('reserved2',            'uint',     16);\n  this._procFieldArray('pre_defined2', 3, 'uint',     32);\n  this._procField('width',                'uint',     16);\n  this._procField('height',               'uint',     16);\n  this._procField('horizresolution',      'template', 32);\n  this._procField('vertresolution',       'template', 32);\n  this._procField('reserved3',            'uint',     32);\n  this._procField('frame_count',          'uint',     16);\n  this._procFieldArray('compressorname', 32,'uint',    8);\n  this._procField('depth',                'uint',     16);\n  this._procField('pre_defined3',         'int',      16);\n  // AVCSampleEntry fields\n  this._procField('config', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box\nISOBox.prototype._boxProcessors['dref'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procSubBoxes('entries', this.entry_count);\n};\n\n// ISO/IEC 14496-12:2012 - 8.6.6 Edit List Box\nISOBox.prototype._boxProcessors['elst'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procEntries('entries', this.entry_count, function(entry) {\n    this._procEntryField(entry, 'segment_duration',     'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'media_time',           'int',  (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'media_rate_integer',   'int',  16);\n    this._procEntryField(entry, 'media_rate_fraction',  'int',  16);\n  });\n};\n\n// ISO/IEC 23009-1:2014 - 5.10.3.3 Event Message Box\nISOBox.prototype._boxProcessors['emsg'] = function() {\n  this._procFullBox();\n  if (this.version == 1) {\n    this._procField('timescale',                'uint',   32);\n    this._procField('presentation_time',        'uint',   64);\n    this._procField('event_duration',           'uint',   32);\n    this._procField('id',                       'uint',   32);\n    this._procField('scheme_id_uri',            'string', -1);\n    this._procField('value',                    'string', -1);\n  } else {\n    this._procField('scheme_id_uri',            'string', -1);\n    this._procField('value',                    'string', -1);\n    this._procField('timescale',                'uint',   32);\n    this._procField('presentation_time_delta',  'uint',   32);\n    this._procField('event_duration',           'uint',   32);\n    this._procField('id',                       'uint',   32);\n  }\n  this._procField('message_data',             'data',   -1);\n};\n// ISO/IEC 14496-12:2012 - 8.1.2 Free Space Box\nISOBox.prototype._boxProcessors['free'] = ISOBox.prototype._boxProcessors['skip'] = function() {\n  this._procField('data', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.12.2 Original Format Box\nISOBox.prototype._boxProcessors['frma'] = function() {\n  this._procField('data_format', 'uint', 32);\n};\n// ISO/IEC 14496-12:2012 - 4.3 File Type Box / 8.16.2 Segment Type Box\nISOBox.prototype._boxProcessors['ftyp'] =\nISOBox.prototype._boxProcessors['styp'] = function() {\n  this._procField('major_brand', 'string', 4);\n  this._procField('minor_version', 'uint', 32);\n  var nbCompatibleBrands = -1;\n  if (this._parsing) {\n    nbCompatibleBrands = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset)) / 4;\n  }\n  this._procFieldArray('compatible_brands', nbCompatibleBrands, 'string', 4);\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.3 Handler Reference Box\nISOBox.prototype._boxProcessors['hdlr'] = function() {\n  this._procFullBox();\n  this._procField('pre_defined',      'uint',   32);\n  this._procField('handler_type',     'string', 4);\n  this._procFieldArray('reserved', 3, 'uint', 32);\n  this._procField('name',             'string', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.1.1 Media Data Box\nISOBox.prototype._boxProcessors['mdat'] = function() {\n  this._procField('data', 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.2 Media Header Box\nISOBox.prototype._boxProcessors['mdhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint', (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint', (this.version == 1) ? 64 : 32);\n  this._procField('timescale',          'uint', 32);\n  this._procField('duration',           'uint', (this.version == 1) ? 64 : 32);\n  if (!this._parsing && typeof this.language === 'string') {\n    // In case of writing and language has been set as a string, then convert it into char codes array\n    this.language = ((this.language.charCodeAt(0) - 0x60) << 10) |\n                    ((this.language.charCodeAt(1) - 0x60) << 5) |\n                    ((this.language.charCodeAt(2) - 0x60));\n  }\n  this._procField('language',           'uint', 16);\n  if (this._parsing) {\n    this.language = String.fromCharCode(((this.language >> 10) & 0x1F) + 0x60,\n                                        ((this.language >> 5) & 0x1F) + 0x60,\n                                        (this.language & 0x1F) + 0x60);\n  }\n  this._procField('pre_defined',        'uint', 16);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.2 Movie Extends Header Box\nISOBox.prototype._boxProcessors['mehd'] = function() {\n  this._procFullBox();\n  this._procField('fragment_duration', 'uint', (this.version == 1) ? 64 : 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.5 Movie Fragment Header Box\nISOBox.prototype._boxProcessors['mfhd'] = function() {\n  this._procFullBox();\n  this._procField('sequence_number', 'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.11 Movie Fragment Random Access Box\nISOBox.prototype._boxProcessors['mfro'] = function() {\n  this._procFullBox();\n  this._procField('mfra_size', 'uint', 32); // Called mfra_size to distinguish from the normal \"size\" attribute of a box\n};\n\n\n// ISO/IEC 14496-12:2012 - 8.5.2.2 mp4a box (use AudioSampleEntry definition and naming)\nISOBox.prototype._boxProcessors['mp4a'] = ISOBox.prototype._boxProcessors['enca'] = function() {\n  // SampleEntry fields\n  this._procFieldArray('reserved1', 6,    'uint', 8);\n  this._procField('data_reference_index', 'uint', 16);\n  // AudioSampleEntry fields\n  this._procFieldArray('reserved2', 2,    'uint', 32);\n  this._procField('channelcount',         'uint', 16);\n  this._procField('samplesize',           'uint', 16);\n  this._procField('pre_defined',          'uint', 16);\n  this._procField('reserved3',            'uint', 16);\n  this._procField('samplerate',           'template', 32);\n  // ESDescriptor fields\n  this._procField('esds',                 'data', -1);\n};\n\n// ISO/IEC 14496-12:2012 - 8.2.2 Movie Header Box\nISOBox.prototype._boxProcessors['mvhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('timescale',          'uint',     32);\n  this._procField('duration',           'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('rate',               'template', 32);\n  this._procField('volume',             'template', 16);\n  this._procField('reserved1',          'uint',  16);\n  this._procFieldArray('reserved2', 2,  'uint',     32);\n  this._procFieldArray('matrix', 9,     'template', 32);\n  this._procFieldArray('pre_defined', 6,'uint',   32);\n  this._procField('next_track_ID',      'uint',     32);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Cue Payload Box.\nISOBox.prototype._boxProcessors['payl'] = function() {\n  this._procField('cue_text', 'utf8');\n};\n\n//ISO/IEC 23001-7:2011 - 8.1 Protection System Specific Header Box\nISOBox.prototype._boxProcessors['pssh'] = function() {\n  this._procFullBox();\n  \n  this._procFieldArray('SystemID', 16, 'uint', 8);\n  this._procField('DataSize', 'uint', 32);\n  this._procFieldArray('Data', this.DataSize, 'uint', 8);\n};\n// ISO/IEC 14496-12:2012 - 8.12.5 Scheme Type Box\nISOBox.prototype._boxProcessors['schm'] = function() {\n    this._procFullBox();\n    \n    this._procField('scheme_type', 'uint', 32);\n    this._procField('scheme_version', 'uint', 32);\n\n    if (this.flags & 0x000001) {\n        this._procField('scheme_uri', 'string', -1);\n    }\n};\n// ISO/IEC 14496-12:2012 - 8.6.4.1 sdtp box \nISOBox.prototype._boxProcessors['sdtp'] = function() {\n  this._procFullBox();\n\n  var sample_count = -1;\n  if (this._parsing) {\n    sample_count = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset));\n  }\n\n  this._procFieldArray('sample_dependency_table', sample_count, 'uint', 8);\n};\n\n// ISO/IEC 14496-12:2012 - 8.16.3 Segment Index Box\nISOBox.prototype._boxProcessors['sidx'] = function() {\n  this._procFullBox();\n  this._procField('reference_ID', 'uint', 32);\n  this._procField('timescale', 'uint', 32);\n  this._procField('earliest_presentation_time', 'uint', (this.version == 1) ? 64 : 32);\n  this._procField('first_offset', 'uint', (this.version == 1) ? 64 : 32);\n  this._procField('reserved', 'uint', 16);\n  this._procField('reference_count', 'uint', 16);\n  this._procEntries('references', this.reference_count, function(entry) {\n    if (!this._parsing) {\n      entry.reference  = (entry.reference_type  & 0x00000001) << 31;\n      entry.reference |= (entry.referenced_size & 0x7FFFFFFF);\n      entry.sap  = (entry.starts_with_SAP & 0x00000001) << 31;\n      entry.sap |= (entry.SAP_type        & 0x00000003) << 28;\n      entry.sap |= (entry.SAP_delta_time  & 0x0FFFFFFF);\n    }\n    this._procEntryField(entry, 'reference', 'uint', 32);\n    this._procEntryField(entry, 'subsegment_duration', 'uint', 32);\n    this._procEntryField(entry, 'sap', 'uint', 32);\n    if (this._parsing) {\n      entry.reference_type = (entry.reference >> 31) & 0x00000001;\n      entry.referenced_size = entry.reference & 0x7FFFFFFF;\n      entry.starts_with_SAP  = (entry.sap >> 31) & 0x00000001;\n      entry.SAP_type = (entry.sap >> 28) & 0x00000007;\n      entry.SAP_delta_time = (entry.sap  & 0x0FFFFFFF);\n    }\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.5.3 Sound Media Header Box\nISOBox.prototype._boxProcessors['smhd'] = function() {\n  this._procFullBox();\n  this._procField('balance',  'uint', 16);\n  this._procField('reserved', 'uint', 16);\n};\n\n// ISO/IEC 14496-12:2012 - 8.16.4 Subsegment Index Box\nISOBox.prototype._boxProcessors['ssix'] = function() {\n  this._procFullBox();\n  this._procField('subsegment_count', 'uint', 32);\n  this._procEntries('subsegments', this.subsegment_count, function(subsegment) {\n    this._procEntryField(subsegment, 'ranges_count', 'uint', 32);\n    this._procSubEntries(subsegment, 'ranges', subsegment.ranges_count, function(range) {\n      this._procEntryField(range, 'level', 'uint', 8);\n      this._procEntryField(range, 'range_size', 'uint', 24);\n    });\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.5.2 Sample Description Box\nISOBox.prototype._boxProcessors['stsd'] = function() {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procSubBoxes('entries', this.entry_count);\n};\n\n// ISO/IEC 14496-12:2015 - 8.7.7 Sub-Sample Information Box\nISOBox.prototype._boxProcessors['subs'] = function () {\n  this._procFullBox();\n  this._procField('entry_count', 'uint', 32);\n  this._procEntries('entries', this.entry_count, function(entry) {\n    this._procEntryField(entry, 'sample_delta', 'uint', 32);\n    this._procEntryField(entry, 'subsample_count', 'uint', 16);\n    this._procSubEntries(entry, 'subsamples', entry.subsample_count, function(subsample) {\n      this._procEntryField(subsample, 'subsample_size', 'uint', (this.version === 1) ? 32 : 16);\n      this._procEntryField(subsample, 'subsample_priority', 'uint', 8);\n      this._procEntryField(subsample, 'discardable', 'uint', 8);\n      this._procEntryField(subsample, 'codec_specific_parameters', 'uint', 32);\n    });\n  });\n};\n\n//ISO/IEC 23001-7:2011 - 8.2 Track Encryption Box\nISOBox.prototype._boxProcessors['tenc'] = function() {\n    this._procFullBox();\n\n    this._procField('default_IsEncrypted', 'uint', 24);\n    this._procField('default_IV_size', 'uint', 8);\n    this._procFieldArray('default_KID', 16,    'uint', 8);\n };\n\n// ISO/IEC 14496-12:2012 - 8.8.12 Track Fragmnent Decode Time\nISOBox.prototype._boxProcessors['tfdt'] = function() {\n  this._procFullBox();\n  this._procField('baseMediaDecodeTime', 'uint', (this.version == 1) ? 64 : 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.7 Track Fragment Header Box\nISOBox.prototype._boxProcessors['tfhd'] = function() {\n  this._procFullBox();\n  this._procField('track_ID', 'uint', 32);\n  if (this.flags & 0x01) this._procField('base_data_offset',          'uint', 64);\n  if (this.flags & 0x02) this._procField('sample_description_offset', 'uint', 32);\n  if (this.flags & 0x08) this._procField('default_sample_duration',   'uint', 32);\n  if (this.flags & 0x10) this._procField('default_sample_size',       'uint', 32);\n  if (this.flags & 0x20) this._procField('default_sample_flags',      'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.10 Track Fragment Random Access Box\nISOBox.prototype._boxProcessors['tfra'] = function() {\n  this._procFullBox();\n  this._procField('track_ID', 'uint', 32);\n  if (!this._parsing) {\n    this.reserved = 0;\n    this.reserved |= (this.length_size_of_traf_num  & 0x00000030) << 4;\n    this.reserved |= (this.length_size_of_trun_num  & 0x0000000C) << 2;\n    this.reserved |= (this.length_size_of_sample_num  & 0x00000003);\n  }\n  this._procField('reserved', 'uint', 32);\n  if (this._parsing) {\n    this.length_size_of_traf_num = (this.reserved & 0x00000030) >> 4;\n    this.length_size_of_trun_num = (this.reserved & 0x0000000C) >> 2;\n    this.length_size_of_sample_num = (this.reserved & 0x00000003);\n  }\n  this._procField('number_of_entry', 'uint', 32);\n  this._procEntries('entries', this.number_of_entry, function(entry) {\n    this._procEntryField(entry, 'time', 'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'moof_offset', 'uint', (this.version === 1) ? 64 : 32);\n    this._procEntryField(entry, 'traf_number', 'uint', (this.length_size_of_traf_num + 1) * 8);\n    this._procEntryField(entry, 'trun_number', 'uint', (this.length_size_of_trun_num + 1) * 8);\n    this._procEntryField(entry, 'sample_number', 'uint', (this.length_size_of_sample_num + 1) * 8);\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.3.2 Track Header Box\nISOBox.prototype._boxProcessors['tkhd'] = function() {\n  this._procFullBox();\n  this._procField('creation_time',      'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('modification_time',  'uint',     (this.version == 1) ? 64 : 32);\n  this._procField('track_ID',           'uint',     32);\n  this._procField('reserved1',          'uint',     32);\n  this._procField('duration',           'uint',     (this.version == 1) ? 64 : 32);\n  this._procFieldArray('reserved2', 2,  'uint',     32);\n  this._procField('layer',              'uint',     16);\n  this._procField('alternate_group',    'uint',     16);\n  this._procField('volume',             'template', 16);\n  this._procField('reserved3',          'uint',     16);\n  this._procFieldArray('matrix', 9,     'template', 32);\n  this._procField('width',              'template', 32);\n  this._procField('height',             'template', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.3 Track Extends Box\nISOBox.prototype._boxProcessors['trex'] = function() {\n  this._procFullBox();\n  this._procField('track_ID',                         'uint', 32);\n  this._procField('default_sample_description_index', 'uint', 32);\n  this._procField('default_sample_duration',          'uint', 32);\n  this._procField('default_sample_size',              'uint', 32);\n  this._procField('default_sample_flags',             'uint', 32);\n};\n\n// ISO/IEC 14496-12:2012 - 8.8.8 Track Run Box\n// Note: the 'trun' box has a direct relation to the 'tfhd' box for defaults.\n// These defaults are not set explicitly here, but are left to resolve for the user.\nISOBox.prototype._boxProcessors['trun'] = function() {\n  this._procFullBox();\n  this._procField('sample_count', 'uint', 32);\n  if (this.flags & 0x1) this._procField('data_offset', 'int', 32);\n  if (this.flags & 0x4) this._procField('first_sample_flags', 'uint', 32);\n  this._procEntries('samples', this.sample_count, function(sample) {\n    if (this.flags & 0x100) this._procEntryField(sample, 'sample_duration', 'uint', 32);\n    if (this.flags & 0x200) this._procEntryField(sample, 'sample_size', 'uint', 32);\n    if (this.flags & 0x400) this._procEntryField(sample, 'sample_flags', 'uint', 32);\n    if (this.flags & 0x800) this._procEntryField(sample, 'sample_composition_time_offset', (this.version === 1) ? 'int' : 'uint',  32);\n  });\n};\n\n// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box\nISOBox.prototype._boxProcessors['url '] = ISOBox.prototype._boxProcessors['urn '] = function() {\n  this._procFullBox();\n  if (this.type === 'urn ') {\n    this._procField('name', 'string', -1);\n  }\n  this._procField('location', 'string', -1);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Source Label Box\nISOBox.prototype._boxProcessors['vlab'] = function() {\n  this._procField('source_label', 'utf8');\n};\n\n// ISO/IEC 14496-12:2012 - 8.4.5.2 Video Media Header Box\nISOBox.prototype._boxProcessors['vmhd'] = function() {\n  this._procFullBox();\n  this._procField('graphicsmode', 'uint', 16);\n  this._procFieldArray('opcolor', 3, 'uint', 16);\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Configuration Box\nISOBox.prototype._boxProcessors['vttC'] = function() {\n  this._procField('config', 'utf8');\n};\n\n// ISO/IEC 14496-30:2014 - WebVTT Empty Sample Box\nISOBox.prototype._boxProcessors['vtte'] = function() {\n  // Nothing should happen here.\n};\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a!==a && b!==b;\n};\n","module.exports = {\n  XmlEntities: require(7),\n  Html4Entities: require(5),\n  Html5Entities: require(6),\n  AllHtmlEntities: require(6)\n};\n","var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];\nvar HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];\n\nvar alphaIndex = {};\nvar numIndex = {};\n\nvar i = 0;\nvar length = HTML_ALPHA.length;\nwhile (i < length) {\n    var a = HTML_ALPHA[i];\n    var c = HTML_CODES[i];\n    alphaIndex[a] = String.fromCharCode(c);\n    numIndex[c] = a;\n    i++;\n}\n\n/**\n * @constructor\n */\nfunction Html4Entities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.decode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    return str.replace(/&(#?[\\w\\d]+);?/g, function(s, entity) {\n        var chr;\n        if (entity.charAt(0) === \"#\") {\n            var code = entity.charAt(1).toLowerCase() === 'x' ?\n                parseInt(entity.substr(2), 16) :\n                parseInt(entity.substr(1));\n\n            if (!(isNaN(code) || code < -32768 || code > 65535)) {\n                chr = String.fromCharCode(code);\n            }\n        } else {\n            chr = alphaIndex[entity];\n        }\n        return chr || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.decode = function(str) {\n    return new Html4Entities().decode(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var alpha = numIndex[str.charCodeAt(i)];\n        result += alpha ? \"&\" + alpha + \";\" : str.charAt(i);\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encode = function(str) {\n    return new Html4Entities().encode(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encodeNonUTF = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var cc = str.charCodeAt(i);\n        var alpha = numIndex[cc];\n        if (alpha) {\n            result += \"&\" + alpha + \";\";\n        } else if (cc < 32 || cc > 126) {\n            result += \"&#\" + cc + \";\";\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encodeNonUTF = function(str) {\n    return new Html4Entities().encodeNonUTF(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encodeNonASCII = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encodeNonASCII = function(str) {\n    return new Html4Entities().encodeNonASCII(str);\n};\n\nmodule.exports = Html4Entities;\n","var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];\n\nvar alphaIndex = {};\nvar charIndex = {};\n\ncreateIndexes(alphaIndex, charIndex);\n\n/**\n * @constructor\n */\nfunction Html5Entities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.decode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    return str.replace(/&(#?[\\w\\d]+);?/g, function(s, entity) {\n        var chr;\n        if (entity.charAt(0) === \"#\") {\n            var code = entity.charAt(1) === 'x' ?\n                parseInt(entity.substr(2).toLowerCase(), 16) :\n                parseInt(entity.substr(1));\n\n            if (!(isNaN(code) || code < -32768 || code > 65535)) {\n                chr = String.fromCharCode(code);\n            }\n        } else {\n            chr = alphaIndex[entity];\n        }\n        return chr || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.decode = function(str) {\n    return new Html5Entities().decode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var charInfo = charIndex[str.charCodeAt(i)];\n        if (charInfo) {\n            var alpha = charInfo[str.charCodeAt(i + 1)];\n            if (alpha) {\n                i++;\n            } else {\n                alpha = charInfo[''];\n            }\n            if (alpha) {\n                result += \"&\" + alpha + \";\";\n                i++;\n                continue;\n            }\n        }\n        result += str.charAt(i);\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encode = function(str) {\n    return new Html5Entities().encode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encodeNonUTF = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        var charInfo = charIndex[c];\n        if (charInfo) {\n            var alpha = charInfo[str.charCodeAt(i + 1)];\n            if (alpha) {\n                i++;\n            } else {\n                alpha = charInfo[''];\n            }\n            if (alpha) {\n                result += \"&\" + alpha + \";\";\n                i++;\n                continue;\n            }\n        }\n        if (c < 32 || c > 126) {\n            result += '&#' + c + ';';\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encodeNonUTF = function(str) {\n    return new Html5Entities().encodeNonUTF(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encodeNonASCII = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encodeNonASCII = function(str) {\n    return new Html5Entities().encodeNonASCII(str);\n };\n\n/**\n * @param {Object} alphaIndex Passed by reference.\n * @param {Object} charIndex Passed by reference.\n */\nfunction createIndexes(alphaIndex, charIndex) {\n    var i = ENTITIES.length;\n    var _results = [];\n    while (i--) {\n        var e = ENTITIES[i];\n        var alpha = e[0];\n        var chars = e[1];\n        var chr = chars[0];\n        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;\n        var charInfo;\n        if (addChar) {\n            charInfo = charIndex[chr] = charIndex[chr] || {};\n        }\n        if (chars[1]) {\n            var chr2 = chars[1];\n            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);\n            _results.push(addChar && (charInfo[chr2] = alpha));\n        } else {\n            alphaIndex[alpha] = String.fromCharCode(chr);\n            _results.push(addChar && (charInfo[''] = alpha));\n        }\n    }\n}\n\nmodule.exports = Html5Entities;\n","var ALPHA_INDEX = {\n    '&lt': '<',\n    '&gt': '>',\n    '&quot': '\"',\n    '&apos': '\\'',\n    '&amp': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&apos;': '\\'',\n    '&amp;': '&'\n};\n\nvar CHAR_INDEX = {\n    60: 'lt',\n    62: 'gt',\n    34: 'quot',\n    39: 'apos',\n    38: 'amp'\n};\n\nvar CHAR_S_INDEX = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&apos;',\n    '&': '&amp;'\n};\n\n/**\n * @constructor\n */\nfunction XmlEntities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    return str.replace(/<|>|\"|'|&/g, function(s) {\n        return CHAR_S_INDEX[s];\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encode = function(str) {\n    return new XmlEntities().encode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.decode = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {\n        if (s.charAt(1) === '#') {\n            var code = s.charAt(2).toLowerCase() === 'x' ?\n                parseInt(s.substr(3), 16) :\n                parseInt(s.substr(2));\n\n            if (isNaN(code) || code < -32768 || code > 65535) {\n                return '';\n            }\n            return String.fromCharCode(code);\n        }\n        return ALPHA_INDEX[s] || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.decode = function(str) {\n    return new XmlEntities().decode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encodeNonUTF = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLength = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        var alpha = CHAR_INDEX[c];\n        if (alpha) {\n            result += \"&\" + alpha + \";\";\n            i++;\n            continue;\n        }\n        if (c < 32 || c > 126) {\n            result += '&#' + c + ';';\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encodeNonUTF = function(str) {\n    return new XmlEntities().encodeNonUTF(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encodeNonASCII = function(str) {\n    if (!str || !str.length) {\n        return '';\n    }\n    var strLenght = str.length;\n    var result = '';\n    var i = 0;\n    while (i < strLenght) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encodeNonASCII = function(str) {\n    return new XmlEntities().encodeNonASCII(str);\n };\n\nmodule.exports = XmlEntities;\n","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.7.3\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support (#5572)\n        // since Safari 10.1 shipped with fetch, we can use that to detect it\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            resolve(openreq.result);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback retuns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = req.onblocked = function (err) {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(err);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from './EventBus';\r\nimport Events from './events/Events';\r\nimport FactoryMaker from './FactoryMaker';\r\n\r\nconst LOG_LEVEL_NONE = 0;\r\nconst LOG_LEVEL_FATAL = 1;\r\nconst LOG_LEVEL_ERROR = 2;\r\nconst LOG_LEVEL_WARNING = 3;\r\nconst LOG_LEVEL_INFO = 4;\r\nconst LOG_LEVEL_DEBUG = 5;\r\n\r\n/**\r\n * @module Debug\r\n * @param {object} config\r\n * @ignore\r\n */\r\nfunction Debug(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const settings = config.settings;\r\n\r\n    const logFn = [];\r\n\r\n    let instance,\r\n        showLogTimestamp,\r\n        showCalleeName,\r\n        startTime;\r\n\r\n    function setup() {\r\n        showLogTimestamp = true;\r\n        showCalleeName = true;\r\n        startTime = new Date().getTime();\r\n\r\n        if (typeof window !== 'undefined' && window.console) {\r\n            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\r\n            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\r\n            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\r\n            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\r\n            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\r\n        }\r\n    }\r\n\r\n    function getLogFn(fn) {\r\n        if (fn && fn.bind) {\r\n            return fn.bind(window.console);\r\n        }\r\n        // if not define, return the default function for reporting logs\r\n        return window.console.log.bind(window.console);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a logger which can be used to write logging information in browser console.\r\n     * @param {object} instance Object for which the logger is created. It is used\r\n     * to include calle object information in log messages.\r\n     * @memberof module:Debug\r\n     * @returns {Logger}\r\n     * @instance\r\n     */\r\n    function getLogger(instance) {\r\n        return {\r\n            fatal: fatal.bind(instance),\r\n            error: error.bind(instance),\r\n            warn: warn.bind(instance),\r\n            info: info.bind(instance),\r\n            debug: debug.bind(instance)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Prepends a timestamp in milliseconds to each log message.\r\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\r\n     * @default LOG_LEVEL_WARNING\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setLogTimestampVisible(value) {\r\n        showLogTimestamp = value;\r\n    }\r\n    /**\r\n     * Prepends the callee object name, and media type if available, to each log message.\r\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\r\n     * @default true\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setCalleeNameVisible(value) {\r\n        showCalleeName = value;\r\n    }\r\n\r\n    function fatal(...params) {\r\n        doLog(LOG_LEVEL_FATAL, this, ...params);\r\n    }\r\n\r\n    function error(...params) {\r\n        doLog(LOG_LEVEL_ERROR, this, ...params);\r\n    }\r\n\r\n    function warn(...params) {\r\n        doLog(LOG_LEVEL_WARNING, this, ...params);\r\n    }\r\n\r\n    function info(...params) {\r\n        doLog(LOG_LEVEL_INFO, this, ...params);\r\n    }\r\n\r\n    function debug(...params) {\r\n        doLog(LOG_LEVEL_DEBUG, this, ...params);\r\n    }\r\n\r\n    function doLog(level, _this, ...params) {\r\n        let message = '';\r\n        let logTime = null;\r\n\r\n        if (showLogTimestamp) {\r\n            logTime = new Date().getTime();\r\n            message += '[' + (logTime - startTime) + ']';\r\n        }\r\n\r\n        if (showCalleeName && _this && _this.getClassName) {\r\n            message += '[' + _this.getClassName() + ']';\r\n            if (_this.getType) {\r\n                message += '[' + _this.getType() + ']';\r\n            }\r\n        }\r\n\r\n        if (message.length > 0) {\r\n            message += ' ';\r\n        }\r\n\r\n        Array.apply(null, params).forEach(function (item) {\r\n            message += item + ' ';\r\n        });\r\n\r\n        // log to console if the log level is high enough\r\n        if (logFn[level] && settings.get().debug.logLevel >= level) {\r\n            logFn[level](message);\r\n        }\r\n\r\n        // send log event regardless of log level\r\n        eventBus.trigger(Events.LOG, { message: message, level: level });\r\n    }\r\n\r\n    instance = {\r\n        getLogger: getLogger,\r\n        setLogTimestampVisible: setLogTimestampVisible,\r\n        setCalleeNameVisible: setCalleeNameVisible\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDebug.__dashjs_factory_name = 'Debug';\r\n\r\nconst factory = FactoryMaker.getSingletonFactory(Debug);\r\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\r\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\r\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\r\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\r\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\r\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\r\nFactoryMaker.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from './FactoryMaker';\r\n\r\nconst EVENT_PRIORITY_LOW = 0;\r\nconst EVENT_PRIORITY_HIGH = 5000;\r\n\r\nfunction EventBus() {\r\n\r\n    let handlers = {};\r\n\r\n    function on(type, listener, scope, priority = EVENT_PRIORITY_LOW) {\r\n\r\n        if (!type) {\r\n            throw new Error('event type cannot be null or undefined');\r\n        }\r\n        if (!listener || typeof (listener) !== 'function') {\r\n            throw new Error('listener must be a function: ' + listener);\r\n        }\r\n\r\n        if (getHandlerIdx(type, listener, scope) >= 0) return;\r\n\r\n        handlers[type] = handlers[type] || [];\r\n\r\n        const handler = {\r\n            callback: listener,\r\n            scope: scope,\r\n            priority: priority\r\n        };\r\n\r\n        if (scope && scope.getStreamId) {\r\n            handler.streamId = scope.getStreamId();\r\n        }\r\n        if (scope && scope.getType) {\r\n            handler.mediaType = scope.getType();\r\n        }\r\n\r\n        const inserted = handlers[type].some((item , idx) => {\r\n            if (item && priority > item.priority ) {\r\n                handlers[type].splice(idx, 0, handler);\r\n                return true;\r\n            }\r\n        });\r\n\r\n        if (!inserted) {\r\n            handlers[type].push(handler);\r\n        }\r\n    }\r\n\r\n    function off(type, listener, scope) {\r\n        if (!type || !listener || !handlers[type]) return;\r\n        const idx = getHandlerIdx(type, listener, scope);\r\n        if (idx < 0) return;\r\n        handlers[type][idx] = null;\r\n    }\r\n\r\n    function trigger(type, payload = {}, filters = {}) {\r\n        if (!type || !handlers[type]) return;\r\n\r\n        payload = payload || {};\r\n\r\n        if (payload.hasOwnProperty('type')) throw new Error('\\'type\\' is a reserved word for event dispatching');\r\n\r\n        payload.type = type;\r\n\r\n        handlers[type] = handlers[type].filter((item) => item);\r\n        const eventHandlers = handlers[type].filter(item => {\r\n            if (filters.streamId && item.streamId && item.streamId !== filters.streamId) return false;\r\n            if (filters.mediaType && item.mediaType && item.mediaType !== filters.mediaType) return false;\r\n            return true;\r\n        });\r\n\r\n        eventHandlers.forEach(handler => handler && handler.callback.call(handler.scope, payload));\r\n    }\r\n\r\n    function getHandlerIdx(type, listener, scope) {\r\n\r\n        let idx = -1;\r\n\r\n        if (!handlers[type]) return idx;\r\n\r\n        handlers[type].some( (item, index) => {\r\n            if (item && item.callback === listener && (!scope || scope === item.scope)) {\r\n                idx = index;\r\n                return true;\r\n            }\r\n        });\r\n        return idx;\r\n    }\r\n\r\n    function reset() {\r\n        handlers = {};\r\n    }\r\n\r\n    const instance = {\r\n        on: on,\r\n        off: off,\r\n        trigger: trigger,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nEventBus.__dashjs_factory_name = 'EventBus';\r\nconst factory = FactoryMaker.getSingletonFactory(EventBus);\r\nfactory.EVENT_PRIORITY_LOW = EVENT_PRIORITY_LOW;\r\nfactory.EVENT_PRIORITY_HIGH = EVENT_PRIORITY_HIGH;\r\nFactoryMaker.updateSingletonFactory(EventBus.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @module FactoryMaker\r\n * @ignore\r\n */\r\nconst FactoryMaker = (function () {\r\n\r\n    let instance;\r\n    const singletonContexts = [];\r\n    const singletonFactories = {};\r\n    const classFactories = {};\r\n\r\n    function extend(name, childInstance, override, context) {\r\n        if (!context[name] && childInstance) {\r\n            context[name] = {\r\n                instance: childInstance,\r\n                override: override\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method from your extended object.  this.factory is injected into your object.\r\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\r\n     * will return the video model for use in the extended object.\r\n     *\r\n     * @param {Object} context - injected into extended object as this.context\r\n     * @param {string} className - string name found in all dash.js objects\r\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\r\n     * @returns {*} Context aware instance of specified singleton name.\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function getSingletonInstance(context, className) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                return obj.instance;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\r\n     *\r\n     * @param {Object} context\r\n     * @param {string} className\r\n     * @param {Object} instance\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function setSingletonInstance(context, className, instance) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                singletonContexts[i].instance = instance;\r\n                return;\r\n            }\r\n        }\r\n        singletonContexts.push({\r\n            name: className,\r\n            context: context,\r\n            instance: instance\r\n        });\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Factories storage Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function getFactoryByName(name, factoriesArray) {\r\n        return factoriesArray[name];\r\n    }\r\n\r\n    function updateFactory(name, factory, factoriesArray) {\r\n        if (name in factoriesArray) {\r\n            factoriesArray[name] = factory;\r\n        }\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Class Factories Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateClassFactory(name, factory) {\r\n        updateFactory(name, factory, classFactories);\r\n    }\r\n\r\n    function getClassFactoryByName(name) {\r\n        return getFactoryByName(name, classFactories);\r\n    }\r\n\r\n    function getClassFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\r\n\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    create: function () {\r\n                        return merge(classConstructor, context, arguments);\r\n                    }\r\n                };\r\n            };\r\n\r\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n        return factory;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Singleton Factory MAangement\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateSingletonFactory(name, factory) {\r\n        updateFactory(name, factory, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactoryByName(name) {\r\n        return getFactoryByName(name, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                let instance;\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    getInstance: function () {\r\n                        // If we don't have an instance yet check for one on the context\r\n                        if (!instance) {\r\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\r\n                        }\r\n                        // If there's no instance on the context then create one\r\n                        if (!instance) {\r\n                            instance = merge(classConstructor, context, arguments);\r\n                            singletonContexts.push({\r\n                                name: classConstructor.__dashjs_factory_name,\r\n                                context: context,\r\n                                instance: instance\r\n                            });\r\n                        }\r\n                        return instance;\r\n                    }\r\n                };\r\n            };\r\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n\r\n        return factory;\r\n    }\r\n\r\n    function merge(classConstructor, context, args) {\r\n\r\n        let classInstance;\r\n        const className = classConstructor.__dashjs_factory_name;\r\n        const extensionObject = context[className];\r\n\r\n        if (extensionObject) {\r\n\r\n            let extension = extensionObject.instance;\r\n\r\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\r\n\r\n                classInstance = classConstructor.apply({context}, args);\r\n                extension = extension.apply({\r\n                    context,\r\n                    factory: instance,\r\n                    parent: classInstance\r\n                }, args);\r\n\r\n                for (const prop in extension) {\r\n                    if (classInstance.hasOwnProperty(prop)) {\r\n                        classInstance[prop] = extension[prop];\r\n                    }\r\n                }\r\n\r\n            } else { //replace parent object completely with new object. Same as dijon.\r\n\r\n                return extension.apply({\r\n                    context,\r\n                    factory: instance\r\n                }, args);\r\n\r\n            }\r\n        } else {\r\n            // Create new instance of the class\r\n            classInstance = classConstructor.apply({context}, args);\r\n        }\r\n\r\n        // Add getClassName function to class instance prototype (used by Debug)\r\n        classInstance.getClassName = function () {return className;};\r\n\r\n        return classInstance;\r\n    }\r\n\r\n    instance = {\r\n        extend: extend,\r\n        getSingletonInstance: getSingletonInstance,\r\n        setSingletonInstance: setSingletonInstance,\r\n        getSingletonFactory: getSingletonFactory,\r\n        getSingletonFactoryByName: getSingletonFactoryByName,\r\n        updateSingletonFactory: updateSingletonFactory,\r\n        getClassFactory: getClassFactory,\r\n        getClassFactoryByName: getClassFactoryByName,\r\n        updateClassFactory: updateClassFactory\r\n    };\r\n\r\n    return instance;\r\n\r\n}());\r\n\r\nexport default FactoryMaker;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from './FactoryMaker';\r\nimport Utils from './Utils.js';\r\nimport Debug from '../core/Debug';\r\nimport Constants from '../streaming/constants/Constants';\r\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\r\n\r\n/** @module Settings\r\n * @description Define the configuration parameters of Dash.js MediaPlayer.\r\n * @see {@link module:Settings~PlayerSettings PlayerSettings} for further information about the supported configuration properties\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} PlayerSettings\r\n * @property {module:Settings~DebugSettings} [debug] Debug related settings\r\n * @property {module:Settings~StreamingSettings} [streaming] Streaming related settings\r\n * @example\r\n *\r\n * // Full settings object\r\n * settings = {\r\n *      debug: {\r\n *          logLevel: Debug.LOG_LEVEL_WARNING\r\n *      },\r\n *      streaming: {\r\n *          metricsMaxListDepth: 1000,\r\n *          abandonLoadTimeout: 10000,\r\n *          liveDelayFragmentCount: NaN,\r\n *          liveDelay: null,\r\n *          scheduleWhilePaused: true,\r\n *          fastSwitchEnabled: false,\r\n *          flushBufferAtTrackSwitch: false,\r\n *          bufferPruningInterval: 10,\r\n *          bufferToKeep: 20,\r\n *          jumpGaps: true,\r\n *          jumpLargeGaps: true,\r\n *          smallGapLimit: 1.5,\r\n *          stableBufferTime: 12,\r\n *          bufferTimeAtTopQuality: 30,\r\n *          bufferTimeAtTopQualityLongForm: 60,\r\n *          longFormContentDurationThreshold: 600,\r\n *          wallclockTimeUpdateInterval: 50,\r\n *          lowLatencyEnabled: false,\r\n *          keepProtectionMediaKeys: false,\r\n *          useManifestDateHeaderTimeSource: true,\r\n *          useSuggestedPresentationDelay: true,\r\n *          useAppendWindow: true,\r\n *          manifestUpdateRetryInterval: 100,\r\n *          liveCatchUpMinDrift: 0.02,\r\n *          liveCatchUpMaxDrift: 0,\r\n *          liveCatchUpPlaybackRate: 0.5,\r\n *          lastBitrateCachingInfo: { enabled: true, ttl: 360000 },\r\n *          lastMediaSettingsCachingInfo: { enabled: true, ttl: 360000 },\r\n *          cacheLoadThresholds: { video: 50, audio: 5 },\r\n *          retryIntervals: {\r\n *              MPD: 500,\r\n *              XLinkExpansion: 500,\r\n *              InitializationSegment: 1000,\r\n *              IndexSegment: 1000,\r\n *              MediaSegment: 1000,\r\n *              BitstreamSwitchingSegment: 1000,\r\n *              other: 1000,\r\n *              lowLatencyReductionFactor: 10\r\n *          },\r\n *          retryAttempts: {\r\n *              MPD: 3,\r\n *              XLinkExpansion: 1,\r\n *              InitializationSegment: 3,\r\n *              IndexSegment: 3,\r\n *              MediaSegment: 3,\r\n *              BitstreamSwitchingSegment: 3,\r\n *              other: 3,\r\n *              lowLatencyMultiplyFactor: 5\r\n *          },\r\n *          abr: {\r\n *              movingAverageMethod: Constants.MOVING_AVERAGE_SLIDING_WINDOW,\r\n *              ABRStrategy: Constants.ABR_STRATEGY_DYNAMIC,\r\n *              bandwidthSafetyFactor: 0.9,\r\n *              useDefaultABRRules: true,\r\n *              useBufferOccupancyABR: false,\r\n *              useDeadTimeLatency: true,\r\n *              limitBitrateByPortal: false,\r\n *              usePixelRatioInLimitBitrateByPortal: false,\r\n *              maxBitrate: { audio: -1, video: -1 },\r\n *              minBitrate: { audio: -1, video: -1 },\r\n *              maxRepresentationRatio: { audio: 1, video: 1 },\r\n *              initialBitrate: { audio: -1, video: -1 },\r\n *              initialRepresentationRatio: { audio: -1, video: -1 },\r\n *              autoSwitchBitrate: { audio: true, video: true }\r\n *          },\r\n *          cmcd: {\r\n *              enabled: false,\r\n *              sid: null,\r\n *              cid: null,\r\n *              did: null\r\n *          }\r\n *      }\r\n * }\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} DebugSettings\r\n * @property {number} [logLevel=dashjs.Debug.LOG_LEVEL_WARNING]\r\n * Sets up the log level. The levels are cumulative. For example, if you set the log level\r\n * to dashjs.Debug.LOG_LEVEL_WARNING all warnings, errors and fatals will be logged. Possible values.\r\n *\r\n * <ul>\r\n * <li>dashjs.Debug.LOG_LEVEL_NONE<br/>\r\n * No message is written in the browser console.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_FATAL<br/>\r\n * Log fatal errors. An error is considered fatal when it causes playback to fail completely.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_ERROR<br/>\r\n * Log error messages.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_WARNING<br/>\r\n * Log warning messages.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_INFO<br/>\r\n * Log info messages.\r\n *\r\n * <li>dashjs.Debug.LOG_LEVEL_DEBUG<br/>\r\n * Log debug messages.\r\n * </ul>\r\n */\r\n\r\n/**\r\n * @typedef {Object} AbrSettings\r\n * @property {string} [movingAverageMethod=\"slidingWindow\"]\r\n * Sets the moving average method used for smoothing throughput estimates. Valid methods are\r\n * \"slidingWindow\" and \"ewma\". The call has no effect if an invalid method is passed.\r\n *\r\n * The sliding window moving average method computes the average throughput using the last four segments downloaded.\r\n * If the stream is live (as opposed to VOD), then only the last three segments are used.\r\n * If wide variations in throughput are detected, the number of segments can be dynamically increased to avoid oscillations.\r\n *\r\n * The exponentially weighted moving average (EWMA) method computes the average using exponential smoothing.\r\n * Two separate estimates are maintained, a fast one with a three-second half life and a slow one with an eight-second half life.\r\n * The throughput estimate at any time is the minimum of the fast and slow estimates.\r\n * This allows a fast reaction to a bandwidth drop and prevents oscillations on bandwidth spikes.\r\n * @property {string} [ABRStrategy=\"abrDynamic\"] Returns the current ABR strategy being used: \"abrDynamic\", \"abrBola\" or \"abrThroughput\".\r\n * @property {number} [bandwidthSafetyFactor=0.9]\r\n * Standard ABR throughput rules multiply the throughput by this value. It should be between 0 and 1,\r\n * with lower values giving less rebuffering (but also lower quality).\r\n * @property {boolean} [useDefaultABRRules=true] Should the default ABR rules be used, or the custom ones added.\r\n * @property {boolean} [useBufferOccupancyABR=false] Whether to use the BOLA abr rule.\r\n * @property {boolean} [useDeadTimeLatency=true]\r\n * If true, only the download portion will be considered part of the download bitrate\r\n * and latency will be regarded as static. If false, the reciprocal of the whole\r\n * transfer time will be used.\r\n * @property {boolean} [limitBitrateByPortal=false] If true, the size of the video portal will limit the max chosen video resolution.\r\n * @property {boolean} [usePixelRatioInLimitBitrateByPortal=false]\r\n * Sets whether to take into account the device's pixel ratio when defining the portal dimensions.\r\n * Useful on, for example, retina displays.\r\n * @property {module:Settings~AudioVideoSettings} [maxBitrate={audio: -1, video: -1}] The maximum bitrate that the ABR algorithms will choose. Use NaN for no limit.\r\n * @property {module:Settings~AudioVideoSettings} [minBitrate={audio: -1, video: -1}] The minimum bitrate that the ABR algorithms will choose. Use NaN for no limit.\r\n * @property {module:Settings~AudioVideoSettings} [maxRepresentationRatio={audio: 1, video: 1}]\r\n * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum representation allowed,\r\n * as a proportion of the size of the representation set.\r\n *\r\n * You can set or remove this cap at anytime before or during playback. To clear this setting you set the value to 1.\r\n *\r\n * If both this and maxAllowedBitrate are defined, maxAllowedBitrate is evaluated first, then maxAllowedRepresentation,\r\n * i.e. the lowest value from executing these rules is used.\r\n *\r\n * This feature is typically used to reserve higher representations for playback only when connected over a fast connection.\r\n * @property {module:Settings~AudioVideoSettings} [initialBitrate={audio: -1, video: -1}] Explicitly set the starting bitrate for audio or video\r\n * @property {module:Settings~AudioVideoSettings} [initialRepresentationRatio={audio: -1, video: -1}] Explicitly set the initial representation ratio. If initalBitrate is specified, this is ignored.\r\n * @property {module:Settings~AudioVideoSettings} [autoSwitchBitrate={audio: true, video: true}] Indicates whether the player should enable ABR algorithms to switch the bitrate.\r\n */\r\n\r\n/**\r\n * @typedef {Object} StreamingSettings\r\n * @property {number} [metricsMaxListDepth=1000] Maximum list depth of metrics.\r\n * @property {number} [abandonLoadTimeout=10000]\r\n * A timeout value in seconds, which during the ABRController will block switch-up events.\r\n * This will only take effect after an abandoned fragment event occurs.\r\n * @property {number} [liveDelayFragmentCount=NaN]\r\n * Changing this value will lower or increase live stream latency.  The detected segment duration will be multiplied by this value\r\n * to define a time in seconds to delay a live stream from the live edge. Lowering this value will lower latency but may decrease\r\n * the player's ability to build a stable buffer.\r\n * @property {number} [liveDelay]\r\n * <p>Equivalent in seconds of setLiveDelayFragmentCount</p>\r\n * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>\r\n * <p>This value should be less than the manifest duration by a couple of segment durations to avoid playback issues</p>\r\n * <p>If set, this parameter will take precedence over setLiveDelayFragmentCount and manifest info</p>\r\n * @property {boolean} [scheduleWhilePaused=true]\r\n * Set to true if you would like dash.js to keep downloading fragments in the background\r\n * when the video element is paused.\r\n * @property {boolean} [fastSwitchEnabled=false]\r\n * When enabled, after an ABR up-switch in quality, instead of requesting and appending the next fragment\r\n * at the end of the current buffer range it is requested and appended closer to the current time\r\n * When enabled, The maximum time to render a higher quality is current time + (1.5 * fragment duration).\r\n *\r\n * Note, When ABR down-switch is detected, we appended the lower quality at the end of the buffer range to preserve the\r\n * higher quality media for as long as possible.\r\n *\r\n * If enabled, it should be noted there are a few cases when the client will not replace inside buffer range but rather\r\n * just append at the end.  1. When the buffer level is less than one fragment duration 2.  The client\r\n * is in an Abandonment State due to recent fragment abandonment event.\r\n *\r\n * Known issues:\r\n * 1. In IE11 with auto switching off, if a user switches to a quality they can not download in time the\r\n * fragment may be appended in the same range as the playhead or even in the past, in IE11 it may cause a stutter\r\n * or stall in playback.\r\n * @property {boolean} [flushBufferAtTrackSwitch=false]\r\n * When enabled, after a track switch and in case buffer is being replaced (see MEdiaPlayer.setTrackSwitchModeFor(Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE)),\r\n * the video element is flushed (seek at current playback time) once a segment of the new track is appended in buffer in order to force video decoder to play new track.\r\n * This can be required on some devices like GoogleCast devices to make track switching functional. Otherwise track switching will be effective only once after previous\r\n * buffered track is fully consumed.\r\n * @property {boolean} [calcSegmentAvailabilityRangeFromTimeline=true] Enable calculation of the DVR window for SegmentTimeline manifests based on the entries in <SegmentTimeline>\r\n * @property {number} [bufferPruningInterval=10] The interval of pruning buffer in sconds.\r\n * @property {number} [bufferToKeep=20]\r\n * This value influences the buffer pruning logic.\r\n * Allows you to modify the buffer that is kept in source buffer in seconds.\r\n *  0|-----------bufferToPrune-----------|-----bufferToKeep-----|currentTime|\r\n * @property {boolean} [jumpGaps=true] Sets whether player should jump small gaps (discontinuities) in the buffer.\r\n * @property {boolean} [jumpLargeGaps=true] Sets whether player should jump large gaps (discontinuities) in the buffer.\r\n * @property {number} [smallGapLimit=1.8] Time in seconds for a gap to be considered small.\r\n * @property {number} [stableBufferTime=12]\r\n * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).\r\n *\r\n * When the time is set higher than the default you will have to wait longer\r\n * to see automatic bitrate switches but will have a larger buffer which\r\n * will increase stability.\r\n * @property {number} [bufferTimeAtTopQuality=30]\r\n * The time that the internal buffer target will be set to once playing the top quality.\r\n * If there are multiple bitrates in your adaptation, and the media is playing at the highest\r\n * bitrate, then we try to build a larger buffer at the top quality to increase stability\r\n * and to maintain media quality.\r\n * @property {number} [bufferTimeAtTopQualityLongForm=60] The time that the internal buffer target will be set to once playing the top quality for long form content.\r\n * @property {number} [longFormContentDurationThreshold=600]\r\n * The threshold which defines if the media is considered long form content.\r\n * This will directly affect the buffer targets when playing back at the top quality.\r\n * @property {number} [wallclockTimeUpdateInterval=50] How frequently the wallclockTimeUpdated internal event is triggered (in milliseconds).\r\n * @property {boolean} [lowLatencyEnabled=false] Enable or disable low latency mode\r\n * @property {boolean} [keepProtectionMediaKeys=false]\r\n * Set the value for the ProtectionController and MediaKeys life cycle. If true, the\r\n * ProtectionController and then created MediaKeys and MediaKeySessions will be preserved during\r\n * the MediaPlayer lifetime.\r\n * @property {boolean} [useManifestDateHeaderTimeSource=true]\r\n * <p>Allows you to enable the use of the Date Header, if exposed with CORS, as a timing source for live edge detection. The\r\n * use of the date header will happen only after the other timing source that take precedence fail or are omitted as described.\r\n * @property {boolean} [useSuggestedPresentationDelay=true]\r\n * <p>Set to true if you would like to override the default live delay and honor the SuggestedPresentationDelay attribute in by the manifest.</p>\r\n * @property {boolean} [useAppendWindow=true]\r\n * Specifies if the appendWindow attributes of the MSE SourceBuffers should be set according to content duration from manifest.\r\n * @property {number} [manifestUpdateRetryInterval=100]\r\n * For live streams, set the interval-frequency in milliseconds at which\r\n * dash.js will check if the current manifest is still processed before\r\n * downloading the next manifest once the minimumUpdatePeriod time has\r\n * @property {number} [liveCatchUpMinDrift=0.02]\r\n * Use this method to set the minimum latency deviation allowed before activating catch-up mechanism. In low latency mode,\r\n * when the difference between the measured latency and the target one,\r\n * as an absolute number, is higher than the one sets with this method, then dash.js increases/decreases\r\n * playback rate until target latency is reached.\r\n *\r\n * LowLatencyMinDrift should be provided in seconds, and it uses values between 0.0 and 0.5.\r\n *\r\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n * @property {number} [liveCatchUpMaxDrift=0]\r\n * Use this method to set the maximum latency deviation allowed before dash.js to do a seeking to live position. In low latency mode,\r\n * when the difference between the measured latency and the target one,\r\n * as an absolute number, is higher than the one sets with this method, then dash.js does a seek to live edge position minus\r\n * the target live delay.\r\n *\r\n * LowLatencyMaxDriftBeforeSeeking should be provided in seconds. If 0, then seeking operations won't be used for\r\n * fixing latency deviations.\r\n *\r\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n * @property {number} [liveCatchUpPlaybackRate=0.5]\r\n * Use this parameter to set the maximum catch up rate, as a percentage, for low latency live streams. In low latency mode,\r\n * when measured latency is higher/lower than the target one,\r\n * dash.js increases/decreases playback rate respectively up to (+/-) the percentage defined with this method until target is reached.\r\n *\r\n * Valid values for catch up rate are in range 0-0.5 (0-50%). Set it to 0 to turn off live catch up feature.\r\n *\r\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n * @property {number} [liveCatchupLatencyThreshold=NaN]\r\n * Use this parameter to set the maximum threshold for which live catch up is applied. For instance, if this value is set to 8 seconds,\r\n * then live catchup is only applied if the current live latency is equal or below 8 seconds. The reason behind this parameter is to avoid an increase\r\n * of the playback rate if the user seeks within the DVR window.\r\n *\r\n * If no value is specified this will be twice the maximum live delay. The maximum live delay is either specified in the manifest as part of a ServiceDescriptor or calculated the following:\r\n * maximumLiveDelay = targetDelay + liveCatchupMinDrift\r\n *\r\n * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n * @property {module:Settings~CachingInfoSettings} [lastBitrateCachingInfo={enabled: true, ttl: 360000}]\r\n * Set to false if you would like to disable the last known bit rate from being stored during playback and used\r\n * to set the initial bit rate for subsequent playback within the expiration window.\r\n *\r\n * The default expiration is one hour, defined in milliseconds. If expired, the default initial bit rate (closest to 1000 kbps) will be used\r\n * for that session and a new bit rate will be stored during that session.\r\n * @property {module:Settings~CachingInfoSettings} [lastMediaSettingsCachingInfo={enabled: true, ttl: 360000}]\r\n * Set to false if you would like to disable the last known lang for audio (or camera angle for video) from being stored during playback and used\r\n * to set the initial settings for subsequent playback within the expiration window.\r\n *\r\n * The default expiration is one hour, defined in milliseconds. If expired, the default settings will be used\r\n * for that session and a new settings will be stored during that session.\r\n * @property {module:Settings~AudioVideoSettings} [cacheLoadThresholds={video: 50, audio: 5}]\r\n * For a given media type, the threshold which defines if the response to a fragment\r\n * request is coming from browser cache or not.\r\n * @property {module:Settings~RequestTypeSettings} [retryIntervals] Time in milliseconds of which to reload a failed file load attempt. For low latency mode these values are divided by lowLatencyReductionFactor.\r\n * @property {module:Settings~RequestTypeSettings} [retryAttempts] Total number of retry attempts that will occur on a file load before it fails. For low latency mode these values are multiplied by lowLatencyMultiplyFactor.\r\n * @property {module:Settings~AbrSettings} abr Adaptive Bitrate algorithm related settings.\r\n * @property {module:Settings~CmcdSettings} cmcd  Settings related to Common Media Client Data reporting.\r\n */\r\n\r\n/**\r\n * @typedef {Object} CachingInfoSettings\r\n * @property {boolean} [enable] Enable or disable the caching feature.\r\n * @property {number} [ttl] Time to live. A value defined in milliseconds representing how log to cache the settings for.\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:Settings~AudioVideoSettings\r\n * @property {number|boolean} [audio] Configuration for audio media type of tracks.\r\n * @property {number|boolean} [video] Configuration for video media type of tracks.\r\n */\r\n\r\n/**\r\n * @typedef {Object} RequestTypeSettings\r\n * @property {number} [MPD] Manifest type of requests\r\n * @property {number} [XLinkExpansion] XLink expansion type of requests\r\n * @property {number} [InitializationSegment] Request to retrieve an initialization segment\r\n * @property {number} [IndexSegment] Request to retrieve an index segment (SegmentBase)\r\n * @property {number} [MediaSegment] Request to retrieve a media segment (video/audio/image/text chunk)\r\n * @property {number} [BitstreamSwitchingSegment] Bitrate stream switching type of request\r\n * @property {number} [other] Other type of request\r\n *\r\n */\r\n\r\n/**\r\n * @typedef {Object} module:Settings~CmcdSettings\r\n * @property {boolean} [enable=false] Enable or disable the CMCD reporting.\r\n * @property {string} [sid] GUID identifying the current playback session. Should be in UUID format. If not specified a UUID will be automatically generated.\r\n * @property {string} [cid] A unique string to identify the current content. If not specified it will be a hash of the MPD url.\r\n * @property {string} [did=dash.js-cmcd-default-id] A unique string identifying the current device.\r\n */\r\n\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nfunction Settings() {\r\n    let instance;\r\n\r\n    /**\r\n     * @const {PlayerSettings} defaultSettings\r\n     * @ignore\r\n     */\r\n    const defaultSettings = {\r\n        debug: {\r\n            logLevel: Debug.LOG_LEVEL_WARNING\r\n        },\r\n        streaming: {\r\n            metricsMaxListDepth: 1000,\r\n            abandonLoadTimeout: 10000,\r\n            liveDelayFragmentCount: NaN,\r\n            liveDelay: null,\r\n            scheduleWhilePaused: true,\r\n            fastSwitchEnabled: false,\r\n            flushBufferAtTrackSwitch: false,\r\n            calcSegmentAvailabilityRangeFromTimeline: true,\r\n            bufferPruningInterval: 10,\r\n            bufferToKeep: 20,\r\n            jumpGaps: true,\r\n            jumpLargeGaps: true,\r\n            smallGapLimit: 1.5,\r\n            stableBufferTime: 12,\r\n            bufferTimeAtTopQuality: 30,\r\n            bufferTimeAtTopQualityLongForm: 60,\r\n            longFormContentDurationThreshold: 600,\r\n            wallclockTimeUpdateInterval: 50,\r\n            lowLatencyEnabled: false,\r\n            keepProtectionMediaKeys: false,\r\n            useManifestDateHeaderTimeSource: true,\r\n            useSuggestedPresentationDelay: true,\r\n            useAppendWindow: true,\r\n            manifestUpdateRetryInterval: 100,\r\n            liveCatchUpMinDrift: 0.02,\r\n            liveCatchUpMaxDrift: 0,\r\n            liveCatchUpPlaybackRate: 0.5,\r\n            liveCatchupLatencyThreshold: NaN,\r\n            lastBitrateCachingInfo: {enabled: true, ttl: 360000},\r\n            lastMediaSettingsCachingInfo: {enabled: true, ttl: 360000},\r\n            cacheLoadThresholds: {video: 50, audio: 5},\r\n            trackSwitchMode: {audio: Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE, video: Constants.TRACK_SWITCH_MODE_NEVER_REPLACE},\r\n            selectionModeForInitialTrack: Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE,\r\n            retryIntervals: {\r\n                [HTTPRequest.MPD_TYPE]: 500,\r\n                [HTTPRequest.XLINK_EXPANSION_TYPE]: 500,\r\n                [HTTPRequest.MEDIA_SEGMENT_TYPE]: 1000,\r\n                [HTTPRequest.INIT_SEGMENT_TYPE]: 1000,\r\n                [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: 1000,\r\n                [HTTPRequest.INDEX_SEGMENT_TYPE]: 1000,\r\n                [HTTPRequest.OTHER_TYPE]: 1000,\r\n                lowLatencyReductionFactor: 10\r\n            },\r\n            retryAttempts: {\r\n                [HTTPRequest.MPD_TYPE]: 3,\r\n                [HTTPRequest.XLINK_EXPANSION_TYPE]: 1,\r\n                [HTTPRequest.MEDIA_SEGMENT_TYPE]: 3,\r\n                [HTTPRequest.INIT_SEGMENT_TYPE]: 3,\r\n                [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: 3,\r\n                [HTTPRequest.INDEX_SEGMENT_TYPE]: 3,\r\n                [HTTPRequest.OTHER_TYPE]: 3,\r\n                lowLatencyMultiplyFactor: 5\r\n            },\r\n            abr: {\r\n                movingAverageMethod: Constants.MOVING_AVERAGE_SLIDING_WINDOW,\r\n                ABRStrategy: Constants.ABR_STRATEGY_DYNAMIC,\r\n                bandwidthSafetyFactor: 0.9,\r\n                useDefaultABRRules: true,\r\n                useBufferOccupancyABR: false,\r\n                useDeadTimeLatency: true,\r\n                limitBitrateByPortal: false,\r\n                usePixelRatioInLimitBitrateByPortal: false,\r\n                maxBitrate: {audio: -1, video: -1},\r\n                minBitrate: {audio: -1, video: -1},\r\n                maxRepresentationRatio: {audio: 1, video: 1},\r\n                initialBitrate: {audio: -1, video: -1},\r\n                initialRepresentationRatio: {audio: -1, video: -1},\r\n                autoSwitchBitrate: {audio: true, video: true}\r\n            },\r\n            cmcd: {\r\n                enabled: false,\r\n                sid: null,\r\n                cid: null\r\n            }\r\n        }\r\n    };\r\n\r\n    let settings = Utils.clone(defaultSettings);\r\n\r\n    //Merge in the settings. If something exists in the new config that doesn't match the schema of the default config,\r\n    //regard it as an error and log it.\r\n    function mixinSettings(source, dest, path) {\r\n        for (let n in source) {\r\n            if (source.hasOwnProperty(n)) {\r\n                if (dest.hasOwnProperty(n)) {\r\n                    if (typeof source[n] === 'object' && source[n] !== null) {\r\n                        mixinSettings(source[n], dest[n], path.slice() + n + '.');\r\n                    } else {\r\n                        dest[n] = Utils.clone(source[n]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the settings object. Don't copy/store this object, you won't get updates.\r\n     * @func\r\n     * @instance\r\n     */\r\n    function get() {\r\n        return settings;\r\n    }\r\n\r\n    /**\r\n     * @func\r\n     * @instance\r\n     * @param {object} settingsObj - This should be a partial object of the Settings.Schema type. That is, fields defined should match the path (e.g.\r\n     * settingsObj.streaming.abr.autoSwitchBitrate.audio -> defaultSettings.streaming.abr.autoSwitchBitrate.audio). Where an element's path does\r\n     * not match it is ignored, and a warning is logged.\r\n     *\r\n     * Use to change the settings object. Any new values defined will overwrite the settings and anything undefined will not change.\r\n     * Implementers of new settings should add it in an approriate namespace to the defaultSettings object and give it a default value (that is not undefined).\r\n     *\r\n     */\r\n    function update(settingsObj) {\r\n        if (typeof settingsObj === 'object') {\r\n            mixinSettings(settingsObj, settings, '');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the settings object. Everything is set to its default value.\r\n     * @func\r\n     * @instance\r\n     *\r\n     */\r\n    function reset() {\r\n        settings = Utils.clone(defaultSettings);\r\n    }\r\n\r\n    instance = {\r\n        get: get,\r\n        update: update,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\n\r\nSettings.__dashjs_factory_name = 'Settings';\r\nlet factory = FactoryMaker.getSingletonFactory(Settings);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\nclass Utils {\r\n    static mixin(dest, source, copy) {\r\n        let s;\r\n        let empty = {};\r\n        if (dest) {\r\n            for (let name in source) {\r\n                if (source.hasOwnProperty(name)) {\r\n                    s = source[name];\r\n                    if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {\r\n                        if (typeof dest[name] === 'object' && dest[name] !== null) {\r\n                            dest[name] = Utils.mixin(dest[name], s, copy);\r\n                        } else {\r\n                            dest[name] = copy(s);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dest;\r\n    }\r\n\r\n    static clone(src) {\r\n        if (!src || typeof src !== 'object') {\r\n            return src; // anything\r\n        }\r\n        let r;\r\n        if (src instanceof Array) {\r\n            // array\r\n            r = [];\r\n            for (let i = 0, l = src.length; i < l; ++i) {\r\n                if (i in src) {\r\n                    r.push(Utils.clone(src[i]));\r\n                }\r\n            }\r\n        } else {\r\n            r = {};\r\n        }\r\n        return Utils.mixin(r, src, Utils.clone);\r\n    }\r\n\r\n    static addAditionalQueryParameterToUrl(url, params) {\r\n        try {\r\n            if (!params || params.length === 0) {\r\n                return url;\r\n            }\r\n\r\n            let modifiedUrl = new URL(url);\r\n\r\n            params.forEach((param) => {\r\n                if (param.key && param.value) {\r\n                    modifiedUrl.searchParams.set(param.key, param.value);\r\n                }\r\n            });\r\n\r\n            return modifiedUrl.href;\r\n\r\n\r\n        } catch (e) {\r\n            return url;\r\n        }\r\n    }\r\n\r\n    static generateUuid() {\r\n        let dt = new Date().getTime();\r\n        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            const r = (dt + Math.random() * 16) % 16 | 0;\r\n            dt = Math.floor(dt / 16);\r\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n        });\r\n        return uuid;\r\n    }\r\n\r\n    static generateHashCode(string) {\r\n        let hash = 0;\r\n\r\n        if (string.length === 0) {\r\n            return hash;\r\n        }\r\n\r\n        for (let i = 0; i < string.length; i++) {\r\n            const chr = string.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + chr;\r\n            hash |= 0;\r\n        }\r\n        return hash;\r\n    }\r\n}\r\n\r\nexport default Utils;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ErrorsBase from './ErrorsBase';\r\n/**\r\n * Errors declaration\r\n * @class\r\n */\r\nclass Errors extends ErrorsBase {\r\n    constructor () {\r\n        super();\r\n        /**\r\n         * Error code returned when a manifest parsing error occurs\r\n         */\r\n        this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE = 10;\r\n        /**\r\n         * Error code returned when a manifest loading error occurs\r\n         */\r\n        this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE = 11;\r\n        /**\r\n         * Error code returned when a xlink loading error occurs\r\n         */\r\n        this.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE = 12;\r\n        /**\r\n         * Error code returned when the update of segments list has failed\r\n         */\r\n        this.SEGMENTS_UPDATE_FAILED_ERROR_CODE = 13;\r\n        this.SEGMENTS_UNAVAILABLE_ERROR_CODE = 14;\r\n        this.SEGMENT_BASE_LOADER_ERROR_CODE = 15;\r\n        this.TIME_SYNC_FAILED_ERROR_CODE = 16;\r\n        this.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE = 17;\r\n        this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE = 18;\r\n        this.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 19;\r\n        this.APPEND_ERROR_CODE = 20;\r\n        this.REMOVE_ERROR_CODE = 21;\r\n        this.DATA_UPDATE_FAILED_ERROR_CODE = 22;\r\n        /**\r\n         * Error code returned when MediaSource is not supported by the browser\r\n         */\r\n        this.CAPABILITY_MEDIASOURCE_ERROR_CODE = 23;\r\n        /**\r\n         * Error code returned when Protected contents are not supported\r\n         */\r\n        this.CAPABILITY_MEDIAKEYS_ERROR_CODE   = 24;\r\n\r\n        this.DOWNLOAD_ERROR_ID_MANIFEST_CODE   = 25;\r\n\r\n        this.DOWNLOAD_ERROR_ID_SIDX_CODE            = 26;\r\n        this.DOWNLOAD_ERROR_ID_CONTENT_CODE         = 27;\r\n\r\n        this.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE  = 28;\r\n\r\n        this.DOWNLOAD_ERROR_ID_XLINK_CODE           = 29;\r\n\r\n        this.MANIFEST_ERROR_ID_CODEC_CODE           = 30;\r\n        this.MANIFEST_ERROR_ID_PARSE_CODE           = 31;\r\n\r\n        /**\r\n         * Error code returned when no stream (period) has been detected in the manifest\r\n         */\r\n        this.MANIFEST_ERROR_ID_NOSTREAMS_CODE       = 32;\r\n        /**\r\n         * Error code returned when something wrong has append during subtitles parsing (TTML or VTT)\r\n         */\r\n        this.TIMED_TEXT_ERROR_ID_PARSE_CODE         = 33;\r\n        /**\r\n         * Error code returned when a 'muxed' media type has been detected in the manifest. This type is not supported\r\n         */\r\n        this.MANIFEST_ERROR_ID_MULTIPLEXED_CODE     = 34;\r\n        /**\r\n         * Error code returned when a media source type is not supported\r\n         */\r\n        this.MEDIASOURCE_TYPE_UNSUPPORTED_CODE = 35;\r\n\r\n        this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE = 'parsing failed for ';\r\n        this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading manifest: ';\r\n        this.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading Xlink element: ';\r\n        this.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE = 'Segments update failed';\r\n        this.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE = 'no segments are available yet';\r\n        this.SEGMENT_BASE_LOADER_ERROR_MESSAGE = 'error loading segments';\r\n        this.TIME_SYNC_FAILED_ERROR_MESSAGE = 'Failed to synchronize time';\r\n        this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE = 'request is null';\r\n        this.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = 'Failed to resolve a valid URL';\r\n        this.APPEND_ERROR_MESSAGE = 'chunk is not defined';\r\n        this.REMOVE_ERROR_MESSAGE = 'buffer is not defined';\r\n        this.DATA_UPDATE_FAILED_ERROR_MESSAGE = 'Data update failed';\r\n\r\n        this.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE = 'mediasource is not supported';\r\n        this.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE = 'mediakeys is not supported';\r\n        this.TIMED_TEXT_ERROR_MESSAGE_PARSE = 'parsing error :';\r\n        this.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE = 'Error creating source buffer of type : ';\r\n    }\r\n}\r\n\r\nlet errors = new Errors();\r\nexport default errors;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass ErrorsBase {\r\n    extend (errors, config) {\r\n        if (!errors) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const err in errors) {\r\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\r\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\r\n            this[err] = errors[err];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from './EventsBase';\r\n\r\n/**\r\n * These are internal events that should not be needed at the player level.\r\n * If you find and event in here that you would like access to from MediaPlayer level\r\n * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\r\n * @class\r\n * @ignore\r\n */\r\nclass CoreEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\r\n        this.BUFFER_CLEARED = 'bufferCleared';\r\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\r\n        this.BYTES_APPENDED = 'bytesAppended';\r\n        this.BYTES_APPENDED_END_FRAGMENT = 'bytesAppendedEndFragment';\r\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\r\n        this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\r\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\r\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\r\n        this.INBAND_EVENTS = 'inbandEvents';\r\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\r\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\r\n        this.INIT_FRAGMENT_NEEDED = 'initFragmentNeeded';\r\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\r\n        this.ORIGINAL_MANIFEST_LOADED = 'originalManifestLoaded';\r\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\r\n        this.LOADING_COMPLETED = 'loadingCompleted';\r\n        this.LOADING_PROGRESS = 'loadingProgress';\r\n        this.LOADING_DATA_PROGRESS = 'loadingDataProgress';\r\n        this.LOADING_ABANDONED = 'loadingAborted';\r\n        this.MANIFEST_UPDATED = 'manifestUpdated';\r\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\r\n        this.MEDIA_FRAGMENT_NEEDED = 'mediaFragmentNeeded';\r\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\r\n        this.REPRESENTATION_UPDATE_STARTED = 'representationUpdateStarted';\r\n        this.REPRESENTATION_UPDATE_COMPLETED = 'representationUpdateCompleted';\r\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\r\n        this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';\r\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\r\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\r\n        this.STREAMS_COMPOSED = 'streamsComposed';\r\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\r\n        this.STREAM_COMPLETED = 'streamCompleted';\r\n        this.TEXT_TRACKS_QUEUE_INITIALIZED = 'textTracksQueueInitialized';\r\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\r\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\r\n        this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';\r\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\r\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\r\n        this.XLINK_READY = 'xlinkReady';\r\n        this.SEGMENTBASE_INIT_REQUEST_NEEDED = 'segmentBaseInitRequestNeeded';\r\n        this.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED = 'segmentBaseSegmentsListRequestNeeded';\r\n        this.SEEK_TARGET = 'seekTarget';\r\n        this.DYNAMIC_STREAM_COMPLETED = 'dynamicStreamCompleted';\r\n    }\r\n}\r\n\r\nexport default CoreEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nimport CoreEvents from './CoreEvents';\r\nclass Events extends CoreEvents {\r\n}\r\nlet events = new Events();\r\nexport default events;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventsBase {\r\n    extend (events, config) {\r\n        if (!events) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const evt in events) {\r\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\r\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\r\n            this[evt] = events[evt];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\r\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport {\r\n    replaceIDForTemplate,\r\n    unescapeDollarsInTemplate,\r\n    replaceTokenForTemplate,\r\n    getTimeBasedSegment\r\n} from './utils/SegmentsUtils';\r\n\r\nimport SegmentsController from './controllers/SegmentsController';\r\n\r\nfunction DashHandler(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const dashConstants = config.dashConstants;\r\n    const urlUtils = config.urlUtils;\r\n    const type = config.type;\r\n    const streamInfo = config.streamInfo;\r\n\r\n    const timelineConverter = config.timelineConverter;\r\n    const dashMetrics = config.dashMetrics;\r\n    const baseURLController = config.baseURLController;\r\n\r\n    let instance,\r\n        logger,\r\n        segmentIndex,\r\n        lastSegment,\r\n        requestedTime,\r\n        isDynamicManifest,\r\n        dynamicStreamCompleted,\r\n        selectedMimeType,\r\n        segmentsController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        resetInitialSettings();\r\n\r\n        segmentsController = SegmentsController(context).create(config);\r\n\r\n        eventBus.on(events.INITIALIZATION_LOADED, onInitializationLoaded, instance);\r\n        eventBus.on(events.SEGMENTS_LOADED, onSegmentsLoaded, instance);\r\n        eventBus.on(events.REPRESENTATION_UPDATE_STARTED, onRepresentationUpdateStarted, instance);\r\n        eventBus.on(events.DYNAMIC_STREAM_COMPLETED, onDynamicStreamCompleted, instance);\r\n    }\r\n\r\n    function initialize(isDynamic) {\r\n        isDynamicManifest = isDynamic;\r\n        dynamicStreamCompleted = false;\r\n        segmentsController.initialize(isDynamic);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        return streamInfo;\r\n    }\r\n\r\n    function setCurrentIndex(value) {\r\n        segmentIndex = value;\r\n    }\r\n\r\n    function getCurrentIndex() {\r\n        return segmentIndex;\r\n    }\r\n\r\n    function resetIndex() {\r\n        segmentIndex = -1;\r\n        lastSegment = null;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        resetIndex();\r\n        requestedTime = null;\r\n        segmentsController = null;\r\n        selectedMimeType = null;\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n\r\n        eventBus.off(events.INITIALIZATION_LOADED, onInitializationLoaded, instance);\r\n        eventBus.off(events.SEGMENTS_LOADED, onSegmentsLoaded, instance);\r\n        eventBus.off(events.REPRESENTATION_UPDATE_STARTED, onRepresentationUpdateStarted, instance);\r\n        eventBus.off(events.DYNAMIC_STREAM_COMPLETED, onDynamicStreamCompleted, instance);\r\n    }\r\n\r\n    function setRequestUrl(request, destination, representation) {\r\n        const baseURL = baseURLController.resolve(representation.path);\r\n        let url,\r\n            serviceLocation;\r\n\r\n        if (!baseURL || (destination === baseURL.url) || (!urlUtils.isRelative(destination))) {\r\n            url = destination;\r\n        } else {\r\n            url = baseURL.url;\r\n            serviceLocation = baseURL.serviceLocation;\r\n\r\n            if (destination) {\r\n                url = urlUtils.resolve(destination, url);\r\n            }\r\n        }\r\n\r\n        if (urlUtils.isRelative(url)) {\r\n            return false;\r\n        }\r\n\r\n        request.url = url;\r\n        request.serviceLocation = serviceLocation;\r\n\r\n        return true;\r\n    }\r\n\r\n    function generateInitRequest(mediaInfo, representation, mediaType) {\r\n        const request = new FragmentRequest();\r\n        const period = representation.adaptation.period;\r\n        const presentationStartTime = period.start;\r\n\r\n        request.mediaType = mediaType;\r\n        request.type = HTTPRequest.INIT_SEGMENT_TYPE;\r\n        request.range = representation.range;\r\n        request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, period.mpd, isDynamicManifest);\r\n        request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamicManifest);\r\n        request.quality = representation.index;\r\n        request.mediaInfo = mediaInfo;\r\n        request.representationId = representation.id;\r\n\r\n        if (setRequestUrl(request, representation.initialization, representation)) {\r\n            request.url = replaceTokenForTemplate(request.url, 'Bandwidth', representation.bandwidth);\r\n            return request;\r\n        }\r\n    }\r\n\r\n    function getInitRequest(mediaInfo, representation) {\r\n        if (!representation) return null;\r\n        const request = generateInitRequest(mediaInfo, representation, getType());\r\n        return request;\r\n    }\r\n\r\n    function setMimeType(newMimeType) {\r\n        selectedMimeType = newMimeType;\r\n    }\r\n\r\n    function setExpectedLiveEdge(liveEdge) {\r\n        timelineConverter.setExpectedLiveEdge(liveEdge);\r\n        dashMetrics.updateManifestUpdateInfo({presentationStartTime: liveEdge});\r\n    }\r\n\r\n    function onRepresentationUpdateStarted(e) {\r\n        processRepresentation(e.representation);\r\n    }\r\n\r\n    function processRepresentation(voRepresentation) {\r\n        const hasInitialization = voRepresentation.hasInitialization();\r\n        const hasSegments = voRepresentation.hasSegments();\r\n\r\n        // If representation has initialization and segments information, REPRESENTATION_UPDATE_COMPLETED can be triggered immediately\r\n        // otherwise, it means that a request has to be made to get initialization and/or segments informations\r\n        if (hasInitialization && hasSegments) {\r\n            eventBus.trigger(events.REPRESENTATION_UPDATE_COMPLETED,\r\n                { representation: voRepresentation },\r\n                { streamId: streamInfo.id, mediaType: type }\r\n            );\r\n        } else {\r\n            segmentsController.update(voRepresentation, selectedMimeType, hasInitialization, hasSegments);\r\n        }\r\n    }\r\n\r\n    function getRequestForSegment(mediaInfo, segment) {\r\n        if (segment === null || segment === undefined) {\r\n            return null;\r\n        }\r\n\r\n        const request = new FragmentRequest();\r\n        const representation = segment.representation;\r\n        const bandwidth = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].bandwidth;\r\n        let url = segment.media;\r\n\r\n        url = replaceTokenForTemplate(url, 'Number', segment.replacementNumber);\r\n        url = replaceTokenForTemplate(url, 'Time', segment.replacementTime);\r\n        url = replaceTokenForTemplate(url, 'Bandwidth', bandwidth);\r\n        url = replaceIDForTemplate(url, representation.id);\r\n        url = unescapeDollarsInTemplate(url);\r\n\r\n        request.mediaType = getType();\r\n        request.type = HTTPRequest.MEDIA_SEGMENT_TYPE;\r\n        request.range = segment.mediaRange;\r\n        request.startTime = segment.presentationStartTime;\r\n        request.duration = segment.duration;\r\n        request.timescale = representation.timescale;\r\n        request.availabilityStartTime = segment.availabilityStartTime;\r\n        request.availabilityEndTime = segment.availabilityEndTime;\r\n        request.wallStartTime = segment.wallStartTime;\r\n        request.quality = representation.index;\r\n        request.index = segment.availabilityIdx;\r\n        request.mediaInfo = mediaInfo;\r\n        request.adaptationIndex = representation.adaptation.index;\r\n        request.representationId = representation.id;\r\n\r\n        if (setRequestUrl(request, url, representation)) {\r\n            return request;\r\n        }\r\n    }\r\n\r\n    function isMediaFinished(representation) {\r\n        let isFinished = false;\r\n\r\n        if (!representation) return isFinished;\r\n\r\n        if (!isDynamicManifest) {\r\n            if (segmentIndex >= representation.availableSegmentsNumber) {\r\n                isFinished = true;\r\n            }\r\n        } else {\r\n            if (dynamicStreamCompleted) {\r\n                isFinished = true;\r\n            } else if (lastSegment) {\r\n                const time = parseFloat((lastSegment.presentationStartTime - representation.adaptation.period.start).toFixed(5));\r\n                const endTime = lastSegment.duration > 0 ? time + 1.5 * lastSegment.duration : time;\r\n                const duration = representation.adaptation.period.duration;\r\n\r\n                isFinished = endTime >= duration;\r\n            }\r\n        }\r\n        return isFinished;\r\n    }\r\n\r\n    function getSegmentRequestForTime(mediaInfo, representation, time, options) {\r\n        let request = null;\r\n\r\n        if (!representation || !representation.segmentInfoType) {\r\n            return request;\r\n        }\r\n\r\n        const idx = segmentIndex;\r\n        const keepIdx = options ? options.keepIdx : false;\r\n        const ignoreIsFinished = (options && options.ignoreIsFinished) ? true : false;\r\n\r\n        if (requestedTime !== time) { // When playing at live edge with 0 delay we may loop back with same time and index until it is available. Reduces verboseness of logs.\r\n            requestedTime = time;\r\n            logger.debug('Getting the request for time : ' + time);\r\n        }\r\n\r\n        const segment = segmentsController.getSegmentByTime(representation, time);\r\n        if (segment) {\r\n            segmentIndex = segment.availabilityIdx;\r\n            lastSegment = segment;\r\n            logger.debug('Index for time ' + time + ' is ' + segmentIndex);\r\n            request = getRequestForSegment(mediaInfo, segment);\r\n        } else {\r\n            const finished = !ignoreIsFinished ? isMediaFinished(representation) : false;\r\n            if (finished) {\r\n                request = new FragmentRequest();\r\n                request.action = FragmentRequest.ACTION_COMPLETE;\r\n                request.index = segmentIndex - 1;\r\n                request.mediaType = type;\r\n                request.mediaInfo = mediaInfo;\r\n                logger.debug('Signal complete in getSegmentRequestForTime');\r\n            }\r\n        }\r\n\r\n        if (keepIdx && idx >= 0) {\r\n            segmentIndex = representation.segmentInfoType === dashConstants.SEGMENT_TIMELINE && isDynamicManifest ? segmentIndex : idx;\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    function getNextSegmentRequest(mediaInfo, representation) {\r\n        let request = null;\r\n\r\n        if (!representation || !representation.segmentInfoType) {\r\n            return null;\r\n        }\r\n\r\n        requestedTime = null;\r\n\r\n        let indexToRequest = segmentIndex + 1;\r\n\r\n        logger.debug('Getting the next request at index: ' + indexToRequest);\r\n        // check that there is a segment in this index\r\n        const segment = segmentsController.getSegmentByIndex(representation, indexToRequest, lastSegment ? lastSegment.mediaStartTime : -1);\r\n        if (!segment && isEndlessMedia(representation) && !dynamicStreamCompleted) {\r\n            logger.debug(getType() + ' No segment found at index: ' + indexToRequest + '. Wait for next loop');\r\n            return null;\r\n        } else {\r\n            if (segment) {\r\n                request = getRequestForSegment(mediaInfo, segment);\r\n                segmentIndex = segment.availabilityIdx;\r\n            } else {\r\n                if (isDynamicManifest) {\r\n                    segmentIndex = indexToRequest - 1;\r\n                } else {\r\n                    segmentIndex = indexToRequest;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (segment) {\r\n            lastSegment = segment;\r\n        } else {\r\n            const finished = isMediaFinished(representation, segment);\r\n            if (finished) {\r\n                request = new FragmentRequest();\r\n                request.action = FragmentRequest.ACTION_COMPLETE;\r\n                request.index = segmentIndex - 1;\r\n                request.mediaType = getType();\r\n                request.mediaInfo = mediaInfo;\r\n                logger.debug('Signal complete');\r\n            }\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    function isEndlessMedia(representation) {\r\n        return !isFinite(representation.adaptation.period.duration);\r\n    }\r\n\r\n    function onInitializationLoaded(e) {\r\n        const representation = e.representation;\r\n        if (!representation.segments) return;\r\n\r\n        eventBus.trigger(events.REPRESENTATION_UPDATE_COMPLETED,\r\n            { representation: representation },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function onSegmentsLoaded(e) {\r\n        if (e.error) return;\r\n\r\n        const fragments = e.segments;\r\n        const representation = e.representation;\r\n        const segments = [];\r\n        let count = 0;\r\n\r\n        let i,\r\n            len,\r\n            s,\r\n            seg;\r\n\r\n        for (i = 0, len = fragments ? fragments.length : 0; i < len; i++) {\r\n            s = fragments[i];\r\n\r\n            seg = getTimeBasedSegment(\r\n                timelineConverter,\r\n                isDynamicManifest,\r\n                representation,\r\n                s.startTime,\r\n                s.duration,\r\n                s.timescale,\r\n                s.media,\r\n                s.mediaRange,\r\n                count);\r\n\r\n            if (seg) {\r\n                segments.push(seg);\r\n                seg = null;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (segments.length > 0) {\r\n            representation.segmentAvailabilityRange = {\r\n                start: segments[0].presentationStartTime,\r\n                end: segments[segments.length - 1].presentationStartTime\r\n            };\r\n            representation.availableSegmentsNumber = segments.length;\r\n            representation.segments = segments;\r\n\r\n            if (isDynamicManifest) {\r\n                const lastSegment = segments[segments.length - 1];\r\n                const liveEdge = lastSegment.presentationStartTime - 8;\r\n                // the last segment is the Expected, not calculated, live edge.\r\n                setExpectedLiveEdge(liveEdge);\r\n            }\r\n        }\r\n\r\n        if (!representation.hasInitialization()) {\r\n            return;\r\n        }\r\n\r\n        eventBus.trigger(events.REPRESENTATION_UPDATE_COMPLETED,\r\n            { representation: representation },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function onDynamicStreamCompleted() {\r\n        logger.debug('Dynamic stream complete');\r\n        dynamicStreamCompleted = true;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        getStreamInfo: getStreamInfo,\r\n        getInitRequest: getInitRequest,\r\n        getRequestForSegment: getRequestForSegment,\r\n        getSegmentRequestForTime: getSegmentRequestForTime,\r\n        getNextSegmentRequest: getNextSegmentRequest,\r\n        setCurrentIndex: setCurrentIndex,\r\n        getCurrentIndex: getCurrentIndex,\r\n        isMediaFinished: isMediaFinished,\r\n        reset: reset,\r\n        resetIndex: resetIndex,\r\n        setMimeType: setMimeType\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashHandler.__dashjs_factory_name = 'DashHandler';\r\nexport default FactoryMaker.getClassFactory(DashHandler);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Dash constants declaration\r\n * @class\r\n * @ignore\r\n */\r\nclass DashConstants {\r\n\r\n    init() {\r\n        this.BASE_URL = 'BaseURL';\r\n        this.SEGMENT_BASE = 'SegmentBase';\r\n        this.SEGMENT_TEMPLATE = 'SegmentTemplate';\r\n        this.SEGMENT_LIST = 'SegmentList';\r\n        this.SEGMENT_URL = 'SegmentURL';\r\n        this.SEGMENT_TIMELINE = 'SegmentTimeline';\r\n        this.SEGMENT_PROFILES = 'segmentProfiles';\r\n        this.ADAPTATION_SET = 'AdaptationSet';\r\n        this.REPRESENTATION = 'Representation';\r\n        this.REPRESENTATION_INDEX = 'RepresentationIndex';\r\n        this.SUB_REPRESENTATION = 'SubRepresentation';\r\n        this.INITIALIZATION = 'Initialization';\r\n        this.INITIALIZATION_MINUS = 'initialization';\r\n        this.MPD = 'MPD';\r\n        this.PERIOD = 'Period';\r\n        this.ASSET_IDENTIFIER = 'AssetIdentifier';\r\n        this.EVENT_STREAM = 'EventStream';\r\n        this.ID = 'id';\r\n        this.PROFILES = 'profiles';\r\n        this.SERVICE_LOCATION = 'serviceLocation';\r\n        this.RANGE = 'range';\r\n        this.INDEX = 'index';\r\n        this.MEDIA = 'media';\r\n        this.BYTE_RANGE = 'byteRange';\r\n        this.INDEX_RANGE = 'indexRange';\r\n        this.MEDIA_RANGE = 'mediaRange';\r\n        this.VALUE = 'value';\r\n        this.CONTENT_TYPE = 'contentType';\r\n        this.MIME_TYPE = 'mimeType';\r\n        this.BITSTREAM_SWITCHING = 'BitstreamSwitching';\r\n        this.BITSTREAM_SWITCHING_MINUS = 'bitstreamSwitching';\r\n        this.CODECS = 'codecs';\r\n        this.DEPENDENCY_ID = 'dependencyId';\r\n        this.MEDIA_STREAM_STRUCTURE_ID = 'mediaStreamStructureId';\r\n        this.METRICS = 'Metrics';\r\n        this.METRICS_MINUS = 'metrics';\r\n        this.REPORTING = 'Reporting';\r\n        this.WIDTH = 'width';\r\n        this.HEIGHT = 'height';\r\n        this.SAR = 'sar';\r\n        this.FRAMERATE = 'frameRate';\r\n        this.AUDIO_SAMPLING_RATE = 'audioSamplingRate';\r\n        this.MAXIMUM_SAP_PERIOD = 'maximumSAPPeriod';\r\n        this.START_WITH_SAP = 'startWithSAP';\r\n        this.MAX_PLAYOUT_RATE = 'maxPlayoutRate';\r\n        this.CODING_DEPENDENCY = 'codingDependency';\r\n        this.SCAN_TYPE = 'scanType';\r\n        this.FRAME_PACKING = 'FramePacking';\r\n        this.AUDIO_CHANNEL_CONFIGURATION = 'AudioChannelConfiguration';\r\n        this.CONTENT_PROTECTION = 'ContentProtection';\r\n        this.ESSENTIAL_PROPERTY = 'EssentialProperty';\r\n        this.SUPPLEMENTAL_PROPERTY = 'SupplementalProperty';\r\n        this.INBAND_EVENT_STREAM = 'InbandEventStream';\r\n        this.ACCESSIBILITY = 'Accessibility';\r\n        this.ROLE = 'Role';\r\n        this.RATING = 'Rating';\r\n        this.CONTENT_COMPONENT = 'ContentComponent';\r\n        this.SUBSET = 'Subset';\r\n        this.LANG = 'lang';\r\n        this.VIEWPOINT = 'Viewpoint';\r\n        this.ROLE_ASARRAY = 'Role_asArray';\r\n        this.ACCESSIBILITY_ASARRAY = 'Accessibility_asArray';\r\n        this.AUDIOCHANNELCONFIGURATION_ASARRAY = 'AudioChannelConfiguration_asArray';\r\n        this.CONTENTPROTECTION_ASARRAY = 'ContentProtection_asArray';\r\n        this.MAIN = 'main';\r\n        this.DYNAMIC = 'dynamic';\r\n        this.STATIC = 'static';\r\n        this.MEDIA_PRESENTATION_DURATION = 'mediaPresentationDuration';\r\n        this.MINIMUM_UPDATE_PERIOD = 'minimumUpdatePeriod';\r\n        this.CODEC_PRIVATE_DATA = 'codecPrivateData';\r\n        this.BANDWITH = 'bandwidth';\r\n        this.SOURCE_URL = 'sourceURL';\r\n        this.TIMESCALE = 'timescale';\r\n        this.DURATION = 'duration';\r\n        this.START_NUMBER = 'startNumber';\r\n        this.PRESENTATION_TIME_OFFSET = 'presentationTimeOffset';\r\n        this.AVAILABILITY_START_TIME = 'availabilityStartTime';\r\n        this.AVAILABILITY_END_TIME = 'availabilityEndTime';\r\n        this.TIMESHIFT_BUFFER_DEPTH = 'timeShiftBufferDepth';\r\n        this.MAX_SEGMENT_DURATION = 'maxSegmentDuration';\r\n        this.PRESENTATION_TIME = 'presentationTime';\r\n        this.MIN_BUFFER_TIME = 'minBufferTime';\r\n        this.MAX_SUBSEGMENT_DURATION = 'maxSubsegmentDuration';\r\n        this.START = 'start';\r\n        this.AVAILABILITY_TIME_OFFSET = 'availabilityTimeOffset';\r\n        this.AVAILABILITY_TIME_COMPLETE = 'availabilityTimeComplete';\r\n        this.CENC_DEFAULT_KID = 'cenc:default_KID';\r\n        this.DVB_PRIORITY = 'dvb:priority';\r\n        this.DVB_WEIGHT = 'dvb:weight';\r\n        this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';\r\n        this.SERVICE_DESCRIPTION = 'ServiceDescription';\r\n        this.SERVICE_DESCRIPTION_SCOPE = 'Scope';\r\n        this.SERVICE_DESCRIPTION_LATENCY = 'Latency';\r\n        this.SERVICE_DESCRIPTION_PLAYBACK_RATE = 'PlaybackRate';\r\n    }\r\n\r\n    constructor () {\r\n        this.init();\r\n    }\r\n}\r\n\r\nlet constants = new DashConstants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../streaming/constants/Constants';\r\nimport DashJSError from '../../streaming/vo/DashJSError';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction RepresentationController(config) {\r\n\r\n    config = config || {};\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const errors = config.errors;\r\n    const abrController = config.abrController;\r\n    const dashMetrics = config.dashMetrics;\r\n    const playbackController = config.playbackController;\r\n    const timelineConverter = config.timelineConverter;\r\n    const type = config.type;\r\n    const streamInfo = config.streamInfo;\r\n    const dashConstants = config.dashConstants;\r\n\r\n    let instance,\r\n        realAdaptation,\r\n        updating,\r\n        voAvailableRepresentations,\r\n        currentVoRepresentation;\r\n\r\n    function setup() {\r\n        resetInitialSettings();\r\n\r\n        eventBus.on(events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.on(events.REPRESENTATION_UPDATE_COMPLETED, onRepresentationUpdated, instance);\r\n        eventBus.on(events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\r\n        eventBus.on(events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!abrController || !dashMetrics || !playbackController || !timelineConverter) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getData() {\r\n        return realAdaptation;\r\n    }\r\n\r\n    function isUpdating() {\r\n        return updating;\r\n    }\r\n\r\n    function getCurrentRepresentation() {\r\n        return currentVoRepresentation;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        realAdaptation = null;\r\n        updating = true;\r\n        voAvailableRepresentations = [];\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.off(events.REPRESENTATION_UPDATE_COMPLETED, onRepresentationUpdated, instance);\r\n        eventBus.off(events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\r\n        eventBus.off(events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function updateData(newRealAdaptation, availableRepresentations, type, quality) {\r\n        checkConfig();\r\n\r\n        startDataUpdate();\r\n\r\n        voAvailableRepresentations = availableRepresentations;\r\n\r\n        currentVoRepresentation = getRepresentationForQuality(quality);\r\n        realAdaptation = newRealAdaptation;\r\n\r\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO && type !== Constants.FRAGMENTED_TEXT) {\r\n            endDataUpdate();\r\n            return;\r\n        }\r\n\r\n        updateAvailabilityWindow(playbackController.getIsDynamic(), true);\r\n    }\r\n\r\n    function addRepresentationSwitch() {\r\n        checkConfig();\r\n        const now = new Date();\r\n        const currentRepresentation = getCurrentRepresentation();\r\n        const currentVideoTimeMs = playbackController.getTime() * 1000;\r\n        if (currentRepresentation) {\r\n            dashMetrics.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\r\n        }\r\n    }\r\n\r\n    function getRepresentationForQuality(quality) {\r\n        return quality === null || quality === undefined || quality >= voAvailableRepresentations.length ? null : voAvailableRepresentations[quality];\r\n    }\r\n\r\n    function getQualityForRepresentation(voRepresentation) {\r\n        return voAvailableRepresentations.indexOf(voRepresentation);\r\n    }\r\n\r\n    function isAllRepresentationsUpdated() {\r\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\r\n            let segmentInfoType = voAvailableRepresentations[i].segmentInfoType;\r\n            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !voAvailableRepresentations[i].hasInitialization() ||\r\n                ((segmentInfoType === dashConstants.SEGMENT_BASE || segmentInfoType === dashConstants.BASE_URL) && !voAvailableRepresentations[i].segments)\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setExpectedLiveEdge(liveEdge) {\r\n        timelineConverter.setExpectedLiveEdge(liveEdge);\r\n        dashMetrics.updateManifestUpdateInfo({presentationStartTime: liveEdge});\r\n    }\r\n\r\n    function updateRepresentation(representation, isDynamic) {\r\n        representation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic);\r\n\r\n        if (representation.segmentAvailabilityRange.end < representation.segmentAvailabilityRange.start) {\r\n            let error = new DashJSError(errors.SEGMENTS_UNAVAILABLE_ERROR_CODE, errors.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE, {availabilityDelay: representation.segmentAvailabilityRange.start - representation.segmentAvailabilityRange.end});\r\n            endDataUpdate(error);\r\n            return;\r\n        }\r\n\r\n        if (isDynamic) {\r\n            setExpectedLiveEdge(representation.segmentAvailabilityRange.end);\r\n        }\r\n    }\r\n\r\n    function updateAvailabilityWindow(isDynamic, notifyUpdate) {\r\n        checkConfig();\r\n\r\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\r\n            updateRepresentation(voAvailableRepresentations[i], isDynamic);\r\n            if (notifyUpdate) {\r\n                eventBus.trigger(events.REPRESENTATION_UPDATE_STARTED,\r\n                    { representation: voAvailableRepresentations[i] },\r\n                    { streamId: streamInfo.id, mediaType: type }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function resetAvailabilityWindow() {\r\n        voAvailableRepresentations.forEach(rep => {\r\n            rep.segmentAvailabilityRange = null;\r\n        });\r\n    }\r\n\r\n    function startDataUpdate() {\r\n        updating = true;\r\n        eventBus.trigger(events.DATA_UPDATE_STARTED,\r\n            {},\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function endDataUpdate(error) {\r\n        updating = false;\r\n        eventBus.trigger(events.DATA_UPDATE_COMPLETED,\r\n            {\r\n                data: realAdaptation,\r\n                currentRepresentation: currentVoRepresentation,\r\n                error: error\r\n            },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function postponeUpdate(postponeTimePeriod) {\r\n        let delay = postponeTimePeriod;\r\n        let update = function () {\r\n            if (isUpdating()) return;\r\n\r\n            startDataUpdate();\r\n\r\n            // clear the segmentAvailabilityRange for all reps.\r\n            // this ensures all are updated before the live edge search starts\r\n            resetAvailabilityWindow();\r\n\r\n            updateAvailabilityWindow(playbackController.getIsDynamic(), true);\r\n        };\r\n        eventBus.trigger(events.AST_IN_FUTURE, { delay: delay });\r\n        setTimeout(update, delay);\r\n    }\r\n\r\n    function onRepresentationUpdated(e) {\r\n        if (!isUpdating()) return;\r\n\r\n        if (e.error) {\r\n            endDataUpdate(e.error);\r\n            return;\r\n        }\r\n\r\n        let r = e.representation;\r\n        let manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate();\r\n        let alreadyAdded = false;\r\n        let postponeTimePeriod = 0;\r\n        let repInfo,\r\n            err,\r\n            repSwitch;\r\n\r\n        if (r.adaptation.period.mpd.manifest.type === dashConstants.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod && playbackController.getStreamController().getStreams().length <= 1) {\r\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\r\n            postponeTimePeriod = getRepresentationUpdatePostponeTimePeriod(r);\r\n        }\r\n\r\n        if (postponeTimePeriod > 0) {\r\n            postponeUpdate(postponeTimePeriod);\r\n            err = new DashJSError(errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE, errors.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);\r\n            endDataUpdate(err);\r\n            return;\r\n        }\r\n\r\n        if (manifestUpdateInfo) {\r\n            for (let i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {\r\n                repInfo = manifestUpdateInfo.representationInfo[i];\r\n                if (repInfo.index === r.index && repInfo.mediaType === getType()) {\r\n                    alreadyAdded = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!alreadyAdded) {\r\n                dashMetrics.addManifestUpdateRepresentationInfo(r, getType());\r\n            }\r\n        }\r\n\r\n        if (isAllRepresentationsUpdated()) {\r\n            abrController.setPlaybackQuality(getType(), streamInfo, getQualityForRepresentation(currentVoRepresentation));\r\n            dashMetrics.updateManifestUpdateInfo({latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\r\n\r\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(getCurrentRepresentation().adaptation.type);\r\n\r\n            if (!repSwitch) {\r\n                addRepresentationSwitch();\r\n            }\r\n            endDataUpdate();\r\n        }\r\n    }\r\n\r\n    function getRepresentationUpdatePostponeTimePeriod(representation) {\r\n        try {\r\n            const streamController = playbackController.getStreamController();\r\n            const activeStreamInfo = streamController.getActiveStreamInfo();\r\n            let startTimeAnchor = representation.segmentAvailabilityRange.start;\r\n\r\n            if (activeStreamInfo && activeStreamInfo.id && activeStreamInfo.id !== streamInfo.id) {\r\n                // We need to consider the currently playing period if a period switch is performed.\r\n                startTimeAnchor = Math.min(playbackController.getTime(), startTimeAnchor);\r\n            }\r\n\r\n            let segmentAvailabilityTimePeriod = representation.segmentAvailabilityRange.end - startTimeAnchor;\r\n            let liveDelay = playbackController.getLiveDelay();\r\n\r\n            return (liveDelay - segmentAvailabilityTimePeriod) * 1000;\r\n        } catch (e) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function onWallclockTimeUpdated(e) {\r\n        if (e.isDynamic) {\r\n            updateAvailabilityWindow(e.isDynamic);\r\n        }\r\n    }\r\n\r\n    function onQualityChanged(e) {\r\n        currentVoRepresentation = getRepresentationForQuality(e.newQuality);\r\n        addRepresentationSwitch();\r\n    }\r\n\r\n    function onManifestValidityChanged(e) {\r\n        if (e.newDuration) {\r\n            const representation = getCurrentRepresentation();\r\n            if (representation && representation.adaptation.period) {\r\n                const period = representation.adaptation.period;\r\n                period.duration = e.newDuration;\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        getData: getData,\r\n        isUpdating: isUpdating,\r\n        updateData: updateData,\r\n        updateRepresentation: updateRepresentation,\r\n        getCurrentRepresentation: getCurrentRepresentation,\r\n        getRepresentationForQuality: getRepresentationForQuality,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\r\nexport default FactoryMaker.getClassFactory(RepresentationController);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport TimelineSegmentsGetter from '../utils/TimelineSegmentsGetter';\r\nimport TemplateSegmentsGetter from '../utils/TemplateSegmentsGetter';\r\nimport ListSegmentsGetter from '../utils/ListSegmentsGetter';\r\nimport SegmentBaseGetter from '../utils/SegmentBaseGetter';\r\n\r\nfunction SegmentsController(config) {\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    const events = config.events;\r\n    const eventBus = config.eventBus;\r\n    const dashConstants = config.dashConstants;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n\r\n    let instance,\r\n        getters;\r\n\r\n    function setup() {\r\n        getters = {};\r\n    }\r\n\r\n    function initialize(isDynamic) {\r\n        getters[dashConstants.SEGMENT_TIMELINE] = TimelineSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_TEMPLATE] = TemplateSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_LIST] = ListSegmentsGetter(context).create(config, isDynamic);\r\n        getters[dashConstants.SEGMENT_BASE] = SegmentBaseGetter(context).create(config, isDynamic);\r\n    }\r\n\r\n    function update(voRepresentation, mimeType, hasInitialization, hasSegments) {\r\n        if (!hasInitialization) {\r\n            eventBus.trigger(events.SEGMENTBASE_INIT_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: type,\r\n                mimeType: mimeType,\r\n                representation: voRepresentation\r\n            });\r\n        }\r\n\r\n        if (!hasSegments) {\r\n            eventBus.trigger(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: type,\r\n                mimeType: mimeType,\r\n                representation: voRepresentation\r\n            });\r\n        }\r\n    }\r\n\r\n    function getSegmentsGetter(representation) {\r\n        return representation ? representation.segments ? getters[dashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\r\n        const getter = getSegmentsGetter(representation);\r\n        return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\r\n    }\r\n\r\n    function getSegmentByTime(representation, time) {\r\n        const getter = getSegmentsGetter(representation);\r\n        return getter ? getter.getSegmentByTime(representation, time) : null;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        update: update,\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\r\nconst factory = FactoryMaker.getClassFactory(SegmentsController);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../streaming/constants/Constants';\r\nimport DashConstants from '../constants/DashConstants';\r\nimport Representation from '../vo/Representation';\r\nimport AdaptationSet from '../vo/AdaptationSet';\r\nimport Period from '../vo/Period';\r\nimport Mpd from '../vo/Mpd';\r\nimport UTCTiming from '../vo/UTCTiming';\r\nimport Event from '../vo/Event';\r\nimport BaseURL from '../vo/BaseURL';\r\nimport EventStream from '../vo/EventStream';\r\nimport ObjectUtils from '../../streaming/utils/ObjectUtils';\r\nimport URLUtils from '../../streaming/utils/URLUtils';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport DashJSError from '../../streaming/vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\nimport {THUMBNAILS_SCHEME_ID_URIS} from '../../streaming/thumbnail/ThumbnailTracks';\r\n\r\nfunction DashManifestModel() {\r\n    let instance,\r\n        logger,\r\n        errHandler,\r\n        BASE64;\r\n\r\n    const context = this.context;\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    const isInteger = Number.isInteger || function (value) {\r\n        return typeof value === 'number' &&\r\n            isFinite(value) &&\r\n            Math.floor(value) === value;\r\n    };\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function getIsTypeOf(adaptation, type) {\r\n\r\n        let i,\r\n            len,\r\n            representation,\r\n            col,\r\n            mimeTypeRegEx,\r\n            codecs;\r\n        let result = false;\r\n        let found = false;\r\n\r\n        if (!adaptation) {\r\n            throw new Error('adaptation is not defined');\r\n        }\r\n\r\n        if (!type) {\r\n            throw new Error('type is not defined');\r\n        }\r\n\r\n        if (adaptation.hasOwnProperty('ContentComponent_asArray')) {\r\n            col = adaptation.ContentComponent_asArray;\r\n        }\r\n\r\n        mimeTypeRegEx = (type !== Constants.TEXT) ? new RegExp(type) : new RegExp('(vtt|ttml)');\r\n\r\n        if (adaptation.Representation_asArray && adaptation.Representation_asArray.length && adaptation.Representation_asArray.length > 0) {\r\n            let essentialProperties = getEssentialPropertiesForRepresentation(adaptation.Representation_asArray[0]);\r\n            if (essentialProperties && essentialProperties.length > 0 && THUMBNAILS_SCHEME_ID_URIS.indexOf(essentialProperties[0].schemeIdUri) >= 0) {\r\n                return type === Constants.IMAGE;\r\n            }\r\n            if (adaptation.Representation_asArray[0].hasOwnProperty(DashConstants.CODECS)) {\r\n                // Just check the start of the codecs string\r\n                codecs = adaptation.Representation_asArray[0].codecs;\r\n                if (codecs.search(Constants.STPP) === 0 || codecs.search(Constants.WVTT) === 0) {\r\n                    return type === Constants.FRAGMENTED_TEXT;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (col) {\r\n            if (col.length > 1) {\r\n                return (type === Constants.MUXED);\r\n            } else if (col[0] && col[0].contentType === type) {\r\n                result = true;\r\n                found = true;\r\n            }\r\n        }\r\n\r\n        if (adaptation.hasOwnProperty(DashConstants.MIME_TYPE)) {\r\n            result = mimeTypeRegEx.test(adaptation.mimeType);\r\n            found = true;\r\n        }\r\n\r\n        // couldn't find on adaptationset, so check a representation\r\n        if (!found) {\r\n            i = 0;\r\n            len = adaptation.Representation_asArray && adaptation.Representation_asArray.length ? adaptation.Representation_asArray.length : 0;\r\n            while (!found && i < len) {\r\n                representation = adaptation.Representation_asArray[i];\r\n\r\n                if (representation.hasOwnProperty(DashConstants.MIME_TYPE)) {\r\n                    result = mimeTypeRegEx.test(representation.mimeType);\r\n                    found = true;\r\n                }\r\n\r\n                i++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getIsAudio(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.AUDIO);\r\n    }\r\n\r\n    function getIsVideo(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.VIDEO);\r\n    }\r\n\r\n    function getIsFragmentedText(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.FRAGMENTED_TEXT);\r\n    }\r\n\r\n    function getIsMuxed(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.MUXED);\r\n    }\r\n\r\n    function getIsImage(adaptation) {\r\n        return getIsTypeOf(adaptation, Constants.IMAGE);\r\n    }\r\n\r\n    function getIsTextTrack(type) {\r\n        return (type === 'text/vtt' || type === 'application/ttml+xml');\r\n    }\r\n\r\n    function getLanguageForAdaptation(adaptation) {\r\n        let lang = '';\r\n\r\n        if (adaptation && adaptation.hasOwnProperty(DashConstants.LANG)) {\r\n            //Filter out any other characters not allowed according to RFC5646\r\n            lang = adaptation.lang.replace(/[^A-Za-z0-9-]/g, '');\r\n        }\r\n\r\n        return lang;\r\n    }\r\n\r\n    function getViewpointForAdaptation(adaptation) {\r\n        return adaptation && adaptation.hasOwnProperty(DashConstants.VIEWPOINT) ? adaptation.Viewpoint : null;\r\n    }\r\n\r\n    function getRolesForAdaptation(adaptation) {\r\n        return adaptation && adaptation.hasOwnProperty(DashConstants.ROLE_ASARRAY) ? adaptation.Role_asArray : [];\r\n    }\r\n\r\n    function getAccessibilityForAdaptation(adaptation) {\r\n        return adaptation && adaptation.hasOwnProperty(DashConstants.ACCESSIBILITY_ASARRAY) ? adaptation.Accessibility_asArray : [];\r\n    }\r\n\r\n    function getAudioChannelConfigurationForAdaptation(adaptation) {\r\n        return adaptation && adaptation.hasOwnProperty(DashConstants.AUDIOCHANNELCONFIGURATION_ASARRAY) ? adaptation.AudioChannelConfiguration_asArray : [];\r\n    }\r\n\r\n    function getAudioChannelConfigurationForRepresentation(representation) {\r\n        return representation && representation.hasOwnProperty(DashConstants.AUDIOCHANNELCONFIGURATION_ASARRAY) ? representation.AudioChannelConfiguration_asArray : [];\r\n    }\r\n\r\n    function getRepresentationSortFunction() {\r\n        return (a, b) => a.bandwidth - b.bandwidth;\r\n    }\r\n\r\n    function processAdaptation(realAdaptation) {\r\n        if (realAdaptation && Array.isArray(realAdaptation.Representation_asArray)) {\r\n            realAdaptation.Representation_asArray.sort(getRepresentationSortFunction());\r\n        }\r\n\r\n        return realAdaptation;\r\n    }\r\n\r\n    function getRealAdaptations(manifest, periodIndex) {\r\n        return manifest && manifest.Period_asArray && isInteger(periodIndex) ? manifest.Period_asArray[periodIndex] ? manifest.Period_asArray[periodIndex].AdaptationSet_asArray : [] : [];\r\n    }\r\n\r\n    function getAdaptationForId(id, manifest, periodIndex) {\r\n        const realAdaptations = getRealAdaptations(manifest, periodIndex);\r\n        let i,\r\n            len;\r\n\r\n        for (i = 0, len = realAdaptations.length; i < len; i++) {\r\n            if (realAdaptations[i].hasOwnProperty(DashConstants.ID) && realAdaptations[i].id === id) {\r\n                return realAdaptations[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getAdaptationForIndex(index, manifest, periodIndex) {\r\n        const realAdaptations = getRealAdaptations(manifest, periodIndex);\r\n        if (realAdaptations.length > 0 && isInteger(index)) {\r\n            return realAdaptations[index];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getIndexForAdaptation(realAdaptation, manifest, periodIndex) {\r\n        if (!realAdaptation) {\r\n            return -1;\r\n        }\r\n\r\n        const realAdaptations = getRealAdaptations(manifest, periodIndex);\r\n\r\n        for (let i = 0; i < realAdaptations.length; i++) {\r\n            let objectUtils = ObjectUtils(context).getInstance();\r\n            if (objectUtils.areEqual(realAdaptations[i], realAdaptation)) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function getAdaptationsForType(manifest, periodIndex, type) {\r\n        const realAdaptations = getRealAdaptations(manifest, periodIndex);\r\n        let i,\r\n            len;\r\n        const adaptations = [];\r\n\r\n        for (i = 0, len = realAdaptations.length; i < len; i++) {\r\n            if (getIsTypeOf(realAdaptations[i], type)) {\r\n                adaptations.push(processAdaptation(realAdaptations[i]));\r\n            }\r\n        }\r\n\r\n        return adaptations;\r\n    }\r\n\r\n    function getCodec(adaptation, representationId, addResolutionInfo) {\r\n        let codec = null;\r\n\r\n        if (adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0) {\r\n            const representation = isInteger(representationId) && representationId >= 0 && representationId < adaptation.Representation_asArray.length ?\r\n                adaptation.Representation_asArray[representationId] : adaptation.Representation_asArray[0];\r\n            if (representation) {\r\n                codec = representation.mimeType + ';codecs=\"' + representation.codecs + '\"';\r\n                if (addResolutionInfo && representation.width !== undefined) {\r\n                    codec += ';width=\"' + representation.width + '\";height=\"' + representation.height + '\"';\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the codec contains a profiles parameter we remove it. Otherwise it will cause problems when checking for codec capabilities of the platform\r\n        if (codec) {\r\n            codec = codec.replace(/\\sprofiles=[^;]*/g, '');\r\n        }\r\n\r\n        return codec;\r\n    }\r\n\r\n    function getMimeType(adaptation) {\r\n        return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 ? adaptation.Representation_asArray[0].mimeType : null;\r\n    }\r\n\r\n    function getKID(adaptation) {\r\n        if (!adaptation || !adaptation.hasOwnProperty(DashConstants.CENC_DEFAULT_KID)) {\r\n            return null;\r\n        }\r\n        return adaptation[DashConstants.CENC_DEFAULT_KID];\r\n    }\r\n\r\n    function getLabelsForAdaptation(adaptation) {\r\n        if (!adaptation || !Array.isArray(adaptation.Label_asArray)) {\r\n            return [];\r\n        }\r\n\r\n        const labelArray = [];\r\n\r\n        for (let i = 0; i < adaptation.Label_asArray.length; i++) {\r\n            labelArray.push({\r\n                lang: adaptation.Label_asArray[i].lang,\r\n                text: adaptation.Label_asArray[i].__text || adaptation.Label_asArray[i]\r\n            });\r\n        }\r\n\r\n        return labelArray;\r\n    }\r\n\r\n    function getContentProtectionData(adaptation) {\r\n        if (!adaptation || !adaptation.hasOwnProperty(DashConstants.CONTENTPROTECTION_ASARRAY) || adaptation.ContentProtection_asArray.length === 0) {\r\n            return null;\r\n        }\r\n        return adaptation.ContentProtection_asArray;\r\n    }\r\n\r\n    function getIsDynamic(manifest) {\r\n        let isDynamic = false;\r\n        if (manifest && manifest.hasOwnProperty('type')) {\r\n            isDynamic = (manifest.type === DashConstants.DYNAMIC);\r\n        }\r\n        return isDynamic;\r\n    }\r\n\r\n    function hasProfile(manifest, profile) {\r\n        let has = false;\r\n\r\n        if (manifest && manifest.profiles && manifest.profiles.length > 0) {\r\n            has = (manifest.profiles.indexOf(profile) !== -1);\r\n        }\r\n\r\n        return has;\r\n    }\r\n\r\n    function getDuration(manifest) {\r\n        let mpdDuration;\r\n        //@mediaPresentationDuration specifies the duration of the entire Media Presentation.\r\n        //If the attribute is not present, the duration of the Media Presentation is unknown.\r\n        if (manifest && manifest.hasOwnProperty(DashConstants.MEDIA_PRESENTATION_DURATION)) {\r\n            mpdDuration = manifest.mediaPresentationDuration;\r\n        } else if (manifest && manifest.type == 'dynamic') {\r\n            mpdDuration = Number.POSITIVE_INFINITY;\r\n        } else {\r\n            mpdDuration = Number.MAX_SAFE_INTEGER || Number.MAX_VALUE;\r\n        }\r\n\r\n        return mpdDuration;\r\n    }\r\n\r\n    function getBandwidth(representation) {\r\n        return representation && representation.bandwidth ? representation.bandwidth : NaN;\r\n    }\r\n\r\n    function getManifestUpdatePeriod(manifest, latencyOfLastUpdate = 0) {\r\n        let delay = NaN;\r\n        if (manifest && manifest.hasOwnProperty(DashConstants.MINIMUM_UPDATE_PERIOD)) {\r\n            delay = manifest.minimumUpdatePeriod;\r\n        }\r\n        return isNaN(delay) ? delay : Math.max(delay - latencyOfLastUpdate, 1);\r\n    }\r\n\r\n    function getRepresentationCount(adaptation) {\r\n        return adaptation && Array.isArray(adaptation.Representation_asArray) ? adaptation.Representation_asArray.length : 0;\r\n    }\r\n\r\n    function getBitrateListForAdaptation(realAdaptation) {\r\n        const processedRealAdaptation = processAdaptation(realAdaptation);\r\n        const realRepresentations = processedRealAdaptation && Array.isArray(processedRealAdaptation.Representation_asArray) ? processedRealAdaptation.Representation_asArray : [];\r\n\r\n        return realRepresentations.map((realRepresentation) => {\r\n            return {\r\n                bandwidth: realRepresentation.bandwidth,\r\n                width: realRepresentation.width || 0,\r\n                height: realRepresentation.height || 0,\r\n                scanType: realRepresentation.scanType || null,\r\n                id: realRepresentation.id || null\r\n            };\r\n        });\r\n    }\r\n\r\n    function getEssentialPropertiesForRepresentation(realRepresentation) {\r\n        if (!realRepresentation || !realRepresentation.EssentialProperty_asArray || !realRepresentation.EssentialProperty_asArray.length) return null;\r\n\r\n        return realRepresentation.EssentialProperty_asArray.map((prop) => {\r\n            return {\r\n                schemeIdUri: prop.schemeIdUri,\r\n                value: prop.value\r\n            };\r\n        });\r\n    }\r\n\r\n    function getRepresentationFor(index, adaptation) {\r\n        return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 &&\r\n        isInteger(index) ? adaptation.Representation_asArray[index] : null;\r\n    }\r\n\r\n    function getRealAdaptationFor(voAdaptation) {\r\n        if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {\r\n            const periodArray = voAdaptation.period.mpd.manifest.Period_asArray[voAdaptation.period.index];\r\n            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(voAdaptation.index)) {\r\n                return processAdaptation(periodArray.AdaptationSet_asArray[voAdaptation.index]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRepresentationsForAdaptation(voAdaptation) {\r\n        const voRepresentations = [];\r\n        const processedRealAdaptation = getRealAdaptationFor(voAdaptation);\r\n        let segmentInfo,\r\n            baseUrl;\r\n\r\n        if (processedRealAdaptation && processedRealAdaptation.Representation_asArray) {\r\n            // TODO: TO BE REMOVED. We should get just the baseUrl elements that affects to the representations\r\n            // that we are processing. Making it works properly will require much further changes and given\r\n            // parsing base Urls parameters is needed for our ultra low latency examples, we will\r\n            // keep this \"tricky\" code until the real (and good) solution comes\r\n            if (voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)) {\r\n                const baseUrls = getBaseURLsFromElement(voAdaptation.period.mpd.manifest);\r\n                if (baseUrls) {\r\n                    baseUrl = baseUrls[0];\r\n                }\r\n            }\r\n            for (let i = 0, len = processedRealAdaptation.Representation_asArray.length; i < len; ++i) {\r\n                const realRepresentation = processedRealAdaptation.Representation_asArray[i];\r\n                const voRepresentation = new Representation();\r\n                voRepresentation.index = i;\r\n                voRepresentation.adaptation = voAdaptation;\r\n\r\n                if (realRepresentation.hasOwnProperty(DashConstants.ID)) {\r\n                    voRepresentation.id = realRepresentation.id;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.CODECS)) {\r\n                    voRepresentation.codecs = realRepresentation.codecs;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.CODEC_PRIVATE_DATA)) {\r\n                    voRepresentation.codecPrivateData = realRepresentation.codecPrivateData;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.BANDWITH)) {\r\n                    voRepresentation.bandwidth = realRepresentation.bandwidth;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.WIDTH)) {\r\n                    voRepresentation.width = realRepresentation.width;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.HEIGHT)) {\r\n                    voRepresentation.height = realRepresentation.height;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.SCAN_TYPE)) {\r\n                    voRepresentation.scanType = realRepresentation.scanType;\r\n                }\r\n                if (realRepresentation.hasOwnProperty(DashConstants.MAX_PLAYOUT_RATE)) {\r\n                    voRepresentation.maxPlayoutRate = realRepresentation.maxPlayoutRate;\r\n                }\r\n\r\n                if (realRepresentation.hasOwnProperty(DashConstants.SEGMENT_BASE)) {\r\n                    segmentInfo = realRepresentation.SegmentBase;\r\n                    voRepresentation.segmentInfoType = DashConstants.SEGMENT_BASE;\r\n                } else if (realRepresentation.hasOwnProperty(DashConstants.SEGMENT_LIST)) {\r\n                    segmentInfo = realRepresentation.SegmentList;\r\n\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.SEGMENT_TIMELINE)) {\r\n                        voRepresentation.segmentInfoType = DashConstants.SEGMENT_TIMELINE;\r\n                    } else {\r\n                        voRepresentation.segmentInfoType = DashConstants.SEGMENT_LIST;\r\n                    }\r\n                } else if (realRepresentation.hasOwnProperty(DashConstants.SEGMENT_TEMPLATE)) {\r\n                    segmentInfo = realRepresentation.SegmentTemplate;\r\n\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.SEGMENT_TIMELINE)) {\r\n                        voRepresentation.segmentInfoType = DashConstants.SEGMENT_TIMELINE;\r\n                    } else {\r\n                        voRepresentation.segmentInfoType = DashConstants.SEGMENT_TEMPLATE;\r\n                    }\r\n\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.INITIALIZATION_MINUS)) {\r\n                        voRepresentation.initialization = segmentInfo.initialization.split('$Bandwidth$')\r\n                            .join(realRepresentation.bandwidth).split('$RepresentationID$').join(realRepresentation.id);\r\n                    }\r\n                } else {\r\n                    voRepresentation.segmentInfoType = DashConstants.BASE_URL;\r\n                }\r\n\r\n                voRepresentation.essentialProperties = getEssentialPropertiesForRepresentation(realRepresentation);\r\n\r\n                if (segmentInfo) {\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.INITIALIZATION)) {\r\n                        const initialization = segmentInfo.Initialization;\r\n\r\n                        if (initialization.hasOwnProperty(DashConstants.SOURCE_URL)) {\r\n                            voRepresentation.initialization = initialization.sourceURL;\r\n                        }\r\n\r\n                        if (initialization.hasOwnProperty(DashConstants.RANGE)) {\r\n                            voRepresentation.range = initialization.range;\r\n                            // initialization source url will be determined from\r\n                            // BaseURL when resolved at load time.\r\n                        }\r\n                    } else if (realRepresentation.hasOwnProperty(DashConstants.MIME_TYPE) && getIsTextTrack(realRepresentation.mimeType)) {\r\n                        voRepresentation.range = 0;\r\n                    }\r\n\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.TIMESCALE)) {\r\n                        voRepresentation.timescale = segmentInfo.timescale;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.DURATION)) {\r\n                        // TODO according to the spec @maxSegmentDuration specifies the maximum duration of any Segment in any Representation in the Media Presentation\r\n                        // It is also said that for a SegmentTimeline any @d value shall not exceed the value of MPD@maxSegmentDuration, but nothing is said about\r\n                        // SegmentTemplate @duration attribute. We need to find out if @maxSegmentDuration should be used instead of calculated duration if the the duration\r\n                        // exceeds @maxSegmentDuration\r\n                        voRepresentation.segmentDuration = segmentInfo.duration / voRepresentation.timescale;\r\n                    } else if (realRepresentation.hasOwnProperty(DashConstants.SEGMENT_TEMPLATE)) {\r\n                        segmentInfo = realRepresentation.SegmentTemplate;\r\n\r\n                        if (segmentInfo.hasOwnProperty(DashConstants.SEGMENT_TIMELINE)) {\r\n                            voRepresentation.segmentDuration = calcSegmentDuration(segmentInfo.SegmentTimeline) / voRepresentation.timescale;\r\n                        }\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.MEDIA)) {\r\n                        voRepresentation.media = segmentInfo.media;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.START_NUMBER)) {\r\n                        voRepresentation.startNumber = segmentInfo.startNumber;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.INDEX_RANGE)) {\r\n                        voRepresentation.indexRange = segmentInfo.indexRange;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.PRESENTATION_TIME_OFFSET)) {\r\n                        voRepresentation.presentationTimeOffset = segmentInfo.presentationTimeOffset / voRepresentation.timescale;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.AVAILABILITY_TIME_OFFSET)) {\r\n                        voRepresentation.availabilityTimeOffset = segmentInfo.availabilityTimeOffset;\r\n                    } else if (baseUrl && baseUrl.availabilityTimeOffset !== undefined) {\r\n                        voRepresentation.availabilityTimeOffset = baseUrl.availabilityTimeOffset;\r\n                    }\r\n                    if (segmentInfo.hasOwnProperty(DashConstants.AVAILABILITY_TIME_COMPLETE)) {\r\n                        voRepresentation.availabilityTimeComplete = segmentInfo.availabilityTimeComplete !== 'false';\r\n                    } else if (baseUrl && baseUrl.availabilityTimeComplete !== undefined) {\r\n                        voRepresentation.availabilityTimeComplete = baseUrl.availabilityTimeComplete;\r\n                    }\r\n                }\r\n\r\n                voRepresentation.MSETimeOffset = calcMSETimeOffset(voRepresentation);\r\n                voRepresentation.path = [voAdaptation.period.index, voAdaptation.index, i];\r\n                voRepresentations.push(voRepresentation);\r\n            }\r\n        }\r\n\r\n        return voRepresentations;\r\n    }\r\n\r\n    function calcSegmentDuration(segmentTimeline) {\r\n        let s0 = segmentTimeline.S_asArray[0];\r\n        let s1 = segmentTimeline.S_asArray[1];\r\n        return s0.hasOwnProperty('d') ? s0.d : (s1.t - s0.t);\r\n    }\r\n\r\n    function calcMSETimeOffset(representation) {\r\n        // The MSEOffset is offset from AST for media. It is Period@start - presentationTimeOffset\r\n        const presentationOffset = representation.presentationTimeOffset;\r\n        const periodStart = representation.adaptation.period.start;\r\n        return (periodStart - presentationOffset);\r\n    }\r\n\r\n    function getAdaptationsForPeriod(voPeriod) {\r\n        const realPeriod = voPeriod && isInteger(voPeriod.index) ? voPeriod.mpd.manifest.Period_asArray[voPeriod.index] : null;\r\n        const voAdaptations = [];\r\n        let voAdaptationSet,\r\n            realAdaptationSet,\r\n            i;\r\n\r\n        if (realPeriod && realPeriod.AdaptationSet_asArray) {\r\n            for (i = 0; i < realPeriod.AdaptationSet_asArray.length; i++) {\r\n                realAdaptationSet = realPeriod.AdaptationSet_asArray[i];\r\n                voAdaptationSet = new AdaptationSet();\r\n                if (realAdaptationSet.hasOwnProperty(DashConstants.ID)) {\r\n                    voAdaptationSet.id = realAdaptationSet.id;\r\n                }\r\n                voAdaptationSet.index = i;\r\n                voAdaptationSet.period = voPeriod;\r\n\r\n                if (getIsMuxed(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.MUXED;\r\n                } else if (getIsAudio(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.AUDIO;\r\n                } else if (getIsVideo(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.VIDEO;\r\n                } else if (getIsFragmentedText(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.FRAGMENTED_TEXT;\r\n                } else if (getIsImage(realAdaptationSet)) {\r\n                    voAdaptationSet.type = Constants.IMAGE;\r\n                } else {\r\n                    voAdaptationSet.type = Constants.TEXT;\r\n                }\r\n                voAdaptations.push(voAdaptationSet);\r\n            }\r\n        }\r\n\r\n        return voAdaptations;\r\n    }\r\n\r\n    function getRegularPeriods(mpd) {\r\n        const isDynamic = mpd ? getIsDynamic(mpd.manifest) : false;\r\n        const voPeriods = [];\r\n        let realPreviousPeriod = null;\r\n        let realPeriod = null;\r\n        let voPreviousPeriod = null;\r\n        let voPeriod = null;\r\n        let len,\r\n            i;\r\n\r\n        for (i = 0, len = mpd && mpd.manifest && mpd.manifest.Period_asArray ? mpd.manifest.Period_asArray.length : 0; i < len; i++) {\r\n            realPeriod = mpd.manifest.Period_asArray[i];\r\n\r\n            // If the attribute @start is present in the Period, then the\r\n            // Period is a regular Period and the PeriodStart is equal\r\n            // to the value of this attribute.\r\n            if (realPeriod.hasOwnProperty(DashConstants.START)) {\r\n                voPeriod = new Period();\r\n                voPeriod.start = realPeriod.start;\r\n            }\r\n            // If the @start attribute is absent, but the previous Period\r\n            // element contains a @duration attribute then then this new\r\n            // Period is also a regular Period. The start time of the new\r\n            // Period PeriodStart is the sum of the start time of the previous\r\n            // Period PeriodStart and the value of the attribute @duration\r\n            // of the previous Period.\r\n            else if (realPreviousPeriod !== null && realPreviousPeriod.hasOwnProperty(DashConstants.DURATION) && voPreviousPeriod !== null) {\r\n                voPeriod = new Period();\r\n                voPeriod.start = parseFloat((voPreviousPeriod.start + voPreviousPeriod.duration).toFixed(5));\r\n            }\r\n            // If (i) @start attribute is absent, and (ii) the Period element\r\n            // is the first in the MPD, and (iii) the MPD@type is 'static',\r\n            // then the PeriodStart time shall be set to zero.\r\n            else if (i === 0 && !isDynamic) {\r\n                voPeriod = new Period();\r\n                voPeriod.start = 0;\r\n            }\r\n\r\n            // The Period extends until the PeriodStart of the next Period.\r\n            // The difference between the PeriodStart time of a Period and\r\n            // the PeriodStart time of the following Period.\r\n            if (voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)) {\r\n                if (voPeriod !== null) {\r\n                    voPreviousPeriod.duration = parseFloat((voPeriod.start - voPreviousPeriod.start).toFixed(5));\r\n                } else {\r\n                    logger.warn('First period duration could not be calculated because lack of start and duration period properties. This will cause timing issues during playback');\r\n                }\r\n            }\r\n\r\n            if (voPeriod !== null) {\r\n                voPeriod.id = getPeriodId(realPeriod, i);\r\n                voPeriod.index = i;\r\n                voPeriod.mpd = mpd;\r\n\r\n                if (realPeriod.hasOwnProperty(DashConstants.DURATION)) {\r\n                    voPeriod.duration = realPeriod.duration;\r\n                }\r\n\r\n                voPeriods.push(voPeriod);\r\n                realPreviousPeriod = realPeriod;\r\n                voPreviousPeriod = voPeriod;\r\n            }\r\n\r\n            realPeriod = null;\r\n            voPeriod = null;\r\n        }\r\n\r\n        if (voPeriods.length === 0) {\r\n            return voPeriods;\r\n        }\r\n\r\n        // The last Period extends until the end of the Media Presentation.\r\n        // The difference between the PeriodStart time of the last Period\r\n        // and the mpd duration\r\n        if (voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)) {\r\n            voPreviousPeriod.duration = parseFloat((getEndTimeForLastPeriod(voPreviousPeriod) - voPreviousPeriod.start).toFixed(5));\r\n        }\r\n\r\n        return voPeriods;\r\n    }\r\n\r\n    function getPeriodId(realPeriod, i) {\r\n        if (!realPeriod) {\r\n            throw new Error('Period cannot be null or undefined');\r\n        }\r\n\r\n        let id = Period.DEFAULT_ID + '_' + i;\r\n\r\n        if (realPeriod.hasOwnProperty(DashConstants.ID) && realPeriod.id.length > 0 && realPeriod.id !== '__proto__') {\r\n            id = realPeriod.id;\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    function getMpd(manifest) {\r\n        const mpd = new Mpd();\r\n\r\n        if (manifest) {\r\n            mpd.manifest = manifest;\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.AVAILABILITY_START_TIME)) {\r\n                mpd.availabilityStartTime = new Date(manifest.availabilityStartTime.getTime());\r\n            } else {\r\n                if (manifest.loadedTime) {\r\n                    mpd.availabilityStartTime = new Date(manifest.loadedTime.getTime());\r\n                }\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.AVAILABILITY_END_TIME)) {\r\n                mpd.availabilityEndTime = new Date(manifest.availabilityEndTime.getTime());\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.MINIMUM_UPDATE_PERIOD)) {\r\n                mpd.minimumUpdatePeriod = manifest.minimumUpdatePeriod;\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.MEDIA_PRESENTATION_DURATION)) {\r\n                mpd.mediaPresentationDuration = manifest.mediaPresentationDuration;\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.SUGGESTED_PRESENTATION_DELAY)) {\r\n                mpd.suggestedPresentationDelay = manifest.suggestedPresentationDelay;\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.TIMESHIFT_BUFFER_DEPTH)) {\r\n                mpd.timeShiftBufferDepth = manifest.timeShiftBufferDepth;\r\n            }\r\n\r\n            if (manifest.hasOwnProperty(DashConstants.MAX_SEGMENT_DURATION)) {\r\n                mpd.maxSegmentDuration = manifest.maxSegmentDuration;\r\n            }\r\n        }\r\n\r\n        return mpd;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!errHandler || !errHandler.hasOwnProperty('error')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getEndTimeForLastPeriod(voPeriod) {\r\n        checkConfig();\r\n        const isDynamic = getIsDynamic(voPeriod.mpd.manifest);\r\n\r\n        let periodEnd;\r\n        if (voPeriod.mpd.manifest.mediaPresentationDuration) {\r\n            periodEnd = voPeriod.mpd.manifest.mediaPresentationDuration;\r\n        } else if (voPeriod.duration) {\r\n            periodEnd = voPeriod.duration;\r\n        } else if (isDynamic) {\r\n            periodEnd = Number.POSITIVE_INFINITY;\r\n        } else {\r\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_PARSE_CODE, 'Must have @mediaPresentationDuration on MPD or an explicit @duration on the last period.', voPeriod));\r\n        }\r\n\r\n        return periodEnd;\r\n    }\r\n\r\n    function getEventsForPeriod(period) {\r\n        const manifest = period && period.mpd && period.mpd.manifest ? period.mpd.manifest : null;\r\n        const periodArray = manifest ? manifest.Period_asArray : null;\r\n        const eventStreams = periodArray && period && isInteger(period.index) ? periodArray[period.index].EventStream_asArray : null;\r\n        const events = [];\r\n        let i,\r\n            j;\r\n\r\n        if (eventStreams) {\r\n            for (i = 0; i < eventStreams.length; i++) {\r\n                const eventStream = new EventStream();\r\n                eventStream.period = period;\r\n                eventStream.timescale = 1;\r\n\r\n                if (eventStreams[i].hasOwnProperty(Constants.SCHEME_ID_URI)) {\r\n                    eventStream.schemeIdUri = eventStreams[i].schemeIdUri;\r\n                } else {\r\n                    throw new Error('Invalid EventStream. SchemeIdUri has to be set');\r\n                }\r\n                if (eventStreams[i].hasOwnProperty(DashConstants.TIMESCALE)) {\r\n                    eventStream.timescale = eventStreams[i].timescale;\r\n                }\r\n                if (eventStreams[i].hasOwnProperty(DashConstants.VALUE)) {\r\n                    eventStream.value = eventStreams[i].value;\r\n                }\r\n                for (j = 0; eventStreams[i].Event_asArray && j < eventStreams[i].Event_asArray.length; j++) {\r\n                    const event = new Event();\r\n                    event.presentationTime = 0;\r\n                    event.eventStream = eventStream;\r\n\r\n                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(DashConstants.PRESENTATION_TIME)) {\r\n                        event.presentationTime = eventStreams[i].Event_asArray[j].presentationTime;\r\n                        const presentationTimeOffset = eventStream.presentationTimeOffset ? eventStream.presentationTimeOffset * eventStream.timescale : 0;\r\n                        event.calculatedPresentationTime = event.presentationTime + (period.start * eventStream.timescale) + presentationTimeOffset;\r\n                    }\r\n                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(DashConstants.DURATION)) {\r\n                        event.duration = eventStreams[i].Event_asArray[j].duration;\r\n                    }\r\n                    if (eventStreams[i].Event_asArray[j].hasOwnProperty(DashConstants.ID)) {\r\n                        event.id = eventStreams[i].Event_asArray[j].id;\r\n                    }\r\n\r\n                    if (eventStreams[i].Event_asArray[j].Signal && eventStreams[i].Event_asArray[j].Signal.Binary) {\r\n                        // toString is used to manage both regular and namespaced tags\r\n                        event.messageData = BASE64.decodeArray(eventStreams[i].Event_asArray[j].Signal.Binary.toString());\r\n                    } else {\r\n                        // From Cor.1: 'NOTE: this attribute is an alternative\r\n                        // to specifying a complete XML element(s) in the Event.\r\n                        // It is useful when an event leans itself to a compact\r\n                        // string representation'.\r\n                        event.messageData =\r\n                            eventStreams[i].Event_asArray[j].messageData ||\r\n                            eventStreams[i].Event_asArray[j].__text;\r\n                    }\r\n\r\n                    events.push(event);\r\n                }\r\n            }\r\n        }\r\n\r\n        return events;\r\n    }\r\n\r\n    function getEventStreams(inbandStreams, representation) {\r\n        const eventStreams = [];\r\n        let i;\r\n\r\n        if (!inbandStreams) return eventStreams;\r\n\r\n        for (i = 0; i < inbandStreams.length; i++) {\r\n            const eventStream = new EventStream();\r\n            eventStream.timescale = 1;\r\n            eventStream.representation = representation;\r\n\r\n            if (inbandStreams[i].hasOwnProperty(Constants.SCHEME_ID_URI)) {\r\n                eventStream.schemeIdUri = inbandStreams[i].schemeIdUri;\r\n            } else {\r\n                throw new Error('Invalid EventStream. SchemeIdUri has to be set');\r\n            }\r\n            if (inbandStreams[i].hasOwnProperty(DashConstants.TIMESCALE)) {\r\n                eventStream.timescale = inbandStreams[i].timescale;\r\n            }\r\n            if (inbandStreams[i].hasOwnProperty(DashConstants.VALUE)) {\r\n                eventStream.value = inbandStreams[i].value;\r\n            }\r\n            eventStreams.push(eventStream);\r\n        }\r\n\r\n        return eventStreams;\r\n    }\r\n\r\n    function getEventStreamForAdaptationSet(manifest, adaptation) {\r\n        let inbandStreams,\r\n            periodArray,\r\n            adaptationArray;\r\n\r\n        if (manifest && manifest.Period_asArray && adaptation && adaptation.period && isInteger(adaptation.period.index)) {\r\n            periodArray = manifest.Period_asArray[adaptation.period.index];\r\n            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(adaptation.index)) {\r\n                adaptationArray = periodArray.AdaptationSet_asArray[adaptation.index];\r\n                if (adaptationArray) {\r\n                    inbandStreams = adaptationArray.InbandEventStream_asArray;\r\n                }\r\n            }\r\n        }\r\n\r\n        return getEventStreams(inbandStreams, null);\r\n    }\r\n\r\n    function getEventStreamForRepresentation(manifest, representation) {\r\n        let inbandStreams,\r\n            periodArray,\r\n            adaptationArray,\r\n            representationArray;\r\n\r\n        if (manifest && manifest.Period_asArray && representation && representation.adaptation && representation.adaptation.period && isInteger(representation.adaptation.period.index)) {\r\n            periodArray = manifest.Period_asArray[representation.adaptation.period.index];\r\n            if (periodArray && periodArray.AdaptationSet_asArray && isInteger(representation.adaptation.index)) {\r\n                adaptationArray = periodArray.AdaptationSet_asArray[representation.adaptation.index];\r\n                if (adaptationArray && adaptationArray.Representation_asArray && isInteger(representation.index)) {\r\n                    representationArray = adaptationArray.Representation_asArray[representation.index];\r\n                    if (representationArray) {\r\n                        inbandStreams = representationArray.InbandEventStream_asArray;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return getEventStreams(inbandStreams, representation);\r\n    }\r\n\r\n    function getUTCTimingSources(manifest) {\r\n        const isDynamic = getIsDynamic(manifest);\r\n        const hasAST = manifest ? manifest.hasOwnProperty(DashConstants.AVAILABILITY_START_TIME) : false;\r\n        const utcTimingsArray = manifest ? manifest.UTCTiming_asArray : null;\r\n        const utcTimingEntries = [];\r\n\r\n        // do not bother synchronizing the clock unless MPD is live,\r\n        // or it is static and has availabilityStartTime attribute\r\n        if ((isDynamic || hasAST)) {\r\n            if (utcTimingsArray) {\r\n                // the order is important here - 23009-1 states that the order\r\n                // in the manifest \"indicates relative preference, first having\r\n                // the highest, and the last the lowest priority\".\r\n                utcTimingsArray.forEach(function (utcTiming) {\r\n                    const entry = new UTCTiming();\r\n\r\n                    if (utcTiming.hasOwnProperty(Constants.SCHEME_ID_URI)) {\r\n                        entry.schemeIdUri = utcTiming.schemeIdUri;\r\n                    } else {\r\n                        // entries of type DescriptorType with no schemeIdUri\r\n                        // are meaningless. let's just ignore this entry and\r\n                        // move on.\r\n                        return;\r\n                    }\r\n\r\n                    // this is (incorrectly) interpreted as a number - schema\r\n                    // defines it as a string\r\n                    if (utcTiming.hasOwnProperty(DashConstants.VALUE)) {\r\n                        entry.value = utcTiming.value.toString();\r\n                    } else {\r\n                        // without a value, there's not a lot we can do with\r\n                        // this entry. let's just ignore this one and move on\r\n                        return;\r\n                    }\r\n\r\n                    // we're not interested in the optional id or any other\r\n                    // attributes which might be attached to the entry\r\n\r\n                    utcTimingEntries.push(entry);\r\n                });\r\n            }\r\n        }\r\n\r\n        return utcTimingEntries;\r\n    }\r\n\r\n    function getBaseURLsFromElement(node) {\r\n        const baseUrls = [];\r\n        // if node.BaseURL_asArray and node.baseUri are undefined entries\r\n        // will be [undefined] which entries.some will just skip\r\n        const entries = node.BaseURL_asArray || [node.baseUri];\r\n        let earlyReturn = false;\r\n\r\n        entries.some(entry => {\r\n            if (entry) {\r\n                const baseUrl = new BaseURL();\r\n                let text = entry.__text || entry;\r\n\r\n                if (urlUtils.isRelative(text)) {\r\n                    // it doesn't really make sense to have relative and\r\n                    // absolute URLs at the same level, or multiple\r\n                    // relative URLs at the same level, so assume we are\r\n                    // done from this level of the MPD\r\n                    earlyReturn = true;\r\n\r\n                    // deal with the specific case where the MPD@BaseURL\r\n                    // is specified and is relative. when no MPD@BaseURL\r\n                    // entries exist, that case is handled by the\r\n                    // [node.baseUri] in the entries definition.\r\n                    if (node.baseUri) {\r\n                        text = urlUtils.resolve(text, node.baseUri);\r\n                    }\r\n                }\r\n\r\n                baseUrl.url = text;\r\n\r\n                // serviceLocation is optional, but we need it in order\r\n                // to blacklist correctly. if it's not available, use\r\n                // anything unique since there's no relationship to any\r\n                // other BaseURL and, in theory, the url should be\r\n                // unique so use this instead.\r\n                if (entry.hasOwnProperty(DashConstants.SERVICE_LOCATION) &&\r\n                    entry.serviceLocation.length) {\r\n                    baseUrl.serviceLocation = entry.serviceLocation;\r\n                } else {\r\n                    baseUrl.serviceLocation = text;\r\n                }\r\n\r\n                if (entry.hasOwnProperty(DashConstants.DVB_PRIORITY)) {\r\n                    baseUrl.dvb_priority = entry[DashConstants.DVB_PRIORITY];\r\n                }\r\n\r\n                if (entry.hasOwnProperty(DashConstants.DVB_WEIGHT)) {\r\n                    baseUrl.dvb_weight = entry[DashConstants.DVB_WEIGHT];\r\n                }\r\n\r\n                if (entry.hasOwnProperty(DashConstants.AVAILABILITY_TIME_OFFSET)) {\r\n                    baseUrl.availabilityTimeOffset = entry[DashConstants.AVAILABILITY_TIME_OFFSET];\r\n                }\r\n\r\n                if (entry.hasOwnProperty(DashConstants.AVAILABILITY_TIME_COMPLETE)) {\r\n                    baseUrl.availabilityTimeComplete = entry[DashConstants.AVAILABILITY_TIME_COMPLETE] !== 'false';\r\n                }\r\n                /* NOTE: byteRange currently unused\r\n                 */\r\n\r\n                baseUrls.push(baseUrl);\r\n\r\n                return earlyReturn;\r\n            }\r\n        });\r\n\r\n        return baseUrls;\r\n    }\r\n\r\n    function getLocation(manifest) {\r\n        if (manifest && manifest.hasOwnProperty(Constants.LOCATION)) {\r\n            // for now, do not support multiple Locations -\r\n            // just set Location to the first Location.\r\n            manifest.Location = manifest.Location_asArray[0];\r\n\r\n            return manifest.Location;\r\n        }\r\n\r\n        // may well be undefined\r\n        return undefined;\r\n    }\r\n\r\n    function getSuggestedPresentationDelay(mpd) {\r\n        return mpd && mpd.hasOwnProperty(DashConstants.SUGGESTED_PRESENTATION_DELAY) ? mpd.suggestedPresentationDelay : null;\r\n    }\r\n\r\n    function getAvailabilityStartTime(mpd) {\r\n        return mpd && mpd.hasOwnProperty(DashConstants.AVAILABILITY_START_TIME) && mpd.availabilityStartTime !== null ? mpd.availabilityStartTime.getTime() : null;\r\n    }\r\n\r\n    function getServiceDescriptions(manifest) {\r\n        const serviceDescriptions = [];\r\n        if (manifest && manifest.hasOwnProperty(DashConstants.SERVICE_DESCRIPTION)) {\r\n            for (const sd of manifest.ServiceDescription_asArray) {\r\n                // Convert each of the properties defined in\r\n                let id, schemeIdUri, latency, playbackRate;\r\n                for (const prop in sd) {\r\n                    if (sd.hasOwnProperty(prop)) {\r\n                        if (prop === DashConstants.ID) {\r\n                            id = sd[prop];\r\n                        } else if (prop === DashConstants.SERVICE_DESCRIPTION_SCOPE) {\r\n                            schemeIdUri = sd[prop].schemeIdUri;\r\n                        } else if (prop === DashConstants.SERVICE_DESCRIPTION_LATENCY) {\r\n                            latency = {\r\n                                target: sd[prop].target,\r\n                                max: sd[prop].max,\r\n                                min: sd[prop].min\r\n                            };\r\n                        } else if (prop === DashConstants.SERVICE_DESCRIPTION_PLAYBACK_RATE) {\r\n                            playbackRate = {\r\n                                max: sd[prop].max,\r\n                                min: sd[prop].min\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n                // we have a ServiceDescription for low latency. Add it if it really has parameters defined\r\n                if (schemeIdUri === Constants.SERVICE_DESCRIPTION_LL_SCHEME && (latency || playbackRate)) {\r\n                    serviceDescriptions.push({\r\n                        id,\r\n                        schemeIdUri,\r\n                        latency,\r\n                        playbackRate\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return serviceDescriptions;\r\n    }\r\n\r\n    function getSupplementalPropperties(adaptation) {\r\n        const supplementalProperties = {};\r\n\r\n        if (adaptation && adaptation.hasOwnProperty(DashConstants.SUPPLEMENTAL_PROPERTY)) {\r\n            for (const sp of adaptation.SupplementalProperty_asArray) {\r\n                if (sp.hasOwnProperty(Constants.SCHEME_ID_URI) && sp.hasOwnProperty(DashConstants.VALUE)) {\r\n                    supplementalProperties[sp[Constants.SCHEME_ID_URI]] = sp[DashConstants.VALUE];\r\n                }\r\n            }\r\n        }\r\n        return supplementalProperties;\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n\r\n        if (config.BASE64) {\r\n            BASE64 = config.BASE64;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getIsTypeOf: getIsTypeOf,\r\n        getIsTextTrack: getIsTextTrack,\r\n        getLanguageForAdaptation: getLanguageForAdaptation,\r\n        getViewpointForAdaptation: getViewpointForAdaptation,\r\n        getRolesForAdaptation: getRolesForAdaptation,\r\n        getAccessibilityForAdaptation: getAccessibilityForAdaptation,\r\n        getAudioChannelConfigurationForAdaptation: getAudioChannelConfigurationForAdaptation,\r\n        getAudioChannelConfigurationForRepresentation: getAudioChannelConfigurationForRepresentation,\r\n        getAdaptationForIndex: getAdaptationForIndex,\r\n        getIndexForAdaptation: getIndexForAdaptation,\r\n        getAdaptationForId: getAdaptationForId,\r\n        getAdaptationsForType: getAdaptationsForType,\r\n        getCodec: getCodec,\r\n        getMimeType: getMimeType,\r\n        getKID: getKID,\r\n        getLabelsForAdaptation: getLabelsForAdaptation,\r\n        getContentProtectionData: getContentProtectionData,\r\n        getIsDynamic: getIsDynamic,\r\n        hasProfile: hasProfile,\r\n        getDuration: getDuration,\r\n        getBandwidth: getBandwidth,\r\n        getManifestUpdatePeriod: getManifestUpdatePeriod,\r\n        getRepresentationCount: getRepresentationCount,\r\n        getBitrateListForAdaptation: getBitrateListForAdaptation,\r\n        getRepresentationFor: getRepresentationFor,\r\n        getRepresentationsForAdaptation: getRepresentationsForAdaptation,\r\n        getAdaptationsForPeriod: getAdaptationsForPeriod,\r\n        getRegularPeriods: getRegularPeriods,\r\n        getMpd: getMpd,\r\n        getEventsForPeriod: getEventsForPeriod,\r\n        getEventStreamForAdaptationSet: getEventStreamForAdaptationSet,\r\n        getEventStreamForRepresentation: getEventStreamForRepresentation,\r\n        getUTCTimingSources: getUTCTimingSources,\r\n        getBaseURLsFromElement: getBaseURLsFromElement,\r\n        getRepresentationSortFunction: getRepresentationSortFunction,\r\n        getLocation: getLocation,\r\n        getSuggestedPresentationDelay: getSuggestedPresentationDelay,\r\n        getAvailabilityStartTime: getAvailabilityStartTime,\r\n        getServiceDescriptions: getServiceDescriptions,\r\n        getSupplementalPropperties: getSupplementalPropperties,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashManifestModel.__dashjs_factory_name = 'DashManifestModel';\r\nexport default FactoryMaker.getSingletonFactory(DashManifestModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ObjectIron from './objectiron';\r\nimport X2JS from '../../../externals/xml2json';\r\nimport StringMatcher from './matchers/StringMatcher';\r\nimport DurationMatcher from './matchers/DurationMatcher';\r\nimport DateTimeMatcher from './matchers/DateTimeMatcher';\r\nimport NumericMatcher from './matchers/NumericMatcher';\r\nimport RepresentationBaseValuesMap from './maps/RepresentationBaseValuesMap';\r\nimport SegmentValuesMap from './maps/SegmentValuesMap';\r\n\r\nfunction DashParser(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const debug = config.debug;\r\n\r\n    let instance,\r\n        logger,\r\n        matchers,\r\n        converter,\r\n        objectIron;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        matchers = [\r\n            new DurationMatcher(),\r\n            new DateTimeMatcher(),\r\n            new NumericMatcher(),\r\n            new StringMatcher()   // last in list to take precedence over NumericMatcher\r\n        ];\r\n\r\n        converter = new X2JS({\r\n            escapeMode:         false,\r\n            attributePrefix:    '',\r\n            arrayAccessForm:    'property',\r\n            emptyNodeForm:      'object',\r\n            stripWhitespaces:   false,\r\n            enableToStringFunc: true,\r\n            ignoreRoot:         true,\r\n            matchers:           matchers\r\n        });\r\n\r\n        objectIron = ObjectIron(context).create({\r\n            adaptationset: new RepresentationBaseValuesMap(),\r\n            period: new SegmentValuesMap()\r\n        });\r\n    }\r\n\r\n    function getMatchers() {\r\n        return matchers;\r\n    }\r\n\r\n    function getIron() {\r\n        return objectIron;\r\n    }\r\n\r\n    function parse(data) {\r\n        let manifest;\r\n        const startTime = window.performance.now();\r\n\r\n        manifest = converter.xml_str2json(data);\r\n\r\n        if (!manifest) {\r\n            throw new Error('parsing the manifest failed');\r\n        }\r\n\r\n        const jsonTime = window.performance.now();\r\n        objectIron.run(manifest);\r\n\r\n        const ironedTime = window.performance.now();\r\n        logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\r\n\r\n        manifest.protocol = 'DASH';\r\n\r\n        return manifest;\r\n    }\r\n\r\n    instance = {\r\n        parse: parse,\r\n        getMatchers: getMatchers,\r\n        getIron: getIron\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDashParser.__dashjs_factory_name = 'DashParser';\r\nexport default FactoryMaker.getClassFactory(DashParser);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a property belonging to a MapNode\r\n * @ignore\r\n */\r\n\r\nclass CommonProperty {\r\n    constructor(name) {\r\n        const getDefaultMergeForName =\r\n              (n) => n && n.length && n.charAt(0) === n.charAt(0).toUpperCase();\r\n\r\n        this._name = name;\r\n        this._merge = getDefaultMergeForName(name);\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get merge() {\r\n        return this._merge;\r\n    }\r\n}\r\n\r\nexport default CommonProperty;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a node at some level in a ValueMap\r\n */\r\nimport CommonProperty from './CommonProperty';\r\n\r\nclass MapNode {\r\n    constructor(name, properties, children) {\r\n        this._name = name || '';\r\n        this._properties = [];\r\n        this._children = children || [];\r\n\r\n        if (Array.isArray(properties)) {\r\n            properties.forEach(p => {\r\n                this._properties.push(new CommonProperty(p));\r\n            });\r\n        }\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get children() {\r\n        return this._children;\r\n    }\r\n\r\n    get properties() {\r\n        return this._properties;\r\n    }\r\n}\r\n\r\nexport default MapNode;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a RepresentationBaseValuesMap type for input to objectiron\r\n */\r\nimport MapNode from './MapNode';\r\nimport DashConstants from '../../constants/DashConstants';\r\n\r\nclass RepresentationBaseValuesMap extends MapNode {\r\n    constructor() {\r\n        const commonProperties = [\r\n            DashConstants.PROFILES, DashConstants.WIDTH, DashConstants.HEIGHT, DashConstants.SAR, DashConstants.FRAMERATE, DashConstants.AUDIO_SAMPLING_RATE, DashConstants.MIME_TYPE, DashConstants.SEGMENT_PROFILES, DashConstants.CODECS, DashConstants.MAXIMUM_SAP_PERIOD, DashConstants.START_WITH_SAP, DashConstants.MAX_PLAYOUT_RATE, DashConstants.CODING_DEPENDENCY, DashConstants.SCAN_TYPE, DashConstants.FRAME_PACKING, DashConstants.AUDIO_CHANNEL_CONFIGURATION, DashConstants.CONTENT_PROTECTION, DashConstants.ESSENTIAL_PROPERTY, DashConstants.SUPPLEMENTAL_PROPERTY, DashConstants.INBAND_EVENT_STREAM\r\n        ];\r\n\r\n        super(DashConstants.ADAPTATION_SET, commonProperties, [\r\n            new MapNode(DashConstants.REPRESENTATION, commonProperties, [\r\n                new MapNode(DashConstants.SUB_REPRESENTATION, commonProperties)\r\n            ])\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default RepresentationBaseValuesMap;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc a SegmentValuesMap type for input to objectiron\r\n */\r\nimport MapNode from './MapNode';\r\nimport DashConstants from '../../constants/DashConstants';\r\n\r\nclass SegmentValuesMap extends MapNode {\r\n    constructor() {\r\n        const commonProperties = [\r\n            DashConstants.SEGMENT_BASE, DashConstants.SEGMENT_TEMPLATE, DashConstants.SEGMENT_LIST\r\n        ];\r\n\r\n        super(DashConstants.PERIOD, commonProperties, [\r\n            new MapNode(DashConstants.ADAPTATION_SET, commonProperties, [\r\n                new MapNode(DashConstants.REPRESENTATION, commonProperties)\r\n            ])\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default SegmentValuesMap;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc a base type for matching and converting types in manifest to\r\n * something more useful\r\n * @ignore\r\n */\r\nclass BaseMatcher {\r\n    constructor(test, converter) {\r\n        this._test = test;\r\n        this._converter = converter;\r\n    }\r\n\r\n    get test() {\r\n        return this._test;\r\n    }\r\n\r\n    get converter() {\r\n        return this._converter;\r\n    }\r\n}\r\n\r\nexport default BaseMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc matches and converts xs:datetime to Date\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\n\r\nconst SECONDS_IN_MIN = 60;\r\nconst MINUTES_IN_HOUR = 60;\r\nconst MILLISECONDS_IN_SECONDS = 1000;\r\n\r\nconst datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;\r\n\r\nclass DateTimeMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            attr => datetimeRegex.test(attr.value),\r\n            str => {\r\n                const match = datetimeRegex.exec(str);\r\n                let utcDate;\r\n\r\n                // If the string does not contain a timezone offset different browsers can interpret it either\r\n                // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\r\n                // all browsers\r\n                utcDate = Date.UTC(\r\n                    parseInt(match[1], 10),\r\n                    parseInt(match[2], 10) - 1, // months start from zero\r\n                    parseInt(match[3], 10),\r\n                    parseInt(match[4], 10),\r\n                    parseInt(match[5], 10),\r\n                    (match[6] && parseInt(match[6], 10) || 0),\r\n                    (match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS) || 0);\r\n\r\n                // If the date has timezone offset take it into account as well\r\n                if (match[9] && match[10]) {\r\n                    const timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\r\n                    utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\r\n                }\r\n\r\n                return new Date(utcDate);\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default DateTimeMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc matches and converts xs:duration to seconds\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\nimport Constants from '../../../streaming/constants/Constants';\r\nimport DashConstants from '../../constants/DashConstants';\r\n\r\nconst durationRegex = /^([-])?P(([\\d.]*)Y)?(([\\d.]*)M)?(([\\d.]*)D)?T?(([\\d.]*)H)?(([\\d.]*)M)?(([\\d.]*)S)?/;\r\n\r\nconst SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\r\nconst SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\r\nconst SECONDS_IN_DAY = 24 * 60 * 60;\r\nconst SECONDS_IN_HOUR = 60 * 60;\r\nconst SECONDS_IN_MIN = 60;\r\n\r\nclass DurationMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            attr => {\r\n                const attributeList = [\r\n                    DashConstants.MIN_BUFFER_TIME, DashConstants.MEDIA_PRESENTATION_DURATION,\r\n                    DashConstants.MINIMUM_UPDATE_PERIOD, DashConstants.TIMESHIFT_BUFFER_DEPTH, DashConstants.MAX_SEGMENT_DURATION,\r\n                    DashConstants.MAX_SUBSEGMENT_DURATION, DashConstants.SUGGESTED_PRESENTATION_DELAY, DashConstants.START,\r\n                    Constants.START_TIME, DashConstants.DURATION\r\n                ];\r\n                const len = attributeList.length;\r\n\r\n                for (let i = 0; i < len; i++) {\r\n                    if (attr.nodeName === attributeList[i]) {\r\n                        return durationRegex.test(attr.value);\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            str => {\r\n                //str = \"P10Y10M10DT10H10M10.1S\";\r\n                const match = durationRegex.exec(str);\r\n                let result = (parseFloat(match[3] || 0) * SECONDS_IN_YEAR +\r\n                    parseFloat(match[5] || 0) * SECONDS_IN_MONTH +\r\n                    parseFloat(match[7] || 0) * SECONDS_IN_DAY +\r\n                    parseFloat(match[9] || 0) * SECONDS_IN_HOUR +\r\n                    parseFloat(match[11] || 0) * SECONDS_IN_MIN +\r\n                    parseFloat(match[13] || 0));\r\n\r\n                if (match[1] !== undefined) {\r\n                    result = -result;\r\n                }\r\n\r\n                return result;\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default DurationMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Matches and converts xs:numeric to float\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\n\r\nconst numericRegex = /^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$/;\r\n\r\nclass NumericMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            attr => numericRegex.test(attr.value),\r\n            str => parseFloat(str)\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumericMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Matches and converts xs:string to string, but only for specific attributes on specific nodes\r\n */\r\nimport BaseMatcher from './BaseMatcher';\r\nimport DashConstants from '../../constants/DashConstants';\r\n\r\nclass StringMatcher extends BaseMatcher {\r\n    constructor() {\r\n        super(\r\n            (attr, nodeName) => {\r\n                const stringAttrsInElements = {\r\n                    [DashConstants.MPD]:                            [ DashConstants.ID, DashConstants.PROFILES ],\r\n                    [DashConstants.PERIOD]:                         [ DashConstants.ID ],\r\n                    [DashConstants.BASE_URL]:                       [ DashConstants.SERVICE_LOCATION, DashConstants.BYTE_RANGE ],\r\n                    [DashConstants.SEGMENT_BASE]:                   [ DashConstants.INDEX_RANGE ],\r\n                    [DashConstants.INITIALIZATION]:                 [ DashConstants.RANGE ],\r\n                    [DashConstants.REPRESENTATION_INDEX]:           [ DashConstants.RANGE ],\r\n                    [DashConstants.SEGMENT_LIST]:                   [ DashConstants.INDEX_RANGE ],\r\n                    [DashConstants.BITSTREAM_SWITCHING]:            [ DashConstants.RANGE ],\r\n                    [DashConstants.SEGMENT_URL]:                    [ DashConstants.MEDIA_RANGE, DashConstants.INDEX_RANGE ],\r\n                    [DashConstants.SEGMENT_TEMPLATE]:               [ DashConstants.INDEX_RANGE, DashConstants.MEDIA, DashConstants.INDEX, DashConstants.INITIALIZATION_MINUS, DashConstants.BITSTREAM_SWITCHING_MINUS ],\r\n                    [DashConstants.ASSET_IDENTIFIER]:               [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.EVENT_STREAM]:                   [ DashConstants.VALUE ],\r\n                    [DashConstants.ADAPTATION_SET]:                 [ DashConstants.PROFILES, DashConstants.MIME_TYPE, DashConstants.SEGMENT_PROFILES, DashConstants.CODECS, DashConstants.CONTENT_TYPE ],\r\n                    [DashConstants.FRAME_PACKING]:                  [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.AUDIO_CHANNEL_CONFIGURATION]:    [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.CONTENT_PROTECTION]:             [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.ESSENTIAL_PROPERTY]:             [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.SUPPLEMENTAL_PROPERTY]:          [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.INBAND_EVENT_STREAM]:            [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.ACCESSIBILITY]:                  [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.ROLE]:                           [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.RATING]:                         [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.VIEWPOINT]:                      [ DashConstants.VALUE, DashConstants.ID ],\r\n                    [DashConstants.CONTENT_COMPONENT]:              [ DashConstants.CONTENT_TYPE ],\r\n                    [DashConstants.REPRESENTATION]:                 [ DashConstants.ID, DashConstants.DEPENDENCY_ID, DashConstants.MEDIA_STREAM_STRUCTURE_ID ],\r\n                    [DashConstants.SUBSET]:                         [ DashConstants.ID ],\r\n                    [DashConstants.METRICS]:                        [ DashConstants.METRICS_MINUS ],\r\n                    [DashConstants.REPORTING]:                      [ DashConstants.VALUE, DashConstants.ID ]\r\n                };\r\n                if (stringAttrsInElements.hasOwnProperty(nodeName)) {\r\n                    let attrNames = stringAttrsInElements[nodeName];\r\n                    if (attrNames !== undefined) {\r\n                        return attrNames.indexOf(attr.name) >= 0;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            str => String(str)\r\n        );\r\n    }\r\n}\r\n\r\nexport default StringMatcher;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction ObjectIron(mappers) {\r\n\r\n    function mergeValues(parentItem, childItem) {\r\n        for (let name in parentItem) {\r\n            if (!childItem.hasOwnProperty(name)) {\r\n                childItem[name] = parentItem[name];\r\n            }\r\n        }\r\n    }\r\n\r\n    function mapProperties(properties, parent, child) {\r\n        for (let i = 0, len = properties.length; i < len; ++i) {\r\n            const property = properties[i];\r\n\r\n            if (parent[property.name]) {\r\n                if (child[property.name]) {\r\n                    // check to see if we should merge\r\n                    if (property.merge) {\r\n                        const parentValue = parent[property.name];\r\n                        const childValue = child[property.name];\r\n\r\n                        // complex objects; merge properties\r\n                        if (typeof parentValue === 'object' && typeof childValue === 'object') {\r\n                            mergeValues(parentValue, childValue);\r\n                        }\r\n                        // simple objects; merge them together\r\n                        else {\r\n                            child[property.name] = parentValue + childValue;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // just add the property\r\n                    child[property.name] = parent[property.name];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function mapItem(item, node) {\r\n        for (let i = 0, len = item.children.length; i < len; ++i) {\r\n            const childItem = item.children[i];\r\n\r\n            const array = node[childItem.name + '_asArray'];\r\n            if (array) {\r\n                for (let v = 0, len2 = array.length; v < len2; ++v) {\r\n                    const childNode = array[v];\r\n                    mapProperties(item.properties, node, childNode);\r\n                    mapItem(childItem, childNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function run(source) {\r\n\r\n        if (source === null || typeof source !== 'object') {\r\n            return source;\r\n        }\r\n\r\n        if ('period' in mappers) {\r\n            const periodMapper = mappers.period;\r\n            const periods = source.Period_asArray;\r\n            for (let i = 0, len = periods.length; i < len; ++i) {\r\n                const period = periods[i];\r\n                mapItem(periodMapper, period);\r\n\r\n                if ('adaptationset' in mappers) {\r\n                    const adaptationSets = period.AdaptationSet_asArray;\r\n                    if (adaptationSets) {\r\n                        const adaptationSetMapper = mappers.adaptationset;\r\n                        for (let i = 0, len = adaptationSets.length; i < len; ++i) {\r\n                            mapItem(adaptationSetMapper, adaptationSets[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return source;\r\n    }\r\n\r\n    return {\r\n        run: run\r\n    };\r\n}\r\n\r\n\r\nObjectIron.__dashjs_factory_name = 'ObjectIron';\r\nconst factory = FactoryMaker.getClassFactory(ObjectIron);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\nimport {getIndexBasedSegment} from './SegmentsUtils';\r\n\r\nfunction ListSegmentsGetter(config, isDynamic) {\r\n\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\r\n        const len = list.SegmentURL_asArray.length;\r\n\r\n        const startNumber = representation && !isNaN(representation.startNumber) ? representation.startNumber : 1;\r\n        const offsetToSubtract = Math.max(startNumber - 1, 0);\r\n\r\n        const start = representation.startNumber;\r\n        let segment = null;\r\n        if ((index - offsetToSubtract) < len) {\r\n            const s = list.SegmentURL_asArray[index - offsetToSubtract];\r\n\r\n            segment = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\r\n            if (segment) {\r\n                segment.replacementTime = (start + index - 1) * representation.segmentDuration;\r\n                segment.media = s.media ? s.media : '';\r\n                segment.mediaRange = s.mediaRange;\r\n                segment.index = index;\r\n                segment.indexRange = s.indexRange;\r\n            }\r\n        }\r\n\r\n        representation.availableSegmentsNumber = len;\r\n\r\n        return segment;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const duration = representation.segmentDuration;\r\n\r\n        if (isNaN(duration)) {\r\n            return null;\r\n        }\r\n\r\n\r\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\r\n        const index = Math.floor(periodTime / duration);\r\n\r\n        return getSegmentByIndex(representation, index);\r\n    }\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';\r\nconst factory = FactoryMaker.getClassFactory(ListSegmentsGetter);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\n\r\nfunction SegmentBaseGetter(config) {\r\n\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const len = representation.segments ? representation.segments.length : -1;\r\n        let seg;\r\n        if (index < len) {\r\n            seg = representation.segments[index];\r\n            if (seg && seg.availabilityIdx === index) {\r\n                return seg;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            seg = representation.segments[i];\r\n\r\n            if (seg && seg.availabilityIdx === index) {\r\n                return seg;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        const index = getIndexByTime(representation, requestedTime);\r\n\r\n        return getSegmentByIndex(representation, index);\r\n    }\r\n\r\n    function getIndexByTime(representation, time) {\r\n        if (!representation) {\r\n            return -1;\r\n        }\r\n\r\n        const segments = representation.segments;\r\n        const ln = segments ? segments.length : null;\r\n\r\n        let idx = -1;\r\n        let epsilon,\r\n            frag,\r\n            ft,\r\n            fd,\r\n            i;\r\n\r\n        if (segments && ln > 0) {\r\n            for (i = 0; i < ln; i++) {\r\n                frag = segments[i];\r\n                ft = frag.presentationStartTime;\r\n                fd = frag.duration;\r\n\r\n                epsilon = fd / 2;\r\n                if ((time + epsilon) >= ft &&\r\n                    (time - epsilon) < (ft + fd)) {\r\n                    idx = frag.availabilityIdx;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return idx;\r\n    }\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentBaseGetter.__dashjs_factory_name = 'SegmentBaseGetter';\r\nconst factory = FactoryMaker.getClassFactory(SegmentBaseGetter);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport Segment from './../vo/Segment';\r\n\r\nfunction zeroPadToLength(numStr, minStrLength) {\r\n    while (numStr.length < minStrLength) {\r\n        numStr = '0' + numStr;\r\n    }\r\n    return numStr;\r\n}\r\n\r\nfunction getNumberForSegment(segment, segmentIndex) {\r\n    return segment.representation.startNumber + segmentIndex;\r\n}\r\n\r\nexport function unescapeDollarsInTemplate(url) {\r\n    return url ? url.split('$$').join('$') : url;\r\n}\r\n\r\nexport function replaceIDForTemplate(url, value) {\r\n    if (!value || !url || url.indexOf('$RepresentationID$') === -1) {\r\n        return url;\r\n    }\r\n    let v = value.toString();\r\n    return url.split('$RepresentationID$').join(v);\r\n}\r\n\r\nexport function replaceTokenForTemplate(url, token, value) {\r\n    const formatTag = '%0';\r\n\r\n    let startPos,\r\n        endPos,\r\n        formatTagPos,\r\n        specifier,\r\n        width,\r\n        paddedValue;\r\n\r\n    const tokenLen = token.length;\r\n    const formatTagLen = formatTag.length;\r\n\r\n    if (!url) {\r\n        return url;\r\n    }\r\n\r\n    // keep looping round until all instances of <token> have been\r\n    // replaced. once that has happened, startPos below will be -1\r\n    // and the completed url will be returned.\r\n    while (true) {\r\n\r\n        // check if there is a valid $<token>...$ identifier\r\n        // if not, return the url as is.\r\n        startPos = url.indexOf('$' + token);\r\n        if (startPos < 0) {\r\n            return url;\r\n        }\r\n\r\n        // the next '$' must be the end of the identifier\r\n        // if there isn't one, return the url as is.\r\n        endPos = url.indexOf('$', startPos + tokenLen);\r\n        if (endPos < 0) {\r\n            return url;\r\n        }\r\n\r\n        // now see if there is an additional format tag suffixed to\r\n        // the identifier within the enclosing '$' characters\r\n        formatTagPos = url.indexOf(formatTag, startPos + tokenLen);\r\n        if (formatTagPos > startPos && formatTagPos < endPos) {\r\n\r\n            specifier = url.charAt(endPos - 1);\r\n            width = parseInt(url.substring(formatTagPos + formatTagLen, endPos - 1), 10);\r\n\r\n            // support the minimum specifiers required by IEEE 1003.1\r\n            // (d, i , o, u, x, and X) for completeness\r\n            switch (specifier) {\r\n                // treat all int types as uint,\r\n                // hence deliberate fallthrough\r\n                case 'd':\r\n                case 'i':\r\n                case 'u':\r\n                    paddedValue = zeroPadToLength(value.toString(), width);\r\n                    break;\r\n                case 'x':\r\n                    paddedValue = zeroPadToLength(value.toString(16), width);\r\n                    break;\r\n                case 'X':\r\n                    paddedValue = zeroPadToLength(value.toString(16), width).toUpperCase();\r\n                    break;\r\n                case 'o':\r\n                    paddedValue = zeroPadToLength(value.toString(8), width);\r\n                    break;\r\n                default:\r\n                    return url;\r\n            }\r\n        } else {\r\n            paddedValue = value;\r\n        }\r\n\r\n        url = url.substring(0, startPos) + paddedValue + url.substring(endPos + 1);\r\n    }\r\n}\r\n\r\nfunction getSegment(representation, duration, presentationStartTime, mediaStartTime, availabilityStartTime,\r\n                    timelineConverter, presentationEndTime, isDynamic, index) {\r\n    let seg = new Segment();\r\n\r\n    seg.representation = representation;\r\n    seg.duration = duration;\r\n    seg.presentationStartTime = presentationStartTime;\r\n    seg.mediaStartTime = mediaStartTime;\r\n    seg.availabilityStartTime = availabilityStartTime;\r\n    seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime, representation.adaptation.period.mpd, isDynamic);\r\n    seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg, isDynamic);\r\n    seg.replacementNumber = getNumberForSegment(seg, index);\r\n    seg.availabilityIdx = index;\r\n\r\n    return seg;\r\n}\r\n\r\nfunction isSegmentAvailable(timelineConverter, representation, segment, isDynamic) {\r\n    const periodEnd = timelineConverter.getPeriodEnd(representation, isDynamic);\r\n    const periodRelativeEnd = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, periodEnd);\r\n\r\n    const segmentTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, segment.presentationStartTime);\r\n    if (segmentTime >= periodRelativeEnd) {\r\n        if (isDynamic) {\r\n            // segment is not available in current period, but it may be segment available in another period that current one (in DVR window)\r\n            // if not (time > segmentAvailabilityRange.end), then return false\r\n            if (representation.segmentAvailabilityRange && segment.presentationStartTime >= representation.segmentAvailabilityRange.end) {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function getIndexBasedSegment(timelineConverter, isDynamic, representation, index) {\r\n    let duration,\r\n        presentationStartTime,\r\n        presentationEndTime;\r\n\r\n    duration = representation.segmentDuration;\r\n\r\n    /*\r\n     * From spec - If neither @duration attribute nor SegmentTimeline element is present, then the Representation\r\n     * shall contain exactly one Media Segment. The MPD start time is 0 and the MPD duration is obtained\r\n     * in the same way as for the last Media Segment in the Representation.\r\n     */\r\n    if (isNaN(duration)) {\r\n        duration = representation.adaptation.period.duration;\r\n    }\r\n\r\n    presentationStartTime = parseFloat((representation.adaptation.period.start + (index * duration)).toFixed(5));\r\n    presentationEndTime = parseFloat((presentationStartTime + duration).toFixed(5));\r\n\r\n    const segment = getSegment(representation, duration, presentationStartTime,\r\n        timelineConverter.calcMediaTimeFromPresentationTime(presentationStartTime, representation),\r\n        timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic),\r\n        timelineConverter, presentationEndTime, isDynamic, index);\r\n\r\n    if (!isSegmentAvailable(timelineConverter, representation, segment, isDynamic)) {\r\n        return null;\r\n    }\r\n\r\n    return segment;\r\n}\r\n\r\nexport function getTimeBasedSegment(timelineConverter, isDynamic, representation, time, duration, fTimescale, url, range, index, tManifest) {\r\n    const scaledTime = time / fTimescale;\r\n    const scaledDuration = Math.min(duration / fTimescale, representation.adaptation.period.mpd.maxSegmentDuration);\r\n\r\n    let presentationStartTime,\r\n        presentationEndTime,\r\n        seg;\r\n\r\n    presentationStartTime = timelineConverter.calcPresentationTimeFromMediaTime(scaledTime, representation);\r\n    presentationEndTime = presentationStartTime + scaledDuration;\r\n\r\n    seg = getSegment(representation, scaledDuration, presentationStartTime,\r\n        scaledTime,\r\n        representation.adaptation.period.mpd.manifest.loadedTime,\r\n        timelineConverter, presentationEndTime, isDynamic, index);\r\n\r\n    if (!isSegmentAvailable(timelineConverter, representation, seg, isDynamic)) {\r\n        return null;\r\n    }\r\n\r\n    seg.replacementTime = tManifest ? tManifest : time;\r\n\r\n    url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\r\n    url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\r\n    seg.media = url;\r\n    seg.mediaRange = range;\r\n\r\n    return seg;\r\n}\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\nimport { replaceTokenForTemplate, getIndexBasedSegment } from './SegmentsUtils';\r\n\r\nfunction TemplateSegmentsGetter(config, isDynamic) {\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\r\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;\r\n\r\n        index = Math.max(index, 0);\r\n\r\n        const seg = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\r\n        if (seg) {\r\n            seg.replacementTime = (index - 1) * representation.segmentDuration;\r\n\r\n            let url = template.media;\r\n            url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\r\n            url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\r\n            seg.media = url;\r\n        }\r\n\r\n        const duration = representation.segmentDuration;\r\n        const availabilityWindow = representation.segmentAvailabilityRange;\r\n        if (isNaN(duration)) {\r\n            representation.availableSegmentsNumber = 1;\r\n        }\r\n        else {\r\n            representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\r\n        }\r\n\r\n        return seg;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        const duration = representation.segmentDuration;\r\n\r\n        if (isNaN(duration)) {\r\n            return null;\r\n        }\r\n\r\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\r\n        const index = Math.floor(periodTime / duration);\r\n\r\n        return getSegmentByIndex(representation, index);\r\n    }\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nTemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';\r\nconst factory = FactoryMaker.getClassFactory(TemplateSegmentsGetter);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../../streaming/constants/Constants';\r\n\r\nimport { getTimeBasedSegment } from './SegmentsUtils';\r\n\r\nfunction TimelineSegmentsGetter(config, isDynamic) {\r\n\r\n    config = config || {};\r\n    const timelineConverter = config.timelineConverter;\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcMediaTimeFromPresentationTime') ||\r\n            !timelineConverter.hasOwnProperty('calcSegmentAvailabilityRange')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function iterateSegments(representation, iterFunc) {\r\n        const base = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\r\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate ||\r\n            representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\r\n                AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\r\n        const timeline = base.SegmentTimeline;\r\n        const list = base.SegmentURL_asArray;\r\n\r\n        let time = 0;\r\n        let scaledTime = 0;\r\n        let availabilityIdx = -1;\r\n\r\n        let fragments,\r\n            frag,\r\n            i,\r\n            len,\r\n            j,\r\n            repeat,\r\n            repeatEndTime,\r\n            nextFrag,\r\n            fTimescale;\r\n\r\n        fTimescale = representation.timescale;\r\n        fragments = timeline.S_asArray;\r\n\r\n        let breakIterator = false;\r\n\r\n        for (i = 0, len = fragments.length; i < len && !breakIterator; i++) {\r\n            frag = fragments[i];\r\n            repeat = 0;\r\n            if (frag.hasOwnProperty('r')) {\r\n                repeat = frag.r;\r\n            }\r\n\r\n            // For a repeated S element, t belongs only to the first segment\r\n            if (frag.hasOwnProperty('t')) {\r\n                time = frag.t;\r\n                scaledTime = time / fTimescale;\r\n            }\r\n\r\n            // This is a special case: \"A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the\r\n            // next MPD update.\"\r\n            if (repeat < 0) {\r\n                nextFrag = fragments[i + 1];\r\n\r\n                if (nextFrag && nextFrag.hasOwnProperty('t')) {\r\n                    repeatEndTime = nextFrag.t / fTimescale;\r\n                } else {\r\n                    const availabilityEnd = representation.segmentAvailabilityRange ? representation.segmentAvailabilityRange.end : (timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic).end);\r\n                    repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd, representation);\r\n                    representation.segmentDuration = frag.d / fTimescale;\r\n                }\r\n\r\n                repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;\r\n            }\r\n\r\n            for (j = 0; j <= repeat && !breakIterator; j++) {\r\n                availabilityIdx++;\r\n\r\n                breakIterator = iterFunc(time, scaledTime, base, list, frag, fTimescale, availabilityIdx, i);\r\n\r\n                if (breakIterator) {\r\n                    representation.segmentDuration = frag.d / fTimescale;\r\n\r\n                    // check if there is at least one more segment\r\n                    if (j < repeat - 1 || i < len - 1) {\r\n                        availabilityIdx++;\r\n                    }\r\n                }\r\n\r\n                time += frag.d;\r\n                scaledTime = time / fTimescale;\r\n            }\r\n        }\r\n\r\n        representation.availableSegmentsNumber = availabilityIdx;\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        let segment = null;\r\n        let found = false;\r\n\r\n        iterateSegments(representation, function (time, scaledTime, base, list, frag, fTimescale, availabilityIdx, i) {\r\n            if (found || lastSegmentTime < 0) {\r\n                let media = base.media;\r\n                let mediaRange = frag.mediaRange;\r\n\r\n                if (list) {\r\n                    media = list[i].media || '';\r\n                    mediaRange = list[i].mediaRange;\r\n                }\r\n\r\n                segment = getTimeBasedSegment(\r\n                    timelineConverter,\r\n                    isDynamic,\r\n                    representation,\r\n                    time,\r\n                    frag.d,\r\n                    fTimescale,\r\n                    media,\r\n                    mediaRange,\r\n                    availabilityIdx,\r\n                    frag.tManifest);\r\n\r\n                return true;\r\n            } else if (scaledTime >= lastSegmentTime - frag.d * 0.5 / fTimescale) { // same logic, if deviation is\r\n                // 50% of segment duration, segment is found if scaledTime is greater than or equal to (startTime of previous segment - half of the previous segment duration)\r\n                found = true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return segment;\r\n    }\r\n\r\n    function getSegmentByTime(representation, requestedTime) {\r\n        checkConfig();\r\n\r\n        if (!representation) {\r\n            return null;\r\n        }\r\n\r\n        if (requestedTime === undefined) {\r\n            requestedTime = null;\r\n        }\r\n\r\n        let segment = null;\r\n        const requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime, representation);\r\n\r\n        iterateSegments(representation, function (time, scaledTime, base, list, frag, fTimescale, availabilityIdx, i) {\r\n            // In some cases when requiredMediaTime = actual end time of the last segment\r\n            // it is possible that this time a bit exceeds the declared end time of the last segment.\r\n            // in this case we still need to include the last segment in the segment list.\r\n            if (requiredMediaTime < (scaledTime + (frag.d / fTimescale))) {\r\n                let media = base.media;\r\n                let mediaRange = frag.mediaRange;\r\n\r\n                if (list) {\r\n                    media = list[i].media || '';\r\n                    mediaRange = list[i].mediaRange;\r\n                }\r\n\r\n                segment = getTimeBasedSegment(\r\n                    timelineConverter,\r\n                    isDynamic,\r\n                    representation,\r\n                    time,\r\n                    frag.d,\r\n                    fTimescale,\r\n                    media,\r\n                    mediaRange,\r\n                    availabilityIdx,\r\n                    frag.tManifest);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return segment;\r\n    }\r\n\r\n\r\n    instance = {\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nTimelineSegmentsGetter.__dashjs_factory_name = 'TimelineSegmentsGetter';\r\nconst factory = FactoryMaker.getClassFactory(TimelineSegmentsGetter);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass AdaptationSet {\r\n    constructor() {\r\n        this.period = null;\r\n        this.index = -1;\r\n        this.type = null;\r\n    }\r\n}\r\n\r\nexport default AdaptationSet;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\nconst DEFAULT_DVB_PRIORITY = 1;\r\nconst DEFAULT_DVB_WEIGHT = 1;\r\n\r\nclass BaseURL {\r\n    constructor(url, serviceLocation, priority, weight) {\r\n        this.url = url || '';\r\n        this.serviceLocation = serviceLocation || url || '';\r\n\r\n        // DVB extensions\r\n        this.dvb_priority = priority || DEFAULT_DVB_PRIORITY;\r\n        this.dvb_weight = weight || DEFAULT_DVB_WEIGHT;\r\n\r\n        this.availabilityTimeOffset = 0;\r\n        this.availabilityTimeComplete = true;\r\n\r\n        /* currently unused:\r\n         * byteRange,\r\n         */\r\n    }\r\n}\r\n\r\nBaseURL.DEFAULT_DVB_PRIORITY = DEFAULT_DVB_PRIORITY;\r\nBaseURL.DEFAULT_DVB_WEIGHT = DEFAULT_DVB_WEIGHT;\r\n\r\nexport default BaseURL;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Event {\r\n    constructor() {\r\n        this.duration = NaN;\r\n        this.presentationTime = NaN;\r\n        this.id = NaN;\r\n        this.messageData = '';\r\n        this.eventStream = null;\r\n        this.presentationTimeDelta = NaN; // Specific EMSG Box parameter\r\n    }\r\n}\r\n\r\nexport default Event;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventStream {\r\n    constructor() {\r\n        this.adaptionSet = null;\r\n        this.representation = null;\r\n        this.period = null;\r\n        this.timescale = 1;\r\n        this.value = '';\r\n        this.schemeIdUri = '';\r\n    }\r\n}\r\n\r\nexport default EventStream;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Mpd {\r\n    constructor() {\r\n        this.manifest = null;\r\n        this.suggestedPresentationDelay = 0;\r\n        this.availabilityStartTime = null;\r\n        this.availabilityEndTime = Number.POSITIVE_INFINITY;\r\n        this.timeShiftBufferDepth = Number.POSITIVE_INFINITY;\r\n        this.maxSegmentDuration = Number.POSITIVE_INFINITY;\r\n        this.minimumUpdatePeriod = NaN;\r\n        this.mediaPresentationDuration = NaN;\r\n    }\r\n}\r\n\r\nexport default Mpd;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Period {\r\n    constructor() {\r\n        this.id = null;\r\n        this.index = -1;\r\n        this.duration = NaN;\r\n        this.start = NaN;\r\n        this.mpd = null;\r\n    }\r\n}\r\n\r\nPeriod.DEFAULT_ID = 'defaultId';\r\n\r\nexport default Period;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\nimport DashConstants from '../constants/DashConstants';\r\n\r\nclass Representation {\r\n    constructor() {\r\n        this.id = null;\r\n        this.index = -1;\r\n        this.adaptation = null;\r\n        this.segmentInfoType = null;\r\n        this.initialization = null;\r\n        this.codecs = null;\r\n        this.codecPrivateData = null;\r\n        this.segmentDuration = NaN;\r\n        this.timescale = 1;\r\n        this.startNumber = 1;\r\n        this.indexRange = null;\r\n        this.range = null;\r\n        this.presentationTimeOffset = 0;\r\n        // Set the source buffer timeOffset to this\r\n        this.MSETimeOffset = NaN;\r\n        this.segmentAvailabilityRange = null;\r\n        this.availableSegmentsNumber = 0;\r\n        this.bandwidth = NaN;\r\n        this.width = NaN;\r\n        this.height = NaN;\r\n        this.scanType = null;\r\n        this.maxPlayoutRate = NaN;\r\n        this.availabilityTimeOffset = 0;\r\n        this.availabilityTimeComplete = true;\r\n    }\r\n\r\n    hasInitialization() {\r\n        return (this.initialization !== null || this.range !== null);\r\n    }\r\n\r\n    hasSegments() {\r\n        return this.segmentInfoType !== DashConstants.BASE_URL &&\r\n            this.segmentInfoType !== DashConstants.SEGMENT_BASE &&\r\n            !this.indexRange;\r\n    }\r\n}\r\n\r\nexport default Representation;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Segment {\r\n    constructor() {\r\n        this.indexRange = null;\r\n        this.index = null;\r\n        this.mediaRange = null;\r\n        this.media = null;\r\n        this.duration = NaN;\r\n        // this is the time that should be inserted into the media url\r\n        this.replacementTime = null;\r\n        // this is the number that should be inserted into the media url\r\n        this.replacementNumber = NaN;\r\n        // This is supposed to match the time encoded in the media Segment\r\n        this.mediaStartTime = NaN;\r\n        // When the source buffer timeOffset is set to MSETimeOffset this is the\r\n        // time that will match the seekTarget and video.currentTime\r\n        this.presentationStartTime = NaN;\r\n        // Do not schedule this segment until\r\n        this.availabilityStartTime = NaN;\r\n        // Ignore and  discard this segment after\r\n        this.availabilityEndTime = NaN;\r\n        // The index of the segment inside the availability window\r\n        this.availabilityIdx = NaN;\r\n        // For dynamic mpd's, this is the wall clock time that the video\r\n        // element currentTime should be presentationStartTime\r\n        this.wallStartTime = NaN;\r\n        this.representation = null;\r\n    }\r\n}\r\n\r\nexport default Segment;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass UTCTiming {\r\n    constructor() {\r\n        // UTCTiming is a DescriptorType and doesn't have any additional fields\r\n        this.schemeIdUri = '';\r\n        this.value = '';\r\n    }\r\n}\r\n\r\nexport default UTCTiming;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport OfflineConstants from './constants/OfflineConstants';\r\nimport OfflineStream from './OfflineStream';\r\nimport OfflineIndexDBManifestParser from './utils/OfflineIndexDBManifestParser';\r\nimport OfflineErrors from './errors/OfflineErrors';\r\nimport DashParser from '../dash/parser/DashParser';\r\n\r\nfunction OfflineDownload(config) {\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    const manifestLoader = config.manifestLoader;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const abrController = config.abrController;\r\n    const playbackController = config.playbackController;\r\n    const adapter = config.adapter;\r\n    const dashMetrics = config.dashMetrics;\r\n    const timelineConverter = config.timelineConverter;\r\n    const offlineStoreController = config.offlineStoreController;\r\n    const manifestId = config.id;\r\n    const eventBus = config.eventBus;\r\n    const errHandler = config.errHandler;\r\n    const events = config.events;\r\n    const errors = config.errors;\r\n    const settings = config.settings;\r\n    const debug = config.debug;\r\n    const manifestUpdater = config.manifestUpdater;\r\n    const baseURLController = config.baseURLController;\r\n    const constants = config.constants;\r\n    const dashConstants = config.dashConstants;\r\n    const urlUtils = config.urlUtils;\r\n\r\n    let instance,\r\n        logger,\r\n        _manifestURL,\r\n        _offlineURL,\r\n        _xmlManifest,\r\n        _streams,\r\n        _manifest,\r\n        _isDownloadingStatus,\r\n        _isComposed,\r\n        _representationsToUpdate,\r\n        _indexDBManifestParser,\r\n        _progressionById,\r\n        _progression,\r\n        _status;\r\n\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        manifestUpdater.initialize();\r\n        _streams = [];\r\n        _isDownloadingStatus = false;\r\n        _isComposed = false;\r\n        _progressionById = {};\r\n        _progression = 0;\r\n        _status = undefined;\r\n    }\r\n\r\n    function getId() {\r\n        return manifestId;\r\n    }\r\n\r\n    function getOfflineUrl () {\r\n        return _offlineURL;\r\n    }\r\n\r\n    function getManifestUrl () {\r\n        return _manifestURL;\r\n    }\r\n\r\n    function getStatus () {\r\n        return _status;\r\n    }\r\n\r\n    function setInitialState(state) {\r\n        _offlineURL = state.url;\r\n        _progression = state.progress;\r\n        _manifestURL = state.originalUrl;\r\n        _status = state.status;\r\n    }\r\n\r\n    /**\r\n     * Download a stream, from url of manifest\r\n     * @param {string} url\r\n     * @instance\r\n     */\r\n    function downloadFromUrl(url) {\r\n        _manifestURL = url;\r\n        _offlineURL = `${OfflineConstants.OFFLINE_SCHEME}://${manifestId}`;\r\n        _status = OfflineConstants.OFFLINE_STATUS_CREATED;\r\n        setupOfflineEvents();\r\n        let offlineManifest = {\r\n            'fragmentStore': manifestId,\r\n            'status': _status,\r\n            'manifestId': manifestId,\r\n            'url': _offlineURL,\r\n            'originalURL': url\r\n        };\r\n        return createOfflineManifest(offlineManifest);\r\n    }\r\n\r\n    function initDownload() {\r\n        manifestLoader.load(_manifestURL);\r\n        _isDownloadingStatus = true;\r\n    }\r\n\r\n    function setupOfflineEvents() {\r\n        eventBus.on(events.MANIFEST_UPDATED, onManifestUpdated, instance);\r\n        eventBus.on(events.ORIGINAL_MANIFEST_LOADED, onOriginalManifestLoaded, instance);\r\n        setupIndexedDBEvents();\r\n    }\r\n\r\n    function setupIndexedDBEvents() {\r\n        eventBus.on(events.ERROR, onError, instance);\r\n    }\r\n\r\n    function isDownloading() {\r\n        return _isDownloadingStatus;\r\n    }\r\n\r\n    function onManifestUpdated(e) {\r\n        if (_isComposed) {\r\n            return;\r\n        }\r\n        if (!e.error) {\r\n            try {\r\n                _manifest = e.manifest;\r\n            } catch (err) {\r\n                _status = OfflineConstants.OFFLINE_STATUS_ERROR;\r\n                errHandler.error({\r\n                    code: OfflineErrors.OFFLINE_ERROR,\r\n                    message: err.message,\r\n                    data: {\r\n                        id: manifestId,\r\n                        status: _status\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function onDownloadingStarted(e) {\r\n        if (e.id !== manifestId) {\r\n            return;\r\n        }\r\n        if (!e.error && manifestId !== null) {\r\n            _status = OfflineConstants.OFFLINE_STATUS_STARTED;\r\n            offlineStoreController.setDownloadingStatus(manifestId, _status).then(function () {\r\n                eventBus.trigger(events.OFFLINE_RECORD_STARTED, { id: manifestId, message: 'Downloading started for this stream !' });\r\n            });\r\n        } else {\r\n            _status = OfflineConstants.OFFLINE_STATUS_ERROR;\r\n            errHandler.error({\r\n                code: OfflineErrors.OFFLINE_ERROR,\r\n                message: 'Cannot start download ',\r\n                data: {\r\n                    id: manifestId,\r\n                    status: _status,\r\n                    error: e.error\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function OnStreamProgression(stream, downloaded, available) {\r\n\r\n        _progressionById[stream.getStreamInfo().id] = {\r\n            downloaded,\r\n            available\r\n        };\r\n\r\n        let segments = 0;\r\n        let allSegments = 0;\r\n        let waitForAllProgress;\r\n        for (var property in _progressionById) {\r\n            if (_progressionById.hasOwnProperty(property)) {\r\n                if (_progressionById[property] === null) {\r\n                    waitForAllProgress = true;\r\n                } else {\r\n                    segments += _progressionById[property].downloaded;\r\n                    allSegments += _progressionById[property].available;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!waitForAllProgress) {\r\n            // all progression have been started, we can compute global progression\r\n            _progression = segments / allSegments;\r\n\r\n            // store progression\r\n            offlineStoreController.getManifestById(manifestId)\r\n                .then((item) => {\r\n                    item.progress = _progression;\r\n                    return updateOfflineManifest(item);\r\n                });\r\n        }\r\n    }\r\n\r\n    function onDownloadingFinished(e) {\r\n        if (e.id !== manifestId) {\r\n            return;\r\n        }\r\n        if (!e.error && manifestId !== null) {\r\n            _status = OfflineConstants.OFFLINE_STATUS_FINISHED;\r\n            offlineStoreController.setDownloadingStatus(manifestId, _status)\r\n            .then(function () {\r\n                eventBus.trigger(events.OFFLINE_RECORD_FINISHED, { id: manifestId, message: 'Downloading has been successfully completed for this stream !' });\r\n                resetDownload();\r\n            });\r\n        } else {\r\n            _status = OfflineConstants.OFFLINE_STATUS_ERROR;\r\n            errHandler.error({\r\n                code: OfflineErrors.OFFLINE_ERROR,\r\n                message: 'Error finishing download ',\r\n                data: {\r\n                    id: manifestId,\r\n                    status: _status,\r\n                    error: e.error\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function onManifestUpdateNeeded(e) {\r\n        if (e.id !== manifestId) {\r\n            return;\r\n        }\r\n\r\n        _representationsToUpdate = e.representations;\r\n\r\n        if (_representationsToUpdate.length > 0) {\r\n            _indexDBManifestParser.parse(_xmlManifest, _representationsToUpdate).then(function (parsedManifest) {\r\n                if (parsedManifest !== null && manifestId !== null) {\r\n                    offlineStoreController.getManifestById(manifestId)\r\n                    .then((item) => {\r\n                        item.manifest = parsedManifest;\r\n                        return updateOfflineManifest(item);\r\n                    })\r\n                    .then( function () {\r\n                        for (let i = 0, ln = _streams.length; i < ln; i++) {\r\n                            _streams[i].startOfflineStreamProcessors();\r\n                        }\r\n                    });\r\n                } else {\r\n                    throw 'falling parsing offline manifest';\r\n                }\r\n            }).catch(function (err) {\r\n                throw err;\r\n            });\r\n        }\r\n    }\r\n\r\n    function composeStreams() {\r\n        try {\r\n            adapter.updatePeriods(_manifest);\r\n            baseURLController.initialize(_manifest);\r\n            const streamsInfo = adapter.getStreamsInfo();\r\n            if (streamsInfo.length === 0) {\r\n                _status = OfflineConstants.OFFLINE_STATUS_ERROR;\r\n                errHandler.error({\r\n                    code: OfflineErrors.OFFLINE_ERROR,\r\n                    message: 'Cannot download - no streams',\r\n                    data: {\r\n                        id: manifestId,\r\n                        status: _status\r\n                    }\r\n                });\r\n            }\r\n            for (let i = 0, ln = streamsInfo.length; i < ln; i++) {\r\n                const streamInfo = streamsInfo[i];\r\n                let stream = OfflineStream(context).create({\r\n                    id: manifestId,\r\n                    callbacks: {\r\n                        started: onDownloadingStarted,\r\n                        progression: OnStreamProgression,\r\n                        finished: onDownloadingFinished,\r\n                        updateManifestNeeded: onManifestUpdateNeeded\r\n                    },\r\n                    constants: constants,\r\n                    dashConstants: dashConstants,\r\n                    eventBus: eventBus,\r\n                    events: events,\r\n                    errors: errors,\r\n                    settings: settings,\r\n                    debug: debug,\r\n                    errHandler: errHandler,\r\n                    mediaPlayerModel: mediaPlayerModel,\r\n                    abrController: abrController,\r\n                    playbackController: playbackController,\r\n                    dashMetrics: dashMetrics,\r\n                    baseURLController: baseURLController,\r\n                    timelineConverter: timelineConverter,\r\n                    adapter: adapter,\r\n                    offlineStoreController: offlineStoreController\r\n                });\r\n                _streams.push(stream);\r\n\r\n                // initialise stream and get downloadable representations\r\n                stream.initialize(streamInfo);\r\n                _progressionById[streamInfo.id] = null;\r\n            }\r\n            _isComposed = true;\r\n        } catch (e) {\r\n            logger.info(e);\r\n            _status = OfflineConstants.OFFLINE_STATUS_ERROR;\r\n            errHandler.error({\r\n                code: OfflineErrors.OFFLINE_ERROR,\r\n                message: e.message,\r\n                data: {\r\n                    id: manifestId,\r\n                    status: _status,\r\n                    error: e.error\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function getMediaInfos() {\r\n        _streams.forEach(stream => {\r\n            stream.getMediaInfos();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Init databsse to store fragments\r\n     * @param {number} manifestId\r\n     * @instance\r\n     */\r\n    function createFragmentStore(manifestId) {\r\n        return offlineStoreController.createFragmentStore(manifestId);\r\n    }\r\n\r\n    /**\r\n     * Store in database the string representation of offline manifest (with only downloaded representations)\r\n     * @param {object} offlineManifest\r\n     * @instance\r\n     */\r\n    function createOfflineManifest(offlineManifest) {\r\n        return offlineStoreController.createOfflineManifest(offlineManifest);\r\n    }\r\n\r\n    /**\r\n     * Store in database the string representation of offline manifest (with only downloaded representations)\r\n     * @param {object} offlineManifest\r\n     * @instance\r\n     */\r\n    function updateOfflineManifest(offlineManifest) {\r\n        return offlineStoreController.updateOfflineManifest(offlineManifest);\r\n    }\r\n\r\n    /**\r\n     * Triggered when manifest is loaded from internet.\r\n     * @param {Object[]} e\r\n     */\r\n    function onOriginalManifestLoaded(e) {\r\n        // unregister form event\r\n        eventBus.off(events.ORIGINAL_MANIFEST_LOADED, onOriginalManifestLoaded, instance);\r\n\r\n        _xmlManifest = e.originalManifest;\r\n\r\n        if (_manifest.type === dashConstants.DYNAMIC) {\r\n            _status = OfflineConstants.OFFLINE_STATUS_ERROR;\r\n            errHandler.error({\r\n                code: OfflineErrors.OFFLINE_ERROR,\r\n                message: 'Cannot handle DYNAMIC manifest',\r\n                data: {\r\n                    id: manifestId,\r\n                    status: _status\r\n                }\r\n            });\r\n            logger.error('Cannot handle DYNAMIC manifest');\r\n\r\n            return;\r\n        }\r\n\r\n        if (_manifest.Period_asArray.length > 1) {\r\n            _status = OfflineConstants.OFFLINE_STATUS_ERROR;\r\n            errHandler.error({\r\n                code: OfflineErrors.OFFLINE_ERROR,\r\n                message: 'MultiPeriod manifest are not yet supported',\r\n                data: {\r\n                    id: manifestId,\r\n                    status: _status\r\n                }\r\n            });\r\n            logger.error('MultiPeriod manifest are not yet supported');\r\n\r\n            return;\r\n        }\r\n\r\n        // save original manifest (for resume)\r\n\r\n        // initialise offline streams\r\n        composeStreams(_manifest);\r\n\r\n        // get MediaInfos\r\n        getMediaInfos();\r\n\r\n        eventBus.trigger(events.STREAMS_COMPOSED);\r\n    }\r\n\r\n    function initializeAllMediasInfoList(selectedRepresentations) {\r\n        for (let i = 0; i < _streams.length; i++) {\r\n            _streams[i].initializeAllMediasInfoList(selectedRepresentations);\r\n        }\r\n    }\r\n\r\n    function getSelectedRepresentations(mediaInfos) {\r\n        let rep = {};\r\n        rep[constants.VIDEO] = [];\r\n        rep[constants.AUDIO] = [];\r\n        rep[constants.TEXT] = [];\r\n        rep[constants.FRAGMENTED_TEXT] = [];\r\n\r\n        // selectedRepresentations.video.forEach(item => {\r\n        //     ret[constants.VIDEO].push(item.id);\r\n        // });\r\n        // selectedRepresentations.audio.forEach(item => {\r\n        //     ret[constants.AUDIO].push(item.id);\r\n        // });\r\n        // selectedRepresentations.text.forEach(item => {\r\n        //     ret[item.type].push(item.id);\r\n        // });\r\n\r\n        mediaInfos.forEach(mediaInfo => {\r\n            mediaInfo.bitrateList.forEach(bitrate => {\r\n                rep[mediaInfo.type].push(bitrate.id);\r\n            });\r\n        });\r\n        return rep;\r\n    }\r\n\r\n    function startDownload(mediaInfos) {\r\n        try {\r\n            let rep = getSelectedRepresentations(mediaInfos);\r\n\r\n            offlineStoreController.saveSelectedRepresentations(manifestId, rep)\r\n            .then(() => {\r\n                return createFragmentStore(manifestId);\r\n            })\r\n            .then(() => {\r\n                return generateOfflineManifest(rep);\r\n            })\r\n            .then(function () {\r\n                initializeAllMediasInfoList(rep);\r\n            });\r\n        } catch (err) {\r\n            _status = OfflineConstants.OFFLINE_STATUS_ERROR;\r\n            errHandler.error({\r\n                code: OfflineErrors.OFFLINE_ERROR,\r\n                message: err.message,\r\n                data: {\r\n                    id: manifestId,\r\n                    status: _status\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the parser used to convert original manifest in offline manifest\r\n     * Creates a JSON object that will be stored in database\r\n     * @param {Object[]} selectedRepresentations\r\n     * @instance\r\n     */\r\n    function generateOfflineManifest(selectedRepresentations) {\r\n        _indexDBManifestParser = OfflineIndexDBManifestParser(context).create({\r\n            manifestId: manifestId,\r\n            allMediaInfos: selectedRepresentations,\r\n            debug: debug,\r\n            dashConstants: dashConstants,\r\n            constants: constants,\r\n            urlUtils: urlUtils\r\n        });\r\n\r\n        return _indexDBManifestParser.parse(_xmlManifest).then(function (parsedManifest) {\r\n            if (parsedManifest !== null) {\r\n                return offlineStoreController.getManifestById(manifestId)\r\n                .then((item) => {\r\n                    item.originalURL = _manifest.url;\r\n                    item.originalManifest = _xmlManifest;\r\n                    item.manifest = parsedManifest;\r\n                    return updateOfflineManifest(item);\r\n                });\r\n            } else {\r\n                return Promise.reject('falling parsing offline manifest');\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stops downloading of fragments\r\n     * @instance\r\n     */\r\n    function stopDownload() {\r\n        if (manifestId !== null && isDownloading()) {\r\n            for (let i = 0, ln = _streams.length; i < ln; i++) {\r\n                _streams[i].stopOfflineStreamProcessors();\r\n            }\r\n\r\n            // remove streams\r\n            _streams = [];\r\n\r\n            _isComposed = false;\r\n\r\n            _status = OfflineConstants.OFFLINE_STATUS_STOPPED;\r\n            // update status\r\n            offlineStoreController.setDownloadingStatus(manifestId, _status).then(function () {\r\n                eventBus.trigger(events.OFFLINE_RECORD_STOPPED, {\r\n                    sender: this,\r\n                    id: manifestId,\r\n                    status: _status,\r\n                    message: 'Downloading has been stopped for this stream !'\r\n                });\r\n                _isDownloadingStatus = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete an offline manifest (and all of its data)\r\n     * @instance\r\n     */\r\n    function deleteDownload() {\r\n        stopDownload();\r\n    }\r\n\r\n    /**\r\n     * Resume download of a stream\r\n     * @instance\r\n     */\r\n    function resumeDownload() {\r\n        if (isDownloading()) {\r\n            return;\r\n        }\r\n\r\n        _isDownloadingStatus = true;\r\n\r\n        let selectedRepresentations;\r\n\r\n        offlineStoreController.getManifestById(manifestId)\r\n        .then((item) => {\r\n            let parser = DashParser(context).create({debug: debug});\r\n            _manifest = parser.parse(item.originalManifest);\r\n\r\n            composeStreams(_manifest);\r\n\r\n            selectedRepresentations = item.selected;\r\n\r\n            eventBus.trigger(events.STREAMS_COMPOSED);\r\n\r\n            return createFragmentStore(manifestId);\r\n        }). then(() => {\r\n            initializeAllMediasInfoList(selectedRepresentations);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Compute the progression of download\r\n     * @instance\r\n     */\r\n    function getDownloadProgression() {\r\n        return Math.round(_progression * 100);\r\n    }\r\n\r\n    /**\r\n     * Reset events listeners\r\n     * @instance\r\n     */\r\n    function resetDownload() {\r\n        for (let i = 0, ln = _streams.length; i < ln; i++) {\r\n            _streams[i].reset();\r\n        }\r\n        _indexDBManifestParser = null;\r\n        _isDownloadingStatus = false;\r\n        _streams = [];\r\n        eventBus.off(events.MANIFEST_UPDATED, onManifestUpdated, instance);\r\n        eventBus.off(events.ORIGINAL_MANIFEST_LOADED, onOriginalManifestLoaded, instance);\r\n        resetIndexedDBEvents();\r\n    }\r\n\r\n    function onError(e) {\r\n        if ( e.error.code === OfflineErrors.INDEXEDDB_QUOTA_EXCEED_ERROR ||\r\n             e.error.code === OfflineErrors.INDEXEDDB_INVALID_STATE_ERROR ) {\r\n            stopDownload();\r\n        }\r\n    }\r\n\r\n    function resetIndexedDBEvents() {\r\n        eventBus.on(events.ERROR, onError, instance);\r\n    }\r\n\r\n    /**\r\n     * Reset\r\n     * @instance\r\n     */\r\n    function reset() {\r\n        if (isDownloading()) {\r\n            resetDownload();\r\n        }\r\n        baseURLController.reset();\r\n        manifestUpdater.reset();\r\n    }\r\n\r\n    instance = {\r\n        reset: reset,\r\n        getId: getId,\r\n        getOfflineUrl: getOfflineUrl,\r\n        getManifestUrl: getManifestUrl,\r\n        getStatus: getStatus,\r\n        setInitialState: setInitialState,\r\n        initDownload: initDownload,\r\n        downloadFromUrl: downloadFromUrl,\r\n        startDownload: startDownload,\r\n        stopDownload: stopDownload,\r\n        resumeDownload: resumeDownload,\r\n        deleteDownload: deleteDownload,\r\n        getDownloadProgression: getDownloadProgression,\r\n        isDownloading: isDownloading,\r\n        resetDownload: resetDownload\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nOfflineDownload.__dashjs_factory_name = 'OfflineDownload';\r\nexport default dashjs.FactoryMaker.getClassFactory(OfflineDownload); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport OfflineStreamProcessor from './OfflineStreamProcessor';\r\n\r\n/**\r\n * Initialize and Manage Offline Stream for each type\r\n */\r\n/**\r\n * @class OfflineStream\r\n * @description Initialize and Manage Offline Stream for each type\r\n * @param {Object} config - dependences\r\n * @ignore\r\n */\r\nfunction OfflineStream(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const errors = config.errors;\r\n    const constants = config.constants;\r\n    const dashConstants = config.dashConstants;\r\n    const settings = config.settings;\r\n    const debug = config.debug;\r\n    const errHandler = config.errHandler;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const abrController = config.abrController;\r\n    const playbackController = config.playbackController;\r\n    const adapter = config.adapter;\r\n    const dashMetrics = config.dashMetrics;\r\n    const baseURLController = config.baseURLController;\r\n    const timelineConverter = config.timelineConverter;\r\n    const offlineStoreController = config.offlineStoreController;\r\n    const manifestId = config.id;\r\n    const startedCb = config.callbacks && config.callbacks.started;\r\n    const progressionCb = config.callbacks && config.callbacks.progression;\r\n    const finishedCb = config.callbacks && config.callbacks.finished;\r\n    const updateManifest = config.callbacks && config.callbacks.updateManifestNeeded;\r\n\r\n    let instance,\r\n        offlineStreamProcessors,\r\n        startedOfflineStreamProcessors,\r\n        finishedOfflineStreamProcessors,\r\n        streamInfo,\r\n        representationsToUpdate,\r\n        allMediasInfosList,\r\n        progressionById;\r\n\r\n    function setup() {\r\n        resetInitialSettings();\r\n    }\r\n\r\n    /**\r\n     * Reset\r\n     */\r\n    function resetInitialSettings() {\r\n        streamInfo = null;\r\n        offlineStreamProcessors = [];\r\n        startedOfflineStreamProcessors = 0;\r\n        finishedOfflineStreamProcessors = 0;\r\n        allMediasInfosList = [];\r\n        representationsToUpdate = [];\r\n        progressionById = {};\r\n    }\r\n\r\n    /**\r\n     * Initialize offlinestream\r\n     * @param {Object} initStreamInfo\r\n     */\r\n    function initialize(initStreamInfo) {\r\n        streamInfo = initStreamInfo;\r\n        eventBus.on(events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    /**\r\n     * Creates media infos list, so that user will be able to choose the representation he wants to download\r\n     */\r\n    function getMediaInfos() {\r\n        let mediaInfos = adapter.getAllMediaInfoForType(streamInfo, constants.VIDEO);\r\n        mediaInfos = mediaInfos.concat(adapter.getAllMediaInfoForType(streamInfo, constants.AUDIO));\r\n        mediaInfos = mediaInfos.concat(adapter.getAllMediaInfoForType(streamInfo, constants.FRAGMENTED_TEXT));\r\n        mediaInfos = mediaInfos.concat(adapter.getAllMediaInfoForType(streamInfo, constants.TEXT));\r\n\r\n        // mediaInfos = mediaInfos.concat(adapter.getAllMediaInfoForType(streamInfo, constants.MUXED));\r\n        // mediaInfos = mediaInfos.concat(adapter.getAllMediaInfoForType(streamInfo, constants.IMAGE));\r\n\r\n        eventBus.trigger(events.OFFLINE_RECORD_LOADEDMETADATA, {\r\n            id: manifestId,\r\n            mediaInfos: mediaInfos\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialize with choosen representations by user\r\n     * @param {Object} mediasInfoList\r\n     */\r\n    function initializeAllMediasInfoList(mediasInfoList) {\r\n        allMediasInfosList = mediasInfoList;\r\n        initializeMedia(streamInfo);\r\n    }\r\n\r\n    /**\r\n     * Initialize media for each type\r\n     * @param {Object} streamInfo\r\n     */\r\n    function initializeMedia(streamInfo) {\r\n        createOfflineStreamProcessorFor(constants.VIDEO,streamInfo);\r\n        createOfflineStreamProcessorFor(constants.AUDIO,streamInfo);\r\n        createOfflineStreamProcessorFor(constants.FRAGMENTED_TEXT,streamInfo);\r\n        createOfflineStreamProcessorFor(constants.TEXT,streamInfo);\r\n\r\n        createOfflineStreamProcessorFor(constants.MUXED,streamInfo);\r\n        createOfflineStreamProcessorFor(constants.IMAGE,streamInfo);\r\n    }\r\n\r\n    function createOfflineStreamProcessorFor(type, streamInfo) {\r\n        // filter mediaInfo according to choosen representation id\r\n        let allMediaInfoForType = adapter.getAllMediaInfoForType(streamInfo, type);\r\n        allMediaInfoForType.forEach((media) => {\r\n            media.bitrateList = media.bitrateList.filter((bitrate) => {\r\n                if (allMediasInfosList[type] && allMediasInfosList[type].indexOf(bitrate.id) !== -1) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n        });\r\n\r\n        allMediaInfoForType = allMediaInfoForType.filter((media) => {\r\n            return (media.bitrateList && media.bitrateList.length > 0);\r\n        });\r\n\r\n        // cration of an offline stream processor for each choosen representation\r\n        allMediaInfoForType.forEach((mediaInfo) => {\r\n            if (mediaInfo.bitrateList) {\r\n                mediaInfo.bitrateList.forEach((bitrate) => {\r\n                    createStreamProcessor(mediaInfo, bitrate);\r\n                });\r\n            }\r\n        });\r\n        return allMediaInfoForType;\r\n    }\r\n\r\n    function createStreamProcessor (mediaInfo, bitrate) {\r\n\r\n        let streamProcessor = OfflineStreamProcessor(context).create({\r\n            id: manifestId,\r\n            streamInfo: streamInfo,\r\n            debug: debug,\r\n            events: events,\r\n            errors: errors,\r\n            eventBus: eventBus,\r\n            constants: constants,\r\n            dashConstants: dashConstants,\r\n            settings: settings,\r\n            type: mediaInfo.type,\r\n            mimeType: mediaInfo.mimeType,\r\n            bitrate: bitrate,\r\n            errHandler: errHandler,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            abrController: abrController,\r\n            playbackController: playbackController,\r\n            adapter: adapter,\r\n            dashMetrics: dashMetrics,\r\n            baseURLController: baseURLController,\r\n            timelineConverter: timelineConverter,\r\n            offlineStoreController: offlineStoreController,\r\n            callbacks: {\r\n                completed: onStreamCompleted,\r\n                progression: onStreamProgression\r\n            }\r\n        });\r\n        offlineStreamProcessors.push(streamProcessor);\r\n        streamProcessor.initialize(mediaInfo);\r\n\r\n        progressionById[bitrate.id] = null;\r\n    }\r\n\r\n    function onStreamCompleted() {\r\n        finishedOfflineStreamProcessors++;\r\n        if (finishedOfflineStreamProcessors === offlineStreamProcessors.length) {\r\n            finishedCb({sender: this, id: manifestId, message: 'Downloading has been successfully completed for this stream !'});\r\n        }\r\n    }\r\n\r\n    function onStreamProgression(streamProcessor, downloadedSegments, availableSegments ) {\r\n        progressionById[streamProcessor.getRepresentationId()] = {\r\n            downloadedSegments,\r\n            availableSegments\r\n        };\r\n\r\n        let segments = 0;\r\n        let allSegments = 0;\r\n        let waitForAllProgress;\r\n        for (var property in progressionById) {\r\n            if (progressionById.hasOwnProperty(property)) {\r\n                if (progressionById[property] === null) {\r\n                    waitForAllProgress = true;\r\n                } else {\r\n                    segments += progressionById[property].downloadedSegments;\r\n                    allSegments += progressionById[property].availableSegments;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!waitForAllProgress && progressionCb) {\r\n            // all progression have been started, we can compute global progression\r\n            if (allSegments > 0) {\r\n                progressionCb(instance, segments, allSegments);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onDataUpdateCompleted(e) {\r\n        if (e.currentRepresentation.segments && e.currentRepresentation.segments.length > 0) {\r\n            representationsToUpdate.push(e.currentRepresentation);\r\n        }\r\n\r\n        let sp;\r\n        // data are ready fr stream processor, let's start download\r\n        for (let i = 0; i < offlineStreamProcessors.length; i++ ) {\r\n            if (offlineStreamProcessors[i].getRepresentationController().getType() === e.mediaType) {\r\n                sp = offlineStreamProcessors[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (sp) {\r\n            checkIfAllOfflineStreamProcessorsStarted();\r\n        }\r\n    }\r\n\r\n    function checkIfAllOfflineStreamProcessorsStarted() {\r\n        startedOfflineStreamProcessors++;\r\n        if (startedOfflineStreamProcessors === offlineStreamProcessors.length) {\r\n            startedCb({sender: this, id: manifestId, message: 'Downloading started for this stream !'});\r\n\r\n            if (representationsToUpdate.length > 0) {\r\n                updateManifest({sender: this, id: manifestId, representations: representationsToUpdate });\r\n            } else {\r\n                startOfflineStreamProcessors();\r\n            }\r\n        }\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        return streamInfo;\r\n    }\r\n\r\n    function getStartTime() {\r\n        return streamInfo ? streamInfo.start : NaN;\r\n    }\r\n\r\n    function getDuration() {\r\n        return streamInfo ? streamInfo.duration : NaN;\r\n    }\r\n\r\n    /**\r\n     * Stop offline stream processors\r\n     */\r\n    function stopOfflineStreamProcessors() {\r\n        for (let i = 0; i < offlineStreamProcessors.length; i++) {\r\n            offlineStreamProcessors[i].stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start offline stream processors\r\n     */\r\n    function startOfflineStreamProcessors() {\r\n        for (let i = 0; i < offlineStreamProcessors.length; i++) {\r\n            offlineStreamProcessors[i].start();\r\n        }\r\n    }\r\n\r\n    function deactivate() {\r\n        let ln = offlineStreamProcessors ? offlineStreamProcessors.length : 0;\r\n        for (let i = 0; i < ln; i++) {\r\n            offlineStreamProcessors[i].removeExecutedRequestsBeforeTime(getStartTime() + getDuration());\r\n            offlineStreamProcessors[i].reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset\r\n     */\r\n    function reset() {\r\n        stopOfflineStreamProcessors();\r\n        deactivate();\r\n        resetInitialSettings();\r\n\r\n        eventBus.off(events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getStreamId: getStreamId,\r\n        getMediaInfos: getMediaInfos,\r\n        initializeAllMediasInfoList: initializeAllMediasInfoList,\r\n        getStreamInfo: getStreamInfo,\r\n        stopOfflineStreamProcessors: stopOfflineStreamProcessors,\r\n        startOfflineStreamProcessors: startOfflineStreamProcessors,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nOfflineStream.__dashjs_factory_name = 'OfflineStream';\r\nexport default dashjs.FactoryMaker.getClassFactory(OfflineStream); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport DashHandler from '../dash/DashHandler';\r\nimport RepresentationController from '../dash/controllers/RepresentationController';\r\nimport FragmentModel from '../streaming/models/FragmentModel';\r\nimport FragmentLoader from '../streaming/FragmentLoader';\r\nimport URLUtils from '../streaming/utils/URLUtils';\r\nimport RequestModifier from '../streaming/utils/RequestModifier';\r\n\r\n\r\nfunction OfflineStreamProcessor(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const errors = config.errors;\r\n    const debug = config.debug;\r\n    const constants = config.constants;\r\n    const settings = config.settings;\r\n    const dashConstants = config.dashConstants;\r\n    const manifestId = config.id;\r\n    const type = config.type;\r\n    const streamInfo = config.streamInfo;\r\n    const errHandler = config.errHandler;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const abrController = config.abrController;\r\n    const playbackController = config.playbackController;\r\n    const adapter = config.adapter;\r\n    const dashMetrics = config.dashMetrics;\r\n    const baseURLController = config.baseURLController;\r\n    const timelineConverter = config.timelineConverter;\r\n    const bitrate = config.bitrate;\r\n    const offlineStoreController = config.offlineStoreController;\r\n    const completedCb = config.callbacks && config.callbacks.completed;\r\n    const progressCb = config.callbacks && config.callbacks.progression;\r\n\r\n    let instance,\r\n        logger,\r\n        mediaInfo,\r\n        indexHandler,\r\n        representationController,\r\n        fragmentModel,\r\n        updating,\r\n        downloadedSegments,\r\n        isInitialized,\r\n        isStopped;\r\n\r\n    function setup() {\r\n        resetInitialSettings();\r\n        logger = debug.getLogger(instance);\r\n\r\n        indexHandler = DashHandler(context).create({\r\n            streamInfo: streamInfo,\r\n            type: type,\r\n            timelineConverter: timelineConverter,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            baseURLController: baseURLController,\r\n            errHandler: errHandler,\r\n            settings: settings,\r\n            // boxParser: boxParser,\r\n            eventBus: eventBus,\r\n            events: events,\r\n            debug: debug,\r\n            requestModifier: RequestModifier(context).getInstance(),\r\n            dashConstants: dashConstants,\r\n            constants: constants,\r\n            urlUtils: URLUtils(context).getInstance()\r\n        });\r\n\r\n        representationController = RepresentationController(context).create({\r\n            streamInfo: streamInfo,\r\n            type: type,\r\n            abrController: abrController,\r\n            dashMetrics: dashMetrics,\r\n            playbackController: playbackController,\r\n            timelineConverter: timelineConverter,\r\n            dashConstants: dashConstants,\r\n            events: events,\r\n            eventBus: eventBus,\r\n            errors: errors\r\n        });\r\n\r\n        fragmentModel = FragmentModel(context).create({\r\n            streamId: streamInfo.id,\r\n            dashMetrics: dashMetrics,\r\n            fragmentLoader: FragmentLoader(context).create({\r\n                dashMetrics: dashMetrics,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                errHandler: errHandler,\r\n                requestModifier: RequestModifier(context).getInstance(),\r\n                settings: settings,\r\n                eventBus: eventBus,\r\n                events: events,\r\n                errors: errors,\r\n                constants: constants,\r\n                dashConstants: dashConstants,\r\n                urlUtils: URLUtils(context).getInstance()\r\n            }),\r\n            debug: debug,\r\n            eventBus: eventBus,\r\n            events: events\r\n        });\r\n\r\n        eventBus.on(events.STREAM_COMPLETED, onStreamCompleted, instance);\r\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\r\n    }\r\n\r\n    function initialize(_mediaInfo) {\r\n        mediaInfo = _mediaInfo;\r\n        indexHandler.initialize(false);\r\n        updateRepresentation(mediaInfo);\r\n    }\r\n\r\n    function isInitRequest(request) {\r\n        return request.type === 'InitializationSegment';\r\n    }\r\n\r\n    function onFragmentLoadingCompleted(e) {\r\n        if (e.sender !== fragmentModel) {\r\n            return;\r\n        }\r\n\r\n        if (e.request !== null) {\r\n            let isInit = isInitRequest(e.request);\r\n            let suffix = isInit ? 'init' : e.request.index;\r\n            let fragmentName = e.request.representationId + '_' + suffix;\r\n            offlineStoreController.storeFragment(manifestId, fragmentName, e.response)\r\n            .then(() => {\r\n                if (!isInit) {\r\n                    // store current index and downloadedSegments number\r\n                    offlineStoreController.setRepresentationCurrentState(manifestId, e.request.representationId, {\r\n                        index: e.request.index,\r\n                        downloaded: downloadedSegments\r\n                    } );\r\n                }\r\n            });\r\n        }\r\n\r\n        if (e.error && e.request.serviceLocation && !isStopped) {\r\n            fragmentModel.executeRequest(e.request);\r\n        } else {\r\n            downloadedSegments++;\r\n            download();\r\n        }\r\n    }\r\n\r\n    function onStreamCompleted(e) {\r\n        if (e.fragmentModel !== fragmentModel) {\r\n            return;\r\n        }\r\n        logger.info(`[${manifestId}] Stream is complete`);\r\n        stop();\r\n        completedCb();\r\n    }\r\n\r\n    function getRepresentationController () {\r\n        return representationController;\r\n    }\r\n\r\n    function getRepresentationId() {\r\n        return representationController.getCurrentRepresentation().id;\r\n    }\r\n\r\n    /**\r\n     * Stops download of fragments\r\n     * @memberof OfflineStreamProcessor#\r\n     */\r\n    function stop() {\r\n        if (isStopped) {\r\n            return;\r\n        }\r\n        isStopped = true;\r\n    }\r\n\r\n\r\n    function removeExecutedRequestsBeforeTime(time) {\r\n        if (fragmentModel) {\r\n            fragmentModel.removeExecutedRequestsBeforeTime(time);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute init request for the represenation\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function getInitRequest() {\r\n        if (!representationController.getCurrentRepresentation()) {\r\n            return null;\r\n        }\r\n\r\n        return indexHandler.getInitRequest(getMediaInfo(), representationController.getCurrentRepresentation());\r\n    }\r\n\r\n    /**\r\n     * Get next request\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function getNextRequest() {\r\n        return indexHandler.getNextSegmentRequest(getMediaInfo(), representationController.getCurrentRepresentation());\r\n    }\r\n\r\n    /**\r\n     * Start download\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function start() {\r\n        if (representationController) {\r\n            if (!representationController.getCurrentRepresentation()) {\r\n                throw new Error('Start denied to OfflineStreamProcessor');\r\n            }\r\n            isStopped = false;\r\n\r\n            offlineStoreController.getRepresentationCurrentState(manifestId, representationController.getCurrentRepresentation().id)\r\n            .then((state) => {\r\n                if (state) {\r\n                    indexHandler.setCurrentIndex(state.index);\r\n                    downloadedSegments = state.downloaded;\r\n                }\r\n                download();\r\n            }).catch(() => {\r\n                // start from beginining\r\n                download();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs download of fragment according to type\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function download() {\r\n        if (isStopped) {\r\n            return;\r\n        }\r\n\r\n        if (isNaN(representationController.getCurrentRepresentation())) {\r\n            let request = null;\r\n            if (!isInitialized) {\r\n                request = getInitRequest();\r\n                isInitialized = true;\r\n            } else {\r\n                request = getNextRequest();\r\n\r\n                // update progression : done here because availableSegmentsNumber is done in getNextRequest from dash handler\r\n                updateProgression();\r\n            }\r\n\r\n            if (request) {\r\n                logger.info(`[${manifestId}] download request : ${request.url}`);\r\n                fragmentModel.executeRequest(request);\r\n            } else {\r\n                logger.info(`[${manifestId}] no request to be downloaded`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update representation\r\n     * @param {Object} mediaInfo - mediaInfo\r\n     * @memberof OfflineStreamProcessor#\r\n     */\r\n    function updateRepresentation(mediaInfo) {\r\n        updating = true;\r\n\r\n        let voRepresentations = adapter.getVoRepresentations(mediaInfo);\r\n\r\n        // get representation VO according to id.\r\n        let quality = voRepresentations.findIndex((representation) => {\r\n            return representation.id === bitrate.id;\r\n        });\r\n\r\n        if (type !== constants.VIDEO && type !== constants.AUDIO  && type !== constants.TEXT && type !== constants.FRAGMENTED_TEXT) {\r\n            updating = false;\r\n            return;\r\n        }\r\n\r\n        representationController.updateData(null, voRepresentations, type, quality);\r\n    }\r\n\r\n    function isUpdating() {\r\n        return updating;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getMediaInfo() {\r\n        return mediaInfo;\r\n    }\r\n\r\n    function getAvailableSegmentsNumber() {\r\n        return representationController.getCurrentRepresentation().availableSegmentsNumber + 1; // do not forget init segment\r\n    }\r\n\r\n    function updateProgression () {\r\n        if (progressCb) {\r\n            progressCb(instance, downloadedSegments, getAvailableSegmentsNumber());\r\n        }\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        isInitialized = false;\r\n        downloadedSegments = 0;\r\n        updating = false;\r\n    }\r\n\r\n    /**\r\n     * Reset\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function reset() {\r\n        resetInitialSettings();\r\n        indexHandler.reset();\r\n\r\n        eventBus.off(events.STREAM_COMPLETED, onStreamCompleted, instance);\r\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getMediaInfo: getMediaInfo,\r\n        getRepresentationController: getRepresentationController,\r\n        removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,\r\n        getType: getType,\r\n        getRepresentationId: getRepresentationId,\r\n        isUpdating: isUpdating,\r\n        start: start,\r\n        stop: stop,\r\n        getAvailableSegmentsNumber: getAvailableSegmentsNumber,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\nOfflineStreamProcessor.__dashjs_factory_name = 'OfflineStreamProcessor';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(OfflineStreamProcessor); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Offline constants declaration\r\n * @class\r\n * @ignore\r\n */\r\nclass OfflineConstants {\r\n\r\n  init() {\r\n      this.OFFLINE_SCHEME = 'offline_indexeddb';\r\n      this.OFFLINE_URL_REGEX = /^offline_indexeddb:\\/\\//i;\r\n      this.OFFLINE_STATUS_CREATED = 'created';\r\n      this.OFFLINE_STATUS_STARTED = 'started';\r\n      this.OFFLINE_STATUS_STOPPED = 'stopped';\r\n      this.OFFLINE_STATUS_FINISHED = 'finished';\r\n      this.OFFLINE_STATUS_ERROR = 'error';\r\n  }\r\n\r\n  constructor () {\r\n      this.init();\r\n  }\r\n}\r\n\r\nlet constants = new OfflineConstants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport OfflineConstants from '../constants/OfflineConstants';\r\nimport OfflineStoreController from './OfflineStoreController';\r\nimport OfflineDownload from '../OfflineDownload';\r\nimport IndexDBOfflineLoader from '../net/IndexDBOfflineLoader';\r\nimport OfflineUrlUtils from '../utils/OfflineUrlUtils';\r\nimport OfflineEvents from '../events/OfflineEvents';\r\nimport OfflineErrors from '../errors/OfflineErrors';\r\nimport OfflineRecord from '../vo/OfflineDownloadVo';\r\n\r\n/**\r\n * @module OfflineController\r\n * @param {Object} config - dependencies\r\n * @description Provides access to offline stream recording and playback functionality.\r\n */\r\nfunction OfflineController(config) {\r\n\r\n    const context = this.context;\r\n    const errHandler = config.errHandler;\r\n    const events = config.events;\r\n    const errors = config.errors;\r\n    const settings = config.settings;\r\n    const eventBus = config.eventBus;\r\n    const debug = config.debug;\r\n    const manifestLoader = config.manifestLoader;\r\n    const manifestModel = config.manifestModel;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const abrController = config.abrController;\r\n    const playbackController = config.playbackController;\r\n    const dashMetrics = config.dashMetrics;\r\n    const timelineConverter = config.timelineConverter;\r\n    const adapter = config.adapter;\r\n    const manifestUpdater = config.manifestUpdater;\r\n    const baseURLController = config.baseURLController;\r\n    const schemeLoaderFactory = config.schemeLoaderFactory;\r\n    const constants = config.constants;\r\n    const dashConstants = config.dashConstants;\r\n    const urlUtils = config.urlUtils;\r\n\r\n    let instance,\r\n        downloads,\r\n        logger,\r\n        offlineStoreController,\r\n        offlineUrlUtils;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        offlineStoreController = OfflineStoreController(context).create({\r\n            eventBus: config.eventBus,\r\n            errHandler: errHandler\r\n        });\r\n        offlineUrlUtils = OfflineUrlUtils(context).getInstance();\r\n        urlUtils.registerUrlRegex(offlineUrlUtils.getRegex(), offlineUrlUtils);\r\n        schemeLoaderFactory.registerLoader(OfflineConstants.OFFLINE_SCHEME, IndexDBOfflineLoader);\r\n\r\n        downloads = [];\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n        DOWNLOAD LIST FUNCTIONS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    function getDownloadFromId(id) {\r\n        let download = downloads.find((item) => {\r\n            return item.getId() === id;\r\n        });\r\n        return download;\r\n    }\r\n\r\n    function createDownloadFromId(id) {\r\n        let download;\r\n        download = getDownloadFromId(id);\r\n\r\n        if (!download) {\r\n            // create download controller\r\n            download = OfflineDownload(context).create({\r\n                id: id,\r\n                eventBus: eventBus,\r\n                events: events,\r\n                errors: errors,\r\n                settings: settings,\r\n                manifestLoader: manifestLoader,\r\n                manifestModel: manifestModel,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                manifestUpdater: manifestUpdater,\r\n                baseURLController: baseURLController,\r\n                abrController: abrController,\r\n                playbackController: playbackController,\r\n                adapter: adapter,\r\n                dashMetrics: dashMetrics,\r\n                timelineConverter: timelineConverter,\r\n                errHandler: errHandler,\r\n                offlineStoreController: offlineStoreController,\r\n                debug: debug,\r\n                constants: constants,\r\n                dashConstants: dashConstants,\r\n                urlUtils: urlUtils\r\n            });\r\n\r\n            downloads.push(download);\r\n        }\r\n\r\n        return download;\r\n    }\r\n\r\n    function createDownloadFromStorage(offline) {\r\n        let download = getDownloadFromId(offline.manifestId);\r\n\r\n        if (!download) {\r\n            download = createDownloadFromId(offline.manifestId);\r\n            let status = offline.status;\r\n            if (status === OfflineConstants.OFFLINE_STATUS_STARTED) {\r\n                status = OfflineConstants.OFFLINE_STATUS_STOPPED;\r\n            }\r\n\r\n            download.setInitialState({\r\n                url: offline.url,\r\n                progress: offline.progress,\r\n                originalUrl: offline.originalURL,\r\n                status: status\r\n            });\r\n        }\r\n\r\n        return download;\r\n    }\r\n\r\n    function removeDownloadFromId(id) {\r\n        return new Promise(function (resolve, reject) {\r\n            let download = getDownloadFromId(id);\r\n            let waitForStatusChanged = false;\r\n            if (download) {\r\n                //is download running?\r\n                if (download.isDownloading()) {\r\n                    //register status changed event\r\n                    waitForStatusChanged = true;\r\n                    const downloadStopped = function () {\r\n                        eventBus.off(events.OFFLINE_RECORD_STOPPED, downloadStopped, instance);\r\n                        return offlineStoreController.deleteDownloadById(id).then(function () {\r\n                            resolve();\r\n                        }).catch(function (err) {\r\n                            reject(err);\r\n                        });\r\n                    };\r\n                    eventBus.on(events.OFFLINE_RECORD_STOPPED, downloadStopped, instance);\r\n                }\r\n                download.deleteDownload();\r\n                let index = downloads.indexOf(download);\r\n                downloads.splice(index, 1);\r\n            }\r\n\r\n            if (!waitForStatusChanged) {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    function generateManifestId() {\r\n        let timestamp = new Date().getTime();\r\n        return timestamp;\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        OFFLINE CONTROLLER API\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Loads records from storage\r\n     * This methods has to be called first, to be sure that all downloads have been loaded\r\n     *\r\n     * @return {Promise} asynchronously resolved\r\n     * @memberof module:OfflineController\r\n     */\r\n    function loadRecordsFromStorage() {\r\n        return new Promise(function (resolve, reject) {\r\n            offlineStoreController.getAllManifests().then((items) => {\r\n                items.manifests.forEach((offline) => {\r\n                    createDownloadFromStorage(offline);\r\n                });\r\n\r\n                resolve();\r\n            }).catch((e) => {\r\n                logger.error('Failed to load downloads ' + e);\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all records from storage\r\n     *\r\n     * @return {Promise} asynchronously resolved with records\r\n     * @memberof module:OfflineController\r\n     * @instance\r\n     */\r\n    function getAllRecords() {\r\n        let records = [];\r\n        downloads.forEach((download) => {\r\n            const record = new OfflineRecord();\r\n            record.id = download.getId();\r\n            record.progress = download.getDownloadProgression();\r\n            record.url = download.getOfflineUrl();\r\n            record.originalUrl = download.getManifestUrl();\r\n            record.status = download.getStatus();\r\n            records.push(record);\r\n        });\r\n        return records;\r\n    }\r\n\r\n    /**\r\n     * Create a new content record in storage and download manifest from url\r\n     *\r\n     * @param {string} manifestURL - the content manifest url\r\n     * @return {Promise} asynchronously resolved with record identifier\r\n     * @memberof module:OfflineController\r\n     * @instance\r\n     */\r\n    function createRecord(manifestURL) {\r\n        return new Promise(function (resolve, reject) {\r\n            let id = generateManifestId();\r\n\r\n            // create download controller\r\n            let download = createDownloadFromId(id);\r\n\r\n            download.downloadFromUrl(manifestURL).then(() => {\r\n                download.initDownload();\r\n                resolve(id);\r\n            })\r\n            .catch((e) => {\r\n                logger.error('Failed to download ' + e);\r\n                removeDownloadFromId(id).then(function () {\r\n                    reject(e);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start downloading the record with selected tracks representations\r\n     *\r\n     * @param {string} id - record identifier\r\n     * @param {MediaInfo[]} mediaInfos - the selected tracks representations\r\n     * @memberof module:OfflineController\r\n     * @instance\r\n     */\r\n    function startRecord(id, mediaInfos) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            download.startDownload(mediaInfos);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop downloading of the record\r\n     *\r\n     * @param {string} id - record identifier\r\n     * @memberof module:OfflineController\r\n     * @instance\r\n     */\r\n    function stopRecord(id) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            download.stopDownload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume downloading of the record\r\n     *\r\n     * @param {string} id - record identifier\r\n     * @memberof module:OfflineController\r\n     * @instance\r\n     */\r\n    function resumeRecord(id) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            download.resumeDownload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a record from storage\r\n     *\r\n     * @param {string} id - record identifier\r\n     * @memberof module:OfflineController\r\n     * @instance\r\n     */\r\n    function deleteRecord(id) {\r\n        return removeDownloadFromId(id).then(function () {\r\n            return offlineStoreController.deleteDownloadById(id);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Get download progression of a record\r\n     *\r\n     * @param {string} id - record identifier\r\n     * @return {number} percentage progression\r\n     * @memberof module:OfflineController\r\n     * @instance\r\n     */\r\n    function getRecordProgression(id) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            return download.getDownloadProgression();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Reset all records\r\n     * @memberof module:OfflineController\r\n     * @instance\r\n     */\r\n    function resetRecords() {\r\n        downloads.forEach((download) => {\r\n            download.resetDownload();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reset\r\n     * @instance\r\n     */\r\n    function reset() {\r\n        resetRecords();\r\n        schemeLoaderFactory.unregisterLoader(OfflineConstants.OFFLINE_SCHEME);\r\n    }\r\n\r\n    instance = {\r\n        loadRecordsFromStorage: loadRecordsFromStorage,\r\n        createRecord: createRecord,\r\n        startRecord: startRecord,\r\n        stopRecord: stopRecord,\r\n        resumeRecord: resumeRecord,\r\n        deleteRecord: deleteRecord,\r\n        getRecordProgression: getRecordProgression,\r\n        getAllRecords: getAllRecords,\r\n        resetRecords: resetRecords,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nOfflineController.__dashjs_factory_name = 'OfflineController';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(OfflineController); /* jshint ignore:line */\r\nfactory.events = OfflineEvents;\r\nfactory.errors = OfflineErrors;\r\ndashjs.FactoryMaker.updateClassFactory(OfflineController.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport IndexDBStore from '../storage/IndexDBStore';\r\nimport OfflineErrors from '../errors/OfflineErrors';\r\n\r\n/**\r\n * @class OfflineStoreController\r\n * @description This class manages database store\r\n * @param {object} config\r\n * @ignore\r\n */\r\nfunction OfflineStoreController(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const errHandler = config.errHandler;\r\n\r\n    let instance,\r\n        indexDBStore;\r\n\r\n    function setup() {\r\n        indexDBStore = IndexDBStore(context).getInstance();\r\n    }\r\n\r\n    function createFragmentStore(manifestId, storeName) {\r\n        try {\r\n            indexDBStore.createFragmentStore(manifestId, storeName);\r\n        } catch (err) {\r\n            manageDOMError(err);\r\n        }\r\n    }\r\n\r\n    function storeFragment(manifestId, fragmentId, fragmentData) {\r\n        return indexDBStore.storeFragment(manifestId, fragmentId, fragmentData).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function createOfflineManifest(manifest) {\r\n        return indexDBStore.storeManifest(manifest).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function updateOfflineManifest(manifest) {\r\n        return indexDBStore.updateManifest(manifest).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getManifestById(manifestId) {\r\n        return indexDBStore.getManifestById(manifestId).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function saveSelectedRepresentations (manifestId, selected) {\r\n        return indexDBStore.saveSelectedRepresentations(manifestId, selected).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getCurrentHigherManifestId() {\r\n        return indexDBStore.getCurrentHigherManifestId().catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getAllManifests() {\r\n        return indexDBStore.getAllManifests().catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function deleteDownloadById(manifestId) {\r\n        return indexDBStore.deleteDownloadById(manifestId).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function setDownloadingStatus(manifestId, status) {\r\n        return indexDBStore.setDownloadingStatus(manifestId, status).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function setRepresentationCurrentState(manifestId, representationId, state) {\r\n        return indexDBStore.setRepresentationCurrentState(manifestId, representationId, state).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getRepresentationCurrentState(manifestId, representationId) {\r\n        return indexDBStore.getRepresentationCurrentState(manifestId, representationId).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function manageDOMError(err) {\r\n        let error;\r\n        if (err) {\r\n            switch (err.name) {\r\n                case 'QuotaExceededError':\r\n                    error = OfflineErrors.INDEXEDDB_QUOTA_EXCEED_ERROR;\r\n                    break;\r\n                case 'InvalidStateError':\r\n                    error = OfflineErrors.INDEXEDDB_INVALID_STATE_ERROR;\r\n                    break;\r\n                case 'NotFoundError':\r\n                    error = OfflineErrors.INDEXEDDB_NOT_FOUND_ERROR;\r\n                    break;\r\n                case 'VersionError':\r\n                    error = OfflineErrors.INDEXEDDB_VERSION_ERROR;\r\n                    break;\r\n                // TODO : Manage all DOM cases\r\n            }\r\n\r\n            // avoid importing DashJSError object from streaming\r\n            errHandler.error({code: error, message: err.name, data: err});\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        storeFragment: storeFragment,\r\n        createOfflineManifest: createOfflineManifest,\r\n        updateOfflineManifest: updateOfflineManifest,\r\n        getManifestById: getManifestById,\r\n        saveSelectedRepresentations: saveSelectedRepresentations,\r\n        createFragmentStore: createFragmentStore,\r\n        getCurrentHigherManifestId: getCurrentHigherManifestId,\r\n        getAllManifests: getAllManifests,\r\n        deleteDownloadById: deleteDownloadById,\r\n        setDownloadingStatus: setDownloadingStatus,\r\n        setRepresentationCurrentState: setRepresentationCurrentState,\r\n        getRepresentationCurrentState: getRepresentationCurrentState\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nOfflineStoreController.__dashjs_factory_name = 'OfflineStoreController';\r\nexport default dashjs.FactoryMaker.getClassFactory(OfflineStoreController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ErrorsBase from '../../core/errors/ErrorsBase';\r\n/**\r\n * Offline Errors declaration\r\n * @class\r\n */\r\nclass OfflineErrors extends ErrorsBase {\r\n    constructor () {\r\n\r\n        super();\r\n\r\n        /**\r\n         * Error code returned when an error occurs in offline module\r\n         */\r\n        this.OFFLINE_ERROR = 11000;\r\n\r\n        // Based upon https://developer.mozilla.org/fr/docs/Web/API/DOMException\r\n        this.INDEXEDDB_QUOTA_EXCEED_ERROR = 11001;\r\n        this.INDEXEDDB_INVALID_STATE_ERROR = 11002;\r\n        this.INDEXEDDB_NOT_READABLE_ERROR = 11003;\r\n        this.INDEXEDDB_NOT_FOUND_ERROR = 11004;\r\n        this.INDEXEDDB_NETWORK_ERROR = 11005;\r\n        this.INDEXEDDB_DATA_ERROR = 11006;\r\n        this.INDEXEDDB_TRANSACTION_INACTIVE_ERROR = 11007;\r\n        this.INDEXEDDB_NOT_ALLOWED_ERROR = 11008;\r\n        this.INDEXEDDB_NOT_SUPPORTED_ERROR = 11009;\r\n        this.INDEXEDDB_VERSION_ERROR = 11010;\r\n        this.INDEXEDDB_TIMEOUT_ERROR = 11011;\r\n        this.INDEXEDDB_ABORT_ERROR = 11012;\r\n        this.INDEXEDDB_UNKNOWN_ERROR = 11013;\r\n    }\r\n}\r\n\r\nlet offlineErrors = new OfflineErrors();\r\nexport default offlineErrors;\r\n","import EventsBase from './../../core/events/EventsBase';\r\n/**\r\n * These are offline events that should be sent to the player level.\r\n * @class\r\n */\r\nclass OfflineEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n\r\n        /**\r\n        * Triggered when all mediaInfo has been loaded\r\n        * @event OfflineEvents#OFFLINE_RECORD_LOADEDMETADATA\r\n        */\r\n        this.OFFLINE_RECORD_LOADEDMETADATA = 'public_offlineRecordLoadedmetadata';\r\n\r\n        /**\r\n        * Triggered when a record is initialized and download is started\r\n        * @event OfflineEvents#OFFLINE_RECORD_STARTED\r\n        */\r\n        this.OFFLINE_RECORD_STARTED = 'public_offlineRecordStarted';\r\n\r\n        /**\r\n        * Triggered when the user stop downloading a record\r\n        * @event OfflineEvents#OFFLINE_RECORD_STOPPED\r\n        */\r\n        this.OFFLINE_RECORD_STOPPED = 'public_offlineRecordStopped';\r\n\r\n        /**\r\n        * Triggered when all record has been downloaded\r\n        * @event OfflineEvents#OFFLINE_RECORD_FINISHED\r\n        */\r\n        this.OFFLINE_RECORD_FINISHED = 'public_offlineRecordFinished';\r\n    }\r\n}\r\n\r\nlet offlineEvents = new OfflineEvents();\r\nexport default offlineEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport OfflineController from './controllers/OfflineController';\r\n\r\n// Shove both of these into the global scope\r\nvar context = (typeof window !== 'undefined' && window) || global;\r\n\r\nvar dashjs = context.dashjs;\r\nif (!dashjs) {\r\n    dashjs = context.dashjs = {};\r\n}\r\n\r\ndashjs.OfflineController = OfflineController;\r\n\r\nexport default dashjs;\r\nexport { OfflineController };\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport IndexDBStore from '../storage/IndexDBStore';\r\n\r\nfunction IndexDBOfflineLoader(config) {\r\n    config = config || {};\r\n    const context = this.context;\r\n    const urlUtils = config.urlUtils;\r\n    const constants = config.constants;\r\n    const dashConstants = config.dashConstants;\r\n\r\n    let instance,\r\n        indexDBStore;\r\n\r\n    function setup() {\r\n        indexDBStore = IndexDBStore(context).getInstance();\r\n    }\r\n\r\n    function getManifestId (url) {\r\n        let myURL = urlUtils.removeHostname(url);\r\n        var parts = myURL.split('/');\r\n        return parts[0];\r\n    }\r\n    /**\r\n     * Load manifest or fragment from indexeddb database\r\n     * @param {object} config configuration of request\r\n     */\r\n    function load(config) {\r\n        if (config.request) {\r\n            let manifestId = getManifestId(config.request.url);\r\n            if (manifestId % 1 === 0) {\r\n                if (\r\n                    config.request.mediaType === constants.AUDIO ||\r\n                    config.request.mediaType === constants.VIDEO ||\r\n                    config.request.mediaType === constants.TEXT ||\r\n                    config.request.mediaType === constants.MUXED ||\r\n                    config.request.mediaType === constants.IMAGE ||\r\n                    config.request.mediaType === constants.FRAGMENTED_TEXT ||\r\n                    config.request.mediaType === constants.EMBEDDED_TEXT\r\n                ) {\r\n                    let suffix = config.request.type === 'InitializationSegment' ? 'init' : config.request.index;\r\n                    let key = config.request.representationId + '_' + suffix;\r\n                    indexDBStore.getFragmentByKey(manifestId, key).then(function (fragment) {\r\n                        config.success(fragment, null, config.request.url, constants.ARRAY_BUFFER);\r\n                    }).catch(function (err) {\r\n                        config.error(err);\r\n                    });\r\n                } else if (config.request.type === dashConstants.MPD) {\r\n                    indexDBStore.getManifestById(manifestId).then(function (item) {\r\n                        indexDBStore.createFragmentStore(item.fragmentStore);\r\n                        config.success(item.manifest, null, config.request.url, constants.XML);\r\n                    }).catch(function (err) {\r\n                        config.error(config.request, 404, err);\r\n                    });\r\n                }\r\n            } else {\r\n                config.error(config.request, null, 'MediaType can not be found');\r\n            }\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        // nothing to do\r\n    }\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nIndexDBOfflineLoader.__dashjs_factory_name = 'IndexDBOfflineLoader';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(IndexDBOfflineLoader); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nconst localforage = require('localforage');\r\nconst entities = require('html-entities').XmlEntities;\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction IndexDBStore() {\r\n\r\n    let instance,\r\n        manifestStore,\r\n        fragmentStores;\r\n\r\n    function setup() {\r\n        fragmentStores = {};\r\n\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        localforage.config({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db'\r\n        });\r\n\r\n        manifestStore = localforage.createInstance({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db',\r\n            version: 1.0,\r\n            storeName: 'manifest'\r\n        });\r\n    }\r\n\r\n    /////////////////////////////////////////\r\n    //\r\n    // GET/SET Methods\r\n    //\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * Creates an instance of localforage to store fragments in indexed db\r\n     * @param {string} storeName\r\n     * @instance\r\n     */\r\n    function createFragmentStore(storeName) {\r\n\r\n        if (!fragmentStores[storeName]) {\r\n            console.log('setStore  ' + storeName);\r\n            let fragmentStore = localforage.createInstance({\r\n                driver: localforage.INDEXEDDB,\r\n                name: 'dash_offline_db',\r\n                version: 1.0,\r\n                storeName: storeName\r\n            });\r\n            fragmentStores[storeName] = fragmentStore;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update download status\r\n     * @param {number} manifestId\r\n     * @param {string} newStatus\r\n     * @returns {Promise} promise\r\n     * @instance\r\n     */\r\n    function setDownloadingStatus(manifestId, newStatus) {\r\n        return getManifestById(manifestId).then(function (item) {\r\n            item.status = newStatus;\r\n            return updateManifest(item).catch(function () {\r\n                return Promise.reject('Cannot set status ' + newStatus + ' for this stream !');\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updat last downloaded fragment index for representationId\r\n     * @param {number} manifestId - manifest id\r\n      * @param {string} representationId - representation\r\n     * @param {number} state - representation state\r\n     * @returns {Promise} promise\r\n     * @instance\r\n     */\r\n    function setRepresentationCurrentState(manifestId, representationId, state) {\r\n        return getManifestById(manifestId).then(function (item) {\r\n            if (!item.state) {\r\n                item.state = {};\r\n            }\r\n\r\n            if (!item.state[representationId]) {\r\n                item.state[representationId] = {\r\n                    index: -1,\r\n                    downloaded: 0\r\n                };\r\n            }\r\n\r\n            item.state[representationId] = state;\r\n            return updateManifest(item).catch(function () {\r\n                return Promise.reject('Cannot set current index for represenation id ' + representationId);\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns current downloaded segment index for representation\r\n     * @param {number} manifestId - manifest id\r\n     * @param {string} representationId - representation\r\n     * @returns {Promise} promise\r\n     * @instance\r\n     */\r\n    function getRepresentationCurrentState(manifestId, representationId) {\r\n        return getManifestById(manifestId).then(function (item) {\r\n            let state = {\r\n                index: -1,\r\n                downloaded: 0\r\n            };\r\n            if (item.state && item.state[representationId]) {\r\n                state = item.state[representationId];\r\n            }\r\n            return Promise.resolve(state);\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a fragment from its key\r\n     * @param {number} manifestId\r\n     * @param {number} key\r\n     * @returns {Promise} fragment\r\n     * @instance\r\n     */\r\n    function getFragmentByKey(manifestId, key) {\r\n        let fragmentStore = fragmentStores[manifestId];\r\n\r\n        if (!fragmentStore) {\r\n            return Promise.reject(new Error (`No fragment store found for manifest ${manifestId}`));\r\n        }\r\n\r\n        return fragmentStore.getItem(key).then(function (value) {\r\n            return Promise.resolve(value);\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns a manifest from its identifier\r\n     * @param {number} id\r\n     * @returns {Promise} {Object[]} manifests\r\n     * @instance\r\n     */\r\n    function getManifestById(id) {\r\n        return getAllManifests().then(function (array) {\r\n            if (array) {\r\n                let item = null;\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId === parseInt(id)) {\r\n                        item = array.manifests[i];\r\n                    }\r\n                }\r\n                if (item !== null) {\r\n                    item.manifest = entities.decode(item.manifest);\r\n                    return Promise.resolve(item);\r\n                } else {\r\n                    return Promise.reject('Cannot found manifest with this manifestId : ' + id);\r\n                }\r\n            } else {\r\n                return Promise.reject('Any manifests stored in DB !');\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns all offline manifests\r\n     * @returns {Promise} {Object[]} manifests\r\n     * @instance\r\n     */\r\n    function getAllManifests() {\r\n        return manifestStore.getItem('manifest').then(function (array) {\r\n            return Promise.resolve(array ? array : {\r\n                'manifests': []\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return higher manifest id\r\n     * @returns {Promise} number\r\n     * @instance\r\n     */\r\n    function getCurrentHigherManifestId() {\r\n        return getAllManifests().then(function (array) {\r\n            let higherManifestId = 0;\r\n            if (array) {\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId > higherManifestId) {\r\n                        higherManifestId = array.manifests[i].manifestId;\r\n                    }\r\n                }\r\n                return Promise.resolve(higherManifestId);\r\n            } else {\r\n                return Promise.resolve(higherManifestId);\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update manifest\r\n     * @param {Object} manifest updated manifest\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function updateManifest(manifest) {\r\n        return getAllManifests().then(function (array) {\r\n            try {\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId === manifest.manifestId) {\r\n                        array.manifests[i] = manifest;\r\n                    }\r\n                }\r\n                return manifestStore.setItem('manifest', array);\r\n            } catch (err) {\r\n                throw new Error('Any results found !');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * save selected representation by user\r\n     * @param {Object} manifest updated manifest\r\n     * @param {Object} selected selected representations\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function saveSelectedRepresentations(manifest, selected) {\r\n        return getManifestById(manifest).then(function (item) {\r\n            if (!item.selected) {\r\n                item.selected = {};\r\n            }\r\n\r\n            item.selected = selected;\r\n            return updateManifest(item).catch(function () {\r\n                return Promise.reject('Cannot save selected representations');\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Store a manifest in manifest array\r\n     * @param {Object} manifest\r\n     * @instance\r\n     */\r\n    function storeManifest(manifest) {\r\n        return manifestStore.getItem('manifest').then(function (results) {\r\n            let array = results ? results : {\r\n                'manifests': []\r\n            };\r\n            array.manifests.push(manifest);\r\n            return manifestStore.setItem('manifest', array);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Store a fragment in fragment store\r\n     * @param {number} manifestId\r\n     * @param {number} fragmentId\r\n     * @param {Object} fragmentData\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function storeFragment(manifestId, fragmentId, fragmentData) {\r\n        let fragmentStore = fragmentStores[manifestId];\r\n\r\n        if (!fragmentStore) {\r\n            return Promise.reject(new Error (`No fragment store found for manifest ${manifestId}`));\r\n        }\r\n\r\n        return fragmentStore.setItem(fragmentId, fragmentData, function () {\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /////////////////////////////////////////\r\n    //\r\n    // DROP Methods\r\n    //\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * Remove all manifest and fragment store\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function dropAll() {\r\n        return localforage.clear().then(function () {\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove framgent store given its name\r\n     * @param {string} storeName\r\n     * @instance\r\n     */\r\n    function dropFragmentStore(storeName) {\r\n        localforage.dropInstance({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db',\r\n            version: 1.0,\r\n            storeName: storeName\r\n        }).then(function () {\r\n            delete fragmentStores[storeName];\r\n        }).catch(function (err) {\r\n            console.log('dropFragmentStore failed ' + err);\r\n        });\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Remove download given its id (fragmentStore + manifest entry in manifest array)\r\n     * @param {number} manifestId\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function deleteDownloadById(manifestId) {\r\n        return manifestStore.getItem('manifest').then(function (array) {\r\n            if (array) {\r\n                return deleteFragmentStore(manifestId).then(function () {\r\n                    for (let i = 0; i < array.manifests.length; i++) {\r\n                        if (array.manifests[i].manifestId === parseInt(manifestId)) {\r\n                            array.manifests.splice(i, 1);\r\n                        }\r\n                    }\r\n                    return manifestStore.setItem('manifest', array).then(function () {\r\n                        return Promise.resolve('This stream has been successfull removed !');\r\n                    }).catch(function () {\r\n                        return Promise.reject('An error occured when trying to delete this manifest');\r\n                    });\r\n                });\r\n            } else {\r\n                return Promise.resolve('Nothing to delete !');\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove fragment store\r\n     * @param {string} storeName\r\n     * @returns {Promise} promise asynchronously resolved\r\n     * @instance\r\n     */\r\n    function deleteFragmentStore(storeName) {\r\n        localforage.createInstance({\r\n            name: 'dash_offline_db',\r\n            storeName: storeName\r\n        });\r\n        return localforage.dropInstance({\r\n            name: 'dash_offline_db',\r\n            storeName: storeName\r\n        }).then(function () {\r\n            delete fragmentStores[storeName];\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n            return Promise.reject(err);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        dropAll: dropAll,\r\n        getFragmentByKey: getFragmentByKey,\r\n        getManifestById: getManifestById,\r\n        storeFragment: storeFragment,\r\n        storeManifest: storeManifest,\r\n        updateManifest: updateManifest,\r\n        saveSelectedRepresentations: saveSelectedRepresentations,\r\n        createFragmentStore: createFragmentStore,\r\n        setDownloadingStatus: setDownloadingStatus,\r\n        setRepresentationCurrentState: setRepresentationCurrentState,\r\n        getRepresentationCurrentState: getRepresentationCurrentState,\r\n        getCurrentHigherManifestId: getCurrentHigherManifestId,\r\n        getAllManifests: getAllManifests,\r\n        dropFragmentStore: dropFragmentStore,\r\n        deleteDownloadById: deleteDownloadById\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nIndexDBStore.__dashjs_factory_name = 'IndexDBStore';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(IndexDBStore); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nconst Entities = require('html-entities').XmlEntities;\r\nconst OFFLINE_BASE_URL = 'offline_indexeddb://';\r\n\r\nfunction OfflineIndexDBManifestParser(config) {\r\n\r\n    const manifestId = config.manifestId;\r\n    const allMediaInfos = config.allMediaInfos;\r\n    const urlUtils = config.urlUtils;\r\n    const debug = config.debug;\r\n    const dashConstants = config.dashConstants;\r\n    const constants = config.constants;\r\n\r\n    let instance,\r\n        DOM,\r\n        logger;\r\n\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n    }\r\n\r\n    /**\r\n     * Parse XML manifest\r\n     * @param {string} XMLDoc - xml manifest\r\n     * @param {object} representation\r\n     * @returns {Promise} a promise that will be resolved or rejected at the end of encoding process\r\n     * @instance\r\n    */\r\n    function parse(XMLDoc, representation) {\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            DOM = new DOMParser().parseFromString(XMLDoc, 'application/xml');\r\n            let mpd = DOM.getElementsByTagName(dashConstants.MPD) ? DOM.getElementsByTagName(dashConstants.MPD) : null;\r\n\r\n            for (let i = 0; i < mpd.length; i++) {\r\n                if (mpd[i] !== null) {\r\n                    editBaseURLAttribute(mpd[i]);\r\n                    browsePeriods(mpd[i], representation);\r\n                }\r\n            }\r\n\r\n            let manifestEncoded = encodeManifest(DOM);\r\n            if (manifestEncoded !== '') {\r\n                resolve(manifestEncoded);\r\n            } else {\r\n                reject('Encoded error');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * URL encode parsed manifest\r\n     * @param {string} DOM\r\n     * @returns {string} Url encoded XML\r\n     * @instance\r\n    */\r\n    function encodeManifest(DOM) {\r\n        logger.info('encodedManifest ' + new XMLSerializer().serializeToString(DOM));\r\n        return new Entities().encode(new XMLSerializer().serializeToString(DOM));\r\n    }\r\n\r\n    /**\r\n     * Update baseURL to point to local stored data P\r\n     * @param {XML} currentMPD\r\n     * @instance\r\n    */\r\n    function editBaseURLAttribute(currentMPD) {\r\n        let basesURL,\r\n            fragmentId,\r\n            representationId;\r\n\r\n        let url = `${OFFLINE_BASE_URL}${manifestId}/`;\r\n\r\n        basesURL = currentMPD.getElementsByTagName(dashConstants.BASE_URL);\r\n\r\n        if (basesURL.length === 0) {\r\n            // add baseURL\r\n            let element = DOM.createElement(dashConstants.BASE_URL);\r\n            element.innerHTML = url;\r\n            currentMPD.appendChild(element);\r\n        }\r\n        basesURL = currentMPD.getElementsByTagName(dashConstants.BASE_URL);\r\n        for (let i = 0; i < basesURL.length; i++) {\r\n            let parent = basesURL[i].parentNode;\r\n\r\n            if (parent.nodeName === dashConstants.MPD) {\r\n                basesURL[i].innerHTML = url;\r\n            } else if (parent.nodeName === dashConstants.REPRESENTATION) {\r\n                let adaptationsSet = parent.parentNode;\r\n                if (adaptationsSet.nodeName == dashConstants.ADAPTATION_SET) {\r\n\r\n                    if (urlUtils.isHTTPS(basesURL[i].innerHTML) || urlUtils.isHTTPURL(basesURL[i].innerHTML)) {\r\n                        fragmentId = getFragmentId(basesURL[i].innerHTML);\r\n                        representationId = getBestRepresentationId(adaptationsSet);\r\n                        basesURL[i].innerHTML = url + representationId + '_' + fragmentId;\r\n                    } else if (basesURL[i].innerHTML === './') {\r\n                        basesURL[i].innerHTML = url;\r\n                    } else {\r\n                        fragmentId = getFragmentId(basesURL[i].innerHTML);\r\n                        representationId = getBestRepresentationId(adaptationsSet);\r\n                        basesURL[i].innerHTML = representationId + '_' + fragmentId;\r\n                    }\r\n                }\r\n            } else {\r\n                basesURL[i].innerHTML = url;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Browse periods\r\n     * @param {XML} currentMPD\r\n     * @param {Object} representation\r\n     * @instance\r\n    */\r\n    function browsePeriods(currentMPD, representation) {\r\n        let periods = currentMPD.getElementsByTagName(dashConstants.PERIOD);\r\n        for (let j = 0; j < periods.length; j++) {\r\n            browseAdaptationsSet(periods[j], representation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Browse adapatation set to update data (delete those taht are not choosen by user ...)\r\n     * @param {XML} currentPeriod\r\n     * @param {Array} representationsToUpdate\r\n     * @instance\r\n    */\r\n    function browseAdaptationsSet(currentPeriod, representationsToUpdate) {\r\n        let adaptationsSet,\r\n            currentAdaptationSet,\r\n            currentAdaptationType,\r\n            representations;\r\n\r\n        adaptationsSet = currentPeriod.getElementsByTagName(dashConstants.ADAPTATION_SET);\r\n\r\n        for (let i = adaptationsSet.length - 1; i >= 0; i--) {\r\n            currentAdaptationSet = adaptationsSet[i];\r\n            if (currentAdaptationSet) {\r\n                currentAdaptationType = findAdaptationType(currentAdaptationSet);\r\n                representations = findRepresentations(currentAdaptationSet);\r\n\r\n                findAndKeepOnlySelectedRepresentations(currentAdaptationSet, representations, currentAdaptationType);\r\n\r\n                representations = findRepresentations(currentAdaptationSet);\r\n\r\n                deleteSegmentBase(currentAdaptationSet);\r\n\r\n                if (representations.length === 0) {\r\n                    currentPeriod.removeChild(currentAdaptationSet);\r\n                } else {\r\n                    //detect Segment list use case\r\n                    for (let i = 0; i < representations.length; i++) {\r\n                        let rep = representations[i];\r\n                        let segmentList = getSegmentList(rep);\r\n                        if (segmentList.length >= 1) {\r\n                            editSegmentListAttributes(segmentList, rep);\r\n                        }\r\n                    }\r\n\r\n                    let segmentTemplate = getSegmentTemplate(currentAdaptationSet);\r\n                    // segmentTemplate is defined, update attributes in order to be correctly played offline\r\n                    if (segmentTemplate.length >= 1) {\r\n                        editSegmentTemplateAttributes(segmentTemplate);\r\n                    }\r\n\r\n                    // detect SegmentBase use case => transfrom manifest to SegmentList in SegmentTemplate\r\n                    if (representationsToUpdate && representationsToUpdate.length > 0 ) {\r\n                        let selectedRep;\r\n                        for (let i = 0; i < representations.length; i++) {\r\n                            let rep = representations[i];\r\n                            for (let j = 0; representationsToUpdate && j < representationsToUpdate.length; j++) {\r\n                                if (representationsToUpdate[j].id === rep.id) {\r\n                                    selectedRep = representationsToUpdate[j];\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        addSegmentTemplateAttributes(currentAdaptationSet, selectedRep);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns type of adapation set\r\n     * @param {XML} currentAdaptationSet\r\n     * @returns {string|null} type\r\n     * @instance\r\n    */\r\n    function findAdaptationType(currentAdaptationSet) {\r\n        if (getIsMuxed(currentAdaptationSet)) {\r\n            return constants.MUXED;\r\n        } else if (getIsAudio(currentAdaptationSet)) {\r\n            return constants.AUDIO;\r\n        } else if (getIsVideo(currentAdaptationSet)) {\r\n            return constants.VIDEO;\r\n        } else if (getIsFragmentedText(currentAdaptationSet)) {\r\n            return constants.FRAGMENTED_TEXT;\r\n        } else if (getIsImage(currentAdaptationSet)) {\r\n            return constants.IMAGE;\r\n        }\r\n\r\n        return constants.TEXT;\r\n    }\r\n\r\n    function getIsAudio(adaptation) {\r\n        return getIsTypeOf(adaptation, constants.AUDIO);\r\n    }\r\n\r\n    function getIsVideo(adaptation) {\r\n        return getIsTypeOf(adaptation, constants.VIDEO);\r\n    }\r\n\r\n    function getIsFragmentedText(adaptation) {\r\n        return getIsTypeOf(adaptation, constants.FRAGMENTED_TEXT);\r\n    }\r\n\r\n    function getIsMuxed(adaptation) {\r\n        return getIsTypeOf(adaptation, constants.MUXED);\r\n    }\r\n\r\n    function getIsImage(adaptation) {\r\n        return getIsTypeOf(adaptation, constants.IMAGE);\r\n    }\r\n\r\n    // based upon DashManifestModel, but using DomParser\r\n    function getIsTypeOf(adaptation, type) {\r\n\r\n        if (!adaptation) {\r\n            throw new Error('adaptation is not defined');\r\n        }\r\n\r\n        if (!type) {\r\n            throw new Error('type is not defined');\r\n        }\r\n\r\n        // 1. check codecs for fragmented text\r\n        if (isFragmentedTextCodecFound(adaptation)) {\r\n            // fragmented text codec has been found for adaptation, let's check if tested type is fragmented text\r\n            return type === constants.FRAGMENTED_TEXT;\r\n        }\r\n\r\n        // 2. test mime type\r\n        return testMimeType(adaptation, type);\r\n    }\r\n\r\n    function testMimeType(adaptation, type) {\r\n        let mimeTypeRegEx = (type !== constants.TEXT) ? new RegExp(type) : new RegExp('(vtt|ttml)');\r\n\r\n        let mimeType = findMimeType(adaptation);\r\n        if (mimeType) {\r\n            return mimeTypeRegEx.test(mimeType);\r\n        }\r\n\r\n        // no mime type in adaptation, search in representation\r\n        let representations = findRepresentations(adaptation);\r\n        if (representations) {\r\n            for (let i = 0; i < representations.length; i++) {\r\n                let representation = representations[i];\r\n                mimeType = findMimeType(representation);\r\n                if (mimeType) {\r\n                    return mimeTypeRegEx.test(mimeType);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Search for fragmented text codec in adaptation (STPP or WVTT)\r\n     * @param {Object} adaptation\r\n     */\r\n    function isFragmentedTextCodecFound (adaptation) {\r\n        let isFragmentedTextCodecFoundInTag = function (tag) {\r\n            let codecs = tag.getAttribute(dashConstants.CODECS);\r\n            if (codecs) {\r\n                if (codecs.search(constants.STPP) === 0 ||\r\n                    codecs.search(constants.WVTT) === 0 ) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        if (isFragmentedTextCodecFoundInTag(adaptation)) {\r\n            return true;\r\n        }\r\n\r\n        // check in representations\r\n        let representations = findRepresentations(adaptation);\r\n        if (representations && representations.length > 0) {\r\n\r\n            if (isFragmentedTextCodecFoundInTag(representations[0])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns mime-type of xml tag\r\n     * @param {Object} tag\r\n     * @returns {string|null} mimeType\r\n     * @instance\r\n    */\r\n    function findMimeType(tag) {\r\n        return tag.getAttribute(dashConstants.MIME_TYPE);\r\n    }\r\n\r\n    /**\r\n     * Returns representations of adaptation set\r\n     * @param {XML} adaptation\r\n     * @returns {XML} representations\r\n     * @instance\r\n    */\r\n    function findRepresentations(adaptation) {\r\n        return adaptation.getElementsByTagName(dashConstants.REPRESENTATION);\r\n    }\r\n\r\n    /**\r\n     * Return segment template list of adaptations set\r\n     * @param {XML} currentAdaptationSet\r\n     * @returns {XML} representations\r\n     * @instance\r\n    */\r\n    function getSegmentTemplate(currentAdaptationSet) {\r\n        return currentAdaptationSet.getElementsByTagName(dashConstants.SEGMENT_TEMPLATE);\r\n    }\r\n\r\n    /**\r\n     * Return segment list tags of adaptations set\r\n     * @param {XML} tag\r\n     * @returns {XML} representations\r\n     * @instance\r\n    */\r\n    function getSegmentList(tag) {\r\n        return tag.getElementsByTagName(dashConstants.SEGMENT_LIST);\r\n    }\r\n\r\n    function deleteSegmentBase(tag) {\r\n        let elements = tag.getElementsByTagName(dashConstants.SEGMENT_BASE);\r\n        for (let i = 0; i < elements.length; i++) {\r\n            let segmentBase = elements[i];\r\n            segmentBase.parentNode.removeChild(segmentBase);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {XML} segmentTemplate\r\n     * @param {object} rep\r\n     * @instance\r\n    */\r\n    function addSegmentTimelineElements(segmentTemplate, rep) {\r\n        let S = DOM.createElement('S');\r\n        if (rep && rep.segments) {\r\n            let segmentTimelineElement = DOM.createElement(dashConstants.SEGMENT_TIMELINE);\r\n            let changedDuration = getDurationChangeArray(rep);\r\n            for (let i = 0; i < changedDuration.length; i++) {\r\n                let repeatValue = i + 1 < changedDuration.length ? (changedDuration[i + 1] - changedDuration[i]) - 1 : 0;\r\n                if (repeatValue > 1) {\r\n                    S.setAttribute('r', repeatValue);\r\n                }\r\n                S.setAttribute('d', rep.segments[changedDuration[i]].duration);\r\n                segmentTimelineElement.appendChild(S);\r\n                S = DOM.createElement('S');\r\n            }\r\n            segmentTemplate.appendChild(segmentTimelineElement);\r\n        }\r\n    }\r\n\r\n    function getDurationChangeArray(rep) {\r\n        let array = [];\r\n        array.push(0);\r\n        for (let i = 1; i < rep.segments.length; i++) {\r\n            if (rep.segments[i - 1].duration !== rep.segments[i].duration) {\r\n                array.push(i);\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Update attributes of segment templates to match offline urls\r\n     * @param {Array} segmentsTemplates\r\n     * @instance\r\n    */\r\n    function editSegmentTemplateAttributes(segmentsTemplates) {\r\n        for (let i = 0; i < segmentsTemplates.length; i++) {\r\n            let media = segmentsTemplates[i].getAttribute(dashConstants.MEDIA);\r\n            media = '$RepresentationID$_$Number$' + media.substring(media.indexOf('.'), media.length); //id + extension\r\n            segmentsTemplates[i].setAttribute(dashConstants.START_NUMBER, '0');\r\n            segmentsTemplates[i].setAttribute(dashConstants.MEDIA, media);\r\n            segmentsTemplates[i].setAttribute(dashConstants.INITIALIZATION_MINUS,'$RepresentationID$_init');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update attributes of segment list to match offline urls\r\n     * @param {Array} segmentLists\r\n     * @param {Object} representation\r\n     * @instance\r\n    */\r\n    function editSegmentListAttributes(segmentLists, representation) {\r\n        let repId = representation.getAttribute(dashConstants.ID);\r\n        for (let i = 0; i < segmentLists.length; i++) {\r\n\r\n            let segmentList = segmentLists[i];\r\n            let initialisation = segmentList.getElementsByTagName(dashConstants.INITIALIZATION);\r\n            if (initialisation) {\r\n                let sourceURL = initialisation[0].getAttribute(dashConstants.SOURCE_URL);\r\n                sourceURL = `${repId}_init`;\r\n                initialisation[0].setAttribute(dashConstants.SOURCE_URL, sourceURL);\r\n            }\r\n            let segmentURLs = segmentList.getElementsByTagName(dashConstants.SEGMENT_URL);\r\n\r\n            if (segmentURLs) {\r\n                for (let j = 0; j < segmentURLs.length; j++) {\r\n                    let segmentUrl = segmentURLs[j];\r\n                    let media = segmentUrl.getAttribute(dashConstants.MEDIA);\r\n                    media = `${repId}_${j}`;\r\n                    segmentUrl.setAttribute(dashConstants.MEDIA, media);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {XML} adaptationSet\r\n     * @param {object} rep\r\n     * @instance\r\n    */\r\n    function addSegmentTemplateAttributes(adaptationSet, rep) {\r\n        let segmentTemplateElement = DOM.createElement(dashConstants.SEGMENT_TEMPLATE);\r\n        segmentTemplateElement.setAttribute(dashConstants.START_NUMBER, '0');\r\n        segmentTemplateElement.setAttribute(dashConstants.MEDIA, '$RepresentationID$-$Time$');\r\n        segmentTemplateElement.setAttribute(dashConstants.INITIALIZATION_MINUS,'$RepresentationID$_init');\r\n        addSegmentTimelineElements(segmentTemplateElement, rep);\r\n        adaptationSet.appendChild(segmentTemplateElement);\r\n    }\r\n\r\n    /**\r\n     * Delete all representations except the one choosed by user\r\n     * @param {XML} currentAdaptationSet\r\n     * @param {XML} representations\r\n     * @param {string} adaptationType\r\n     * @instance\r\n    */\r\n    function findAndKeepOnlySelectedRepresentations(currentAdaptationSet, representations, adaptationType) {\r\n        for ( var i = representations.length - 1; i >= 0; i--) {\r\n            let representation = representations[i];\r\n            let repId = representation.getAttribute(dashConstants.ID);\r\n            if (allMediaInfos[adaptationType] && allMediaInfos[adaptationType].indexOf(repId) === -1) {\r\n                // representation is not selected, remove it\r\n                currentAdaptationSet.removeChild(representation);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  UTILS\r\n    /**\r\n     * Get id of first representation of adaptation set\r\n     * @param {XMl} currentAdaptationSet\r\n     * @returns {string} id\r\n     * @instance\r\n    */\r\n    function getBestRepresentationId(currentAdaptationSet) {\r\n        let bestRepresentation = currentAdaptationSet.getElementsByTagName(dashConstants.REPRESENTATION)[0];\r\n        console.log(bestRepresentation.getAttribute(dashConstants.ID));\r\n        return bestRepresentation.getAttribute(dashConstants.ID);\r\n    }\r\n\r\n    /**\r\n     * Parse and returns fragments of offline url => xxxx://xxxx/fragmentId/\r\n     * @param {string} url\r\n     * @returns {string} fragmentId\r\n     * @instance\r\n    */\r\n    function getFragmentId(url) {\r\n        let idxFragId = url.lastIndexOf('/');\r\n        //logger.warn('fragId : ' + url.substring(idxFragId + 1, url.length));\r\n        return url.substring(idxFragId,url.length);\r\n    }\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        parse: parse\r\n    };\r\n\r\n    return instance;\r\n}\r\nOfflineIndexDBManifestParser.__dashjs_factory_name = 'OfflineIndexDBManifestParser';\r\nexport default dashjs.FactoryMaker.getClassFactory(OfflineIndexDBManifestParser); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport OfflineConstants from '../constants/OfflineConstants';\r\n\r\nfunction OfflineUrlUtils() {\r\n\r\n    function setup() {\r\n    }\r\n\r\n    function getRegex() {\r\n        return OfflineConstants.OFFLINE_URL_REGEX;\r\n    }\r\n\r\n    /*\r\n     * -------------------\r\n     * SPECIFIC BEHAVIOUR\r\n     * -------------------\r\n     */\r\n    function removeHostname(url) {\r\n        return url.replace(/(^\\w+:|^)\\/\\//, '');\r\n    }\r\n\r\n    function isRelative() {\r\n        return false;\r\n    }\r\n\r\n    function resolve(url, baseUrl) {\r\n        if (baseUrl.charAt(baseUrl.length - 1 ) !== '/') {\r\n            baseUrl = baseUrl.concat('/');\r\n        }\r\n        return baseUrl + url;\r\n    }\r\n\r\n    setup();\r\n    const instance = {\r\n        getRegex:           getRegex,\r\n        isRelative:         isRelative,\r\n        removeHostname:     removeHostname,\r\n        resolve:            resolve\r\n    };\r\n    return instance;\r\n}\r\n\r\nOfflineUrlUtils.__dashjs_factory_name = 'OfflineUrlUtils';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(OfflineUrlUtils); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass OfflineDownload {\r\n    constructor() {\r\n        this.id = null;\r\n        this.url = null;\r\n        this.originalUrl = null;\r\n        this.status = null;\r\n        this.progress = null;\r\n    }\r\n}\r\n\r\nexport default OfflineDownload;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport URLLoader from './net/URLLoader';\r\nimport HeadRequest from './vo/HeadRequest';\r\nimport DashJSError from './vo/DashJSError';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\n\r\nfunction FragmentLoader(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const urlUtils = config.urlUtils;\r\n    const errors = config.errors;\r\n\r\n    let instance,\r\n        urlLoader;\r\n\r\n    function setup() {\r\n        urlLoader = URLLoader(context).create({\r\n            errHandler: config.errHandler,\r\n            errors: errors,\r\n            dashMetrics: config.dashMetrics,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier,\r\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\r\n            urlUtils: urlUtils,\r\n            constants: Constants,\r\n            boxParser: config.boxParser,\r\n            dashConstants: config.dashConstants\r\n        });\r\n    }\r\n\r\n    function checkForExistence(request) {\r\n        const report = function (success) {\r\n            eventBus.trigger(events.CHECK_FOR_EXISTENCE_COMPLETED, {\r\n                    request: request,\r\n                    exists: success\r\n                }\r\n            );\r\n        };\r\n\r\n        if (request) {\r\n            let headRequest = new HeadRequest(request.url);\r\n            urlLoader.load({\r\n                request: headRequest,\r\n                success: function () {\r\n                    report(true);\r\n                },\r\n                error: function () {\r\n                    report(false);\r\n                }\r\n            });\r\n        } else {\r\n            report(false);\r\n        }\r\n    }\r\n\r\n    function load(request) {\r\n        const report = function (data, error) {\r\n            eventBus.trigger(events.LOADING_COMPLETED, {\r\n                request: request,\r\n                response: data || null,\r\n                error: error || null,\r\n                sender: instance\r\n            });\r\n        };\r\n\r\n        if (request) {\r\n            urlLoader.load({\r\n                request: request,\r\n                progress: function (event) {\r\n                    eventBus.trigger(events.LOADING_PROGRESS, {\r\n                        request: request,\r\n                        stream: event.stream\r\n                    });\r\n                    if (event.data) {\r\n                        eventBus.trigger(events.LOADING_DATA_PROGRESS, {\r\n                            request: request,\r\n                            response: event.data || null,\r\n                            error: null,\r\n                            sender: instance\r\n                        });\r\n                    }\r\n                },\r\n                success: function (data) {\r\n                    report(data);\r\n                },\r\n                error: function (request, statusText, errorText) {\r\n                    report(\r\n                        undefined,\r\n                        new DashJSError(\r\n                            errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,\r\n                            errorText,\r\n                            statusText\r\n                        )\r\n                    );\r\n                },\r\n                abort: function (request) {\r\n                    if (request) {\r\n                        eventBus.trigger(events.LOADING_ABANDONED, {\r\n                            mediaType: request.mediaType,\r\n                            request: request,\r\n                            sender: instance\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            report(\r\n                undefined,\r\n                new DashJSError(\r\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,\r\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        if (urlLoader) {\r\n            urlLoader.abort();\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (urlLoader) {\r\n            urlLoader.abort();\r\n            urlLoader = null;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        checkForExistence: checkForExistence,\r\n        load: load,\r\n        abort: abort,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\r\nexport default FactoryMaker.getClassFactory(FragmentLoader);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../core/events/EventsBase';\r\n\r\n/**\r\n * @class\r\n * @implements EventsBase\r\n */\r\nclass MediaPlayerEvents extends EventsBase {\r\n\r\n    /**\r\n     * @description Public facing external events to be used when developing a player that implements dash.js.\r\n     */\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * Triggered when playback will not start yet\r\n         * as the MPD's availabilityStartTime is in the future.\r\n         * Check delay property in payload to determine time before playback will start.\r\n         * @event MediaPlayerEvents#AST_IN_FUTURE\r\n         */\r\n        this.AST_IN_FUTURE = 'astInFuture';\r\n\r\n        /**\r\n         * Triggered when the video element's buffer state changes to stalled.\r\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\r\n         * @event MediaPlayerEvents#BUFFER_EMPTY\r\n         */\r\n        this.BUFFER_EMPTY = 'bufferStalled';\r\n\r\n        /**\r\n         * Triggered when the video element's buffer state changes to loaded.\r\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\r\n         * @event MediaPlayerEvents#BUFFER_LOADED\r\n         */\r\n        this.BUFFER_LOADED = 'bufferLoaded';\r\n\r\n        /**\r\n         * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.\r\n         * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED\r\n         */\r\n        this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged';\r\n\r\n        /**\r\n         * Triggered when there is an error from the element or MSE source buffer.\r\n         * @event MediaPlayerEvents#ERROR\r\n         */\r\n        this.ERROR = 'error';\r\n        /**\r\n         * Triggered when a fragment download has completed.\r\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED\r\n         */\r\n        this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted';\r\n\r\n        /**\r\n         * Triggered when a partial fragment download has completed.\r\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_PROGRESS\r\n         */\r\n        this.FRAGMENT_LOADING_PROGRESS = 'fragmentLoadingProgress';\r\n        /**\r\n         * Triggered when a fragment download has started.\r\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED\r\n         */\r\n        this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted';\r\n\r\n        /**\r\n         * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..\r\n         * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED\r\n         */\r\n        this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned';\r\n\r\n        /**\r\n         * Triggered when {@link module:Debug} logger methods are called.\r\n         * @event MediaPlayerEvents#LOG\r\n         */\r\n        this.LOG = 'log';\r\n\r\n        //TODO refactor with internal event\r\n        /**\r\n         * Triggered when the manifest load is complete\r\n         * @event MediaPlayerEvents#MANIFEST_LOADED\r\n         */\r\n        this.MANIFEST_LOADED = 'manifestLoaded';\r\n\r\n        /**\r\n         * Triggered anytime there is a change to the overall metrics.\r\n         * @event MediaPlayerEvents#METRICS_CHANGED\r\n         */\r\n        this.METRICS_CHANGED = 'metricsChanged';\r\n\r\n        /**\r\n         * Triggered when an individual metric is added, updated or cleared.\r\n         * @event MediaPlayerEvents#METRIC_CHANGED\r\n         */\r\n        this.METRIC_CHANGED = 'metricChanged';\r\n\r\n        /**\r\n         * Triggered every time a new metric is added.\r\n         * @event MediaPlayerEvents#METRIC_ADDED\r\n         */\r\n        this.METRIC_ADDED = 'metricAdded';\r\n\r\n        /**\r\n         * Triggered every time a metric is updated.\r\n         * @event MediaPlayerEvents#METRIC_UPDATED\r\n         */\r\n        this.METRIC_UPDATED = 'metricUpdated';\r\n\r\n        /**\r\n         * Triggered at the stream end of a period.\r\n         * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED\r\n         */\r\n        this.PERIOD_SWITCH_COMPLETED = 'periodSwitchCompleted';\r\n\r\n        /**\r\n         * Triggered when a new period starts.\r\n         * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED\r\n         */\r\n        this.PERIOD_SWITCH_STARTED = 'periodSwitchStarted';\r\n\r\n        /**\r\n         * Triggered when an ABR up /down switch is initiated; either by user in manual mode or auto mode via ABR rules.\r\n         * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED\r\n         */\r\n        this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested';\r\n\r\n        /**\r\n         * Triggered when the new ABR quality is being rendered on-screen.\r\n         * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED\r\n         */\r\n        this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered';\r\n\r\n        /**\r\n         * Triggered when the new track is being rendered.\r\n         * @event MediaPlayerEvents#TRACK_CHANGE_RENDERED\r\n         */\r\n        this.TRACK_CHANGE_RENDERED = 'trackChangeRendered';\r\n\r\n        /**\r\n         * Triggered when the source is setup and ready.\r\n         * @event MediaPlayerEvents#SOURCE_INITIALIZED\r\n         */\r\n        this.SOURCE_INITIALIZED = 'sourceInitialized';\r\n\r\n        /**\r\n         * Triggered when a stream (period) is being loaded\r\n         * @event MediaPlayerEvents#STREAM_INITIALIZING\r\n         */\r\n        this.STREAM_INITIALIZING = 'streamInitializing';\r\n\r\n        /**\r\n         * Triggered when a stream (period) is loaded\r\n         * @event MediaPlayerEvents#STREAM_UPDATED\r\n         */\r\n        this.STREAM_UPDATED = 'streamUpdated';\r\n\r\n        /**\r\n         * Triggered when a stream (period) is updated\r\n         * @event MediaPlayerEvents#STREAM_INITIALIZED\r\n         */\r\n        this.STREAM_INITIALIZED = 'streamInitialized';\r\n\r\n        /**\r\n         * Triggered when the player has been reset.\r\n         * @event MediaPlayerEvents#STREAM_TEARDOWN_COMPLETE\r\n         */\r\n        this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete';\r\n\r\n        /**\r\n         * Triggered once all text tracks detected in the MPD are added to the video element.\r\n         * @event MediaPlayerEvents#TEXT_TRACKS_ADDED\r\n         */\r\n        this.TEXT_TRACKS_ADDED = 'allTextTracksAdded';\r\n\r\n        /**\r\n         * Triggered when a text track is added to the video element's TextTrackList\r\n         * @event MediaPlayerEvents#TEXT_TRACK_ADDED\r\n         */\r\n        this.TEXT_TRACK_ADDED = 'textTrackAdded';\r\n\r\n        /**\r\n         * Triggered when a ttml chunk is parsed.\r\n         * @event MediaPlayerEvents#TTML_PARSED\r\n         */\r\n        this.TTML_PARSED = 'ttmlParsed';\r\n\r\n        /**\r\n         * Triggered when a ttml chunk has to be parsed.\r\n         * @event MediaPlayerEvents#TTML_TO_PARSE\r\n         */\r\n        this.TTML_TO_PARSE = 'ttmlToParse';\r\n\r\n        /**\r\n         * Triggered when a caption is rendered.\r\n         * @event MediaPlayerEvents#CAPTION_RENDERED\r\n         */\r\n        this.CAPTION_RENDERED = 'captionRendered';\r\n\r\n        /**\r\n         * Triggered when the caption container is resized.\r\n         * @event MediaPlayerEvents#CAPTION_CONTAINER_RESIZE\r\n         */\r\n        this.CAPTION_CONTAINER_RESIZE = 'captionContainerResize';\r\n\r\n        /**\r\n         * Sent when enough data is available that the media can be played,\r\n         * at least for a couple of frames.  This corresponds to the\r\n         * HAVE_ENOUGH_DATA readyState.\r\n         * @event MediaPlayerEvents#CAN_PLAY\r\n         */\r\n        this.CAN_PLAY = 'canPlay';\r\n\r\n        /**\r\n         * Sent when playback completes.\r\n         * @event MediaPlayerEvents#PLAYBACK_ENDED\r\n         */\r\n        this.PLAYBACK_ENDED = 'playbackEnded';\r\n\r\n        /**\r\n         * Sent when an error occurs.  The element's error\r\n         * attribute contains more information.\r\n         * @event MediaPlayerEvents#PLAYBACK_ERROR\r\n         */\r\n        this.PLAYBACK_ERROR = 'playbackError';\r\n\r\n        /**\r\n         * Sent when playback is not allowed (for example if user gesture is needed).\r\n         * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED\r\n         */\r\n        this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed';\r\n\r\n        /**\r\n         * The media's metadata has finished loading; all attributes now\r\n         * contain as much useful information as they're going to.\r\n         * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED\r\n         */\r\n        this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded';\r\n\r\n        /**\r\n         * Sent when playback is paused.\r\n         * @event MediaPlayerEvents#PLAYBACK_PAUSED\r\n         */\r\n        this.PLAYBACK_PAUSED = 'playbackPaused';\r\n\r\n        /**\r\n         * Sent when the media begins to play (either for the first time, after having been paused,\r\n         * or after ending and then restarting).\r\n         *\r\n         * @event MediaPlayerEvents#PLAYBACK_PLAYING\r\n         */\r\n        this.PLAYBACK_PLAYING = 'playbackPlaying';\r\n\r\n        /**\r\n         * Sent periodically to inform interested parties of progress downloading\r\n         * the media. Information about the current amount of the media that has\r\n         * been downloaded is available in the media element's buffered attribute.\r\n         * @event MediaPlayerEvents#PLAYBACK_PROGRESS\r\n         */\r\n        this.PLAYBACK_PROGRESS = 'playbackProgress';\r\n\r\n        /**\r\n         * Sent when the playback speed changes.\r\n         * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED\r\n         */\r\n        this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged';\r\n\r\n        /**\r\n         * Sent when a seek operation completes.\r\n         * @event MediaPlayerEvents#PLAYBACK_SEEKED\r\n         */\r\n        this.PLAYBACK_SEEKED = 'playbackSeeked';\r\n\r\n        /**\r\n         * Sent when a seek operation begins.\r\n         * @event MediaPlayerEvents#PLAYBACK_SEEKING\r\n         */\r\n        this.PLAYBACK_SEEKING = 'playbackSeeking';\r\n\r\n        /**\r\n         * Sent when a seek operation has been asked.\r\n         * @event MediaPlayerEvents#PLAYBACK_SEEK_ASKED\r\n         */\r\n        this.PLAYBACK_SEEK_ASKED = 'playbackSeekAsked';\r\n\r\n        /**\r\n         * Sent when the video element reports stalled\r\n         * @event MediaPlayerEvents#PLAYBACK_STALLED\r\n         */\r\n        this.PLAYBACK_STALLED = 'playbackStalled';\r\n\r\n        /**\r\n         * Sent when playback of the media starts after having been paused;\r\n         * that is, when playback is resumed after a prior pause event.\r\n         *\r\n         * @event MediaPlayerEvents#PLAYBACK_STARTED\r\n         */\r\n        this.PLAYBACK_STARTED = 'playbackStarted';\r\n\r\n        /**\r\n         * The time indicated by the element's currentTime attribute has changed.\r\n         * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED\r\n         */\r\n        this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated';\r\n\r\n        /**\r\n         * Sent when the media playback has stopped because of a temporary lack of data.\r\n         *\r\n         * @event MediaPlayerEvents#PLAYBACK_WAITING\r\n         */\r\n        this.PLAYBACK_WAITING = 'playbackWaiting';\r\n\r\n        /**\r\n         * Manifest validity changed - As a result of an MPD validity expiration event.\r\n         * @event MediaPlayerEvents#MANIFEST_VALIDITY_CHANGED\r\n         */\r\n        this.MANIFEST_VALIDITY_CHANGED = 'manifestValidityChanged';\r\n\r\n        /**\r\n         * A gap occured in the timeline which requires a seek to the next period\r\n         * @event MediaPlayerEvents#GAP_CAUSED_SEEK_TO_PERIOD_END\r\n         */\r\n        this.GAP_CAUSED_SEEK_TO_PERIOD_END = 'gapCausedSeekToPeriodEnd';\r\n    }\r\n}\r\n\r\nlet mediaPlayerEvents = new MediaPlayerEvents();\r\nexport default mediaPlayerEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Constants declaration\r\n * @class\r\n * @ignore\r\n * @hideconstructor\r\n */\r\nclass Constants {\r\n\r\n    init () {\r\n        /**\r\n         *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STREAM = 'stream';\r\n\r\n        /**\r\n         *  @constant {string} VIDEO Video media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VIDEO = 'video';\r\n\r\n        /**\r\n         *  @constant {string} AUDIO Audio media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.AUDIO = 'audio';\r\n\r\n        /**\r\n         *  @constant {string} TEXT Text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TEXT = 'text';\r\n\r\n        /**\r\n         *  @constant {string} FRAGMENTED_TEXT Fragmented text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.FRAGMENTED_TEXT = 'fragmentedText';\r\n\r\n        /**\r\n         *  @constant {string} EMBEDDED_TEXT Embedded text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.EMBEDDED_TEXT = 'embeddedText';\r\n\r\n        /**\r\n         *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MUXED = 'muxed';\r\n\r\n        /**\r\n         *  @constant {string} IMAGE Image media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.IMAGE = 'image';\r\n\r\n        /**\r\n         *  @constant {string} STPP STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STPP = 'stpp';\r\n\r\n        /**\r\n         *  @constant {string} TTML STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TTML = 'ttml';\r\n\r\n        /**\r\n         *  @constant {string} VTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VTT = 'vtt';\r\n\r\n        /**\r\n         *  @constant {string} WVTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.WVTT = 'wvtt';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_BOLA = 'abrBola';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\r\n\r\n        /**\r\n         *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\r\n\r\n        /**\r\n         *  @constant {string} EWMA Exponential moving average\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_EWMA = 'ewma';\r\n\r\n        /**\r\n         *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\r\n\r\n        /**\r\n         *  @constant {string} MISSING_CONFIG_ERROR Missing configuration parameters type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SWITCH_MODE_ALWAYS_REPLACE used to clear the buffered data (prior to current playback position) after track switch. Default for audio\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SWITCH_MODE_NEVER_REPLACE used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_BITRATE makes the player select the track with a highest bitrate. This mode is a default mode.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE this mode makes the player select the track with a widest range of bitrates\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\r\n\r\n        this.LOCATION = 'Location';\r\n        this.INITIALIZE = 'initialize';\r\n        this.TEXT_SHOWING = 'showing';\r\n        this.TEXT_HIDDEN = 'hidden';\r\n        this.CC1 = 'CC1';\r\n        this.CC3 = 'CC3';\r\n        this.UTF8 = 'utf-8';\r\n        this.SCHEME_ID_URI = 'schemeIdUri';\r\n        this.START_TIME = 'starttime';\r\n        this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\r\n        this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\r\n        this.XML = 'XML';\r\n        this.ARRAY_BUFFER = 'ArrayBuffer';\r\n    }\r\n\r\n    constructor () {\r\n        this.init();\r\n    }\r\n}\r\n\r\nconst constants = new Constants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../../core/events/EventsBase';\r\n\r\nclass MetricsReportingEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n\r\n        this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';\r\n        this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';\r\n\r\n        /**\r\n         * Triggered when CMCD data was generated for a HTTP request\r\n         * @event MetricsReportingEvents#CMCD_DATA_GENERATED\r\n         */\r\n        this.CMCD_DATA_GENERATED = 'cmcdDataGenerated';\r\n    }\r\n}\r\n\r\nlet metricsReportingEvents = new MetricsReportingEvents();\r\nexport default metricsReportingEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from '../../core/EventBus';\r\nimport MediaPlayerEvents from '../MediaPlayerEvents';\r\nimport MetricsReportingEvents from '../metrics/MetricsReportingEvents';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport Settings from '../../core/Settings';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\nimport DashManifestModel from '../../dash/models/DashManifestModel';\r\nimport Utils from '../../core/Utils';\r\n\r\nconst CMCD_REQUEST_FIELD_NAME = 'CMCD';\r\nconst CMCD_VERSION = 1;\r\nconst OBJECT_TYPES = {\r\n    MANIFEST: 'm',\r\n    AUDIO: 'a',\r\n    VIDEO: 'v',\r\n    INIT: 'i',\r\n    CAPTION: 'c',\r\n    ISOBMFF_TEXT_TRACK: 'tt',\r\n    ENCRYPTION_KEY: 'k',\r\n    OTHER: 'o'\r\n};\r\nconst STREAMING_FORMATS = {\r\n    DASH: 'd',\r\n    MSS: 's'\r\n};\r\nconst STREAM_TYPES = {\r\n    VOD: 'v',\r\n    LIVE: 'l'\r\n};\r\n\r\nfunction CmcdModel() {\r\n\r\n    let logger,\r\n        dashManifestModel,\r\n        instance,\r\n        internalData,\r\n        abrController,\r\n        dashMetrics,\r\n        playbackController,\r\n        _isStartup,\r\n        _bufferLevelStarved,\r\n        _initialMediaRequestsDone;\r\n\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n    let settings = Settings(context).getInstance();\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        dashManifestModel = DashManifestModel(context).getInstance();\r\n\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    function initialize() {\r\n        eventBus.on(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, instance);\r\n        eventBus.on(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, instance);\r\n        eventBus.on(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\r\n        eventBus.on(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.abrController) {\r\n            abrController = config.abrController;\r\n        }\r\n\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n\r\n        if (config.playbackController) {\r\n            playbackController = config.playbackController;\r\n        }\r\n    }\r\n\r\n    function _resetInitialSettings() {\r\n        internalData = {\r\n            pr: 1,\r\n            nor: null,\r\n            st: null,\r\n            sf: null,\r\n            sid: `${Utils.generateUuid()}`,\r\n            cid: null\r\n        };\r\n        _bufferLevelStarved = {};\r\n        _isStartup = {};\r\n        _initialMediaRequestsDone = {};\r\n    }\r\n\r\n    function getQueryParameter(request) {\r\n        try {\r\n            if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\r\n                const cmcdData = _getCmcdData(request);\r\n                const finalPayloadString = _buildFinalString(cmcdData);\r\n\r\n                eventBus.trigger(MetricsReportingEvents.CMCD_DATA_GENERATED, {\r\n                    url: request.url,\r\n                    mediaType: request.mediaType,\r\n                    cmcdData,\r\n                    cmcdString: finalPayloadString\r\n                });\r\n                return {\r\n                    key: CMCD_REQUEST_FIELD_NAME,\r\n                    value: finalPayloadString\r\n                };\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getCmcdData(request) {\r\n        try {\r\n            let cmcdData = null;\r\n\r\n            if (request.type === HTTPRequest.MPD_TYPE) {\r\n                _setDefaultContentId(request);\r\n                return _getCmcdDataForMpd(request);\r\n            } else if (request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\r\n                _initForMediaType(request.mediaType);\r\n                return _getCmcdDataForMediaSegment(request);\r\n            } else if (request.type === HTTPRequest.INIT_SEGMENT_TYPE) {\r\n                return _getCmcdDataForInitSegment(request);\r\n            } else if (request.type === HTTPRequest.OTHER_TYPE || request.type === HTTPRequest.XLINK_EXPANSION_TYPE) {\r\n                return _getCmcdDataForOther(request);\r\n            }\r\n\r\n            return cmcdData;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _setDefaultContentId(request) {\r\n        try {\r\n            internalData.cid = `${Utils.generateHashCode(request.url)}`;\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _getCmcdDataForMpd() {\r\n        const data = _getGenericCmcdData();\r\n\r\n        data.ot = `${OBJECT_TYPES.MANIFEST}`;\r\n\r\n        return data;\r\n    }\r\n\r\n    function _getCmcdDataForMediaSegment(request) {\r\n        const data = _getGenericCmcdData();\r\n        const encodedBitrate = _getBitrateByRequest(request);\r\n        const d = _getObjectDurationByRequest(request);\r\n        const ot = request.mediaType === 'video' ? `${OBJECT_TYPES.VIDEO}` : request.mediaType === 'audio' ? `${OBJECT_TYPES.AUDIO}` : request.mediaType === 'fragmentedText' ? `${OBJECT_TYPES.CAPTION}` : null;\r\n        const mtp = _getMeasuredThroughputByType(request.mediaType);\r\n        const dl = _getDeadlineByType(request.mediaType);\r\n        const bl = _getBufferLevelByType(request.mediaType);\r\n        const tb = _getTopBitrateByType(request.mediaType);\r\n        const pr = internalData.pr;\r\n\r\n        if (encodedBitrate) {\r\n            data.br = encodedBitrate;\r\n        }\r\n\r\n        if (ot) {\r\n            data.ot = ot;\r\n        }\r\n\r\n        if (!isNaN(d)) {\r\n            data.d = d;\r\n        }\r\n\r\n        if (!isNaN(mtp)) {\r\n            data.mtp = mtp;\r\n        }\r\n\r\n        if (!isNaN(dl)) {\r\n            data.dl = dl;\r\n        }\r\n\r\n        if (!isNaN(bl)) {\r\n            data.bl = bl;\r\n        }\r\n\r\n        if (!isNaN(tb)) {\r\n            data.tb = tb;\r\n        }\r\n\r\n        if (!isNaN(pr) && pr !== 1) {\r\n            data.pr = pr;\r\n        }\r\n\r\n        if (_bufferLevelStarved[request.mediaType]) {\r\n            data.bs = true;\r\n            _bufferLevelStarved[request.mediaType] = false;\r\n        }\r\n\r\n        if (_isStartup[request.mediaType] || !_initialMediaRequestsDone[request.mediaType]) {\r\n            data.su = true;\r\n            _isStartup[request.mediaType] = false;\r\n            _initialMediaRequestsDone[request.mediaType] = true;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function _initForMediaType(mediaType) {\r\n\r\n        if (!_initialMediaRequestsDone.hasOwnProperty(mediaType)) {\r\n            _initialMediaRequestsDone[mediaType] = false;\r\n        }\r\n\r\n        if (!_isStartup.hasOwnProperty(mediaType)) {\r\n            _isStartup[mediaType] = false;\r\n        }\r\n\r\n        if (!_bufferLevelStarved.hasOwnProperty(mediaType)) {\r\n            _bufferLevelStarved[mediaType] = false;\r\n        }\r\n    }\r\n\r\n    function _getCmcdDataForInitSegment() {\r\n        const data = _getGenericCmcdData();\r\n\r\n        data.ot = `${OBJECT_TYPES.INIT}`;\r\n        data.su = true;\r\n\r\n        return data;\r\n    }\r\n\r\n    function _getCmcdDataForOther() {\r\n        const data = _getGenericCmcdData();\r\n\r\n        data.ot = `${OBJECT_TYPES.OTHER}`;\r\n\r\n        return data;\r\n    }\r\n\r\n\r\n    function _getGenericCmcdData() {\r\n        const data = {};\r\n\r\n        data.v = CMCD_VERSION;\r\n        data.sid = settings.get().streaming.cmcd.sid ? settings.get().streaming.cmcd.sid : internalData.sid;\r\n        data.cid = settings.get().streaming.cmcd.cid ? settings.get().streaming.cmcd.cid : internalData.cid;\r\n\r\n        data.sid = `${data.sid}`;\r\n        data.cid = `${data.cid}`;\r\n\r\n        if (!isNaN(internalData.pr) && internalData.pr !== 1 && internalData.pr !== null) {\r\n            data.pr = internalData.pr;\r\n        }\r\n\r\n        if (internalData.st) {\r\n            data.st = internalData.st;\r\n        }\r\n\r\n        if (internalData.sf) {\r\n            data.sf = internalData.sf;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    function _getBitrateByRequest(request) {\r\n        try {\r\n            const quality = request.quality;\r\n            const bitrateList = request.mediaInfo.bitrateList;\r\n\r\n            return parseInt(bitrateList[quality].bandwidth / 1000);\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getTopBitrateByType(mediaType) {\r\n        try {\r\n            const info = abrController.getTopBitrateInfoFor(mediaType);\r\n            return info.bitrate;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getObjectDurationByRequest(request) {\r\n        try {\r\n            return !isNaN(request.duration) ? Math.round(request.duration * 1000) : null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getMeasuredThroughputByType(mediaType) {\r\n        try {\r\n            return parseInt(abrController.getThroughputHistory().getSafeAverageThroughput(mediaType) / 100) * 100;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getDeadlineByType(mediaType) {\r\n        try {\r\n            const playbackRate = internalData.pr;\r\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n\r\n            if (!isNaN(playbackRate) && !isNaN(bufferLevel)) {\r\n                return parseInt((bufferLevel / playbackRate) * 10) * 100;\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _getBufferLevelByType(mediaType) {\r\n        try {\r\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\r\n\r\n            if (!isNaN(bufferLevel)) {\r\n                return parseInt(bufferLevel * 10) * 100;\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function _onPlaybackRateChanged(data) {\r\n        try {\r\n            internalData.pr = data.playbackRate;\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _onManifestLoaded(data) {\r\n        try {\r\n            const isDynamic = dashManifestModel.getIsDynamic(data.data);\r\n            const st = isDynamic ? `${STREAM_TYPES.LIVE}` : `${STREAM_TYPES.VOD}`;\r\n            const sf = data.protocol && data.protocol === 'MSS' ? `${STREAMING_FORMATS.MSS}` : `${STREAMING_FORMATS.DASH}`;\r\n\r\n            internalData.st = `${st}`;\r\n            internalData.sf = `${sf}`;\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    function _onBufferLevelStateChanged(data) {\r\n        try {\r\n            if (data.state && data.mediaType) {\r\n                if (data.state === MediaPlayerEvents.BUFFER_EMPTY) {\r\n\r\n                    if (!_bufferLevelStarved[data.mediaType]) {\r\n                        _bufferLevelStarved[data.mediaType] = true;\r\n                    }\r\n                    if (!_isStartup[data.mediaType]) {\r\n                        _isStartup[data.mediaType] = true;\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    function _onPlaybackSeeked() {\r\n        for (let key in _bufferLevelStarved) {\r\n            if (_bufferLevelStarved.hasOwnProperty(key)) {\r\n                _bufferLevelStarved[key] = true;\r\n            }\r\n        }\r\n\r\n        for (let key in _isStartup) {\r\n            if (_isStartup.hasOwnProperty(key)) {\r\n                _isStartup[key] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _buildFinalString(cmcdData) {\r\n        try {\r\n            if (!cmcdData) {\r\n                return null;\r\n            }\r\n            const keys = Object.keys(cmcdData).sort((a, b) => a > b);\r\n            const length = keys.length;\r\n\r\n            let cmcdString = keys.reduce((acc, key, index) => {\r\n                if (key === 'v' && cmcdData[key] === 1) return acc;\r\n                if (typeof cmcdData[key] === 'string' && (key !== 'ot' || key !== 'sf' || key !== 'st')) {\r\n                    let string = cmcdData[key].replace(/\"/g, '\\\"');\r\n                    acc += `${key}=\"${string}\"`;\r\n                } else {\r\n                    acc += `${key}=${cmcdData[key]}`;\r\n                }\r\n                if (index < length - 1) {\r\n                    acc += ',';\r\n                }\r\n\r\n                return acc;\r\n            }, '');\r\n\r\n            cmcdString = cmcdString.replace(/=true/g, '');\r\n            cmcdString = encodeURIComponent(cmcdString);\r\n\r\n            return cmcdString;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, this);\r\n        eventBus.off(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, this);\r\n        eventBus.off(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\r\n        eventBus.off(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\r\n\r\n        _resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        getQueryParameter,\r\n        setConfig,\r\n        reset,\r\n        initialize\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nCmcdModel.__dashjs_factory_name = 'CmcdModel';\r\nexport default FactoryMaker.getSingletonFactory(CmcdModel);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport FragmentRequest from '../vo/FragmentRequest';\r\n\r\nconst FRAGMENT_MODEL_LOADING = 'loading';\r\nconst FRAGMENT_MODEL_EXECUTED = 'executed';\r\nconst FRAGMENT_MODEL_CANCELED = 'canceled';\r\nconst FRAGMENT_MODEL_FAILED = 'failed';\r\n\r\nfunction FragmentModel(config) {\r\n\r\n    config = config || {};\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const dashMetrics = config.dashMetrics;\r\n    const fragmentLoader = config.fragmentLoader;\r\n    const debug = config.debug;\r\n    const streamInfo = config.streamInfo;\r\n    const type = config.type;\r\n\r\n    let instance,\r\n        logger,\r\n        executedRequests,\r\n        loadingRequests;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        resetInitialSettings();\r\n        eventBus.on(events.LOADING_COMPLETED, onLoadingCompleted, instance);\r\n        eventBus.on(events.LOADING_DATA_PROGRESS, onLoadingInProgress, instance);\r\n        eventBus.on(events.LOADING_ABANDONED, onLoadingAborted, instance);\r\n    }\r\n\r\n    function getStreamId() {\r\n        return streamInfo.id;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function isFragmentLoaded(request) {\r\n        const isEqualComplete = function (req1, req2) {\r\n            return ((req1.action === FragmentRequest.ACTION_COMPLETE) && (req1.action === req2.action));\r\n        };\r\n\r\n        const isEqualMedia = function (req1, req2) {\r\n            return !isNaN(req1.index) && (req1.startTime === req2.startTime) && (req1.adaptationIndex === req2.adaptationIndex) && (req1.type === req2.type);\r\n        };\r\n\r\n        const isEqualInit = function (req1, req2) {\r\n            return isNaN(req1.index) && isNaN(req2.index) && (req1.quality === req2.quality);\r\n        };\r\n\r\n        const check = function (requests) {\r\n            let isLoaded = false;\r\n\r\n            requests.some(req => {\r\n                if (isEqualMedia(request, req) || isEqualInit(request, req) || isEqualComplete(request, req)) {\r\n                    isLoaded = true;\r\n                    return isLoaded;\r\n                }\r\n            });\r\n            return isLoaded;\r\n        };\r\n\r\n        if (!request) {\r\n            return false;\r\n        }\r\n\r\n        return check(executedRequests);\r\n    }\r\n\r\n    function isFragmentLoadedOrPending(request) {\r\n        let isLoaded = false;\r\n        let i = 0;\r\n        let req;\r\n\r\n        // First, check if the fragment has already been loaded\r\n        isLoaded = isFragmentLoaded(request);\r\n\r\n        // Then, check if the fragment is about to be loeaded\r\n        if (!isLoaded) {\r\n            for (i = 0; i < loadingRequests.length; i++) {\r\n                req = loadingRequests[i];\r\n                if ((request.url === req.url) && (request.startTime === req.startTime)) {\r\n                    isLoaded = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isLoaded;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Gets an array of {@link FragmentRequest} objects\r\n     *\r\n     * @param {Object} filter The object with properties by which the method filters the requests to be returned.\r\n     *  the only mandatory property is state, which must be a value from\r\n     *  other properties should match the properties of {@link FragmentRequest}. E.g.:\r\n     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns\r\n     *  all the requests from executedRequests array where requests.quality = filter.quality\r\n     *\r\n     * @returns {Array}\r\n     * @memberof FragmentModel#\r\n     */\r\n    function getRequests(filter) {\r\n        const states = filter ? filter.state instanceof Array ? filter.state : [filter.state] : [];\r\n\r\n        let filteredRequests = [];\r\n        states.forEach(state => {\r\n            const requests = getRequestsForState(state);\r\n            filteredRequests = filteredRequests.concat(filterRequests(requests, filter));\r\n        });\r\n\r\n        return filteredRequests;\r\n    }\r\n\r\n    function getRequestThreshold(req) {\r\n        return isNaN(req.duration) ? 0.25 : Math.min(req.duration / 8, 0.5);\r\n    }\r\n\r\n    function removeExecutedRequestsBeforeTime(time) {\r\n        executedRequests = executedRequests.filter(req => {\r\n            const threshold = getRequestThreshold(req);\r\n            return isNaN(req.startTime) || (time !== undefined ? req.startTime >= time - threshold : false);\r\n        });\r\n    }\r\n\r\n    function removeExecutedRequestsAfterTime(time) {\r\n        executedRequests = executedRequests.filter(req => {\r\n            return isNaN(req.startTime) || (time !== undefined ? req.startTime < time : false);\r\n        });\r\n    }\r\n\r\n    function removeExecutedRequestsInTimeRange(start, end) {\r\n        if (end <= start + 0.5) {\r\n            return;\r\n        }\r\n\r\n        executedRequests = executedRequests.filter(req => {\r\n            const threshold = getRequestThreshold(req);\r\n            return (isNaN(req.startTime) || req.startTime >= (end - threshold)) ||\r\n                (isNaN(req.duration) || (req.startTime + req.duration) <= (start + threshold));\r\n        });\r\n    }\r\n\r\n    // Remove requests that are not \"represented\" by any of buffered ranges\r\n    function syncExecutedRequestsWithBufferedRange(bufferedRanges, streamDuration) {\r\n        if (!bufferedRanges || bufferedRanges.length === 0) {\r\n            removeExecutedRequestsBeforeTime();\r\n            return;\r\n        }\r\n\r\n        let start = 0;\r\n        for (let i = 0, ln = bufferedRanges.length; i < ln; i++) {\r\n            removeExecutedRequestsInTimeRange(start, bufferedRanges.start(i));\r\n            start = bufferedRanges.end(i);\r\n        }\r\n        if (streamDuration > 0) {\r\n            removeExecutedRequestsInTimeRange(start, streamDuration);\r\n        }\r\n    }\r\n\r\n    function abortRequests() {\r\n        logger.debug('abort requests');\r\n        fragmentLoader.abort();\r\n        loadingRequests = [];\r\n    }\r\n\r\n    function executeRequest(request) {\r\n        switch (request.action) {\r\n            case FragmentRequest.ACTION_COMPLETE:\r\n                executedRequests.push(request);\r\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED);\r\n                logger.debug('STREAM_COMPLETED');\r\n                eventBus.trigger(events.STREAM_COMPLETED,\r\n                    { request: request },\r\n                    { streamId: request.mediaInfo.streamInfo.id, mediaType: request.mediaType }\r\n                );\r\n                break;\r\n            case FragmentRequest.ACTION_DOWNLOAD:\r\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING);\r\n                loadingRequests.push(request);\r\n                loadCurrentFragment(request);\r\n                break;\r\n            default:\r\n                logger.warn('Unknown request action.');\r\n        }\r\n    }\r\n\r\n    function loadCurrentFragment(request) {\r\n        eventBus.trigger(events.FRAGMENT_LOADING_STARTED,\r\n            { request: request },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n        fragmentLoader.load(request);\r\n    }\r\n\r\n    function getRequestForTime(arr, time, threshold) {\r\n        // loop through the executed requests and pick the one for which the playback interval matches the given time\r\n        const lastIdx = arr.length - 1;\r\n        for (let i = lastIdx; i >= 0; i--) {\r\n            const req = arr[i];\r\n            const start = req.startTime;\r\n            const end = start + req.duration;\r\n            threshold = !isNaN(threshold) ? threshold : getRequestThreshold(req);\r\n            if ((!isNaN(start) && !isNaN(end) && ((time + threshold) >= start) && ((time - threshold) < end)) || (isNaN(start) && isNaN(time))) {\r\n                return req;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function filterRequests(arr, filter) {\r\n        // for time use a specific filtration function\r\n        if (filter.hasOwnProperty('time')) {\r\n            return [getRequestForTime(arr, filter.time, filter.threshold)];\r\n        }\r\n\r\n        return arr.filter(request => {\r\n            for (const prop in filter) {\r\n                if (prop === 'state') continue;\r\n                if (filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    function getRequestsForState(state) {\r\n        let requests;\r\n        switch (state) {\r\n            case FRAGMENT_MODEL_LOADING:\r\n                requests = loadingRequests;\r\n                break;\r\n            case FRAGMENT_MODEL_EXECUTED:\r\n                requests = executedRequests;\r\n                break;\r\n            default:\r\n                requests = [];\r\n        }\r\n        return requests;\r\n    }\r\n\r\n    function addSchedulingInfoMetrics(request, state) {\r\n        dashMetrics.addSchedulingInfo(request, state);\r\n        dashMetrics.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);\r\n    }\r\n\r\n    function onLoadingCompleted(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        loadingRequests.splice(loadingRequests.indexOf(e.request), 1);\r\n\r\n        if (e.response && !e.error) {\r\n            executedRequests.push(e.request);\r\n        }\r\n\r\n        addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED);\r\n\r\n        eventBus.trigger(events.FRAGMENT_LOADING_COMPLETED,\r\n            {\r\n                request: e.request,\r\n                response: e.response,\r\n                error: e.error,\r\n                sender: this\r\n            },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function onLoadingInProgress(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        eventBus.trigger(events.FRAGMENT_LOADING_PROGRESS,\r\n            {\r\n                request: e.request,\r\n                response: e.response,\r\n                error: e.error,\r\n                sender: this\r\n            },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function onLoadingAborted(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        eventBus.trigger(events.FRAGMENT_LOADING_ABANDONED,\r\n            { request: e.request },\r\n            { streamId: streamInfo.id, mediaType: type }\r\n        );\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        executedRequests = [];\r\n        loadingRequests = [];\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.LOADING_COMPLETED, onLoadingCompleted, this);\r\n        eventBus.off(events.LOADING_DATA_PROGRESS, onLoadingInProgress, this);\r\n        eventBus.off(events.LOADING_ABANDONED, onLoadingAborted, this);\r\n\r\n        if (fragmentLoader) {\r\n            fragmentLoader.reset();\r\n        }\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function addExecutedRequest(request) {\r\n        executedRequests.push(request);\r\n    }\r\n\r\n    instance = {\r\n        getStreamId: getStreamId,\r\n        getType: getType,\r\n        getRequests: getRequests,\r\n        isFragmentLoaded: isFragmentLoaded,\r\n        isFragmentLoadedOrPending: isFragmentLoadedOrPending,\r\n        removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,\r\n        removeExecutedRequestsAfterTime: removeExecutedRequestsAfterTime,\r\n        syncExecutedRequestsWithBufferedRange: syncExecutedRequestsWithBufferedRange,\r\n        abortRequests: abortRequests,\r\n        executeRequest: executeRequest,\r\n        reset: reset,\r\n        addExecutedRequest: addExecutedRequest\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nFragmentModel.__dashjs_factory_name = 'FragmentModel';\r\nconst factory = FactoryMaker.getClassFactory(FragmentModel);\r\nfactory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING;\r\nfactory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED;\r\nfactory.FRAGMENT_MODEL_CANCELED = FRAGMENT_MODEL_CANCELED;\r\nfactory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED;\r\nFactoryMaker.updateClassFactory(FragmentModel.__dashjs_factory_name, factory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * @module FetchLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP using fetch.\r\n * @param {Object} cfg - dependencies from parent\r\n */\r\nfunction FetchLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const requestModifier = cfg.requestModifier;\r\n    const boxParser = cfg.boxParser;\r\n\r\n    let instance;\r\n\r\n    function load(httpRequest) {\r\n\r\n        // Variables will be used in the callback functions\r\n        const requestStartTime = new Date();\r\n        const request = httpRequest.request;\r\n\r\n        const headers = new Headers(); /*jshint ignore:line*/\r\n        if (request.range) {\r\n            headers.append('Range', 'bytes=' + request.range);\r\n        }\r\n\r\n        if (!request.requestStartDate) {\r\n            request.requestStartDate = requestStartTime;\r\n        }\r\n\r\n        if (requestModifier) {\r\n            // modifyRequestHeader expects a XMLHttpRequest object so,\r\n            // to keep backward compatibility, we should expose a setRequestHeader method\r\n            // TODO: Remove RequestModifier dependency on XMLHttpRequest object and define\r\n            // a more generic way to intercept/modify requests\r\n            requestModifier.modifyRequestHeader({\r\n                setRequestHeader: function (header, value) {\r\n                    headers.append(header, value);\r\n                }\r\n            });\r\n        }\r\n\r\n        let abortController;\r\n        if (typeof window.AbortController === 'function') {\r\n            abortController = new AbortController(); /*jshint ignore:line*/\r\n            httpRequest.abortController = abortController;\r\n            abortController.signal.onabort = httpRequest.onabort;\r\n        }\r\n\r\n        const reqOptions = {\r\n            method: httpRequest.method,\r\n            headers: headers,\r\n            credentials: httpRequest.withCredentials ? 'include' : undefined,\r\n            signal: abortController ? abortController.signal : undefined\r\n        };\r\n\r\n        fetch(httpRequest.url, reqOptions).then(function (response) {\r\n            if (!httpRequest.response) {\r\n                httpRequest.response = {};\r\n            }\r\n            httpRequest.response.status = response.status;\r\n            httpRequest.response.statusText = response.statusText;\r\n            httpRequest.response.responseURL = response.url;\r\n\r\n            if (!response.ok) {\r\n                httpRequest.onerror();\r\n            }\r\n\r\n            let responseHeaders = '';\r\n            for (const key of response.headers.keys()) {\r\n                responseHeaders += key + ': ' + response.headers.get(key) + '\\r\\n';\r\n            }\r\n            httpRequest.response.responseHeaders = responseHeaders;\r\n\r\n            if (!response.body) {\r\n                // Fetch returning a ReadableStream response body is not currently supported by all browsers.\r\n                // Browser compatibility: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n                // If it is not supported, returning the whole segment when it's ready (as xhr)\r\n                return response.arrayBuffer().then(function (buffer) {\r\n                    httpRequest.response.response = buffer;\r\n                    const event = {\r\n                        loaded: buffer.byteLength,\r\n                        total: buffer.byteLength,\r\n                        stream: false\r\n                    };\r\n                    httpRequest.progress(event);\r\n                    httpRequest.onload();\r\n                    httpRequest.onend();\r\n                    return;\r\n                });\r\n            }\r\n\r\n            const totalBytes = parseInt(response.headers.get('Content-Length'), 10);\r\n            let bytesReceived = 0;\r\n            let signaledFirstByte = false;\r\n            let remaining = new Uint8Array();\r\n            let offset = 0;\r\n\r\n            httpRequest.reader = response.body.getReader();\r\n            let downLoadedData = [];\r\n\r\n            const processResult = function ({value, done}) {\r\n                if (done) {\r\n                    if (remaining) {\r\n                        // If there is pending data, call progress so network metrics\r\n                        // are correctly generated\r\n                        // Same structure as https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress\r\n                        httpRequest.progress({\r\n                            loaded: bytesReceived,\r\n                            total: isNaN(totalBytes) ? bytesReceived : totalBytes,\r\n                            lengthComputable: true,\r\n                            time: calculateDownloadedTime(downLoadedData, bytesReceived),\r\n                            stream: true\r\n                        });\r\n\r\n                        httpRequest.response.response = remaining.buffer;\r\n                    }\r\n                    httpRequest.onload();\r\n                    httpRequest.onend();\r\n                    return;\r\n                }\r\n\r\n                if (value && value.length > 0) {\r\n                    remaining = concatTypedArray(remaining, value);\r\n                    bytesReceived += value.length;\r\n                    downLoadedData.push({\r\n                        ts: Date.now(),\r\n                        bytes: value.length\r\n                    });\r\n\r\n                    const boxesInfo = boxParser.findLastTopIsoBoxCompleted(['moov', 'mdat'], remaining, offset);\r\n                    if (boxesInfo.found) {\r\n                        const end = boxesInfo.lastCompletedOffset + boxesInfo.size;\r\n\r\n                        // If we are going to pass full buffer, avoid copying it and pass\r\n                        // complete buffer. Otherwise clone the part of the buffer that is completed\r\n                        // and adjust remaining buffer. A clone is needed because ArrayBuffer of a typed-array\r\n                        // keeps a reference to the original data\r\n                        let data;\r\n                        if (end === remaining.length) {\r\n                            data = remaining;\r\n                            remaining = new Uint8Array();\r\n                        } else {\r\n                            data = new Uint8Array(remaining.subarray(0, end));\r\n                            remaining = remaining.subarray(end);\r\n                        }\r\n\r\n                        // Announce progress but don't track traces. Throughput measures are quite unstable\r\n                        // when they are based in small amount of data\r\n                        httpRequest.progress({\r\n                            data: data.buffer,\r\n                            lengthComputable: false,\r\n                            noTrace: true\r\n                        });\r\n\r\n                        offset = 0;\r\n                    } else {\r\n                        offset = boxesInfo.lastCompletedOffset;\r\n\r\n                        // Call progress so it generates traces that will be later used to know when the first byte\r\n                        // were received\r\n                        if (!signaledFirstByte) {\r\n                            httpRequest.progress({\r\n                                lengthComputable: false,\r\n                                noTrace: true\r\n                            });\r\n                            signaledFirstByte = true;\r\n                        }\r\n                    }\r\n                }\r\n                read(httpRequest, processResult);\r\n            };\r\n\r\n            read(httpRequest, processResult);\r\n        })\r\n            .catch(function (e) {\r\n                if (httpRequest.onerror) {\r\n                    httpRequest.onerror(e);\r\n                }\r\n            });\r\n    }\r\n\r\n    function read(httpRequest, processResult) {\r\n        httpRequest.reader.read()\r\n            .then(processResult)\r\n            .catch(function (e) {\r\n                if (httpRequest.onerror && httpRequest.response.status === 200) {\r\n                    // Error, but response code is 200, trigger error\r\n                    httpRequest.onerror(e);\r\n                }\r\n            });\r\n    }\r\n\r\n    function concatTypedArray(remaining, data) {\r\n        if (remaining.length === 0) {\r\n            return data;\r\n        }\r\n        const result = new Uint8Array(remaining.length + data.length);\r\n        result.set(remaining);\r\n        result.set(data, remaining.length);\r\n        return result;\r\n    }\r\n\r\n    function abort(request) {\r\n        if (request.abortController) {\r\n            // For firefox and edge\r\n            request.abortController.abort();\r\n        } else if (request.reader) {\r\n            // For Chrome\r\n            try {\r\n                request.reader.cancel();\r\n                request.onabort();\r\n            } catch (e) {\r\n                // throw exceptions (TypeError) when reader was previously closed,\r\n                // for example, because a network issue\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateDownloadedTime(datum, bytesReceived) {\r\n        datum = datum.filter(data => data.bytes > ((bytesReceived / 4) / datum.length));\r\n        if (datum.length > 1) {\r\n            let time = 0;\r\n            const avgTimeDistance = (datum[datum.length - 1].ts - datum[0].ts) / datum.length;\r\n            datum.forEach((data, index) => {\r\n                // To be counted the data has to be over a threshold\r\n                const next = datum[index + 1];\r\n                if (next) {\r\n                    const distance = next.ts - data.ts;\r\n                    time += distance < avgTimeDistance ? distance : 0;\r\n                }\r\n            });\r\n            return time;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort,\r\n        calculateDownloadedTime: calculateDownloadedTime\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nFetchLoader.__dashjs_factory_name = 'FetchLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(FetchLoader);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport XHRLoader from './XHRLoader';\r\nimport FetchLoader from './FetchLoader';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport CmcdModel from '../models/CmcdModel';\r\nimport Utils from '../../core/Utils';\r\n\r\n/**\r\n * @module HTTPLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP.\r\n * @param {Object} cfg - dependancies from parent\r\n */\r\nfunction HTTPLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n\r\n    const context = this.context;\r\n    const errHandler = cfg.errHandler;\r\n    const dashMetrics = cfg.dashMetrics;\r\n    const mediaPlayerModel = cfg.mediaPlayerModel;\r\n    const requestModifier = cfg.requestModifier;\r\n    const boxParser = cfg.boxParser;\r\n    const useFetch = cfg.useFetch || false;\r\n    const errors = cfg.errors;\r\n\r\n    let instance,\r\n        requests,\r\n        delayedRequests,\r\n        retryRequests,\r\n        downloadErrorToRequestTypeMap,\r\n        cmcdModel;\r\n\r\n    function setup() {\r\n        requests = [];\r\n        delayedRequests = [];\r\n        retryRequests = [];\r\n        cmcdModel = CmcdModel(context).getInstance();\r\n\r\n        downloadErrorToRequestTypeMap = {\r\n            [HTTPRequest.MPD_TYPE]: errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE,\r\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: errors.DOWNLOAD_ERROR_ID_XLINK_CODE,\r\n            [HTTPRequest.INIT_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE,\r\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.OTHER_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE\r\n        };\r\n    }\r\n\r\n    function internalLoad(config, remainingAttempts) {\r\n        const request = config.request;\r\n        const traces = [];\r\n        let firstProgress = true;\r\n        let needFailureReport = true;\r\n        let requestStartTime = new Date();\r\n        let lastTraceTime = requestStartTime;\r\n        let lastTraceReceivedCount = 0;\r\n        let httpRequest;\r\n\r\n        if (!requestModifier || !dashMetrics || !errHandler) {\r\n            throw new Error('config object is not correct or missing');\r\n        }\r\n\r\n        const handleLoaded = function (success) {\r\n            needFailureReport = false;\r\n\r\n            request.requestStartDate = requestStartTime;\r\n            request.requestEndDate = new Date();\r\n            request.firstByteDate = request.firstByteDate || requestStartTime;\r\n\r\n            if (!request.checkExistenceOnly) {\r\n                dashMetrics.addHttpRequest(request, httpRequest.response ? httpRequest.response.responseURL : null,\r\n                    httpRequest.response ? httpRequest.response.status : null,\r\n                    httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() :\r\n                        httpRequest.response ? httpRequest.response.responseHeaders : [],\r\n                    success ? traces : null);\r\n\r\n                if (request.type === HTTPRequest.MPD_TYPE) {\r\n                    dashMetrics.addManifestUpdate(request.type, request.requestStartDate, request.requestEndDate);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onloadend = function () {\r\n            if (requests.indexOf(httpRequest) === -1) {\r\n                return;\r\n            } else {\r\n                requests.splice(requests.indexOf(httpRequest), 1);\r\n            }\r\n\r\n            if (needFailureReport) {\r\n                handleLoaded(false);\r\n\r\n                if (remainingAttempts > 0) {\r\n                    remainingAttempts--;\r\n                    let retryRequest = {config: config};\r\n                    retryRequests.push(retryRequest);\r\n                    retryRequest.timeout = setTimeout(function () {\r\n                        if (retryRequests.indexOf(retryRequest) === -1) {\r\n                            return;\r\n                        } else {\r\n                            retryRequests.splice(retryRequests.indexOf(retryRequest), 1);\r\n                        }\r\n                        internalLoad(config, remainingAttempts);\r\n                    }, mediaPlayerModel.getRetryIntervalsForType(request.type));\r\n                } else {\r\n                    errHandler.error(new DashJSError(downloadErrorToRequestTypeMap[request.type], request.url + ' is not available', {\r\n                        request: request,\r\n                        response: httpRequest.response\r\n                    }));\r\n\r\n                    if (config.error) {\r\n                        config.error(request, 'error', httpRequest.response.statusText);\r\n                    }\r\n\r\n                    if (config.complete) {\r\n                        config.complete(request, httpRequest.response.statusText);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const progress = function (event) {\r\n            const currentTime = new Date();\r\n\r\n            if (firstProgress) {\r\n                firstProgress = false;\r\n                if (!event.lengthComputable ||\r\n                    (event.lengthComputable && event.total !== event.loaded)) {\r\n                    request.firstByteDate = currentTime;\r\n                }\r\n            }\r\n\r\n            if (event.lengthComputable) {\r\n                request.bytesLoaded = event.loaded;\r\n                request.bytesTotal = event.total;\r\n            }\r\n\r\n            if (!event.noTrace) {\r\n                traces.push({\r\n                    s: lastTraceTime,\r\n                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),\r\n                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]\r\n                });\r\n\r\n                lastTraceTime = currentTime;\r\n                lastTraceReceivedCount = event.loaded;\r\n            }\r\n\r\n            if (config.progress && event) {\r\n                config.progress(event);\r\n            }\r\n        };\r\n\r\n        const onload = function () {\r\n            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {\r\n                handleLoaded(true);\r\n\r\n                if (config.success) {\r\n                    config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);\r\n                }\r\n\r\n                if (config.complete) {\r\n                    config.complete(request, httpRequest.response.statusText);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onabort = function () {\r\n            if (config.abort) {\r\n                config.abort(request);\r\n            }\r\n        };\r\n\r\n        let loader;\r\n        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\r\n            loader = FetchLoader(context).create({\r\n                requestModifier: requestModifier,\r\n                boxParser: boxParser\r\n            });\r\n        } else {\r\n            loader = XHRLoader(context).create({\r\n                requestModifier: requestModifier\r\n            });\r\n        }\r\n\r\n        let modifiedUrl = requestModifier.modifyRequestURL(request.url);\r\n        const additionalQueryParameter = _getAdditionalQueryParameter(request);\r\n        modifiedUrl = Utils.addAditionalQueryParameterToUrl(modifiedUrl, additionalQueryParameter);\r\n        const verb = request.checkExistenceOnly ? HTTPRequest.HEAD : HTTPRequest.GET;\r\n        const withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);\r\n\r\n\r\n        httpRequest = {\r\n            url: modifiedUrl,\r\n            method: verb,\r\n            withCredentials: withCredentials,\r\n            request: request,\r\n            onload: onload,\r\n            onend: onloadend,\r\n            onerror: onloadend,\r\n            progress: progress,\r\n            onabort: onabort,\r\n            loader: loader\r\n        };\r\n\r\n        // Adds the ability to delay single fragment loading time to control buffer.\r\n        let now = new Date().getTime();\r\n        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {\r\n            // no delay - just send\r\n            requests.push(httpRequest);\r\n            loader.load(httpRequest);\r\n        } else {\r\n            // delay\r\n            let delayedRequest = {httpRequest: httpRequest};\r\n            delayedRequests.push(delayedRequest);\r\n            delayedRequest.delayTimeout = setTimeout(function () {\r\n                if (delayedRequests.indexOf(delayedRequest) === -1) {\r\n                    return;\r\n                } else {\r\n                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);\r\n                }\r\n                try {\r\n                    requestStartTime = new Date();\r\n                    lastTraceTime = requestStartTime;\r\n                    requests.push(delayedRequest.httpRequest);\r\n                    loader.load(delayedRequest.httpRequest);\r\n                } catch (e) {\r\n                    delayedRequest.httpRequest.onerror();\r\n                }\r\n            }, (request.delayLoadingTime - now));\r\n        }\r\n    }\r\n\r\n    function _getAdditionalQueryParameter(request) {\r\n        try {\r\n            const additionalQueryParameter = [];\r\n            const cmcdQueryParameter = cmcdModel.getQueryParameter(request);\r\n\r\n            if (cmcdQueryParameter) {\r\n                additionalQueryParameter.push(cmcdQueryParameter);\r\n            }\r\n\r\n            return additionalQueryParameter;\r\n        } catch (e) {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates a download of the resource described by config.request\r\n     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks\r\n     * @memberof module:HTTPLoader\r\n     * @instance\r\n     */\r\n    function load(config) {\r\n        if (config.request) {\r\n            internalLoad(\r\n                config,\r\n                mediaPlayerModel.getRetryAttemptsForType(\r\n                    config.request.type\r\n                )\r\n            );\r\n        } else {\r\n            if (config.error) {\r\n                config.error(config.request, 'error');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Aborts any inflight downloads\r\n     * @memberof module:HTTPLoader\r\n     * @instance\r\n     */\r\n    function abort() {\r\n        retryRequests.forEach(t => {\r\n            clearTimeout(t.timeout);\r\n            // abort request in order to trigger LOADING_ABANDONED event\r\n            if (t.config.request && t.config.abort) {\r\n                t.config.abort(t.config.request);\r\n            }\r\n        });\r\n        retryRequests = [];\r\n\r\n        delayedRequests.forEach(x => clearTimeout(x.delayTimeout));\r\n        delayedRequests = [];\r\n\r\n        requests.forEach(x => {\r\n            // abort will trigger onloadend which we don't want\r\n            // when deliberately aborting inflight requests -\r\n            // set them to undefined so they are not called\r\n            x.onloadend = x.onerror = x.onprogress = undefined;\r\n            x.loader.abort(x);\r\n        });\r\n        requests = [];\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nHTTPLoader.__dashjs_factory_name = 'HTTPLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(HTTPLoader);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport HTTPLoader from '../../streaming/net/HTTPLoader';\r\n\r\n/**\r\n * @module\r\n * @description Choose right url loader for scheme\r\n * @ignore\r\n */\r\nfunction SchemeLoaderFactory() {\r\n\r\n    let instance;\r\n\r\n    let schemeLoaderMap;\r\n\r\n    function registerLoader(scheme, loader) {\r\n        schemeLoaderMap[scheme] = loader;\r\n    }\r\n\r\n    function unregisterLoader(scheme) {\r\n        if (schemeLoaderMap[scheme]) {\r\n            delete schemeLoaderMap[scheme];\r\n        }\r\n    }\r\n\r\n    function unregisterAllLoader() {\r\n        schemeLoaderMap = {};\r\n    }\r\n\r\n    function getLoader(url) {\r\n\r\n        // iterates through schemeLoaderMap to find a loader for the scheme\r\n        for (var scheme in schemeLoaderMap) {\r\n            if (schemeLoaderMap.hasOwnProperty(scheme) && url.startsWith(scheme)) {\r\n                return schemeLoaderMap[scheme];\r\n            }\r\n        }\r\n\r\n        return HTTPLoader;\r\n    }\r\n\r\n    function reset() {\r\n        unregisterAllLoader();\r\n    }\r\n\r\n    function setup() {\r\n        reset();\r\n    }\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        getLoader: getLoader,\r\n        registerLoader: registerLoader,\r\n        unregisterLoader: unregisterLoader,\r\n        unregisterAllLoader: unregisterAllLoader,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nSchemeLoaderFactory.__dashjs_factory_name = 'SchemeLoaderFactory';\r\nconst factory = FactoryMaker.getSingletonFactory(SchemeLoaderFactory);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport SchemeLoaderFactory from '../../streaming/net/SchemeLoaderFactory';\r\n\r\n/**\r\n * @class URLLoader\r\n * @description  Call Offline Loader or Online Loader dependaing on URL\r\n * @param {Object} cfg - dependances\r\n * @ignore\r\n*/\r\nfunction URLLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        schemeLoaderFactory,\r\n        loader;\r\n\r\n    schemeLoaderFactory = SchemeLoaderFactory(context).getInstance();\r\n\r\n    function load(config) {\r\n\r\n        let loaderFactory = schemeLoaderFactory.getLoader(config && config.request ? config.request.url : null);\r\n        loader = loaderFactory(context).create({\r\n            errHandler: cfg.errHandler,\r\n            mediaPlayerModel: cfg.mediaPlayerModel,\r\n            requestModifier: cfg.requestModifier,\r\n            useFetch: cfg.useFetch || null,\r\n            dashMetrics: cfg.dashMetrics,\r\n            boxParser: cfg.boxParser ? cfg.boxParser : null,\r\n            constants: cfg.constants ? cfg.constants : null,\r\n            dashConstants: cfg.dashConstants ? cfg.dashConstants : null,\r\n            urlUtils: cfg.urlUtils ? cfg.urlUtils : null,\r\n            errors: cfg.errors\r\n        });\r\n\r\n        loader.load(config);\r\n    }\r\n\r\n    function abort() {\r\n        if (loader) {\r\n            loader.abort();\r\n        }\r\n    }\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    return instance;\r\n\r\n}\r\nURLLoader.__dashjs_factory_name = 'URLLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(URLLoader);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * @module XHRLoader\r\n * @ignore\r\n * @description Manages download of resources via HTTP.\r\n * @param {Object} cfg - dependencies from parent\r\n */\r\nfunction XHRLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const requestModifier = cfg.requestModifier;\r\n\r\n    let instance;\r\n\r\n    function load(httpRequest) {\r\n\r\n        // Variables will be used in the callback functions\r\n        const requestStartTime = new Date();\r\n        const request = httpRequest.request;\r\n\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(httpRequest.method, httpRequest.url, true);\r\n\r\n        if (request.responseType) {\r\n            xhr.responseType = request.responseType;\r\n        }\r\n\r\n        if (request.range) {\r\n            xhr.setRequestHeader('Range', 'bytes=' + request.range);\r\n        }\r\n\r\n        if (!request.requestStartDate) {\r\n            request.requestStartDate = requestStartTime;\r\n        }\r\n\r\n        if (requestModifier) {\r\n            xhr = requestModifier.modifyRequestHeader(xhr);\r\n        }\r\n\r\n        xhr.withCredentials = httpRequest.withCredentials;\r\n\r\n        xhr.onload = httpRequest.onload;\r\n        xhr.onloadend = httpRequest.onend;\r\n        xhr.onerror = httpRequest.onerror;\r\n        xhr.onprogress = httpRequest.progress;\r\n        xhr.onabort = httpRequest.onabort;\r\n\r\n        xhr.send();\r\n\r\n        httpRequest.response = xhr;\r\n    }\r\n\r\n    function abort(request) {\r\n        const x = request.response;\r\n        x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.\r\n        x.abort();\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nXHRLoader.__dashjs_factory_name = 'XHRLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(XHRLoader);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport DashConstants from '../../dash/constants/DashConstants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\r\nimport URLUtils from '../../streaming/utils/URLUtils';\r\nimport { replaceIDForTemplate, getTimeBasedSegment } from '../../dash/utils/SegmentsUtils';\r\nimport Events from '../../core/events/Events';\r\nimport BoxParser from '../../streaming/utils/BoxParser';\r\nimport XHRLoader from '../../streaming/net/XHRLoader';\r\nimport DashHandler from '../../dash/DashHandler';\r\n\r\nexport const THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile',\r\n                                   'http://dashif.org/guidelines/thumbnail_tile'];\r\n\r\nfunction ThumbnailTracks(config) {\r\n    const context = this.context;\r\n    const adapter = config.adapter;\r\n    const baseURLController = config.baseURLController;\r\n    const streamInfo = config.streamInfo;\r\n    const timelineConverter = config.timelineConverter;\r\n    const debug = config.debug;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const dashConstants = config.dashConstants;\r\n\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        tracks,\r\n        indexHandler,\r\n        currentTrackIndex,\r\n        mediaInfo,\r\n        loader,\r\n        boxParser;\r\n\r\n    function initialize() {\r\n        reset();\r\n        loader = XHRLoader(context).create({});\r\n        boxParser = BoxParser(context).getInstance();\r\n\r\n        indexHandler = DashHandler(context).create({\r\n            streamInfo: streamInfo,\r\n            timelineConverter: timelineConverter,\r\n            baseURLController: baseURLController,\r\n            debug: debug,\r\n            eventBus: eventBus,\r\n            events: events,\r\n            dashConstants: dashConstants,\r\n            urlUtils: urlUtils\r\n        });\r\n\r\n        // initialize controllers\r\n        indexHandler.initialize(adapter ? adapter.getIsDynamic() : false);\r\n\r\n        // parse representation and create tracks\r\n        addTracks();\r\n    }\r\n\r\n    function normalizeSegments(fragments, representation) {\r\n        const segments = [];\r\n        let count = 0;\r\n\r\n        let i,\r\n            len,\r\n            s,\r\n            seg;\r\n\r\n        for (i = 0, len = fragments.length; i < len; i++) {\r\n            s = fragments[i];\r\n\r\n            seg = getTimeBasedSegment(\r\n                timelineConverter,\r\n                adapter.getIsDynamic(),\r\n                representation,\r\n                s.startTime,\r\n                s.duration,\r\n                s.timescale,\r\n                s.media,\r\n                s.mediaRange,\r\n                count);\r\n\r\n            if (seg) {\r\n                segments.push(seg);\r\n                seg = null;\r\n                count++;\r\n            }\r\n        }\r\n        return segments;\r\n    }\r\n\r\n    function addTracks() {\r\n        if (!streamInfo || !adapter) {\r\n            return;\r\n        }\r\n\r\n        // Extract thumbnail tracks\r\n        mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\r\n        if (!mediaInfo) {\r\n            return;\r\n        }\r\n\r\n        const voReps = adapter.getVoRepresentations(mediaInfo);\r\n\r\n        if (voReps && voReps.length > 0) {\r\n            voReps.forEach((rep) => {\r\n                if ((rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media) ||\r\n                     rep.segmentInfoType === DashConstants.SEGMENT_TIMELINE) {\r\n                    createTrack(rep);\r\n                }\r\n                if (rep.segmentInfoType === DashConstants.SEGMENT_BASE) {\r\n                    createTrack(rep, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (tracks.length > 0) {\r\n            // Sort bitrates and select the lowest bitrate rendition\r\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\r\n            currentTrackIndex = tracks.length - 1;\r\n        }\r\n    }\r\n\r\n    function createTrack(representation, useSegmentBase) {\r\n        const track = new ThumbnailTrackInfo();\r\n        track.id = representation.id;\r\n        track.bitrate = representation.bandwidth;\r\n        track.width = representation.width;\r\n        track.height = representation.height;\r\n        track.tilesHor = 1;\r\n        track.tilesVert = 1;\r\n\r\n        if (representation.essentialProperties) {\r\n            representation.essentialProperties.forEach((p) => {\r\n                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\r\n                    const vars = p.value.split('x');\r\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\r\n                        track.tilesHor = parseInt(vars[0], 10);\r\n                        track.tilesVert = parseInt(vars[1], 10);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (useSegmentBase) {\r\n            eventBus.trigger(Events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\r\n                streamId: streamInfo.id,\r\n                mediaType: Constants.IMAGE,\r\n                mimeType: mediaInfo.mimeType,\r\n                representation: representation,\r\n                callback: function (streamId, mediaType, segments, representation) {\r\n                    let cache = [];\r\n                    segments = normalizeSegments(segments, representation);\r\n                    track.segmentDuration = segments[0].duration; //assume all segments have the same duration\r\n                    track.readThumbnail = function (time, callback) {\r\n\r\n                        let cached = null;\r\n                        cache.some(el => {\r\n                            if (el.start <= time && el.end > time) {\r\n                                cached = el.url;\r\n                                return true;\r\n                            }\r\n                        });\r\n                        if (cached) {\r\n                            callback(cached);\r\n                        } else {\r\n                            segments.some((ss) => {\r\n                                if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\r\n                                    const baseURL = baseURLController.resolve(representation.path);\r\n                                    loader.load({\r\n                                        method: 'get',\r\n                                        url: baseURL.url,\r\n                                        request: {\r\n                                            range: ss.mediaRange,\r\n                                            responseType: 'arraybuffer'\r\n                                        },\r\n                                        onload: function (e) {\r\n                                            let info = boxParser.getSamplesInfo(e.target.response);\r\n                                            let blob = new Blob( [ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], { type: 'image/jpeg' } );\r\n                                            let imageUrl = window.URL.createObjectURL( blob );\r\n                                            cache.push({\r\n                                                start: ss.mediaStartTime,\r\n                                                end: ss.mediaStartTime + ss.duration,\r\n                                                url: imageUrl\r\n                                            });\r\n                                            if (callback)\r\n                                                callback(imageUrl);\r\n                                        }\r\n                                    });\r\n                                    return true;\r\n                                }\r\n                            });\r\n                        }\r\n                    };\r\n                }\r\n            });\r\n        } else {\r\n            track.startNumber = representation.startNumber;\r\n            track.segmentDuration = representation.segmentDuration;\r\n            track.timescale = representation.timescale;\r\n            track.templateUrl = buildTemplateUrl(representation);\r\n        }\r\n\r\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\r\n            // Precalculate width and heigth per tile for perf reasons\r\n            track.widthPerTile = track.width / track.tilesHor;\r\n            track.heightPerTile = track.height / track.tilesVert;\r\n            tracks.push(track);\r\n        }\r\n    }\r\n\r\n    function buildTemplateUrl(representation) {\r\n        const templateUrl = urlUtils.isRelative(representation.media) ?\r\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\r\n\r\n        if (!templateUrl) {\r\n            return '';\r\n        }\r\n\r\n        return replaceIDForTemplate(templateUrl, representation.id);\r\n    }\r\n\r\n    function getTracks() {\r\n        return tracks;\r\n    }\r\n\r\n    function getCurrentTrackIndex() {\r\n        return currentTrackIndex;\r\n    }\r\n\r\n    function getCurrentTrack() {\r\n        if (currentTrackIndex < 0) {\r\n            return null;\r\n        }\r\n        return tracks[currentTrackIndex];\r\n    }\r\n\r\n    function setTrackByIndex(index) {\r\n        if (!tracks || tracks.length === 0) {\r\n            return;\r\n        }\r\n        // select highest bitrate in case selected index is higher than bitrate list length\r\n        if (index >= tracks.length) {\r\n            index = tracks.length - 1;\r\n        }\r\n        currentTrackIndex = index;\r\n    }\r\n\r\n    function getThumbnailRequestForTime(time) {\r\n        let currentVoRep;\r\n        const voReps = adapter.getVoRepresentations(mediaInfo);\r\n        for (let i = 0; i < voReps.length; i++) {\r\n            if (tracks[currentTrackIndex].id === voReps[i].id) {\r\n                currentVoRep = voReps[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return indexHandler.getSegmentRequestForTime(mediaInfo, currentVoRep, time);\r\n    }\r\n\r\n    function reset() {\r\n        tracks = [];\r\n        currentTrackIndex = -1;\r\n        mediaInfo = null;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getTracks: getTracks,\r\n        reset: reset,\r\n        setTrackByIndex: setTrackByIndex,\r\n        getCurrentTrack: getCurrentTrack,\r\n        getCurrentTrackIndex: getCurrentTrackIndex,\r\n        getThumbnailRequestForTime: getThumbnailRequestForTime\r\n    };\r\n\r\n    initialize();\r\n\r\n    return instance;\r\n}\r\n\r\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\r\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport Debug from '../../core/Debug';\r\nimport IsoFile from './IsoFile';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ISOBoxer from 'codem-isoboxer';\r\n\r\nimport IsoBoxSearchInfo from '../vo/IsoBoxSearchInfo';\r\n\r\nfunction BoxParser(/*config*/) {\r\n\r\n    let logger,\r\n        instance;\r\n    let context = this.context;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    /**\r\n     * @param {ArrayBuffer} data\r\n     * @returns {IsoFile|null}\r\n     * @memberof BoxParser#\r\n     */\r\n    function parse(data) {\r\n        if (!data) return null;\r\n\r\n        if (data.fileStart === undefined) {\r\n            data.fileStart = 0;\r\n        }\r\n\r\n        let parsedFile = ISOBoxer.parseBuffer(data);\r\n        let dashIsoFile = IsoFile(context).create();\r\n\r\n        dashIsoFile.setData(parsedFile);\r\n\r\n        return dashIsoFile;\r\n    }\r\n\r\n    /**\r\n     * From the list of type boxes to look for, returns the latest one that is fully completed (header + payload). This\r\n     * method only looks into the list of top boxes and doesn't analyze nested boxes.\r\n     * @param {string[]} types\r\n     * @param {ArrayBuffer|uint8Array} buffer\r\n     * @param {number} offset\r\n     * @returns {IsoBoxSearchInfo}\r\n     * @memberof BoxParser#\r\n     */\r\n    function findLastTopIsoBoxCompleted(types, buffer, offset) {\r\n        if (offset === undefined) {\r\n            offset = 0;\r\n        }\r\n\r\n        // 8 = size (uint32) + type (4 characters)\r\n        if (!buffer || offset + 8 >= buffer.byteLength) {\r\n            return new IsoBoxSearchInfo(0, false);\r\n        }\r\n\r\n        const data = (buffer instanceof ArrayBuffer) ? new Uint8Array(buffer) : buffer;\r\n        let boxInfo;\r\n        let lastCompletedOffset = 0;\r\n        while (offset < data.byteLength) {\r\n            const boxSize = parseUint32(data, offset);\r\n            const boxType = parseIsoBoxType(data, offset + 4);\r\n\r\n            if (boxSize === 0) {\r\n                break;\r\n            }\r\n\r\n            if (offset + boxSize <= data.byteLength) {\r\n                if (types.indexOf(boxType) >= 0) {\r\n                    boxInfo = new IsoBoxSearchInfo(offset, true, boxSize);\r\n                } else {\r\n                    lastCompletedOffset = offset + boxSize;\r\n                }\r\n            }\r\n\r\n            offset += boxSize;\r\n        }\r\n\r\n        if (!boxInfo) {\r\n            return new IsoBoxSearchInfo(lastCompletedOffset, false);\r\n        }\r\n\r\n        return boxInfo;\r\n    }\r\n\r\n    function getSamplesInfo(ab) {\r\n        if (!ab || ab.byteLength === 0) {\r\n            return {sampleList: [], lastSequenceNumber: NaN, totalDuration: NaN, numSequences: NaN};\r\n        }\r\n        let isoFile = parse(ab);\r\n        // zero or more moofs\r\n        let moofBoxes = isoFile.getBoxes('moof');\r\n        // exactly one mfhd per moof\r\n        let mfhdBoxes = isoFile.getBoxes('mfhd');\r\n\r\n        let sampleDuration,\r\n            sampleCompositionTimeOffset,\r\n            sampleCount,\r\n            sampleSize,\r\n            sampleDts,\r\n            sampleList,\r\n            sample,\r\n            i, j, k, l, m, n,\r\n            dataOffset,\r\n            lastSequenceNumber,\r\n            numSequences,\r\n            totalDuration;\r\n\r\n        numSequences = isoFile.getBoxes('moof').length;\r\n        lastSequenceNumber = mfhdBoxes[mfhdBoxes.length - 1].sequence_number;\r\n        sampleCount = 0;\r\n\r\n        sampleList = [];\r\n        let subsIndex = -1;\r\n        let nextSubsSample = -1;\r\n        for (l = 0; l < moofBoxes.length; l++) {\r\n            let moofBox = moofBoxes[l];\r\n            // zero or more trafs per moof\r\n            let trafBoxes = moofBox.getChildBoxes('traf');\r\n            for (j = 0; j < trafBoxes.length; j++) {\r\n                let trafBox = trafBoxes[j];\r\n                // exactly one tfhd per traf\r\n                let tfhdBox = trafBox.getChildBox('tfhd');\r\n                // zero or one tfdt per traf\r\n                let tfdtBox = trafBox.getChildBox('tfdt');\r\n                sampleDts = tfdtBox.baseMediaDecodeTime;\r\n                // zero or more truns per traf\r\n                let trunBoxes = trafBox.getChildBoxes('trun');\r\n                // zero or more subs per traf\r\n                let subsBoxes = trafBox.getChildBoxes('subs');\r\n                for (k = 0; k < trunBoxes.length; k++) {\r\n                    let trunBox = trunBoxes[k];\r\n                    sampleCount = trunBox.sample_count;\r\n                    dataOffset = (tfhdBox.base_data_offset || 0) + (trunBox.data_offset || 0);\r\n\r\n                    for (i = 0; i < sampleCount; i++) {\r\n                        sample = trunBox.samples[i];\r\n                        sampleDuration = (sample.sample_duration !== undefined) ? sample.sample_duration : tfhdBox.default_sample_duration;\r\n                        sampleSize = (sample.sample_size !== undefined) ? sample.sample_size : tfhdBox.default_sample_size;\r\n                        sampleCompositionTimeOffset = (sample.sample_composition_time_offset !== undefined) ? sample.sample_composition_time_offset : 0;\r\n                        let sampleData = {\r\n                            'dts': sampleDts,\r\n                            'cts': (sampleDts + sampleCompositionTimeOffset),\r\n                            'duration': sampleDuration,\r\n                            'offset': moofBox.offset + dataOffset,\r\n                            'size': sampleSize,\r\n                            'subSizes': [sampleSize]\r\n                        };\r\n                        if (subsBoxes) {\r\n                            for (m = 0; m < subsBoxes.length; m++) {\r\n                                let subsBox = subsBoxes[m];\r\n                                if (subsIndex < (subsBox.entry_count - 1) && i > nextSubsSample) {\r\n                                    subsIndex++;\r\n                                    nextSubsSample += subsBox.entries[subsIndex].sample_delta;\r\n                                }\r\n                                if (i == nextSubsSample) {\r\n                                    sampleData.subSizes = [];\r\n                                    let entry = subsBox.entries[subsIndex];\r\n                                    for (n = 0; n < entry.subsample_count; n++) {\r\n                                        sampleData.subSizes.push(entry.subsamples[n].subsample_size);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        sampleList.push(sampleData);\r\n                        dataOffset += sampleSize;\r\n                        sampleDts += sampleDuration;\r\n                    }\r\n                }\r\n                totalDuration = sampleDts - tfdtBox.baseMediaDecodeTime;\r\n            }\r\n        }\r\n        return {sampleList: sampleList, lastSequenceNumber: lastSequenceNumber, totalDuration: totalDuration, numSequences: numSequences};\r\n    }\r\n\r\n    function getMediaTimescaleFromMoov(ab) {\r\n        let isoFile = parse(ab);\r\n        let mdhdBox = isoFile ? isoFile.getBox('mdhd') : undefined;\r\n\r\n        return mdhdBox ? mdhdBox.timescale : NaN;\r\n    }\r\n\r\n    function parseUint32(data, offset) {\r\n        return data[offset + 3] >>> 0 |\r\n            (data[offset + 2] << 8) >>> 0 |\r\n            (data[offset + 1] << 16) >>> 0 |\r\n            (data[offset] << 24) >>> 0;\r\n    }\r\n\r\n    function parseIsoBoxType(data, offset) {\r\n        return String.fromCharCode(data[offset++]) +\r\n            String.fromCharCode(data[offset++]) +\r\n            String.fromCharCode(data[offset++]) +\r\n            String.fromCharCode(data[offset]);\r\n    }\r\n\r\n    function findInitRange(data) {\r\n        let initRange = null;\r\n        let start,\r\n            end;\r\n\r\n        const isoFile = parse(data);\r\n\r\n        if (!isoFile) {\r\n            return initRange;\r\n        }\r\n\r\n        const ftyp = isoFile.getBox('ftyp');\r\n        const moov = isoFile.getBox('moov');\r\n\r\n        logger.debug('Searching for initialization.');\r\n\r\n        if (moov && moov.isComplete) {\r\n            start = ftyp ? ftyp.offset : moov.offset;\r\n            end = moov.offset + moov.size - 1;\r\n            initRange = start + '-' + end;\r\n\r\n            logger.debug('Found the initialization.  Range: ' + initRange);\r\n        }\r\n\r\n        return initRange;\r\n    }\r\n\r\n    instance = {\r\n        parse: parse,\r\n        findLastTopIsoBoxCompleted: findLastTopIsoBoxCompleted,\r\n        getMediaTimescaleFromMoov: getMediaTimescaleFromMoov,\r\n        getSamplesInfo: getSamplesInfo,\r\n        findInitRange: findInitRange\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\nBoxParser.__dashjs_factory_name = 'BoxParser';\r\nexport default FactoryMaker.getSingletonFactory(BoxParser);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\n/**\r\n * @module DefaultURLUtils\r\n * @description Provides utility functions for operating on URLs.\r\n * Initially this is simply a method to determine the Base URL of a URL, but\r\n * should probably include other things provided all over the place such as\r\n * determining whether a URL is relative/absolute, resolving two paths etc.\r\n * @ignore\r\n */\r\nfunction DefaultURLUtils() {\r\n\r\n    let resolveFunction;\r\n\r\n    const schemeRegex = /^[a-z][a-z0-9+\\-_.]*:/i;\r\n    const httpUrlRegex = /^https?:\\/\\//i;\r\n    const httpsUrlRegex = /^https:\\/\\//i;\r\n    const originRegex = /^([a-z][a-z0-9+\\-_.]*:\\/\\/[^\\/]+)\\/?/i;\r\n\r\n    /**\r\n     * Resolves a url given an optional base url\r\n     * Uses window.URL to do the resolution.\r\n     *\r\n     * @param {string} url\r\n     * @param {string} [baseUrl]\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     * @private\r\n     */\r\n    const nativeURLResolver = (url, baseUrl) => {\r\n        try {\r\n            return new window.URL(url, baseUrl).toString();\r\n        } catch (e) {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Resolves a url given an optional base url\r\n     * Does not resolve ./, ../ etc but will do enough to construct something\r\n     * which will satisfy XHR etc when window.URL is not available ie\r\n     * IE11/node etc.\r\n     *\r\n     * @param {string} url\r\n     * @param {string} [baseUrl]\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     * @private\r\n     */\r\n    const dumbURLResolver = (url, baseUrl) => {\r\n        let baseUrlParseFunc = parseBaseUrl;\r\n\r\n        if (!baseUrl) {\r\n            return url;\r\n        }\r\n\r\n        if (!isRelative(url)) {\r\n            return url;\r\n        }\r\n\r\n        if (isPathAbsolute(url)) {\r\n            baseUrlParseFunc = parseOrigin;\r\n        }\r\n\r\n        if (isSchemeRelative(url)) {\r\n            baseUrlParseFunc = parseScheme;\r\n        }\r\n\r\n        const base = baseUrlParseFunc(baseUrl);\r\n        const joinChar =\r\n              base.charAt(base.length - 1) !== '/' &&\r\n              url.charAt(0) !== '/' ?\r\n              '/' : '';\r\n\r\n        return [base, url].join(joinChar);\r\n    };\r\n\r\n    function setup() {\r\n        try {\r\n            const u = new window.URL('x', 'http://y'); //jshint ignore:line\r\n            resolveFunction = nativeURLResolver;\r\n        } catch (e) {\r\n            // must be IE11/Node etc\r\n        } finally {\r\n            resolveFunction = resolveFunction || dumbURLResolver;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the Base URL of a URL, if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function parseBaseUrl(url) {\r\n        const slashIndex = url.indexOf('/');\r\n        const lastSlashIndex = url.lastIndexOf('/');\r\n\r\n        if (slashIndex !== -1) {\r\n            // if there is only '//'\r\n            if (lastSlashIndex === slashIndex + 1) {\r\n                return url;\r\n            }\r\n\r\n            if (url.indexOf('?') !== -1) {\r\n                url = url.substring(0, url.indexOf('?'));\r\n            }\r\n\r\n            return url.substring(0, lastSlashIndex + 1);\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the scheme and origin of a URL,\r\n     * if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function parseOrigin(url) {\r\n        const matches = url.match(originRegex);\r\n\r\n        if (matches) {\r\n            return matches[1];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the fragment of a URL without scheme,\r\n     * if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function removeHostname(url) {\r\n        let urlParts = /^(?:\\w+\\:\\/\\/)?([^\\/]+)(.*)$/.exec(url); //[1] = host / [2] = path\r\n        return urlParts[2].substring(1);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the scheme of a URL, if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function parseScheme(url) {\r\n        const matches = url.match(schemeRegex);\r\n\r\n        if (matches) {\r\n            return matches[0];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is relative.\r\n     * @return {boolean}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isRelative(url) {\r\n        return !schemeRegex.test(url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is path-absolute.\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isPathAbsolute(url) {\r\n        return isRelative(url) && url.charAt(0) === '/';\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is scheme-relative.\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isSchemeRelative(url) {\r\n        return url.indexOf('//') === 0;\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is an HTTP-URL as defined in ISO/IEC\r\n     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isHTTPURL(url) {\r\n        return httpUrlRegex.test(url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the supplied url has https scheme\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function isHTTPS(url) {\r\n        return httpsUrlRegex.test(url);\r\n    }\r\n\r\n    /**\r\n     * Resolves a url given an optional base url\r\n     * @return {string}\r\n     * @param {string} url\r\n     * @param {string} [baseUrl]\r\n     * @memberof module:DefaultURLUtils\r\n     * @instance\r\n     */\r\n    function resolve(url, baseUrl) {\r\n        return resolveFunction(url, baseUrl);\r\n    }\r\n\r\n    setup();\r\n\r\n    const instance = {\r\n        parseBaseUrl:       parseBaseUrl,\r\n        parseOrigin:        parseOrigin,\r\n        parseScheme:        parseScheme,\r\n        isRelative:         isRelative,\r\n        isPathAbsolute:     isPathAbsolute,\r\n        isSchemeRelative:   isSchemeRelative,\r\n        isHTTPURL:          isHTTPURL,\r\n        isHTTPS:            isHTTPS,\r\n        removeHostname:     removeHostname,\r\n        resolve:            resolve\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDefaultURLUtils.__dashjs_factory_name = 'DefaultURLUtils';\r\nexport default FactoryMaker.getSingletonFactory(DefaultURLUtils);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport IsoBox from '../vo/IsoBox';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction IsoFile() {\r\n\r\n    let instance,\r\n        parsedIsoFile;\r\n\r\n    /**\r\n    * @param {string} type\r\n    * @returns {IsoBox|null}\r\n    * @memberof IsoFile#\r\n    */\r\n    function getBox(type) {\r\n        if (!type || !parsedIsoFile || !parsedIsoFile.boxes || (parsedIsoFile.boxes.length === 0) || typeof parsedIsoFile.fetch !== 'function') return null;\r\n\r\n        return convertToDashIsoBox(parsedIsoFile.fetch(type));\r\n    }\r\n\r\n    /**\r\n    * @param {string} type\r\n    * @returns {Array|null} array of {@link IsoBox}\r\n    * @memberof IsoFile#\r\n    */\r\n    function getBoxes(type) {\r\n        let boxes = [];\r\n\r\n        if (!type || !parsedIsoFile || typeof parsedIsoFile.fetchAll !== 'function') {\r\n            return boxes;\r\n        }\r\n\r\n        let boxData = parsedIsoFile.fetchAll(type);\r\n        let box;\r\n\r\n        for (let i = 0, ln = boxData.length; i < ln; i++) {\r\n            box = convertToDashIsoBox(boxData[i]);\r\n\r\n            if (box) {\r\n                boxes.push(box);\r\n            }\r\n        }\r\n\r\n        return boxes;\r\n    }\r\n\r\n    /**\r\n    * @param {string} value\r\n    * @memberof IsoFile#\r\n    */\r\n    function setData(value) {\r\n        parsedIsoFile = value;\r\n    }\r\n\r\n    /**\r\n    * @returns {IsoBox|null}\r\n    * @memberof IsoFile#\r\n    */\r\n    function getLastBox() {\r\n        if (!parsedIsoFile || !parsedIsoFile.boxes || !parsedIsoFile.boxes.length) return null;\r\n\r\n        let type = parsedIsoFile.boxes[parsedIsoFile.boxes.length - 1].type;\r\n        let boxes = getBoxes(type);\r\n\r\n        return boxes.length > 0 ? boxes[boxes.length - 1] : null;\r\n    }\r\n\r\n    function convertToDashIsoBox(boxData) {\r\n        if (!boxData) return null;\r\n\r\n        let box = new IsoBox(boxData);\r\n\r\n        if (boxData.hasOwnProperty('_incomplete')) {\r\n            box.isComplete = !boxData._incomplete;\r\n        }\r\n\r\n        return box;\r\n    }\r\n\r\n    instance = {\r\n        getBox: getBox,\r\n        getBoxes: getBoxes,\r\n        setData: setData,\r\n        getLastBox: getLastBox\r\n    };\r\n\r\n    return instance;\r\n}\r\nIsoFile.__dashjs_factory_name = 'IsoFile';\r\nexport default FactoryMaker.getClassFactory(IsoFile);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport deepEqual from 'fast-deep-equal';\r\n\r\n/**\r\n * @module ObjectUtils\r\n * @ignore\r\n * @description Provides utility functions for objects\r\n */\r\nfunction ObjectUtils() {\r\n\r\n    let instance;\r\n\r\n    /**\r\n     * Returns true if objects are equal\r\n     * @return {boolean}\r\n     * @param {object} obj1\r\n     * @param {object} obj2\r\n     * @memberof module:ObjectUtils\r\n     * @instance\r\n     */\r\n    function areEqual(obj1, obj2) {\r\n        return deepEqual(obj1, obj2);\r\n    }\r\n\r\n    instance = {\r\n        areEqual: areEqual\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nObjectUtils.__dashjs_factory_name = 'ObjectUtils';\r\nexport default FactoryMaker.getSingletonFactory(ObjectUtils);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nfunction RequestModifier() {\r\n\r\n    let instance;\r\n\r\n    function modifyRequestURL(url) {\r\n        return url;\r\n    }\r\n\r\n    function modifyRequestHeader(request) {\r\n        return request;\r\n    }\r\n\r\n    instance = {\r\n        modifyRequestURL: modifyRequestURL,\r\n        modifyRequestHeader: modifyRequestHeader\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nRequestModifier.__dashjs_factory_name = 'RequestModifier';\r\nexport default FactoryMaker.getSingletonFactory(RequestModifier);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport DefaultURLUtils from './DefaultURLUtils';\r\n\r\n/**\r\n * @module URLUtils\r\n * @ignore\r\n * @description Provides utility functions for operating on URLs.\r\n * Initially this is simply a method to determine the Base URL of a URL, but\r\n * should probably include other things provided all over the place such as\r\n * determining whether a URL is relative/absolute, resolving two paths etc.\r\n */\r\nfunction URLUtils() {\r\n\r\n    let instance;\r\n    let defaultURLUtils;\r\n    let regexUtils = [];\r\n    const context = this.context;\r\n\r\n    function getUtils(url) {\r\n        let i;\r\n        for (i = 0; i < regexUtils.length; i++) {\r\n            let regex = regexUtils[i].regex;\r\n            if (regex.test(url)) {\r\n                return regexUtils[i].utils;\r\n            }\r\n        }\r\n        return defaultURLUtils;\r\n    }\r\n\r\n    function setup() {\r\n        defaultURLUtils = DefaultURLUtils(context).getInstance();\r\n    }\r\n\r\n    /**\r\n     * Register a module to handle specific url.\r\n     * @param {regex} regex - url regex\r\n     * @param {object} utils - object that handles the regex\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function registerUrlRegex(regex, utils) {\r\n        regexUtils.push({regex: regex, utils: utils});\r\n    }\r\n\r\n    function internalCall(functionName, url, baseUrl) {\r\n        let utils = getUtils(baseUrl || url);\r\n        return utils && typeof (utils[functionName]) === 'function' ? utils[functionName](url, baseUrl) : defaultURLUtils[functionName](url, baseUrl);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the Base URL of a URL, if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function parseBaseUrl(url) {\r\n        return internalCall('parseBaseUrl', url);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the scheme and origin of a URL,\r\n     * if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function parseOrigin(url) {\r\n        return internalCall('parseOrigin', url);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the fragment of a URL without scheme,\r\n     * if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function removeHostname(url) {\r\n        return internalCall('removeHostname', url);\r\n    }\r\n\r\n    /**\r\n     * Returns a string that contains the scheme of a URL, if determinable.\r\n     * @param {string} url - full url\r\n     * @return {string}\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function parseScheme(url) {\r\n        return internalCall('parseScheme', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is relative.\r\n     * @return {boolean}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isRelative(url) {\r\n        return internalCall('isRelative', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is path-absolute.\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isPathAbsolute(url) {\r\n        return internalCall('isPathAbsolute', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is scheme-relative.\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isSchemeRelative(url) {\r\n        return internalCall('isSchemeRelative', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the url is an HTTP-URL as defined in ISO/IEC\r\n     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isHTTPURL(url) {\r\n        return internalCall('isHTTPURL', url);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the supplied url has https scheme\r\n     * @return {bool}\r\n     * @param {string} url\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function isHTTPS(url) {\r\n        return internalCall('isHTTPS', url);\r\n    }\r\n\r\n    /**\r\n     * Resolves a url given an optional base url\r\n     * @return {string}\r\n     * @param {string} url\r\n     * @param {string} [baseUrl]\r\n     * @memberof module:URLUtils\r\n     * @instance\r\n     */\r\n    function resolve(url, baseUrl) {\r\n        return internalCall('resolve', url, baseUrl);\r\n    }\r\n\r\n    setup();\r\n    instance = {\r\n        registerUrlRegex:   registerUrlRegex,\r\n        parseBaseUrl:       parseBaseUrl,\r\n        parseOrigin:        parseOrigin,\r\n        parseScheme:        parseScheme,\r\n        isRelative:         isRelative,\r\n        isPathAbsolute:     isPathAbsolute,\r\n        isSchemeRelative:   isSchemeRelative,\r\n        isHTTPURL:          isHTTPURL,\r\n        isHTTPS:            isHTTPS,\r\n        removeHostname:     removeHostname,\r\n        resolve:            resolve\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nURLUtils.__dashjs_factory_name = 'URLUtils';\r\nconst factory = FactoryMaker.getSingletonFactory(URLUtils);\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DashJSError {\r\n    constructor(code, message, data) {\r\n        this.code = code || null;\r\n        this.message = message || null;\r\n        this.data = data || null;\r\n    }\r\n}\r\n\r\nexport default DashJSError;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass FragmentRequest {\r\n    constructor(url) {\r\n        this.action = FragmentRequest.ACTION_DOWNLOAD;\r\n        this.startTime = NaN;\r\n        this.mediaType = null;\r\n        this.mediaInfo = null;\r\n        this.type = null;\r\n        this.duration = NaN;\r\n        this.timescale = NaN;\r\n        this.range = null;\r\n        this.url = url || null;\r\n        this.serviceLocation = null;\r\n        this.requestStartDate = null;\r\n        this.firstByteDate = null;\r\n        this.requestEndDate = null;\r\n        this.quality = NaN;\r\n        this.index = NaN;\r\n        this.availabilityStartTime = null;\r\n        this.availabilityEndTime = null;\r\n        this.wallStartTime = null;\r\n        this.bytesLoaded = NaN;\r\n        this.bytesTotal = NaN;\r\n        this.delayLoadingTime = NaN;\r\n        this.responseType = 'arraybuffer';\r\n        this.representationId = null;\r\n    }\r\n\r\n    isInitializationRequest() {\r\n        return (this.type && this.type === HTTPRequest.INIT_SEGMENT_TYPE);\r\n    }\r\n\r\n    setInfo(info) {\r\n        this.type = info && info.init ? HTTPRequest.INIT_SEGMENT_TYPE : HTTPRequest.MEDIA_SEGMENT_TYPE;\r\n        this.url = info && info.url ? info.url : null;\r\n        this.range = info && info.range ? info.range.start + '-' + info.range.end : null;\r\n        this.mediaType = info && info.mediaType ? info.mediaType : null;\r\n    }\r\n}\r\n\r\nFragmentRequest.ACTION_DOWNLOAD = 'download';\r\nFragmentRequest.ACTION_COMPLETE = 'complete';\r\n\r\nexport default FragmentRequest;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nimport FragmentRequest from './FragmentRequest';\r\n\r\nclass HeadRequest extends FragmentRequest {\r\n    constructor(url) {\r\n        super(url);\r\n        this.checkForExistenceOnly = true;\r\n    }\r\n}\r\n\r\nexport default HeadRequest;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass IsoBox {\r\n    constructor(boxData) {\r\n        this.offset = boxData._offset;\r\n        this.type = boxData.type;\r\n        this.size = boxData.size;\r\n        this.boxes = [];\r\n        if (boxData.boxes) {\r\n            for (let i = 0; i < boxData.boxes.length; i++) {\r\n                this.boxes.push(new IsoBox(boxData.boxes[i]));\r\n            }\r\n        }\r\n        this.isComplete = true;\r\n\r\n        switch (boxData.type) {\r\n            case 'sidx':\r\n                this.timescale = boxData.timescale;\r\n                this.earliest_presentation_time = boxData.earliest_presentation_time;\r\n                this.first_offset = boxData.first_offset;\r\n                this.references = boxData.references;\r\n                if (boxData.references) {\r\n                    this.references = [];\r\n                    for (let i = 0; i < boxData.references.length; i++) {\r\n                        let reference = {\r\n                            reference_type: boxData.references[i].reference_type,\r\n                            referenced_size: boxData.references[i].referenced_size,\r\n                            subsegment_duration: boxData.references[i].subsegment_duration\r\n                        };\r\n                        this.references.push(reference);\r\n                    }\r\n                }\r\n                break;\r\n            case 'emsg':\r\n                this.id = boxData.id;\r\n                this.version = boxData.version === 1 ? 1 : 0;\r\n                this.value = boxData.value;\r\n                this.timescale = boxData.timescale;\r\n                this.scheme_id_uri = boxData.scheme_id_uri;\r\n                this.presentation_time_delta = boxData.version === 1 ? boxData.presentation_time : boxData.presentation_time_delta;\r\n                this.event_duration = boxData.event_duration;\r\n                this.message_data = boxData.message_data;\r\n                break;\r\n            case 'mdhd':\r\n                this.timescale = boxData.timescale;\r\n                break;\r\n            case 'mfhd':\r\n                this.sequence_number = boxData.sequence_number;\r\n                break;\r\n            case 'subs':\r\n                this.entry_count = boxData.entry_count;\r\n                this.entries = boxData.entries;\r\n                break;\r\n            case 'tfhd':\r\n                this.base_data_offset = boxData.base_data_offset;\r\n                this.sample_description_index = boxData.sample_description_index;\r\n                this.default_sample_duration = boxData.default_sample_duration;\r\n                this.default_sample_size = boxData.default_sample_size;\r\n                this.default_sample_flags = boxData.default_sample_flags;\r\n                this.flags = boxData.flags;\r\n                break;\r\n            case 'tfdt':\r\n                this.version = boxData.version;\r\n                this.baseMediaDecodeTime = boxData.baseMediaDecodeTime;\r\n                this.flags = boxData.flags;\r\n                break;\r\n            case 'trun':\r\n                this.sample_count = boxData.sample_count;\r\n                this.first_sample_flags = boxData.first_sample_flags;\r\n                this.data_offset = boxData.data_offset;\r\n                this.flags = boxData.flags;\r\n                this.samples = boxData.samples;\r\n                if (boxData.samples) {\r\n                    this.samples = [];\r\n                    for (let i = 0, ln = boxData.samples.length; i < ln; i++) {\r\n                        let sample = {\r\n                            sample_size: boxData.samples[i].sample_size,\r\n                            sample_duration: boxData.samples[i].sample_duration,\r\n                            sample_composition_time_offset: boxData.samples[i].sample_composition_time_offset\r\n                        };\r\n                        this.samples.push(sample);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    getChildBox(type) {\r\n        for (let i = 0; i < this.boxes.length; i++) {\r\n            if (this.boxes[i].type === type) {\r\n                return this.boxes[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    getChildBoxes(type) {\r\n        let boxes = [];\r\n        for (let i = 0; i < this.boxes.length; i++) {\r\n            if (this.boxes[i].type === type) {\r\n                boxes.push(this.boxes[i]);\r\n            }\r\n        }\r\n        return boxes;\r\n    }\r\n\r\n}\r\n\r\nexport default IsoBox;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass IsoBoxSearchInfo {\r\n    constructor(lastCompletedOffset, found, size) {\r\n        this.lastCompletedOffset = lastCompletedOffset;\r\n        this.found = found;\r\n        this.size = size;\r\n    }\r\n}\r\n\r\nexport default IsoBoxSearchInfo;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass ThumbnailTrackInfo {\r\n    constructor() {\r\n        this.bitrate = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.tilesHor = 0;\r\n        this.tilesVert = 0;\r\n        this.widthPerTile = 0;\r\n        this.heightPerTile = 0;\r\n        this.startNumber = 0;\r\n        this.segmentDuration = 0;\r\n        this.timescale = 0;\r\n        this.templateUrl = '';\r\n        this.id = '';\r\n    }\r\n}\r\n\r\nexport default ThumbnailTrackInfo;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.\r\n * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored\r\n * by Metrics Reporting code.\r\n * @ignore\r\n */\r\nclass HTTPRequest {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Identifier of the TCP connection on which the HTTP request was sent.\r\n         * @public\r\n         */\r\n        this.tcpid = null;\r\n        /**\r\n         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\r\n         * The type of the request:\r\n         * - MPD\r\n         * - XLink expansion\r\n         * - Initialization Fragment\r\n         * - Index Fragment\r\n         * - Media Fragment\r\n         * - Bitstream Switching Fragment\r\n         * - other\r\n         * @public\r\n         */\r\n        this.type = null;\r\n        /**\r\n         * The original URL (before any redirects or failures)\r\n         * @public\r\n         */\r\n        this.url = null;\r\n        /**\r\n         * The actual URL requested, if different from above\r\n         * @public\r\n         */\r\n        this.actualurl = null;\r\n        /**\r\n         * The contents of the byte-range-spec part of the HTTP Range header.\r\n         * @public\r\n         */\r\n        this.range = null;\r\n        /**\r\n         * Real-Time | The real time at which the request was sent.\r\n         * @public\r\n         */\r\n        this.trequest = null;\r\n        /**\r\n         * Real-Time | The real time at which the first byte of the response was received.\r\n         * @public\r\n         */\r\n        this.tresponse = null;\r\n        /**\r\n         * The HTTP response code.\r\n         * @public\r\n         */\r\n        this.responsecode = null;\r\n        /**\r\n         * The duration of the throughput trace intervals (ms), for successful requests only.\r\n         * @public\r\n         */\r\n        this.interval = null;\r\n        /**\r\n         * Throughput traces, for successful requests only.\r\n         * @public\r\n         */\r\n        this.trace = [];\r\n\r\n        /**\r\n         * Type of stream (\"audio\" | \"video\" etc..)\r\n         * @public\r\n         */\r\n        this._stream = null;\r\n        /**\r\n         * Real-Time | The real time at which the request finished.\r\n         * @public\r\n         */\r\n        this._tfinish = null;\r\n        /**\r\n         * The duration of the media requests, if available, in milliseconds.\r\n         * @public\r\n         */\r\n        this._mediaduration = null;\r\n        /**\r\n         * The media segment quality\r\n         * @public\r\n         */\r\n        this._quality = null;\r\n        /**\r\n         * all the response headers from request.\r\n         * @public\r\n         */\r\n        this._responseHeaders = null;\r\n        /**\r\n         * The selected service location for the request. string.\r\n         * @public\r\n         */\r\n        this._serviceLocation = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @classdesc This Object holds reference to the progress of the HTTPRequest.\r\n * @ignore\r\n */\r\nclass HTTPRequestTrace {\r\n    /**\r\n    * @class\r\n    */\r\n    constructor() {\r\n        /**\r\n         * Real-Time | Measurement stream start.\r\n         * @public\r\n         */\r\n        this.s = null;\r\n        /**\r\n         * Measurement stream duration (ms).\r\n         * @public\r\n         */\r\n        this.d = null;\r\n        /**\r\n         * List of integers counting the bytes received in each trace interval within the measurement stream.\r\n         * @public\r\n         */\r\n        this.b = [];\r\n    }\r\n}\r\n\r\nHTTPRequest.GET = 'GET';\r\nHTTPRequest.HEAD = 'HEAD';\r\nHTTPRequest.MPD_TYPE = 'MPD';\r\nHTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';\r\nHTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';\r\nHTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';\r\nHTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';\r\nHTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';\r\nHTTPRequest.OTHER_TYPE = 'other';\r\n\r\nexport { HTTPRequest, HTTPRequestTrace };\r\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","_dereq_","module","config","undefined","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","enableToStringFunc","arrayAccessFormPaths","skipEmptyTextNodesForObj","stripWhitespaces","datetimeAccessFormPaths","useDoubleQuotes","xmlElementsFilter","jsonPropertiesFilter","keepCData","ignoreRoot","initConfigDefaults","DOMNodeTypes","ELEMENT_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","DOCUMENT_NODE","getNodeLocalName","node","nodeLocalName","localName","baseName","nodeName","escapeXmlChars","str","replace","checkInStdFiltersArrayForm","stdFiltersArrayForm","obj","name","path","idx","filterPath","RegExp","test","toArrayAccessForm","childName","Array","fromXmlDateTime","prop","bits","split","d","Date","secondBits","setHours","setMilliseconds","offsetMinutes","Number","setMinutes","getMinutes","getTimezoneOffset","indexOf","UTC","getFullYear","getMonth","getDate","getHours","getSeconds","getMilliseconds","parseDOMChildren","nodeType","result","Object","nodeChildren","childNodes","cidx","child","__cnt","children","childPath","childType","push","__children","aidx","attributes","attr","value2","value","m","ml","matchers","matchobj","converter","nodePrefix","prefix","__prefix","__text","join","trim","fullPath","checkFromXmlDateTimePaths","__cdata","toString","this","nodeValue","startTag","jsonObj","element","attrList","closed","resultStr","attrName","attrVal","substr","endTag","elementName","jsonXmlSpecialElem","jsonObjField","suffix","Function","jsonXmlElemCount","elementsCnt","it","parseJSONAttributes","ait","parseJSONTextObject","jsonTxtObj","getJsonPropertyPath","jsonObjPath","jsonPropName","parseJSONObject","propertyName","subObj","jsonArrRoot","jsonArrObj","arIdx","parseJSONArray","toISOString","parseXmlString","xmlDocStr","xmlDoc","window","ActiveXObject","DOMParser","parser","parseFromString","getElementsByTagNameNS","err","async","loadXML","asArray","toXmlDateTime","dt","asDateTime","xml2json","xml_str2json","json2xml_str","json2xml","getVersion","ISOBoxer","parseBuffer","arrayBuffer","ISOFile","parse","addBoxProcessor","type","ISOBox","prototype","_boxProcessors","createFile","createBox","parent","pos","newBox","create","append","createFullBox","version","flags","Utils","dataViewToString","dataView","encoding","impliedEncoding","TextDecoder","decode","byteLength","getUint8","String","fromCharCode","utf8ToByteArray","string","TextEncoder","encode","charCodeAt","appendBox","box","_offset","_cursor","offset","_root","_raw","_parent","index","boxes","splice","Cursor","initialOffset","DataView","fetch","fetchAll","returnEarly","_sweep","write","getLength","bytes","Uint8Array","_rawo","buffer","_parseBox","byteOffset","_boxContainers","_procField","size","_parsing","_readField","_writeField","_procFieldArray","_procFullBox","_procEntries","fn","_procSubEntries","entry","_procEntryField","_procSubBoxes","_readUint","_readInt","_readTemplate","_readTerminatedString","_readString","_readData","_readUTF8String","getInt8","getInt16","getInt32","s1","s2","Math","pow","getUint16","getUint32","char","data","_incomplete","largesize","_parseContainerBox","_data","_parseFullBox","_writeData","_writeInt","setInt8","setInt16","setInt32","floor","setUint32","_writeUint","setUint8","setUint16","_writeString","_writeTerminatedString","_writeTemplate","pre","post","set","_writeUTF8String","entry_count","nbCompatibleBrands","language","DataSize","sample_count","reference_count","reference","reference_type","referenced_size","sap","starts_with_SAP","SAP_type","SAP_delta_time","subsegment_count","subsegment","ranges_count","range","subsample_count","subsample","reserved","length_size_of_traf_num","length_size_of_trun_num","length_size_of_sample_num","number_of_entry","sample","isArray","keyList","keys","hasProp","hasOwnProperty","equal","b","key","arrA","arrB","dateA","dateB","getTime","regexpA","regexpB","XmlEntities","Html4Entities","Html5Entities","AllHtmlEntities","HTML_ALPHA","HTML_CODES","alphaIndex","numIndex","s","entity","chr","charAt","toLowerCase","parseInt","isNaN","strLength","alpha","encodeNonUTF","cc","encodeNonASCII","ENTITIES","charIndex","charInfo","_results","chars","addChar","chr2","createIndexes","ALPHA_INDEX","&lt","&gt","&quot","&apos","&amp","&lt;","&gt;","&quot;","&apos;","&amp;","CHAR_INDEX","60","62","34","39","38","CHAR_S_INDEX","<",">","\"","'","&","strLenght","define","amd","global","self","localforage","l","called","channel","draining","Mutation","MutationObserver","WebKitMutationObserver","scheduleDrain","observer","nextTick","document","createTextNode","observe","characterData","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","port1","onmessage","port2","postMessage","queue","oldQueue","len","task","2","immediate","INTERNAL","handlers","REJECTED","FULFILLED","PENDING","Promise","resolver","TypeError","state","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","returnValue","reject","resolve","getThen","then","apply","arguments","thenable","onError","onSuccess","tryCatch","status","out","constructor","error","reason","all","iterable","values","resolved","outValue","allResolver","race","response","3","4","_typeof","Symbol","iterator","idb","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","getIDB","createBlob","parts","properties","Blob","builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","getBlob","Promise$1","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","console","warn","getCallback","DETECT_BLOB_SUPPORT_STORE","supportsBlobs","dbContexts","READ_ONLY","READ_WRITE","_checkBlobSupport","txn","transaction","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","navigator","userAgent","match","matchedEdge","_deferReadiness","dbInfo","dbContext","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_rejectReadiness","_getConnection","upgradeNeeded","createDbContext","db","close","dbArgs","openreq","open","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","newVersion","onerror","onsuccess","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_decodeBlob","encodedBlob","bin","buf","ArrayBuffer","arr","_binStringToArrayBuffer","atob","_isEncodedBlob","__local_forage_encoded_blob","_fullyReady","_initReady","_dbInfo","createTransaction","mode","retries","tx","forages","forage","_tryReconnect","asyncStorage","_driver","_initStorage","options","ready","initPromises","ignoreErrors","j","slice","_defaultConfig","k","_support","isSafari","openDatabase","platform","hasFetch","IDBKeyRange","isIndexedDBValid","iterate","req","openCursor","iterationNumber","cursor","getItem","get","setItem","blobSupport","reader","FileReader","onloadend","base64","btoa","target","readAsBinaryString","store","removeItem","clear","count","advanced","advance","dropInstance","currentConfig","dbPromise","deleteObjectStore","_forage2","deleteDatabase","onblocked","BASE_CHARS","BLOB_TYPE_PREFIX_REGEX","SERIALIZED_MARKER","SERIALIZED_MARKER_LENGTH","TYPE_ARRAYBUFFER","TYPE_BLOB","TYPE_SERIALIZED_MARKER_LENGTH","toString$1","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","bufferToString","base64String","substring","localforageSerializer","serialize","valueType","marker","fileReader","onload","readAsArrayBuffer","JSON","stringify","deserialize","blobType","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","createDbTable","executeSql","tryExecuteSql","sqlStatement","args","SYNTAX_ERR","results","rows","_setItem","retriesLeft","originalValue","serializer","sqlError","QUOTA_ERR","webSQLStorage","dbInfoPromise","description","item","storeNames","operationInfo","operations","dropTable","_getKeyPrefix","defaultConfig","keyPrefix","_isLocalStorageUsable","localStorageTestKey","localStorage","checkIfLocalStorageThrows","includes","array","searchElement","x","y","localStorageWrapper","isLocalStorageValid","keyPrefixLength","itemKey","arg","DefinedDrivers","DriverSupport","DefaultDrivers","INDEXEDDB","WEBSQL","LOCALSTORAGE","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","concat","DefaultConfig","driver","extend","_key","LocalForage","driverTypeKey","instance","Constructor","_classCallCheck","driverName","defineDriver","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","localforage_js","driverObject","complianceError","driverMethods","driverMethodName","_i","_len","optionalDriverMethod","methodName","methodNotImplementedFactory","configureMissingMethods","setDriverSupport","support","info","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","supportedDrivers","_getSupportedDrivers","setDriverToConfig","extendSelfWithDriver","_extend","initDriver","currentDriverIndex","driverPromiseLoop","oldDriverSetDone","supports","libraryMethodsAndProperties","localForageInstance","libraryMethod","_args","callWhenReady","createInstance","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARNING","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","Debug","context","eventBus","_EventBus2","getInstance","settings","logFn","showLogTimestamp","showCalleeName","startTime","getLogFn","bind","log","doLog","level","_this","logTime","message","getClassName","getType","params","_len6","_key6","forEach","debug","logLevel","trigger","_eventsEvents2","LOG","getLogger","fatal","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","setLogTimestampVisible","setCalleeNameVisible","__dashjs_factory_name","factory","_FactoryMaker2","getSingletonFactory","LOG_LEVEL_NONE","updateSingletonFactory","EventBus","getHandlerIdx","listener","scope","some","on","handler","priority","getStreamId","streamId","mediaType","off","payload","filters","filter","reset","EVENT_PRIORITY_LOW","EVENT_PRIORITY_HIGH","singletonContexts","singletonFactories","classFactories","FactoryMaker","childInstance","override","getSingletonInstance","setSingletonInstance","className","classConstructor","getFactoryByName","merge","getSingletonFactoryByName","updateFactory","getClassFactory","getClassFactoryByName","updateClassFactory","factoriesArray","classInstance","extensionObject","extension","Settings","defaultSettings","_coreDebug2","streaming","metricsMaxListDepth","abandonLoadTimeout","liveDelayFragmentCount","NaN","liveDelay","scheduleWhilePaused","fastSwitchEnabled","flushBufferAtTrackSwitch","calcSegmentAvailabilityRangeFromTimeline","bufferPruningInterval","bufferToKeep","jumpGaps","jumpLargeGaps","smallGapLimit","stableBufferTime","bufferTimeAtTopQuality","bufferTimeAtTopQualityLongForm","longFormContentDurationThreshold","wallclockTimeUpdateInterval","lowLatencyEnabled","keepProtectionMediaKeys","useManifestDateHeaderTimeSource","useSuggestedPresentationDelay","useAppendWindow","manifestUpdateRetryInterval","liveCatchUpMinDrift","liveCatchUpMaxDrift","liveCatchUpPlaybackRate","liveCatchupLatencyThreshold","lastBitrateCachingInfo","enabled","ttl","lastMediaSettingsCachingInfo","cacheLoadThresholds","video","audio","trackSwitchMode","_streamingConstantsConstants2","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","selectionModeForInitialTrack","TRACK_SELECTION_MODE_HIGHEST_BITRATE","retryIntervals","_defineProperty","_retryIntervals","_streamingVoMetricsHTTPRequest","HTTPRequest","MPD_TYPE","XLINK_EXPANSION_TYPE","MEDIA_SEGMENT_TYPE","INIT_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","INDEX_SEGMENT_TYPE","OTHER_TYPE","retryAttempts","_retryAttempts","abr","movingAverageMethod","MOVING_AVERAGE_SLIDING_WINDOW","ABRStrategy","ABR_STRATEGY_DYNAMIC","bandwidthSafetyFactor","useDefaultABRRules","useBufferOccupancyABR","useDeadTimeLatency","limitBitrateByPortal","usePixelRatioInLimitBitrateByPortal","maxBitrate","minBitrate","maxRepresentationRatio","initialBitrate","initialRepresentationRatio","autoSwitchBitrate","cmcd","sid","cid","_UtilsJs2","clone","update","settingsObj","mixinSettings","source","dest","copy","empty","_name","mixin","src","url","modifiedUrl","URL","param","searchParams","href","random","hash","Errors","_get","getPrototypeOf","MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE","XLINK_LOADER_LOADING_FAILURE_ERROR_CODE","SEGMENTS_UPDATE_FAILED_ERROR_CODE","SEGMENTS_UNAVAILABLE_ERROR_CODE","SEGMENT_BASE_LOADER_ERROR_CODE","TIME_SYNC_FAILED_ERROR_CODE","FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE","URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE","APPEND_ERROR_CODE","REMOVE_ERROR_CODE","DATA_UPDATE_FAILED_ERROR_CODE","CAPABILITY_MEDIASOURCE_ERROR_CODE","CAPABILITY_MEDIAKEYS_ERROR_CODE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","DOWNLOAD_ERROR_ID_SIDX_CODE","DOWNLOAD_ERROR_ID_CONTENT_CODE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","DOWNLOAD_ERROR_ID_XLINK_CODE","MANIFEST_ERROR_ID_CODEC_CODE","MANIFEST_ERROR_ID_PARSE_CODE","MANIFEST_ERROR_ID_NOSTREAMS_CODE","TIMED_TEXT_ERROR_ID_PARSE_CODE","MANIFEST_ERROR_ID_MULTIPLEXED_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE","MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE","XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE","SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE","SEGMENTS_UNAVAILABLE_ERROR_MESSAGE","SEGMENT_BASE_LOADER_ERROR_MESSAGE","TIME_SYNC_FAILED_ERROR_MESSAGE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE","URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE","APPEND_ERROR_MESSAGE","REMOVE_ERROR_MESSAGE","DATA_UPDATE_FAILED_ERROR_MESSAGE","CAPABILITY_MEDIASOURCE_ERROR_MESSAGE","CAPABILITY_MEDIAKEYS_ERROR_MESSAGE","TIMED_TEXT_ERROR_MESSAGE_PARSE","MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE","errors","ErrorsBase","publicOnly","CoreEvents","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","BYTES_APPENDED_END_FRAGMENT","CHECK_FOR_EXISTENCE_COMPLETED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","INBAND_EVENTS","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_FRAGMENT_NEEDED","INTERNAL_MANIFEST_LOADED","ORIGINAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","LOADING_DATA_PROGRESS","LOADING_ABANDONED","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","MEDIA_FRAGMENT_NEEDED","QUOTA_EXCEEDED","REPRESENTATION_UPDATE_STARTED","REPRESENTATION_UPDATE_COMPLETED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_ADD","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","TEXT_TRACKS_QUEUE_INITIALIZED","TIME_SYNCHRONIZATION_COMPLETED","URL_RESOLUTION_FAILED","VIDEO_CHUNK_RECEIVED","WALLCLOCK_TIME_UPDATED","XLINK_ELEMENT_LOADED","XLINK_READY","SEGMENTBASE_INIT_REQUEST_NEEDED","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","SEEK_TARGET","DYNAMIC_STREAM_COMPLETED","Events","events","EventsBase","evt","DashHandler","dashConstants","urlUtils","streamInfo","timelineConverter","dashMetrics","baseURLController","logger","segmentIndex","lastSegment","requestedTime","isDynamicManifest","dynamicStreamCompleted","selectedMimeType","segmentsController","resetIndex","resetInitialSettings","setRequestUrl","request","destination","representation","baseURL","serviceLocation","isRelative","onRepresentationUpdateStarted","voRepresentation","hasInitialization","hasSegments","id","getRequestForSegment","mediaInfo","segment","_streamingVoFragmentRequest2","bandwidth","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","media","_utilsSegmentsUtils","replaceTokenForTemplate","replacementNumber","replacementTime","replaceIDForTemplate","unescapeDollarsInTemplate","mediaRange","presentationStartTime","duration","timescale","availabilityStartTime","availabilityEndTime","wallStartTime","quality","availabilityIdx","adaptationIndex","representationId","isMediaFinished","endTime","isFinished","time","parseFloat","start","toFixed","availableSegmentsNumber","onInitializationLoaded","segments","onSegmentsLoaded","seg","fragments","getTimeBasedSegment","segmentAvailabilityRange","end","liveEdge","setExpectedLiveEdge","updateManifestUpdateInfo","onDynamicStreamCompleted","initialize","isDynamic","getStreamInfo","getInitRequest","calcAvailabilityStartTimeFromPresentationTime","calcAvailabilityEndTimeFromPresentationTime","initialization","generateInitRequest","getSegmentRequestForTime","segmentInfoType","keepIdx","ignoreIsFinished","getSegmentByTime","action","ACTION_COMPLETE","SEGMENT_TIMELINE","getNextSegmentRequest","indexToRequest","getSegmentByIndex","mediaStartTime","isFinite","setCurrentIndex","getCurrentIndex","setMimeType","newMimeType","_controllersSegmentsController2","_coreFactoryMaker2","DashConstants","init","constants","BASE_URL","SEGMENT_BASE","SEGMENT_TEMPLATE","SEGMENT_LIST","SEGMENT_URL","SEGMENT_PROFILES","ADAPTATION_SET","REPRESENTATION","REPRESENTATION_INDEX","SUB_REPRESENTATION","INITIALIZATION","INITIALIZATION_MINUS","MPD","PERIOD","ASSET_IDENTIFIER","EVENT_STREAM","ID","PROFILES","SERVICE_LOCATION","RANGE","INDEX","MEDIA","BYTE_RANGE","INDEX_RANGE","MEDIA_RANGE","VALUE","CONTENT_TYPE","MIME_TYPE","BITSTREAM_SWITCHING","BITSTREAM_SWITCHING_MINUS","CODECS","DEPENDENCY_ID","MEDIA_STREAM_STRUCTURE_ID","METRICS","METRICS_MINUS","REPORTING","WIDTH","HEIGHT","SAR","FRAMERATE","AUDIO_SAMPLING_RATE","MAXIMUM_SAP_PERIOD","START_WITH_SAP","MAX_PLAYOUT_RATE","CODING_DEPENDENCY","SCAN_TYPE","FRAME_PACKING","AUDIO_CHANNEL_CONFIGURATION","CONTENT_PROTECTION","ESSENTIAL_PROPERTY","SUPPLEMENTAL_PROPERTY","INBAND_EVENT_STREAM","ACCESSIBILITY","ROLE","RATING","CONTENT_COMPONENT","SUBSET","LANG","VIEWPOINT","ROLE_ASARRAY","ACCESSIBILITY_ASARRAY","AUDIOCHANNELCONFIGURATION_ASARRAY","CONTENTPROTECTION_ASARRAY","MAIN","DYNAMIC","STATIC","MEDIA_PRESENTATION_DURATION","MINIMUM_UPDATE_PERIOD","CODEC_PRIVATE_DATA","BANDWITH","SOURCE_URL","TIMESCALE","DURATION","START_NUMBER","PRESENTATION_TIME_OFFSET","AVAILABILITY_START_TIME","AVAILABILITY_END_TIME","TIMESHIFT_BUFFER_DEPTH","MAX_SEGMENT_DURATION","PRESENTATION_TIME","MIN_BUFFER_TIME","MAX_SUBSEGMENT_DURATION","START","AVAILABILITY_TIME_OFFSET","AVAILABILITY_TIME_COMPLETE","CENC_DEFAULT_KID","DVB_PRIORITY","DVB_WEIGHT","SUGGESTED_PRESENTATION_DELAY","SERVICE_DESCRIPTION","SERVICE_DESCRIPTION_SCOPE","SERVICE_DESCRIPTION_LATENCY","SERVICE_DESCRIPTION_PLAYBACK_RATE","RepresentationController","abrController","playbackController","realAdaptation","updating","voAvailableRepresentations","currentVoRepresentation","checkConfig","MISSING_CONFIG_ERROR","isUpdating","getCurrentRepresentation","addRepresentationSwitch","now","currentRepresentation","currentVideoTimeMs","getRepresentationForQuality","updateRepresentation","calcSegmentAvailabilityRange","endDataUpdate","_streamingVoDashJSError2","availabilityDelay","updateAvailabilityWindow","notifyUpdate","ln","startDataUpdate","postponeUpdate","postponeTimePeriod","AST_IN_FUTURE","delay","rep","getIsDynamic","onRepresentationUpdated","repInfo","manifestUpdateInfo","getCurrentManifestUpdate","alreadyAdded","ignorePostponeTimePeriod","getStreamController","getStreams","activeStreamInfo","getActiveStreamInfo","startTimeAnchor","min","segmentAvailabilityTimePeriod","getLiveDelay","getRepresentationUpdatePostponeTimePeriod","representationInfo","addManifestUpdateRepresentationInfo","isAllRepresentationsUpdated","setPlaybackQuality","latency","getCurrentRepresentationSwitch","onWallclockTimeUpdated","onQualityChanged","newQuality","onManifestValidityChanged","newDuration","getData","updateData","newRealAdaptation","availableRepresentations","VIDEO","AUDIO","FRAGMENTED_TEXT","QUALITY_CHANGE_REQUESTED","MANIFEST_VALIDITY_CHANGED","SegmentsController","getters","getSegmentsGetter","_utilsTimelineSegmentsGetter2","_utilsTemplateSegmentsGetter2","_utilsListSegmentsGetter2","_utilsSegmentBaseGetter2","mimeType","lastSegmentTime","getter","DashManifestModel","errHandler","BASE64","_streamingUtilsURLUtils2","isInteger","getIsTypeOf","col","mimeTypeRegEx","codecs","found","ContentComponent_asArray","TEXT","essentialProperties","getEssentialPropertiesForRepresentation","_streamingThumbnailThumbnailTracks","THUMBNAILS_SCHEME_ID_URIS","schemeIdUri","IMAGE","_constantsDashConstants2","search","STPP","WVTT","MUXED","contentType","getIsTextTrack","getRepresentationSortFunction","processAdaptation","sort","getRealAdaptations","periodIndex","realRepresentation","EssentialProperty_asArray","map","getEventStreams","inbandStreams","eventStreams","eventStream","_voEventStream2","SCHEME_ID_URI","getBaseURLsFromElement","baseUrls","entries","BaseURL_asArray","baseUri","earlyReturn","baseUrl","_voBaseURL2","text","dvb_priority","dvb_weight","availabilityTimeOffset","availabilityTimeComplete","getLanguageForAdaptation","lang","getViewpointForAdaptation","Viewpoint","getRolesForAdaptation","Role_asArray","getAccessibilityForAdaptation","Accessibility_asArray","getAudioChannelConfigurationForAdaptation","AudioChannelConfiguration_asArray","getAudioChannelConfigurationForRepresentation","getAdaptationForIndex","realAdaptations","getIndexForAdaptation","_streamingUtilsObjectUtils2","areEqual","getAdaptationForId","getAdaptationsForType","adaptations","getCodec","addResolutionInfo","codec","width","height","getMimeType","getKID","getLabelsForAdaptation","Label_asArray","labelArray","getContentProtectionData","ContentProtection_asArray","hasProfile","profile","has","profiles","getDuration","mediaPresentationDuration","POSITIVE_INFINITY","MAX_SAFE_INTEGER","MAX_VALUE","getBandwidth","getManifestUpdatePeriod","latencyOfLastUpdate","minimumUpdatePeriod","max","getRepresentationCount","getBitrateListForAdaptation","processedRealAdaptation","scanType","getRepresentationFor","getRepresentationsForAdaptation","voAdaptation","segmentTimeline","s0","voRepresentations","periodArray","getRealAdaptationFor","segmentInfo","_voRepresentation2","codecPrivateData","maxPlayoutRate","SegmentBase","SegmentList","SegmentTemplate","Initialization","sourceURL","segmentDuration","SegmentTimeline","S_asArray","startNumber","indexRange","presentationTimeOffset","MSETimeOffset","presentationOffset","getAdaptationsForPeriod","voPeriod","realPeriod","voAdaptations","voAdaptationSet","realAdaptationSet","_voAdaptationSet2","getRegularPeriods","voPeriods","realPreviousPeriod","voPreviousPeriod","_voPeriod2","DEFAULT_ID","getPeriodId","periodEnd","_coreErrorsErrors2","getEndTimeForLastPeriod","getMpd","_voMpd2","loadedTime","suggestedPresentationDelay","timeShiftBufferDepth","maxSegmentDuration","getEventsForPeriod","EventStream_asArray","Event_asArray","_event","_voEvent2","presentationTime","calculatedPresentationTime","Signal","Binary","messageData","decodeArray","getEventStreamForAdaptationSet","adaptationArray","InbandEventStream_asArray","getEventStreamForRepresentation","representationArray","getUTCTimingSources","hasAST","utcTimingsArray","UTCTiming_asArray","utcTimingEntries","utcTiming","_voUTCTiming2","getLocation","LOCATION","Location","Location_asArray","getSuggestedPresentationDelay","getAvailabilityStartTime","getServiceDescriptions","serviceDescriptions","_step","_iterator","ServiceDescription_asArray","_iteratorNormalCompletion","next","done","sd","playbackRate","SERVICE_DESCRIPTION_LL_SCHEME","getSupplementalPropperties","supplementalProperties","_iterator2","SupplementalProperty_asArray","_iteratorNormalCompletion2","_step2","sp","setConfig","DashParser","objectIron","performance","jsonTime","run","ironedTime","toPrecision","protocol","getMatchers","getIron","_matchersDurationMatcher2","_matchersDateTimeMatcher2","_matchersNumericMatcher2","_matchersStringMatcher2","_externalsXml2json2","_objectiron2","adaptationset","_mapsRepresentationBaseValuesMap2","_mapsSegmentValuesMap2","CommonProperty","_merge","toUpperCase","MapNode","_children","_properties","_CommonProperty2","RepresentationBaseValuesMap","commonProperties","_MapNode3","SegmentValuesMap","BaseMatcher","_test","_converter","SECONDS_IN_MIN","MINUTES_IN_HOUR","MILLISECONDS_IN_SECONDS","datetimeRegex","DateTimeMatcher","exec","utcDate","timezoneOffset","durationRegex","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","DurationMatcher","attributeList","START_TIME","numericRegex","NumericMatcher","StringMatcher","stringAttrsInElements","_stringAttrsInElements","attrNames","ObjectIron","mappers","mapProperties","parentValue","childValue","property","parentItem","childItem","mergeValues","mapItem","v","len2","childNode","periodMapper","periods","adaptationSets","adaptationSetMapper","ListSegmentsGetter","list","SegmentURL_asArray","offsetToSubtract","_SegmentsUtils","getIndexBasedSegment","periodTime","calcPeriodRelativeTimeFromMpdRelativeTime","SegmentBaseGetter","epsilon","frag","ft","fd","getIndexByTime","presentationEndTime","getSegment","calcMediaTimeFromPresentationTime","isSegmentAvailable","fTimescale","tManifest","scaledTime","scaledDuration","calcPresentationTimeFromMediaTime","zeroPadToLength","numStr","minStrLength","token","startPos","endPos","formatTagPos","specifier","paddedValue","tokenLen","formatTagLen","_voSegment2","calcWallTimeForSegment","getPeriodEnd","TemplateSegmentsGetter","template","availabilityWindow","ceil","TimelineSegmentsGetter","iterateSegments","iterFunc","base","timeline","repeat","repeatEndTime","nextFrag","breakIterator","availabilityEnd","requiredMediaTime","AdaptationSet","BaseURL","weight","DEFAULT_DVB_PRIORITY","DEFAULT_DVB_WEIGHT","Event","presentationTimeDelta","EventStream","adaptionSet","Mpd","Period","Representation","Segment","UTCTiming","OfflineDownload","manifestLoader","mediaPlayerModel","adapter","offlineStoreController","manifestId","manifestUpdater","_manifestURL","_offlineURL","_xmlManifest","_streams","_manifest","_isDownloadingStatus","_isComposed","_representationsToUpdate","_indexDBManifestParser","_progressionById","_progression","_status","isDownloading","onManifestUpdated","_constantsOfflineConstants2","OFFLINE_STATUS_ERROR","_errorsOfflineErrors2","OFFLINE_ERROR","onDownloadingStarted","OFFLINE_STATUS_STARTED","setDownloadingStatus","OFFLINE_RECORD_STARTED","OnStreamProgression","stream","downloaded","available","allSegments","waitForAllProgress","getManifestById","progress","updateOfflineManifest","onDownloadingFinished","OFFLINE_STATUS_FINISHED","OFFLINE_RECORD_FINISHED","resetDownload","onManifestUpdateNeeded","representations","parsedManifest","startOfflineStreamProcessors","composeStreams","updatePeriods","streamsInfo","getStreamsInfo","_OfflineStream2","callbacks","started","progression","finished","updateManifestNeeded","createFragmentStore","offlineManifest","onOriginalManifestLoaded","originalManifest","getMediaInfos","initializeAllMediasInfoList","selectedRepresentations","stopDownload","stopOfflineStreamProcessors","OFFLINE_STATUS_STOPPED","OFFLINE_RECORD_STOPPED","sender","ERROR","INDEXEDDB_QUOTA_EXCEED_ERROR","INDEXEDDB_INVALID_STATE_ERROR","getId","getOfflineUrl","getManifestUrl","getStatus","setInitialState","originalUrl","initDownload","load","downloadFromUrl","OFFLINE_SCHEME","OFFLINE_STATUS_CREATED","fragmentStore","originalURL","createOfflineManifest","startDownload","mediaInfos","bitrateList","bitrate","saveSelectedRepresentations","_utilsOfflineIndexDBManifestParser2","allMediaInfos","resumeDownload","_dashParserDashParser2","selected","deleteDownload","getDownloadProgression","round","dashjs","OfflineStream","startedCb","progressionCb","finishedCb","updateManifest","offlineStreamProcessors","startedOfflineStreamProcessors","finishedOfflineStreamProcessors","representationsToUpdate","allMediasInfosList","progressionById","createOfflineStreamProcessorFor","allMediaInfoForType","getAllMediaInfoForType","streamProcessor","_OfflineStreamProcessor2","completed","onStreamCompleted","onStreamProgression","downloadedSegments","availableSegments","getRepresentationId","onDataUpdateCompleted","getRepresentationController","checkIfAllOfflineStreamProcessorsStarted","stop","deactivate","removeExecutedRequestsBeforeTime","initStreamInfo","OFFLINE_RECORD_LOADEDMETADATA","mediasInfoList","OfflineStreamProcessor","completedCb","progressCb","indexHandler","representationController","fragmentModel","isInitialized","isStopped","onFragmentLoadingCompleted","isInit","fragmentName","storeFragment","setRepresentationCurrentState","executeRequest","download","getAvailableSegmentsNumber","getMediaInfo","_mediaInfo","getVoRepresentations","findIndex","getRepresentationCurrentState","FRAGMENT_LOADING_COMPLETED","_dashDashHandler2","requestModifier","_streamingUtilsRequestModifier2","_dashControllersRepresentationController2","_streamingModelsFragmentModel2","fragmentLoader","_streamingFragmentLoader2","OfflineConstants","OFFLINE_URL_REGEX","OfflineController","manifestModel","schemeLoaderFactory","downloads","offlineUrlUtils","getDownloadFromId","find","createDownloadFromId","_OfflineDownload2","removeDownloadFromId","waitForStatusChanged","downloadStopped","deleteDownloadById","resetRecords","loadRecordsFromStorage","getAllManifests","items","manifests","offline","createRecord","manifestURL","startRecord","stopRecord","resumeRecord","deleteRecord","getRecordProgression","getAllRecords","records","record","_voOfflineDownloadVo2","unregisterLoader","_OfflineStoreController2","_utilsOfflineUrlUtils2","registerUrlRegex","getRegex","registerLoader","_netIndexDBOfflineLoader2","_eventsOfflineEvents2","OfflineStoreController","indexDBStore","manageDOMError","INDEXEDDB_NOT_FOUND_ERROR","INDEXEDDB_VERSION_ERROR","fragmentId","fragmentData","storeManifest","getCurrentHigherManifestId","_storageIndexDBStore2","OfflineErrors","INDEXEDDB_NOT_READABLE_ERROR","INDEXEDDB_NETWORK_ERROR","INDEXEDDB_DATA_ERROR","INDEXEDDB_TRANSACTION_INACTIVE_ERROR","INDEXEDDB_NOT_ALLOWED_ERROR","INDEXEDDB_NOT_SUPPORTED_ERROR","INDEXEDDB_TIMEOUT_ERROR","INDEXEDDB_ABORT_ERROR","INDEXEDDB_UNKNOWN_ERROR","offlineErrors","OfflineEvents","offlineEvents","_controllersOfflineController2","IndexDBOfflineLoader","removeHostname","EMBEDDED_TEXT","getFragmentByKey","fragment","success","ARRAY_BUFFER","XML","abort","entities","IndexDBStore","manifestStore","fragmentStores","dropAll","newStatus","higherManifestId","dropFragmentStore","Entities","OfflineIndexDBManifestParser","DOM","isFragmentedTextCodecFoundInTag","tag","getAttribute","findRepresentations","isFragmentedTextCodecFound","findMimeType","testMimeType","getElementsByTagName","getBestRepresentationId","currentAdaptationSet","bestRepresentation","getFragmentId","idxFragId","lastIndexOf","XMLDoc","currentMPD","basesURL","innerHTML","adaptationsSet","isHTTPS","isHTTPURL","editBaseURLAttribute","currentPeriod","currentAdaptationType","getIsMuxed","getIsAudio","getIsVideo","getIsFragmentedText","getIsImage","findAdaptationType","adaptationType","repId","findAndKeepOnlySelectedRepresentations","elements","segmentBase","deleteSegmentBase","segmentList","getSegmentList","segmentLists","initialisation","setAttribute","segmentURLs","segmentUrl","editSegmentListAttributes","segmentTemplate","getSegmentTemplate","segmentsTemplates","editSegmentTemplateAttributes","selectedRep","_i2","adaptationSet","segmentTemplateElement","S","segmentTimelineElement","changedDuration","getDurationChangeArray","repeatValue","addSegmentTimelineElements","addSegmentTemplateAttributes","browseAdaptationsSet","browsePeriods","manifestEncoded","XMLSerializer","serializeToString","OfflineUrlUtils","FragmentLoader","urlLoader","checkForExistence","report","exists","headRequest","_voHeadRequest2","event","statusText","errorText","_voDashJSError2","_netURLLoader2","useFetch","_constantsConstants2","boxParser","MediaPlayerEvents","BUFFER_EMPTY","BUFFER_LOADED","BUFFER_LEVEL_STATE_CHANGED","FRAGMENT_LOADING_PROGRESS","FRAGMENT_LOADING_STARTED","FRAGMENT_LOADING_ABANDONED","MANIFEST_LOADED","METRICS_CHANGED","METRIC_CHANGED","METRIC_ADDED","METRIC_UPDATED","PERIOD_SWITCH_COMPLETED","PERIOD_SWITCH_STARTED","QUALITY_CHANGE_RENDERED","TRACK_CHANGE_RENDERED","SOURCE_INITIALIZED","STREAM_INITIALIZING","STREAM_UPDATED","STREAM_INITIALIZED","STREAM_TEARDOWN_COMPLETE","TEXT_TRACKS_ADDED","TEXT_TRACK_ADDED","TTML_PARSED","TTML_TO_PARSE","CAPTION_RENDERED","CAPTION_CONTAINER_RESIZE","CAN_PLAY","PLAYBACK_ENDED","PLAYBACK_ERROR","PLAYBACK_NOT_ALLOWED","PLAYBACK_METADATA_LOADED","PLAYBACK_PAUSED","PLAYBACK_PLAYING","PLAYBACK_PROGRESS","PLAYBACK_RATE_CHANGED","PLAYBACK_SEEKED","PLAYBACK_SEEKING","PLAYBACK_SEEK_ASKED","PLAYBACK_STALLED","PLAYBACK_STARTED","PLAYBACK_TIME_UPDATED","PLAYBACK_WAITING","GAP_CAUSED_SEEK_TO_PERIOD_END","mediaPlayerEvents","Constants","STREAM","TTML","VTT","ABR_STRATEGY_BOLA","ABR_STRATEGY_THROUGHPUT","MOVING_AVERAGE_EWMA","BAD_ARGUMENT_ERROR","TRACK_SELECTION_MODE_WIDEST_RANGE","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","UTF8","SUPPLEMENTAL_PROPERTY_LL_SCHEME","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","BECAME_REPORTING_PLAYER","CMCD_DATA_GENERATED","metricsReportingEvents","OBJECT_TYPES","STREAMING_FORMATS","STREAM_TYPES","CmcdModel","dashManifestModel","internalData","_isStartup","_bufferLevelStarved","_initialMediaRequestsDone","_coreEventBus2","_coreSettings2","_resetInitialSettings","pr","nor","st","sf","_coreUtils2","generateUuid","_getGenericCmcdData","_onPlaybackRateChanged","_onManifestLoaded","_onBufferLevelStateChanged","_MediaPlayerEvents2","_onPlaybackSeeked","getQueryParameter","cmcdData","_voMetricsHTTPRequest","generateHashCode","_setDefaultContentId","ot","_getCmcdDataForMpd","_initForMediaType","encodedBitrate","_getBitrateByRequest","_getObjectDurationByRequest","mtp","getThroughputHistory","getSafeAverageThroughput","_getMeasuredThroughputByType","dl","bufferLevel","getCurrentBufferLevel","_getDeadlineByType","bl","_getBufferLevelByType","tb","getTopBitrateInfoFor","_getTopBitrateByType","br","bs","su","_getCmcdDataForMediaSegment","_getCmcdDataForInitSegment","_getCmcdDataForOther","_getCmcdData","finalPayloadString","cmcdString","reduce","acc","encodeURIComponent","_buildFinalString","_metricsMetricsReportingEvents2","_dashModelsDashManifestModel2","FRAGMENT_MODEL_LOADING","FRAGMENT_MODEL_EXECUTED","FragmentModel","executedRequests","loadingRequests","isFragmentLoaded","isLoaded","req1","req2","_voFragmentRequest2","getRequestThreshold","threshold","removeExecutedRequestsInTimeRange","addSchedulingInfoMetrics","addSchedulingInfo","addRequestsQueue","onLoadingCompleted","onLoadingInProgress","onLoadingAborted","getRequests","states","filteredRequests","requests","getRequestsForState","getRequestForTime","filterRequests","isFragmentLoadedOrPending","removeExecutedRequestsAfterTime","syncExecutedRequestsWithBufferedRange","bufferedRanges","streamDuration","abortRequests","ACTION_DOWNLOAD","addExecutedRequest","FRAGMENT_MODEL_CANCELED","FRAGMENT_MODEL_FAILED","FetchLoader","cfg","read","httpRequest","processResult","calculateDownloadedTime","datum","bytesReceived","avgTimeDistance","ts","distance","requestStartTime","headers","Headers","requestStartDate","modifyRequestHeader","setRequestHeader","header","abortController","AbortController","signal","reqOptions","method","credentials","withCredentials","responseURL","ok","responseHeaders","body","loaded","total","onend","totalBytes","signaledFirstByte","remaining","getReader","downLoadedData","_ref","boxesInfo","lengthComputable","concatTypedArray","findLastTopIsoBoxCompleted","lastCompletedOffset","subarray","noTrace","cancel","HTTPLoader","delayedRequests","retryRequests","downloadErrorToRequestTypeMap","cmcdModel","internalLoad","remainingAttempts","traces","firstProgress","needFailureReport","lastTraceTime","lastTraceReceivedCount","handleLoaded","requestEndDate","firstByteDate","checkExistenceOnly","addHttpRequest","getAllResponseHeaders","addManifestUpdate","delayedRequest","retryRequest","timeout","getRetryIntervalsForType","complete","loader","responseType","_FetchLoader2","_XHRLoader2","modifyRequestURL","additionalQueryParameter","cmcdQueryParameter","_getAdditionalQueryParameter","addAditionalQueryParameterToUrl","HEAD","GET","getXHRWithCredentialsForType","currentTime","bytesLoaded","bytesTotal","delayLoadingTime","delayTimeout","getRetryAttemptsForType","clearTimeout","onprogress","_modelsCmcdModel2","_downloadErrorToRequestTypeMap","SchemeLoaderFactory","schemeLoaderMap","unregisterAllLoader","getLoader","scheme","startsWith","_streamingNetHTTPLoader2","URLLoader","_streamingNetSchemeLoaderFactory2","loaderFactory","XHRLoader","xhr","XMLHttpRequest","send","ThumbnailTracks","tracks","currentTrackIndex","_streamingNetXHRLoader2","_streamingUtilsBoxParser2","getMediaInfoForType","voReps","_dashConstantsDashConstants2","createTrack","addTracks","useSegmentBase","track","_voThumbnailTrackInfo2","tilesHor","tilesVert","vars","_coreEventsEvents2","cache","_dashUtilsSegmentsUtils","normalizeSegments","readThumbnail","cached","el","ss","getSamplesInfo","sampleList","imageUrl","createObjectURL","templateUrl","widthPerTile","heightPerTile","getTracks","setTrackByIndex","getCurrentTrack","getCurrentTrackIndex","getThumbnailRequestForTime","currentVoRep","BoxParser","fileStart","parsedFile","_codemIsoboxer2","dashIsoFile","_IsoFile2","setData","types","_voIsoBoxSearchInfo2","boxInfo","boxSize","boxType","getMediaTimescaleFromMoov","ab","mdhdBox","isoFile","getBox","lastSequenceNumber","totalDuration","numSequences","sampleDuration","sampleSize","moofBoxes","getBoxes","mfhdBoxes","sampleDts","dataOffset","sequence_number","subsIndex","nextSubsSample","moofBox","trafBoxes","getChildBoxes","trafBox","tfhdBox","getChildBox","tfdtBox","baseMediaDecodeTime","trunBoxes","subsBoxes","trunBox","sampleCount","base_data_offset","data_offset","samples","sample_duration","default_sample_duration","sample_size","default_sample_size","sampleData","dts","cts","sample_composition_time_offset","subSizes","subsBox","sample_delta","subsamples","subsample_size","findInitRange","initRange","ftyp","moov","isComplete","DefaultURLUtils","nativeURLResolver","dumbURLResolver","baseUrlParseFunc","parseBaseUrl","isPathAbsolute","parseOrigin","isSchemeRelative","parseScheme","joinChar","resolveFunction","schemeRegex","httpUrlRegex","httpsUrlRegex","originRegex","slashIndex","lastSlashIndex","matches","setup","IsoFile","parsedIsoFile","boxData","convertToDashIsoBox","_voIsoBox2","getLastBox","ObjectUtils","obj1","obj2","_fastDeepEqual2","RequestModifier","URLUtils","defaultURLUtils","regexUtils","internalCall","functionName","utils","regex","getUtils","_DefaultURLUtils2","DashJSError","FragmentRequest","HeadRequest","checkForExistenceOnly","IsoBox","earliest_presentation_time","first_offset","references","subsegment_duration","scheme_id_uri","presentation_time_delta","presentation_time","event_duration","message_data","sample_description_index","default_sample_flags","first_sample_flags","IsoBoxSearchInfo","ThumbnailTrackInfo","tcpid","actualurl","trequest","tresponse","responsecode","interval","trace","_stream","_tfinish","_mediaduration","_quality","_responseHeaders","_serviceLocation","HTTPRequestTrace"],"mappings":"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AAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,WAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,WAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,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A,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,SAAA,CAAA,QAAA,CAAA,UAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,OAAA,CAAA,KAAA,QAAA,CAAA,SAAA,CAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,WAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAA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A,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,MAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,WAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,QAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,QAAA,CAAA,UAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAA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A,oBAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,KAAA,OAAA,CAAA,QAAA,CAAA,KAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,SAAA,CAAA,MAAA,QAAA,CAAA,SAAA,CAAA,KAAA,QAAA,CAAA,SAAA,CAAA,MAAA,QAAA,CAAA,SAAA,CAAA,KAAA,QAAA,CAAA,SAAA,CAAA,OAAA,CAAA,UAAA,CAAA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,SAAA,CAAA,OAAA,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"}