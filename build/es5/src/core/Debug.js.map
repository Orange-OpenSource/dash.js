{"version":3,"sources":["../../../../src/core/Debug.js"],"names":["EventBus","Events","FactoryMaker","LOG_LEVEL_NONE","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARNING","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","Debug","context","eventBus","getInstance","logFn","instance","showLogTimestamp","showCalleeName","startTime","logLevel","setup","Date","getTime","window","console","getLogFn","error","warn","info","debug","fn","bind","log","getLogger","fatal","setLogLevel","value","getLogLevel","setLogTimestampVisible","setCalleeNameVisible","setLogToBrowserConsole","getLogToBrowserConsole","params","doLog","level","_this","message","logTime","getClassName","getType","length","Array","apply","forEach","item","trigger","LOG","__dashjs_factory_name","factory","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"Debug.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from './EventBus';\r\nimport Events from './events/Events';\r\nimport FactoryMaker from './FactoryMaker';\r\n\r\nconst LOG_LEVEL_NONE = 0;\r\nconst LOG_LEVEL_FATAL = 1;\r\nconst LOG_LEVEL_ERROR = 2;\r\nconst LOG_LEVEL_WARNING = 3;\r\nconst LOG_LEVEL_INFO = 4;\r\nconst LOG_LEVEL_DEBUG = 5;\r\n\r\n/**\r\n * @module Debug\r\n */\r\nfunction Debug() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    const logFn = [];\r\n\r\n    let instance,\r\n        showLogTimestamp,\r\n        showCalleeName,\r\n        startTime,\r\n        logLevel;\r\n\r\n    function setup() {\r\n        showLogTimestamp = true;\r\n        showCalleeName = true;\r\n        logLevel = LOG_LEVEL_WARNING;\r\n        startTime = new Date().getTime();\r\n\r\n        if (typeof window !== 'undefined' && window.console) {\r\n            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\r\n            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\r\n            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\r\n            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\r\n            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\r\n        }\r\n    }\r\n\r\n    function getLogFn(fn) {\r\n        if (fn && fn.bind) {\r\n            return fn.bind(window.console);\r\n        }\r\n        // if not define, return the default function for reporting logs\r\n        return window.console.log.bind(window.console);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a logger which can be used to write logging information in browser console.\r\n     * @param {object} instance Object for which the logger is created. It is used\r\n     * to include calle object information in log messages.\r\n     * @memberof module:Debug\r\n     * @returns {Logger}\r\n     * @instance\r\n     */\r\n    function getLogger(instance) {\r\n        return {\r\n            fatal: fatal.bind(instance),\r\n            error: error.bind(instance),\r\n            warn: warn.bind(instance),\r\n            info: info.bind(instance),\r\n            debug: debug.bind(instance)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Sets up the log level. The levels are cumulative. For example, if you set the log level\r\n     * to dashjs.Debug.LOG_LEVEL_WARNING all warnings, errors and fatals will be logged. Possible values\r\n     *\r\n     * <ul>\r\n     * <li>dashjs.Debug.LOG_LEVEL_NONE<br/>\r\n     * No message is written in the browser console.\r\n     *\r\n     * <li>dashjs.Debug.LOG_LEVEL_FATAL<br/>\r\n     * Log fatal errors. An error is considered fatal when it causes playback to fail completely.\r\n     *\r\n     * <li>dashjs.Debug.LOG_LEVEL_ERROR<br/>\r\n     * Log error messages.\r\n     *\r\n     * <li>dashjs.Debug.LOG_LEVEL_WARNING<br/>\r\n     * Log warning messages.\r\n     *\r\n     * <li>dashjs.Debug.LOG_LEVEL_INFO<br/>\r\n     * Log info messages.\r\n     *\r\n     * <li>dashjs.Debug.LOG_LEVEL_DEBUG<br/>\r\n     * Log debug messages.\r\n     * </ul>\r\n     * @param {number} value Log level\r\n     * @default true\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setLogLevel(value) {\r\n        logLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Use this method to get the current log level.\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function getLogLevel() {\r\n        return logLevel;\r\n    }\r\n\r\n    /**\r\n     * Prepends a timestamp in milliseconds to each log message.\r\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\r\n     * @default LOG_LEVEL_WARNING\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setLogTimestampVisible(value) {\r\n        showLogTimestamp = value;\r\n    }\r\n    /**\r\n     * Prepends the callee object name, and media type if available, to each log message.\r\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\r\n     * @default true\r\n     * @memberof module:Debug\r\n     * @instance\r\n     */\r\n    function setCalleeNameVisible(value) {\r\n        showCalleeName = value;\r\n    }\r\n    /**\r\n     * Toggles logging to the browser's javascript console.  If you set to false you will still receive a log event with the same message.\r\n     * @param {boolean} value Set to false if you want to turn off logging to the browser's console.\r\n     * @default true\r\n     * @memberof module:Debug\r\n     * @instance\r\n     * @deprecated\r\n     */\r\n    function setLogToBrowserConsole(value) {\r\n        // Replicate functionality previous to log levels feature\r\n        if (value) {\r\n            logLevel = LOG_LEVEL_DEBUG;\r\n        } else {\r\n            logLevel = LOG_LEVEL_NONE;\r\n        }\r\n    }\r\n    /**\r\n     * Use this method to get the state of logToBrowserConsole.\r\n     * @returns {boolean} The current value of logToBrowserConsole\r\n     * @memberof module:Debug\r\n     * @instance\r\n     * @deprecated\r\n     */\r\n    function getLogToBrowserConsole() {\r\n        return logLevel !== LOG_LEVEL_NONE;\r\n    }\r\n\r\n    function fatal(...params) {\r\n        doLog(LOG_LEVEL_FATAL, this, ...params);\r\n    }\r\n\r\n    function error(...params) {\r\n        doLog(LOG_LEVEL_ERROR, this, ...params);\r\n    }\r\n\r\n    function warn(...params) {\r\n        doLog(LOG_LEVEL_WARNING, this, ...params);\r\n    }\r\n\r\n    function info(...params) {\r\n        doLog(LOG_LEVEL_INFO, this, ...params);\r\n    }\r\n\r\n    function debug(...params) {\r\n        doLog(LOG_LEVEL_DEBUG, this, ...params);\r\n    }\r\n\r\n    function doLog(level, _this, ...params) {\r\n        let message = '';\r\n        let logTime = null;\r\n\r\n        if (showLogTimestamp) {\r\n            logTime = new Date().getTime();\r\n            message += '[' + (logTime - startTime) + ']';\r\n        }\r\n\r\n        if (showCalleeName && _this && _this.getClassName) {\r\n            message += '[' + _this.getClassName() + ']';\r\n            if (_this.getType) {\r\n                message += '[' + _this.getType() + ']';\r\n            }\r\n        }\r\n\r\n        if (message.length > 0) {\r\n            message += ' ';\r\n        }\r\n\r\n        Array.apply(null, params).forEach(function (item) {\r\n            message += item + ' ';\r\n        });\r\n\r\n        // log to console if the log level is high enough\r\n        if (logFn[level] && logLevel >= level) {\r\n            logFn[level](message);\r\n        }\r\n\r\n        // send log event regardless of log level\r\n        eventBus.trigger(Events.LOG, {message: message, level: level});\r\n    }\r\n\r\n    instance = {\r\n        getLogger: getLogger,\r\n        setLogTimestampVisible: setLogTimestampVisible,\r\n        setCalleeNameVisible: setCalleeNameVisible,\r\n        setLogToBrowserConsole: setLogToBrowserConsole,\r\n        getLogToBrowserConsole: getLogToBrowserConsole,\r\n        setLogLevel: setLogLevel,\r\n        getLogLevel: getLogLevel\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDebug.__dashjs_factory_name = 'Debug';\r\n\r\nconst factory = FactoryMaker.getSingletonFactory(Debug);\r\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\r\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\r\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\r\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\r\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\r\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\r\nFactoryMaker.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\r\nexport default factory;\r\n"]}