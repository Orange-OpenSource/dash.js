{"version":3,"sources":["../../../../../src/offline/storage/IndexDBStore.js"],"names":["FactoryMaker","localforage","require","entities","XmlEntities","IndexDBStore","instance","manifestStore","fragmentStores","setup","window","config","driver","INDEXEDDB","name","createInstance","version","storeName","createFragmentStore","console","log","fragmentStore","setDownloadingStatus","manifestId","newStatus","getManifestById","then","item","status","updateManifest","catch","Promise","reject","err","getFragmentByKey","key","getItem","value","resolve","id","getAllManifests","array","i","manifests","length","parseInt","manifest","decode","getCurrentHigherManifestId","higherManifestId","setItem","Error","storeManifest","results","push","storeFragment","fragmentId","fragmentData","dropAll","clear","dropFragmentStore","dropInstance","deleteDownloadById","deleteFragmentStore","splice","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"IndexDBStore.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from './../../core/FactoryMaker';\r\nconst localforage = require('localforage');\r\nconst entities = require('html-entities').XmlEntities;\r\n\r\n/**\r\n * @module  IndexDBStore\r\n * @description IndexedDB Access\r\n */\r\nfunction IndexDBStore() {\r\n\r\n    let instance,\r\n        manifestStore,\r\n        fragmentStores;\r\n\r\n    function setup() {\r\n        fragmentStores = {};\r\n\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        localforage.config({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db'\r\n        });\r\n\r\n        manifestStore = localforage.createInstance({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db',\r\n            version: 1.0,\r\n            storeName: 'manifest'\r\n        });\r\n    }\r\n\r\n    /////////////////////////////////////////\r\n    //\r\n    // GET/SET Methods\r\n    //\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * Creates an instance of localforage to store fragments in indexed db\r\n     * @param {string} storeName\r\n     * @memberof module:IndexDBStore\r\n     * @instance\r\n     */\r\n    function createFragmentStore(storeName) {\r\n        console.log('setStore  ' + storeName);\r\n        let fragmentStore = localforage.createInstance({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db',\r\n            version: 1.0,\r\n            storeName: storeName\r\n        });\r\n\r\n        fragmentStores[storeName] = fragmentStore;\r\n    }\r\n\r\n    /**\r\n     * Update download status\r\n     * @memberof module:IndexDBStore\r\n     * @param {number} manifestId\r\n     * @param {string} newStatus\r\n     * @returns {Promise} promise\r\n     * @instance\r\n     */\r\n    function setDownloadingStatus(manifestId, newStatus) {\r\n        return getManifestById(manifestId).then(function (item) {\r\n            item.status = newStatus;\r\n            return updateManifest(item).catch(function () {\r\n                return Promise.reject('Cannot set status ' + newStatus + ' for this stream !');\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a fragment from its key\r\n     * @memberof module:IndexDBStore\r\n     * @param {number} manifestId\r\n     * @param {number} key\r\n     * @returns {Promise} fragment\r\n     * @instance\r\n     */\r\n    function getFragmentByKey(manifestId, key) {\r\n        let fragmentStore = fragmentStores[manifestId];\r\n        return fragmentStore.getItem(key).then(function (value) {\r\n            return Promise.resolve(value);\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns a manifest from its identifier\r\n     * @memberof module:IndexDBStore\r\n     * @param {number} id\r\n     * @returns {Promise} {Object[]} manifests\r\n     * @instance\r\n     */\r\n    function getManifestById(id) {\r\n        return getAllManifests().then(function (array) {\r\n            if (array) {\r\n                let item = null;\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId === parseInt(id)) {\r\n                        item = array.manifests[i];\r\n                    }\r\n                }\r\n                if (item !== null) {\r\n                    item.manifest = entities.decode(item.manifest);\r\n                    return Promise.resolve(item);\r\n                } else {\r\n                    return Promise.reject('Cannot found manifest with this manifestId : ' + id);\r\n                }\r\n            } else {\r\n                return Promise.reject('Any manifests stored in DB !');\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns all offline manifests\r\n     * @memberof module:IndexDBStore\r\n     * @returns {Promise} {Object[]} manifests\r\n     * @instance\r\n     */\r\n    function getAllManifests() {\r\n        return manifestStore.getItem('manifest').then(function (array) {\r\n            return Promise.resolve(array ? array : {\r\n                'manifests': []\r\n            });\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return higher manifest id\r\n     * @memberof module:IndexDBStore\r\n     * @returns {Promise} number\r\n     * @instance\r\n     */\r\n    function getCurrentHigherManifestId() {\r\n        return getAllManifests().then(function (array) {\r\n            let higherManifestId = 0;\r\n            if (array) {\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId > higherManifestId) {\r\n                        higherManifestId = array.manifests[i].manifestId;\r\n                    }\r\n                }\r\n                return Promise.resolve(higherManifestId);\r\n            } else {\r\n                return Promise.resolve(higherManifestId);\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * MaJ le manifest\r\n     * @memberof module:IndexDBStore\r\n     * @param {Object} manifest à jour\r\n     * @returns {Promise} Object promise de l'action\r\n     * @instance\r\n     */\r\n    function updateManifest(manifest) {\r\n        return getAllManifests().then(function (array) {\r\n            try {\r\n                for (let i = 0; i < array.manifests.length; i++) {\r\n                    if (array.manifests[i].manifestId === manifest.manifestId) {\r\n                        array.manifests[i] = manifest;\r\n                    }\r\n                }\r\n                return manifestStore.setItem('manifest', array);\r\n            } catch (err) {\r\n                throw new Error('Any results found !');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stock un manifest dans le tableau des manifests\r\n     * @memberof module:IndexDBStore\r\n     * @param {Object} manifest\r\n     * @instance\r\n     */\r\n    function storeManifest(manifest) {\r\n        return manifestStore.getItem('manifest').then(function (results) {\r\n            let array = results ? results : {\r\n                'manifests': []\r\n            };\r\n            array.manifests.push(manifest);\r\n            return manifestStore.setItem('manifest', array);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stock un fragment dans le store initialisé\r\n     * @memberof module:IndexDBStore\r\n     * @param {number} manifestId\r\n     * @param {number} fragmentId\r\n     * @param {Object} fragmentData\r\n     * @returns {Promise} résultat de l'ajout\r\n     * @instance\r\n     */\r\n    function storeFragment(manifestId, fragmentId, fragmentData) {\r\n        let fragmentStore = fragmentStores[manifestId];\r\n        return fragmentStore.setItem(fragmentId, fragmentData, function () {\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /////////////////////////////////////////\r\n    //\r\n    // DROP Methods\r\n    //\r\n    ////////////////////////////////////////\r\n\r\n    /**\r\n     * Supprime le contenu de tous les fragmentStore et du manifestStore\r\n     * @memberof module:IndexDBStore\r\n     * @returns {Promise} résultat de la suppression\r\n     * @instance\r\n     */\r\n    function dropAll() {\r\n        return localforage.clear().then(function () {\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Supprime le store courant contenant les fragments\r\n     * @param {string} storeName\r\n     * @memberof module:IndexDBStore\r\n     * @instance\r\n     */\r\n    function dropFragmentStore(storeName) {\r\n        localforage.dropInstance({\r\n            driver: localforage.INDEXEDDB,\r\n            name: 'dash_offline_db',\r\n            version: 1.0,\r\n            storeName: storeName\r\n        }).then(function () {\r\n            delete fragmentStores[storeName];\r\n        }).catch(function (err) {\r\n            console.log('dropFragmentStore failed ' + err);\r\n        });\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Supprime l'enregistrement (fragmentStore + du tableau des manifests), à partir de son Id\r\n     * @memberof module:IndexDBStore\r\n     * @param {number} manifestId\r\n     * @returns {Promise} résultat de la suppression\r\n     * @instance\r\n     */\r\n    function deleteDownloadById(manifestId) {\r\n        return manifestStore.getItem('manifest').then(function (array) {\r\n            if (array) {\r\n                return deleteFragmentStore(manifestId).then(function () {\r\n                    for (let i = 0; i < array.manifests.length; i++) {\r\n                        if (array.manifests[i].manifestId === parseInt(manifestId)) {\r\n                            array.manifests.splice(i, 1);\r\n                        }\r\n                    }\r\n                    return manifestStore.setItem('manifest', array).then(function () {\r\n                        return Promise.resolve('This stream has been successfull removed !');\r\n                    }).catch(function () {\r\n                        return Promise.reject('An error occured when trying to delete this manifest');\r\n                    });\r\n                });\r\n            } else {\r\n                return Promise.resolve('Nothing to delete !');\r\n            }\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Supprime le store contenant les fragments\r\n     * @memberof module:IndexDBStore\r\n     * @param {string} storeName\r\n     * @returns {Promise} résultat de la suppression\r\n     * @instance\r\n     */\r\n    function deleteFragmentStore(storeName) {\r\n        localforage.createInstance({\r\n            name: 'dash_offline_db',\r\n            storeName: storeName\r\n        });\r\n        return localforage.dropInstance({\r\n            name: 'dash_offline_db',\r\n            storeName: storeName\r\n        }).then(function () {\r\n            delete fragmentStores[storeName];\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n            return Promise.reject(err);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        dropAll: dropAll,\r\n        getFragmentByKey: getFragmentByKey,\r\n        getManifestById: getManifestById,\r\n        storeFragment: storeFragment,\r\n        storeManifest: storeManifest,\r\n        updateManifest: updateManifest,\r\n        createFragmentStore: createFragmentStore,\r\n        setDownloadingStatus: setDownloadingStatus,\r\n        getCurrentHigherManifestId: getCurrentHigherManifestId,\r\n        getAllManifests: getAllManifests,\r\n        dropFragmentStore: dropFragmentStore,\r\n        deleteDownloadById: deleteDownloadById\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nIndexDBStore.__dashjs_factory_name = 'IndexDBStore';\r\nexport default FactoryMaker.getSingletonFactory(IndexDBStore);\r\n"]}