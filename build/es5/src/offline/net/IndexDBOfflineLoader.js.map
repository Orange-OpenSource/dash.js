{"version":3,"sources":["../../../../../src/offline/net/IndexDBOfflineLoader.js"],"names":["FactoryMaker","IndexDBStore","URLUtils","Constants","IndexDBOfflineLoader","context","urlUtils","getInstance","instance","indexDBStore","setup","getManifestId","url","myURL","removeHostname","parts","split","load","config","request","manifestId","mediaType","AUDIO","VIDEO","TEXT","MUXED","IMAGE","FRAGMENTED_TEXT","EMBEDDED_TEXT","key","representationId","index","getFragmentByKey","then","fragment","success","ARRAY_BUFFER","catch","err","error","type","MPD","getManifestById","item","createFragmentStore","fragmentStore","manifest","XML","Error","abort","__dashjs_factory_name","factory","getClassFactory"],"mappings":"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","file":"IndexDBOfflineLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport IndexDBStore from '../storage/IndexDBStore';\r\nimport URLUtils from './../../streaming/utils/URLUtils';\r\nimport Constants from './../../streaming/constants/Constants';\r\n\r\n/**\r\n * @module\r\n * @description Load Offline resources\r\n\r\n */\r\nfunction IndexDBOfflineLoader() {\r\n\r\n    const context = this.context;\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        indexDBStore;\r\n\r\n    function setup() {\r\n        indexDBStore = IndexDBStore(context).getInstance();\r\n    }\r\n\r\n    function getManifestId (url) {\r\n        let myURL = urlUtils.removeHostname(url);\r\n        var parts = myURL.split('/');\r\n        return parts[0];\r\n    }\r\n    /**\r\n     * Load manifest or fragment from indexeddb database\r\n     * @param {object} config configuration of request\r\n     * @memberof module:offline\r\n     * @instance\r\n     */\r\n    function load(config) {\r\n        if (config.request) {\r\n            let manifestId = getManifestId(config.request.url);\r\n            if (manifestId % 1 === 0) {\r\n                if (\r\n                    config.request.mediaType === Constants.AUDIO ||\r\n                    config.request.mediaType === Constants.VIDEO ||\r\n                    config.request.mediaType === Constants.TEXT ||\r\n                    config.request.mediaType === Constants.MUXED ||\r\n                    config.request.mediaType === Constants.IMAGE ||\r\n                    config.request.mediaType === Constants.FRAGMENTED_TEXT ||\r\n                    config.request.mediaType === Constants.EMBEDDED_TEXT\r\n                ) {\r\n                    let key = config.request.representationId + '_' + config.request.index;\r\n                    indexDBStore.getFragmentByKey(manifestId, key).then(function (fragment) {\r\n                        config.success(fragment, null, config.request.url, Constants.ARRAY_BUFFER);\r\n                    }).catch(function (err) {\r\n                        config.error(err);\r\n                    });\r\n                } else if (config.request.type === Constants.MPD) {\r\n                    indexDBStore.getManifestById(manifestId).then(function (item) {\r\n                        indexDBStore.createFragmentStore(item.fragmentStore);\r\n                        config.success(item.manifest, null, config.request.url, Constants.XML);\r\n                    }).catch(function (err) {\r\n                        config.error(config.request.url, 404, err);\r\n                    });\r\n                }\r\n            } else {\r\n                config.error(new Error('MediaType cannot be found'));\r\n            }\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        // nothing to do\r\n    }\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nIndexDBOfflineLoader.__dashjs_factory_name = 'IndexDBOfflineLoader';\r\nconst factory = FactoryMaker.getClassFactory(IndexDBOfflineLoader);\r\nexport default factory;\r\n"]}