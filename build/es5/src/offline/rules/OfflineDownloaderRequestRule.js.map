{"version":3,"sources":["../../../../../src/offline/rules/OfflineDownloaderRequestRule.js"],"names":["FactoryMaker","FragmentRequest","OfflineDownloaderRequestRule","instance","currentSegmentId","_indexHandler","_fragmentModel","initialize","indexHandler","fragmentModel","getNextSegmentRequest","representation","segments","length","currentSegment","request","getRequestForSegment","action","ACTION_COMPLETE","execute","isFragmentLoadedOrPending","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,aAAP,KAAyB,2BAAzB,CACA,MAAOC,gBAAP,KAA4B,sCAA5B,CAEA;;;GAIA,QAASC,6BAAT,EAAwC,CAGpC,GAAIC,SAAJ,CACA,GAAIC,kBAAmB,CAAC,CAAxB,CACA,GAAIC,cAAJ,CACA,GAAIC,eAAJ,CAEA,QAASC,WAAT,CAAoBC,YAApB,CAAkCC,aAAlC,CAAiD,CAC7CJ,cAAgBG,YAAhB,CACAF,eAAiBG,aAAjB,CAEH,CACD,QAASC,sBAAT,CAA+BC,cAA/B,CAA+C,CAC3CP,mBACA,GAAIA,iBAAmBO,eAAeC,QAAf,CAAwBC,MAA/C,CAAwD,CACpD,GAAIC,gBAAiBH,eAAeC,QAAf,CAAwBR,gBAAxB,CAArB,CACA,GAAIW,SAAUV,cAAcW,oBAAd,CAAmCF,cAAnC,CAAd,CAEA,GAAIV,mBAAsBO,eAAeC,QAAf,CAAwBC,MAAxB,CAAiC,CAA3D,CAAgE,CAC5D;AACAE,QAAQE,MAAR,CAAiBhB,gBAAgBiB,eAAjC,CACH,CACD,MAAOH,QAAP,CACH,CACD,MAAO,KAAP,CACH,CAED,QAASI,QAAT,CAAiBR,cAAjB,CAAiC,CAC7B,GAAII,SAAUL,sBAAsBC,cAAtB,CAAd,CAEA;AACA,MAAOI,SAAWA,QAAQE,MAAR,GAAmBhB,gBAAgBiB,eAA9C,EAAkEZ,eAAec,yBAAf,CAAyCL,OAAzC,CAAzE,CAA4H,CACxH;AACAA,QAAUL,sBAAsBC,cAAtB,CAAV,CACH,CACD,MAAOI,QAAP,CACH,CAEDZ,SAAW,CACPI,WAAYA,UADL,CAEPY,QAASA,OAFF,CAAX,CAMA,MAAOhB,SAAP,CACH,CAEDD,6BAA6BmB,qBAA7B,CAAqD,8BAArD,CACA,cAAerB,cAAasB,eAAb,CAA6BpB,4BAA7B,CAAf","file":"OfflineDownloaderRequestRule.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from './../../core/FactoryMaker';\r\nimport FragmentRequest from './../../streaming/vo/FragmentRequest';\r\n\r\n/**\r\n * @module OfflineDownloaderRequestRule\r\n * @description Manages HTTP segments request.\r\n */\r\nfunction OfflineDownloaderRequestRule() {\r\n\r\n\r\n    let instance;\r\n    let currentSegmentId = -1;\r\n    let _indexHandler;\r\n    let _fragmentModel;\r\n\r\n    function initialize(indexHandler, fragmentModel) {\r\n        _indexHandler = indexHandler;\r\n        _fragmentModel = fragmentModel;\r\n\r\n    }\r\n    function getNextSegmentRequest(representation) {\r\n        currentSegmentId ++;\r\n        if (currentSegmentId < representation.segments.length ) {\r\n            let currentSegment = representation.segments[currentSegmentId];\r\n            let request = _indexHandler.getRequestForSegment(currentSegment);\r\n\r\n            if (currentSegmentId === (representation.segments.length - 1) ) {\r\n                // last request\r\n                request.action = FragmentRequest.ACTION_COMPLETE;\r\n            }\r\n            return request;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function execute(representation) {\r\n        let request = getNextSegmentRequest(representation);\r\n\r\n        // Then, check if this request was downloaded or not\r\n        while (request && request.action !== FragmentRequest.ACTION_COMPLETE  && _fragmentModel.isFragmentLoadedOrPending(request)) {\r\n            // loop until we found not loaded fragment, or no fragment\r\n            request = getNextSegmentRequest(representation);\r\n        }\r\n        return request;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        execute: execute\r\n    };\r\n\r\n\r\n    return instance;\r\n}\r\n\r\nOfflineDownloaderRequestRule.__dashjs_factory_name = 'OfflineDownloaderRequestRule';\r\nexport default FactoryMaker.getClassFactory(OfflineDownloaderRequestRule);\r\n"]}