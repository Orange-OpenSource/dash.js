{"version":3,"sources":["../../../../../src/offline/utils/OfflineIndexDBManifestParser.js"],"names":["FactoryMaker","Debug","URLUtils","Entities","require","XmlEntities","ELEMENT_TYPE_MPD","ELEMENT_TYPE_PERIOD","ELEMENT_TYPE_BaseURL","ELEMENT_TYPE_ADAPTATIONSET","ELEMENT_TYPE_SEGMENT_TEMPLATE","ELEMENT_TYPE_REPRESENTATION","ATTRIBUTE_TYPE_ID","OFFLINE_BASE_URL","OfflineIndexDBManifestParser","config","context","manifestId","allMediaInfos","instance","DOM","urlUtils","logger","setup","getInstance","getLogger","parse","XMLDoc","DOMParser","parseFromString","mpd","getElementsByTagName","i","length","editBaseURLAttribute","browsePeriods","wait","then","encodeManifest","info","XMLSerializer","serializeToString","encode","currentMPD","basesURL","fragmentId","representationId","url","parent","parentNode","nodeName","innerHTML","adaptationsSet","isHTTPS","isHTTPURL","getFragmentId","getBestRepresentationId","periods","j","browseAdaptationsSet","currentPeriod","currentAdaptationSet","currentAdaptationType","representations","findAdaptationType","findRepresentations","findAndKeepOnlySelectedRepresentations","removeChild","segmentTemplate","getSegmentTemplate","editSegmentTemplateAttributes","findAdaptationSetContentType","findAdaptationSetMimeType","mimeType","substring","indexOf","getAttribute","segmentsTemplates","media","setAttribute","adaptationType","representation","repId","delay","Promise","resolve","setTimeout","bestRepresentation","console","log","idxFragId","lastIndexOf","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"OfflineIndexDBManifestParser.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from './../../core/FactoryMaker';\r\nimport Debug from './../../core/Debug';\r\nimport URLUtils from './../../streaming/utils/URLUtils';\r\n\r\nconst Entities = require('html-entities').XmlEntities;\r\nconst ELEMENT_TYPE_MPD = 'MPD';\r\nconst ELEMENT_TYPE_PERIOD = 'Period';\r\nconst ELEMENT_TYPE_BaseURL = 'BaseURL';\r\nconst ELEMENT_TYPE_ADAPTATIONSET = 'AdaptationSet';\r\nconst ELEMENT_TYPE_SEGMENT_TEMPLATE = 'SegmentTemplate';\r\nconst ELEMENT_TYPE_REPRESENTATION = 'Representation';\r\nconst ATTRIBUTE_TYPE_ID = 'id';\r\nconst OFFLINE_BASE_URL = 'offline_indexdb://';\r\n\r\n/**\r\n * @module OfflineIndexDBManifestParser\r\n * @description  Parse online manifest to offline manifest\r\n * @param {Object} config - dependances\r\n*/\r\nfunction OfflineIndexDBManifestParser(config) {\r\n    const context = this.context;\r\n    const manifestId = config.manifestId;\r\n    const allMediaInfos = config.allMediaInfos;\r\n\r\n    let instance,\r\n        DOM,\r\n        urlUtils,\r\n        logger;\r\n\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        urlUtils = URLUtils(context).getInstance();\r\n    }\r\n\r\n    /**\r\n     * Parse XML manifest\r\n     * @param {string} XMLDoc - xml manifest\r\n     * @returns {string} parsed XML\r\n     * @memberof module:OfflineIndexDBManifestParser\r\n     * @instance\r\n    */\r\n    function parse(XMLDoc) {\r\n        DOM = new DOMParser().parseFromString(XMLDoc, 'application/xml');\r\n        let mpd = DOM.getElementsByTagName(ELEMENT_TYPE_MPD) ? DOM.getElementsByTagName(ELEMENT_TYPE_MPD) : null;\r\n\r\n        for (let i = 0; i < mpd.length; i++) {\r\n            if (mpd[i] !== null) {\r\n                editBaseURLAttribute(mpd[i]);\r\n                browsePeriods(mpd[i]);\r\n            }\r\n        }\r\n        //TODO : remove promise timeOut\r\n        return wait(1000).then(function () {\r\n            return encodeManifest(DOM);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * URL encode parsed manifest\r\n     * @param {string} DOM\r\n     * @memberof module:OfflineIndexDBManifestParser\r\n     * @returns {string} Url encoded XML\r\n     * @instance\r\n    */\r\n    function encodeManifest(DOM) {\r\n        logger.info('encodedManifest ' + new XMLSerializer().serializeToString(DOM));\r\n        return new Entities().encode(new XMLSerializer().serializeToString(DOM));\r\n    }\r\n\r\n    /**\r\n     * Update baseURL to point to local stored data P\r\n     * @param {XML} currentMPD\r\n     * @memberof module:OfflineIndexDBManifestParser\r\n     * @instance\r\n    */\r\n    function editBaseURLAttribute(currentMPD) {\r\n        let basesURL,\r\n            fragmentId,\r\n            representationId;\r\n\r\n        let url = `${OFFLINE_BASE_URL}${manifestId}/`;\r\n\r\n        basesURL = currentMPD.getElementsByTagName(ELEMENT_TYPE_BaseURL);\r\n        for (let i = 0; i < basesURL.length; i++) {\r\n            let parent = basesURL[i].parentNode;\r\n\r\n            if (parent.nodeName === ELEMENT_TYPE_MPD) {\r\n                basesURL[i].innerHTML = url;\r\n            } else if (parent.nodeName === ELEMENT_TYPE_REPRESENTATION) {\r\n                let adaptationsSet = parent.parentNode;\r\n                if (adaptationsSet.nodeName == ELEMENT_TYPE_ADAPTATIONSET) {\r\n\r\n                    if (urlUtils.isHTTPS(basesURL[i].innerHTML) || urlUtils.isHTTPURL(basesURL[i].innerHTML)) {\r\n                        fragmentId = getFragmentId(basesURL[i].innerHTML);\r\n                        representationId = getBestRepresentationId(adaptationsSet);\r\n                        basesURL[i].innerHTML = url + representationId + '_' + fragmentId;\r\n                    } else if (basesURL[i].innerHTML === './') {\r\n                        basesURL[i].innerHTML = url;\r\n                    } else {\r\n                        fragmentId = getFragmentId(basesURL[i].innerHTML);\r\n                        representationId = getBestRepresentationId(adaptationsSet);\r\n                        basesURL[i].innerHTML = representationId + '_' + fragmentId;\r\n                    }\r\n                }\r\n            } else {\r\n                basesURL[i].innerHTML = url;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Browse periods\r\n     * @param {XML} currentMPD\r\n     * @memberof module:OfflineIndexDBManifestParser\r\n     * @instance\r\n    */\r\n    function browsePeriods(currentMPD) {\r\n        let periods = currentMPD.getElementsByTagName(ELEMENT_TYPE_PERIOD);\r\n        for (let j = 0; j < periods.length; j++) {\r\n            browseAdaptationsSet(periods[j]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Browse adapatation set to update data (delete those taht are not choosen by user ...)\r\n     * @param {XML} currentPeriod\r\n     * @memberof module:offline\r\n     * @instance\r\n    */\r\n    function browseAdaptationsSet(currentPeriod) {\r\n        let adaptationsSet,\r\n            currentAdaptationSet,\r\n            currentAdaptationType,\r\n            representations;\r\n\r\n        adaptationsSet = currentPeriod.getElementsByTagName(ELEMENT_TYPE_ADAPTATIONSET);\r\n\r\n        for (let i = adaptationsSet.length - 1; i >= 0; i--) {\r\n            currentAdaptationSet = adaptationsSet[i];\r\n            if (currentAdaptationSet) {\r\n                currentAdaptationType = findAdaptationType(currentAdaptationSet);\r\n                representations = findRepresentations(currentAdaptationSet);\r\n\r\n                findAndKeepOnlySelectedRepresentations(currentAdaptationSet, representations, currentAdaptationType);\r\n\r\n                representations = findRepresentations(currentAdaptationSet);\r\n                if (representations.length === 0) {\r\n                    currentPeriod.removeChild(currentAdaptationSet);\r\n                } else {\r\n                    let segmentTemplate = getSegmentTemplate(currentAdaptationSet);\r\n                    if (segmentTemplate.length >= 1) {\r\n                        editSegmentTemplateAttributes(segmentTemplate);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns type of adapation set\r\n     * @param {XML} currentAdaptationSet\r\n     * @memberof module:offline\r\n     * @returns {string|null} type\r\n     * @instance\r\n    */\r\n    function findAdaptationType(currentAdaptationSet) {\r\n        if (findAdaptationSetContentType(currentAdaptationSet) !== null) {\r\n            return findAdaptationSetContentType(currentAdaptationSet);\r\n        } else if (findAdaptationSetMimeType(currentAdaptationSet) !== null) {\r\n            let mimeType = findAdaptationSetMimeType(currentAdaptationSet);\r\n            return mimeType.substring(0, mimeType.indexOf('/'));\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns content-type of adaptation set\r\n     * @param {XML} currentAdaptationSet\r\n     * @memberof module:offline\r\n     * @returns {string|null} contentType\r\n     * @instance\r\n    */\r\n    function findAdaptationSetContentType(currentAdaptationSet) {\r\n        return currentAdaptationSet.getAttribute('contentType');\r\n    }\r\n\r\n    /**\r\n     * Returns mime-type of adaptation set\r\n     * @param {XML} currentAdaptationSet\r\n     * @memberof module:offline\r\n     * @returns {string|null} mimeType\r\n     * @instance\r\n    */\r\n    function findAdaptationSetMimeType(currentAdaptationSet) {\r\n        return currentAdaptationSet.getAttribute('mimeType');\r\n    }\r\n\r\n    /**\r\n     * Returns representations of adaptation set\r\n     * @param {XML} currentAdaptationSet\r\n     * @memberof module:offline\r\n     * @returns {XML} representations\r\n     * @instance\r\n    */\r\n    function findRepresentations(currentAdaptationSet) {\r\n        return currentAdaptationSet.getElementsByTagName(ELEMENT_TYPE_REPRESENTATION);\r\n    }\r\n\r\n    /**\r\n     * Return segment template list of adaptations set\r\n     * @param {XML} currentAdaptationSet\r\n     * @memberof module:offline\r\n     * @returns {XML} representations\r\n     * @instance\r\n    */\r\n    function getSegmentTemplate(currentAdaptationSet) {\r\n        return currentAdaptationSet.getElementsByTagName(ELEMENT_TYPE_SEGMENT_TEMPLATE);\r\n    }\r\n\r\n    /**\r\n     * Update attributes of segment templates to match offline urls\r\n     * @param {Array} segmentsTemplates\r\n     * @memberof module:offline\r\n     * @instance\r\n    */\r\n    function editSegmentTemplateAttributes(segmentsTemplates) {\r\n        for (let i = 0; i < segmentsTemplates.length; i++) {\r\n            let media = segmentsTemplates[i].getAttribute('media');\r\n            media = '$RepresentationID$_$Number$' + media.substring(media.indexOf('.'), media.length); //id + extension\r\n            segmentsTemplates[i].setAttribute('startNumber', '1');\r\n            segmentsTemplates[i].setAttribute('media', media);\r\n            segmentsTemplates[i].setAttribute('initialization','$RepresentationID$_0.m4v');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete all representations except the one choosed by user\r\n     * @param {XML} currentAdaptationSet\r\n     * @param {XML} representations\r\n     * @param {string} adaptationType\r\n     * @memberof module:offline\r\n     * @instance\r\n    */\r\n    function findAndKeepOnlySelectedRepresentations(currentAdaptationSet, representations, adaptationType) {\r\n        for ( var i = representations.length - 1; i >= 0; i--) {\r\n            let representation = representations[i];\r\n            let repId = representation.getAttribute(ATTRIBUTE_TYPE_ID);\r\n            if (allMediaInfos[adaptationType] && allMediaInfos[adaptationType].indexOf(repId) === -1) {\r\n                // representation is not selected, remove it\r\n                currentAdaptationSet.removeChild(representation);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  UTILS\r\n\r\n    /**\r\n     * Timeout to perform operations on manifest --> TODO to be replaced by a promise\r\n     * @param {number} delay\r\n     * @memberof module:offline\r\n     * @instance\r\n    */\r\n    function wait(delay) {\r\n        return new Promise(function (resolve) {\r\n            setTimeout(resolve, delay);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get id of first representation of adaptation set\r\n     * @param {XMl} currentAdaptationSet\r\n     * @memberof module:offline\r\n     * @returns {string} id\r\n     * @instance\r\n    */\r\n    function getBestRepresentationId(currentAdaptationSet) {\r\n        let bestRepresentation = currentAdaptationSet.getElementsByTagName(ELEMENT_TYPE_REPRESENTATION)[0];\r\n        console.log(bestRepresentation.getAttribute(ATTRIBUTE_TYPE_ID));\r\n        return bestRepresentation.getAttribute(ATTRIBUTE_TYPE_ID);\r\n    }\r\n\r\n    /**\r\n     * Parse and returns fragments of offline url => xxxx://xxxx/fragmentId/\r\n     * @param {string} url\r\n     * @memberof module:offline\r\n     * @returns {string} fragmentId\r\n     * @instance\r\n    */\r\n    function getFragmentId(url) {\r\n        let idxFragId = url.lastIndexOf('/');\r\n        //logger.warn('fragId : ' + url.substring(idxFragId + 1, url.length));\r\n        return url.substring(idxFragId,url.length);\r\n    }\r\n\r\n    setup();\r\n\r\n    instance = {\r\n        parse: parse\r\n    };\r\n\r\n    return instance;\r\n}\r\nOfflineIndexDBManifestParser.__dashjs_factory_name = 'OfflineIndexDBManifestParser';\r\nexport default FactoryMaker.getClassFactory(OfflineIndexDBManifestParser);\r\n"]}