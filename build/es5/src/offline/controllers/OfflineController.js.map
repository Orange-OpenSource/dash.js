{"version":3,"sources":["../../../../../src/offline/controllers/OfflineController.js"],"names":["Events","Debug","OfflineEvents","OfflineConstants","DOMExceptionsEvents","FactoryMaker","OfflineStoreController","OfflineDownload","IndexDBOfflineLoader","OfflineUrlUtils","URLUtils","OfflineController","context","instance","downloads","adapter","schemeLoaderFactory","logger","manifestLoader","manifestModel","dashManifestModel","mediaPlayerModel","offlineStoreController","offlineUtlUtils","errHandler","setup","create","getInstance","registerUrlRegex","getRegex","extend","getLogger","setConfig","config","registerLoader","OFFLINE_SCHEME","getDownloadFromId","id","download","find","item","getId","createDownloadFromId","push","removeDownloadFromId","deleteDownload","index","indexOf","splice","generateManifestId","timestamp","Date","getTime","createDownload","url","Promise","resolve","reject","downloadFromUrl","then","catch","e","error","startDownload","selectedRepresentations","getAllDownloads","getAllManifests","stopDownload","deleteDownloadById","err","resumeDownload","getDownloadProgression","resetDownloads","forEach","resetDownload","reset","unregisterLoader","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"OfflineController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Events from '../../core/events/Events';\r\nimport Debug from '../../core/Debug';\r\nimport OfflineEvents from '../events/OfflineEvents';\r\nimport OfflineConstants from '../constants/OfflineConstants';\r\nimport DOMExceptionsEvents from '../events/DOMExceptionsEvents';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport OfflineStoreController from './OfflineStoreController';\r\nimport OfflineDownload from '../OfflineDownload';\r\nimport IndexDBOfflineLoader from '../net/IndexDBOfflineLoader';\r\nimport OfflineUrlUtils from '../utils/OfflineUrlUtils';\r\nimport URLUtils from '../../streaming/utils/URLUtils';\r\n\r\n/**\r\n * @class OfflineController\r\n */\r\nfunction OfflineController() {\r\n\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        downloads,\r\n        adapter,\r\n        schemeLoaderFactory,\r\n        logger,\r\n        manifestLoader,\r\n        manifestModel,\r\n        dashManifestModel,\r\n        mediaPlayerModel,\r\n        offlineStoreController,\r\n        offlineUtlUtils,\r\n        errHandler;\r\n\r\n    function setup() {\r\n        offlineStoreController = OfflineStoreController(context).create();\r\n        offlineUtlUtils = OfflineUrlUtils(context).getInstance();\r\n        URLUtils(context).getInstance().registerUrlRegex(offlineUtlUtils.getRegex(), offlineUtlUtils);\r\n        Events.extend(OfflineEvents);\r\n        Events.extend(DOMExceptionsEvents);\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n\r\n        downloads = [];\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.manifestLoader) {\r\n            manifestLoader = config.manifestLoader;\r\n        }\r\n\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n\r\n        if (config.dashManifestModel) {\r\n            dashManifestModel = config.dashManifestModel;\r\n        }\r\n\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n\r\n        if (config.schemeLoaderFactory) {\r\n            schemeLoaderFactory = config.schemeLoaderFactory;\r\n        }\r\n\r\n        offlineStoreController.setConfig({\r\n            errHandler: errHandler\r\n        });\r\n\r\n        schemeLoaderFactory.registerLoader(OfflineConstants.OFFLINE_SCHEME, IndexDBOfflineLoader);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        DOWNLOAD LIST FUNCTIONS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    function getDownloadFromId(id) {\r\n        let download = downloads.find((item) => {\r\n            return item.getId() === id;\r\n        });\r\n        return download;\r\n    }\r\n\r\n    function createDownloadFromId(id) {\r\n        let download;\r\n        download = getDownloadFromId(id);\r\n\r\n        if (!download) {\r\n            // create download controller\r\n            download = OfflineDownload(context).create({\r\n                id: id\r\n            });\r\n\r\n            download.setConfig({\r\n                manifestLoader: manifestLoader,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                manifestModel: manifestModel,\r\n                dashManifestModel: dashManifestModel,\r\n                adapter: adapter,\r\n                errHandler: errHandler,\r\n                schemeLoaderFactory: schemeLoaderFactory,\r\n                offlineStoreController: offlineStoreController\r\n            });\r\n            downloads.push(download);\r\n        }\r\n\r\n        return download;\r\n    }\r\n\r\n    function removeDownloadFromId(id) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            // download is running\r\n            download.deleteDownload();\r\n            let index = downloads.indexOf(download);\r\n            downloads.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        DOWNLOAD FUNCTIONS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    function generateManifestId() {\r\n        let timestamp = new Date().getTime();\r\n        return timestamp;\r\n    }\r\n\r\n    function createDownload(url) {\r\n        return new Promise(function (resolve, reject) {\r\n            let id = generateManifestId();\r\n\r\n            // create download controller\r\n            let download = createDownloadFromId(id);\r\n\r\n            download.downloadFromUrl(url).then(() => {\r\n                resolve();\r\n            })\r\n            .catch((e) => {\r\n                logger.error('Failed to download ' + e);\r\n                removeDownloadFromId(id);\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    function startDownload(id, selectedRepresentations) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            download.startDownload(selectedRepresentations);\r\n        }\r\n    }\r\n\r\n    function getAllDownloads() {\r\n        return offlineStoreController.getAllManifests();\r\n    }\r\n\r\n    function stopDownload(id) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            download.stopDownload();\r\n        }\r\n    }\r\n\r\n    function deleteDownload(id) {\r\n        removeDownloadFromId(id);\r\n\r\n        return offlineStoreController.deleteDownloadById(id).then(function () {\r\n            return Promise.resolve();\r\n        }).catch(function (err) {\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n\r\n    function resumeDownload(id) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            download.resumeDownload();\r\n        }\r\n    }\r\n\r\n    function getDownloadProgression(id) {\r\n        let download = getDownloadFromId(id);\r\n        if (download) {\r\n            return download.getDownloadProgression();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function resetDownloads() {\r\n        downloads.forEach((download) => {\r\n            download.resetDownload();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reset\r\n     * @instance\r\n     */\r\n    function reset() {\r\n        resetDownloads();\r\n        schemeLoaderFactory.unregisterLoader(OfflineConstants.OFFLINE_SCHEME);\r\n    }\r\n\r\n    instance = {\r\n        setConfig: setConfig,\r\n        createDownload: createDownload,\r\n        startDownload: startDownload,\r\n        stopDownload: stopDownload,\r\n        resumeDownload: resumeDownload,\r\n        deleteDownload: deleteDownload,\r\n        getDownloadProgression: getDownloadProgression,\r\n        getAllDownloads: getAllDownloads,\r\n        resetDownloads: resetDownloads,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nOfflineController.__dashjs_factory_name = 'OfflineController';\r\nexport default FactoryMaker.getClassFactory(OfflineController);\r\n"]}