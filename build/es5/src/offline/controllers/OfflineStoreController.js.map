{"version":3,"sources":["../../../../../src/offline/controllers/OfflineStoreController.js"],"names":["FactoryMaker","IndexDBStore","DOMExceptionsEvents","EventBus","Events","OfflineStoreController","context","eventBus","getInstance","instance","errHandler","indexDBStore","setup","extend","setConfig","config","createFragmentStore","manifestId","storeName","err","manageDOMError","storeFragment","fragmentId","fragmentData","catch","createOfflineManifest","manifest","storeManifest","updateOfflineManifest","updateManifest","getCurrentHigherManifestId","getAllManifests","deleteDownloadById","setDownloadingStatus","status","name","trigger","INDEXEDDB_QUOTA_EXCEED_ERROR","INDEXEDDB_INVALID_STATE_ERROR","INDEXEDDB_NOT_FOUND_ERROR","INDEXEDDB_VERSION_ERROR","indexedDBError","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"OfflineStoreController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport IndexDBStore from '../storage/IndexDBStore';\r\nimport DOMExceptionsEvents from '../events/DOMExceptionsEvents';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\n\r\n/**\r\n * @class OfflineStoreController\r\n * This class manages database store\r\n * @description Offline Storage Controller\r\n */\r\nfunction OfflineStoreController() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        errHandler,\r\n        indexDBStore;\r\n\r\n    function setup() {\r\n        indexDBStore = IndexDBStore(context).getInstance();\r\n        Events.extend(DOMExceptionsEvents);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n    }\r\n\r\n    function createFragmentStore(manifestId, storeName) {\r\n        try {\r\n            indexDBStore.createFragmentStore(manifestId, storeName);\r\n        } catch (err) {\r\n            manageDOMError(err);\r\n        }\r\n    }\r\n\r\n    function storeFragment(manifestId, fragmentId, fragmentData) {\r\n        indexDBStore.storeFragment(manifestId, fragmentId, fragmentData).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function createOfflineManifest(manifest) {\r\n        return indexDBStore.storeManifest(manifest).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function updateOfflineManifest(manifest) {\r\n        return indexDBStore.updateManifest(manifest).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getCurrentHigherManifestId() {\r\n        return indexDBStore.getCurrentHigherManifestId().catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function getAllManifests() {\r\n        return indexDBStore.getAllManifests().catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function deleteDownloadById(manifestId) {\r\n        return indexDBStore.deleteDownloadById(manifestId).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function setDownloadingStatus(manifestId, status) {\r\n        indexDBStore.setDownloadingStatus(manifestId, status).catch(function (err) {\r\n            manageDOMError(err);\r\n        });\r\n    }\r\n\r\n    function manageDOMError(err) {\r\n        if (err) {\r\n            switch (err.name) {\r\n                case 'QuotaExceededError':\r\n                    eventBus.trigger(Events.INDEXEDDB_QUOTA_EXCEED_ERROR);\r\n                    break;\r\n                case 'InvalidStateError':\r\n                    eventBus.trigger(Events.INDEXEDDB_INVALID_STATE_ERROR);\r\n                    break;\r\n                case 'NotFoundError':\r\n                    eventBus.trigger(Events.INDEXEDDB_NOT_FOUND_ERROR);\r\n                    break;\r\n                case 'VersionError':\r\n                    eventBus.trigger(Events.INDEXEDDB_VERSION_ERROR);\r\n                    break;\r\n                // TODO : Manage all DOM cases\r\n            }\r\n            errHandler.indexedDBError(err);\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        setConfig: setConfig,\r\n        storeFragment: storeFragment,\r\n        createOfflineManifest: createOfflineManifest,\r\n        updateOfflineManifest: updateOfflineManifest,\r\n        createFragmentStore: createFragmentStore,\r\n        getCurrentHigherManifestId: getCurrentHigherManifestId,\r\n        getAllManifests: getAllManifests,\r\n        deleteDownloadById: deleteDownloadById,\r\n        setDownloadingStatus: setDownloadingStatus\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nOfflineStoreController.__dashjs_factory_name = 'OfflineStoreController';\r\nexport default FactoryMaker.getClassFactory(OfflineStoreController);\r\n"]}