{"version":3,"sources":["../../../../src/offline/OfflineStreamProcessor.js"],"names":["EventBus","Debug","Events","FactoryMaker","DashHandler","Constants","OfflineDownloaderRequestRule","MetricsModel","FragmentModel","FragmentLoader","RequestModifier","TimelineConverter","OfflineStreamProcessor","config","context","instance","manifestId","completedCb","adapter","logger","indexHandler","type","errHandler","eventBus","mimeType","baseURLController","fragmentModel","dashManifestModel","mediaPlayerModel","mediaInfo","bitrate","updating","currentVoRepresentation","offlineDownloaderRequestRule","offlineStoreController","downloadedSegments","isInitialized","isStopped","stream","qualityIndex","setConfig","setup","id","completed","resetInitialSettings","getInstance","getLogger","on","STREAM_COMPLETED","onStreamCompleted","REPRESENTATION_UPDATED","onRepresentationUpdated","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","e","sender","request","fragmentName","representationId","index","storeFragment","response","error","serviceLocation","executeRequest","download","getStreamProcessor","info","stop","resume","initialize","metricsModel","requestModifier","create","timelineConverter","fragmentLoader","getIsTextTrack","getInitRequest","updateData","getIndexHandler","getFragmentModel","voAdaptation","getDataForMedia","updateRepresentation","Error","initRequest","start","isNaN","execute","url","voRepresentations","getRepresentationsForAdaptation","rep","find","representation","VIDEO","AUDIO","TEXT","FRAGMENTED_TEXT","isUpdating","trigger","DATA_UPDATE_COMPLETED","currentRepresentation","getRepresentation","getCurrentRepresentationInfo","convertDataToRepresentationInfo","getStreamInfo","getType","getMediaInfo","getAvailableSegmentsNumber","availableSegmentsNumber","getDownloadedSegments","NaN","reset","off","__dashjs_factory_name","factory","getClassFactory"],"mappings":"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","file":"OfflineStreamProcessor.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventBus from './../core/EventBus';\r\nimport Debug from './../core/Debug';\r\nimport Events from './../core/events/Events';\r\nimport FactoryMaker from './../core/FactoryMaker';\r\nimport DashHandler from './../dash/DashHandler';\r\nimport Constants from './../streaming/constants/Constants';\r\nimport OfflineDownloaderRequestRule from './rules/OfflineDownloaderRequestRule';\r\nimport MetricsModel from './../streaming/models/MetricsModel';\r\nimport FragmentModel from './../streaming/models/FragmentModel';\r\nimport FragmentLoader from './../streaming/FragmentLoader';\r\nimport RequestModifier from './../streaming/utils/RequestModifier';\r\nimport TimelineConverter from './../dash/utils/TimelineConverter';\r\n\r\n/**\r\n * @module  OfflineStreamProcessor\r\n * @param {object} config configuration\r\n * @description Arrange downloading for each type\r\n */\r\nfunction OfflineStreamProcessor(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n\r\n    let instance,\r\n        manifestId,\r\n        completedCb,\r\n        adapter,\r\n        logger,\r\n        indexHandler,\r\n        type,\r\n        errHandler,\r\n        eventBus,\r\n        mimeType,\r\n        baseURLController,\r\n        fragmentModel,\r\n        dashManifestModel,\r\n        mediaPlayerModel,\r\n        mediaInfo,\r\n        bitrate,\r\n        updating,\r\n        currentVoRepresentation,\r\n        offlineDownloaderRequestRule,\r\n        offlineStoreController,\r\n        downloadedSegments,\r\n        isInitialized,\r\n        isStopped,\r\n        stream,\r\n        qualityIndex;\r\n\r\n    function setConfig(config) {\r\n\r\n        if (!config) return;\r\n\r\n        if (config.type) {\r\n            type = config.type;\r\n        }\r\n\r\n        if (config.stream) {\r\n            stream = config.stream;\r\n        }\r\n\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n\r\n        if (config.mimeType) {\r\n            mimeType = config.mimeType;\r\n        }\r\n\r\n        if (config.qualityIndex) {\r\n            qualityIndex = config.qualityIndex;\r\n        }\r\n\r\n        if (config.adapter) {\r\n            adapter = config.adapter;\r\n        }\r\n\r\n        if (config.baseURLController) {\r\n            baseURLController = config.baseURLController;\r\n        }\r\n\r\n        if (config.dashManifestModel) {\r\n            dashManifestModel = config.dashManifestModel;\r\n        }\r\n\r\n        if (config.mediaInfo) {\r\n            mediaInfo = config.mediaInfo;\r\n        }\r\n\r\n        if (config.bitrate) {\r\n            bitrate = config.bitrate;\r\n        }\r\n\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n\r\n        if (config.offlineStoreController) {\r\n            offlineStoreController = config.offlineStoreController;\r\n        }\r\n    }\r\n\r\n    function setup() {\r\n        manifestId = config.id;\r\n        completedCb = config.completed;\r\n\r\n        resetInitialSettings();\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        eventBus = EventBus(context).getInstance();\r\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, instance);\r\n        eventBus.on(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\r\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\r\n\r\n    }\r\n\r\n\r\n    function onFragmentLoadingCompleted(e) {\r\n        if (e.sender !== fragmentModel) {\r\n            return;\r\n        }\r\n\r\n        if (e.request !== null) {\r\n            let fragmentName = e.request.representationId + '_' + e.request.index;\r\n            offlineStoreController.storeFragment(manifestId, fragmentName, e.response);\r\n        }\r\n\r\n        downloadedSegments++;\r\n\r\n        if (e.error && e.request.serviceLocation && !isStopped) {\r\n            fragmentModel.executeRequest(e.request);\r\n        }\r\n\r\n        download();\r\n    }\r\n\r\n    function getStreamProcessor() {\r\n        return instance;\r\n    }\r\n\r\n    function onStreamCompleted(e) {\r\n        if (e.fragmentModel !== fragmentModel) {\r\n            return;\r\n        }\r\n        logger.info(`[${manifestId}] Stream is complete`);\r\n        stop();\r\n        completedCb();\r\n    }\r\n\r\n    /**\r\n     * Stops download of fragments\r\n     * @memberof OfflineStreamProcessor#\r\n     */\r\n    function stop() {\r\n        if (isStopped) {\r\n            return;\r\n        }\r\n        isStopped = true;\r\n    }\r\n\r\n    /**\r\n     * Resume download\r\n     * @memberof OfflineStreamProcessor#\r\n     */\r\n    function resume() {\r\n        isStopped = false;\r\n        download();\r\n    }\r\n\r\n    /**\r\n     * Initialization\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function initialize() {\r\n        let metricsModel = MetricsModel(context).getInstance();\r\n        let requestModifier = RequestModifier(context).getInstance();\r\n\r\n        indexHandler = DashHandler(context).create({\r\n            mimeType: mimeType,\r\n            baseURLController: baseURLController,\r\n            metricsModel: metricsModel,\r\n            errHandler: errHandler,\r\n            timelineConverter:  TimelineConverter(context).getInstance()\r\n        });\r\n        indexHandler.initialize(instance);\r\n\r\n        let fragmentLoader = FragmentLoader(context).create({\r\n            metricsModel: metricsModel,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            errHandler: errHandler,\r\n            requestModifier: requestModifier\r\n        });\r\n\r\n        fragmentModel = FragmentModel(context).create({\r\n            metricsModel: metricsModel,\r\n            fragmentLoader: fragmentLoader\r\n        });\r\n\r\n        offlineDownloaderRequestRule = OfflineDownloaderRequestRule(context).create();\r\n        offlineDownloaderRequestRule.initialize(indexHandler, fragmentModel);\r\n\r\n        if (dashManifestModel.getIsTextTrack(mimeType)) {\r\n            getInitRequest();\r\n        }\r\n\r\n        updateData();\r\n    }\r\n\r\n    function getIndexHandler() {\r\n        return indexHandler;\r\n    }\r\n\r\n    function getFragmentModel() {\r\n        return fragmentModel;\r\n    }\r\n\r\n    function updateData() {\r\n        const voAdaptation = adapter.getDataForMedia(mediaInfo);\r\n        if (voAdaptation) {\r\n            updateRepresentation(voAdaptation, type);\r\n        } else {\r\n            throw new Error('Any Vo Periods for this streamInfo');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute init request for the represenation\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function getInitRequest() {\r\n        if (!currentVoRepresentation) {\r\n            return null;\r\n        }\r\n\r\n        let initRequest = indexHandler.getInitRequest(currentVoRepresentation);\r\n        return fragmentModel.executeRequest(initRequest);\r\n    }\r\n\r\n\r\n    /**\r\n     * Start download\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function start() {\r\n        if (!currentVoRepresentation) {\r\n            throw new Error('Start denied to OfflineStreamProcessor');\r\n        }\r\n        isStopped = false;\r\n        download();\r\n    }\r\n\r\n    /**\r\n     * Performs download of fragment according to type\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function download() {\r\n        if (isStopped) {\r\n            return;\r\n        }\r\n\r\n        if (isNaN(currentVoRepresentation)) {\r\n            if (!isInitialized) {\r\n                getInitRequest();\r\n                isInitialized = true;\r\n            } else {\r\n                let request = offlineDownloaderRequestRule.execute(currentVoRepresentation);\r\n\r\n                if (request) {\r\n                    logger.info(`[${manifestId}] getNextFragment - request is ${request.url}`);\r\n                    fragmentModel.executeRequest(request);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update representation\r\n     * @param {Object} voAdaptation - adaptation\r\n     * @param {string} type du média\r\n     * @memberof OfflineStreamProcessor#\r\n     */\r\n    function updateRepresentation(voAdaptation, type) {\r\n        updating = true;\r\n\r\n        let voRepresentations = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\r\n\r\n        // get representation VO according to id.\r\n        let rep = voRepresentations.find((representation) => {\r\n            return representation.id === bitrate.id;\r\n        });\r\n\r\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO  && type !== Constants.TEXT && type !== Constants.FRAGMENTED_TEXT) {\r\n            updating = false;\r\n            return;\r\n        }\r\n\r\n        indexHandler.updateRepresentation(rep, true, true);\r\n    }\r\n\r\n    function onRepresentationUpdated(e) {\r\n        if (e.sender.getStreamProcessor() !== instance || !isUpdating()) return;\r\n\r\n        currentVoRepresentation = e.representation;\r\n        eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: instance, currentRepresentation: currentVoRepresentation});\r\n    }\r\n\r\n    function getRepresentation() {\r\n        return currentVoRepresentation;\r\n    }\r\n\r\n    function getCurrentRepresentationInfo() {\r\n        return currentVoRepresentation ? adapter.convertDataToRepresentationInfo(currentVoRepresentation) : null;\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        return stream ? stream.getStreamInfo() : null;\r\n    }\r\n\r\n    function isUpdating() {\r\n        return updating;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getMediaInfo() {\r\n        return mediaInfo;\r\n    }\r\n\r\n    function getAvailableSegmentsNumber() {\r\n        return getRepresentation().availableSegmentsNumber;\r\n    }\r\n\r\n    function getDownloadedSegments() {\r\n        return downloadedSegments;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        isInitialized = false;\r\n        qualityIndex = null;\r\n        downloadedSegments = 0;\r\n        mimeType = null;\r\n        mediaInfo = null;\r\n        bitrate = null;\r\n        updating = false;\r\n        currentVoRepresentation = NaN;\r\n        downloadedSegments = null;\r\n        type = null;\r\n        stream = null;\r\n    }\r\n\r\n    /**\r\n     * Reset\r\n     * @memberof OfflineStreamProcessor#\r\n    */\r\n    function reset() {\r\n        resetInitialSettings();\r\n        indexHandler.reset();\r\n\r\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, instance);\r\n        eventBus.off(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\r\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setConfig: setConfig,\r\n        getIndexHandler: getIndexHandler,\r\n        getCurrentRepresentationInfo: getCurrentRepresentationInfo,\r\n        getFragmentModel: getFragmentModel,\r\n        getStreamInfo: getStreamInfo,\r\n        getMediaInfo: getMediaInfo,\r\n        getType: getType,\r\n        isUpdating: isUpdating,\r\n        getRepresentation: getRepresentation,\r\n        getStreamProcessor: getStreamProcessor,\r\n        start: start,\r\n        stop: stop,\r\n        resume: resume,\r\n        getAvailableSegmentsNumber: getAvailableSegmentsNumber,\r\n        getDownloadedSegments: getDownloadedSegments,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\nOfflineStreamProcessor.__dashjs_factory_name = 'OfflineStreamProcessor';\r\nconst factory = FactoryMaker.getClassFactory(OfflineStreamProcessor);\r\nexport default factory;\r\n"]}