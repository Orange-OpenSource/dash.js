{"version":3,"sources":["../../../../../src/dash/controllers/SegmentsController.js"],"names":["SegmentsController","config","context","eventBus","getInstance","instance","getters","setup","initialize","isDynamic","DashConstants","SEGMENT_TIMELINE","create","SEGMENT_TEMPLATE","SEGMENT_LIST","SEGMENT_BASE","update","voRepresentation","type","mimeType","hasInitialization","hasSegments","trigger","Events","SEGMENTBASE_INIT_REQUEST_NEEDED","representation","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","mediaType","getSegmentsGetter","segments","segmentInfoType","getSegmentByIndex","index","lastSegmentTime","getter","getSegmentByTime","time","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,yD,2DACA,gD,6CACA,6C,iDACA,qD,yDACA,uE,6EACA,uE,6EACA,+D,qEACA,6D,sJArCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCA,QAASA,mBAAT,CAA4BC,MAA5B,CAAoC,CAChCA,OAASA,QAAU,EAAnB,CAEA,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,UAAW,uBAASD,OAAT,EAAkBE,WAAlB,EAAjB,CAEA,GAAIC,gBAAJ,CACIC,cADJ,CAGA,QAASC,MAAT,EAAiB,CACbD,QAAU,EAAV,CACH,CAED,QAASE,WAAT,CAAoBC,SAApB,CAA+B,CAC3BH,QAAQI,wBAAcC,gBAAtB,EAA0C,qCAAuBT,OAAvB,EAAgCU,MAAhC,CAAuCX,MAAvC,CAA+CQ,SAA/C,CAA1C,CACAH,QAAQI,wBAAcG,gBAAtB,EAA0C,qCAAuBX,OAAvB,EAAgCU,MAAhC,CAAuCX,MAAvC,CAA+CQ,SAA/C,CAA1C,CACAH,QAAQI,wBAAcI,YAAtB,EAAsC,iCAAmBZ,OAAnB,EAA4BU,MAA5B,CAAmCX,MAAnC,CAA2CQ,SAA3C,CAAtC,CACAH,QAAQI,wBAAcK,YAAtB,EAAsC,gCAAkBb,OAAlB,EAA2BU,MAA3B,CAAkCX,MAAlC,CAA0CQ,SAA1C,CAAtC,CACH,CAED,QAASO,OAAT,CAAgBC,gBAAhB,CAAkCC,IAAlC,CAAwCC,QAAxC,CAAkDC,iBAAlD,CAAqEC,WAArE,CAAkF,CAC9E,GAAI,CAACD,iBAAL,CAAwB,CACpBjB,SAASmB,OAAT,CAAiBC,iBAAOC,+BAAxB,CAAyD,CAACL,SAAUA,QAAX,CAAqBM,eAAgBR,gBAArC,CAAzD,EACH,CAED,GAAI,CAACI,WAAL,CAAkB,CACdlB,SAASmB,OAAT,CAAiBC,iBAAOG,uCAAxB,CAAiE,CAACP,SAAUA,QAAX,CAAqBQ,UAAWT,IAAhC,CAAsCO,eAAgBR,gBAAtD,CAAjE,EACH,CACJ,CAED,QAASW,kBAAT,CAA2BH,cAA3B,CAA2C,CACvC,MAAOA,gBAAiBA,eAAeI,QAAf,CAA0BvB,QAAQI,wBAAcK,YAAtB,CAA1B,CAAgET,QAAQmB,eAAeK,eAAvB,CAAjF,CAA2H,IAAlI,CACH,CAED,QAASC,kBAAT,CAA2BN,cAA3B,CAA2CO,KAA3C,CAAkDC,eAAlD,CAAmE,CAC/D,GAAMC,QAASN,kBAAkBH,cAAlB,CAAf,CACA,MAAOS,QAASA,OAAOH,iBAAP,CAAyBN,cAAzB,CAAyCO,KAAzC,CAAgDC,eAAhD,CAAT,CAA4E,IAAnF,CACH,CAED,QAASE,iBAAT,CAA0BV,cAA1B,CAA0CW,IAA1C,CAAgD,CAC5C,GAAMF,QAASN,kBAAkBH,cAAlB,CAAf,CACA,MAAOS,QAASA,OAAOC,gBAAP,CAAwBV,cAAxB,CAAwCW,IAAxC,CAAT,CAAyD,IAAhE,CACH,CAED/B,SAAW,CACPG,WAAYA,UADL,CAEPQ,OAAQA,MAFD,CAGPe,kBAAmBA,iBAHZ,CAIPI,iBAAkBA,gBAJX,CAAX,CAOA5B,QAEA,MAAOF,SAAP,CACH,CAEDL,mBAAmBqC,qBAAnB,CAA2C,oBAA3C,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6BxC,kBAA7B,CAAhB,C,gBACesC,O","file":"SegmentsController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport DashConstants from '../constants/DashConstants';\r\nimport Events from '../../core/events/Events';\r\nimport EventBus from '../../core/EventBus';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport TimelineSegmentsGetter from '../utils/TimelineSegmentsGetter';\r\nimport TemplateSegmentsGetter from '../utils/TemplateSegmentsGetter';\r\nimport ListSegmentsGetter from '../utils/ListSegmentsGetter';\r\nimport SegmentBaseGetter from '../utils/SegmentBaseGetter';\r\n\r\nfunction SegmentsController(config) {\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        getters;\r\n\r\n    function setup() {\r\n        getters = {};\r\n    }\r\n\r\n    function initialize(isDynamic) {\r\n        getters[DashConstants.SEGMENT_TIMELINE] = TimelineSegmentsGetter(context).create(config, isDynamic);\r\n        getters[DashConstants.SEGMENT_TEMPLATE] = TemplateSegmentsGetter(context).create(config, isDynamic);\r\n        getters[DashConstants.SEGMENT_LIST] = ListSegmentsGetter(context).create(config, isDynamic);\r\n        getters[DashConstants.SEGMENT_BASE] = SegmentBaseGetter(context).create(config, isDynamic);\r\n    }\r\n\r\n    function update(voRepresentation, type, mimeType, hasInitialization, hasSegments) {\r\n        if (!hasInitialization) {\r\n            eventBus.trigger(Events.SEGMENTBASE_INIT_REQUEST_NEEDED, {mimeType: mimeType, representation: voRepresentation});\r\n        }\r\n\r\n        if (!hasSegments) {\r\n            eventBus.trigger(Events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {mimeType: mimeType, mediaType: type, representation: voRepresentation});\r\n        }\r\n    }\r\n\r\n    function getSegmentsGetter(representation) {\r\n        return representation ? representation.segments ? getters[DashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\r\n    }\r\n\r\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\r\n        const getter = getSegmentsGetter(representation);\r\n        return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\r\n    }\r\n\r\n    function getSegmentByTime(representation, time) {\r\n        const getter = getSegmentsGetter(representation);\r\n        return getter ? getter.getSegmentByTime(representation, time) : null;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        update: update,\r\n        getSegmentByIndex: getSegmentByIndex,\r\n        getSegmentByTime: getSegmentByTime\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\r\nconst factory = FactoryMaker.getClassFactory(SegmentsController);\r\nexport default factory;\r\n"]}