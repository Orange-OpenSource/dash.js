{"version":3,"sources":["../../../../../src/dash/controllers/SegmentBaseController.js"],"names":["SegmentBaseController","config","context","eventBus","events","dashMetrics","mediaPlayerModel","errHandler","baseURLController","debug","requestModifier","errors","instance","segmentBaseLoader","webmSegmentBaseLoader","setup","getInstance","setConfig","isWebM","mimeType","type","split","toLowerCase","initialize","on","SEGMENTBASE_INIT_REQUEST_NEEDED","onInitSegmentBaseNeeded","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","onSegmentsListSegmentBaseNeeded","eventObj","loadInitialization","representation","loadSegments","mediaType","indexRange","callback","reset","off","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"SegmentBaseController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nimport SegmentBaseLoader from '../SegmentBaseLoader';\r\nimport WebmSegmentBaseLoader from '../WebmSegmentBaseLoader';\r\n\r\nfunction SegmentBaseController(config) {\r\n    config = config || {};\r\n\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const dashMetrics = config.dashMetrics;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const errHandler = config.errHandler;\r\n    const baseURLController = config.baseURLController;\r\n    const debug = config.debug;\r\n    const requestModifier = config.requestModifier;\r\n    const errors = config.errors;\r\n\r\n    let instance,\r\n        segmentBaseLoader,\r\n        webmSegmentBaseLoader;\r\n\r\n    function setup() {\r\n        segmentBaseLoader = SegmentBaseLoader(context).getInstance();\r\n        webmSegmentBaseLoader = WebmSegmentBaseLoader(context).getInstance();\r\n\r\n        segmentBaseLoader.setConfig({\r\n            baseURLController: baseURLController,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            errHandler: errHandler,\r\n            eventBus: eventBus,\r\n            events: events,\r\n            errors: errors,\r\n            debug: debug,\r\n            requestModifier: requestModifier\r\n        });\r\n\r\n        webmSegmentBaseLoader.setConfig({\r\n            baseURLController: baseURLController,\r\n            dashMetrics: dashMetrics,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            errHandler: errHandler,\r\n            eventBus: eventBus,\r\n            events: events,\r\n            errors: errors,\r\n            debug: debug,\r\n            requestModifier: requestModifier\r\n        });\r\n    }\r\n\r\n    function isWebM(mimeType) {\r\n        const type = mimeType ? mimeType.split('/')[1] : '';\r\n        return 'webm' === type.toLowerCase();\r\n    }\r\n\r\n    function initialize() {\r\n        eventBus.on(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\r\n        eventBus.on(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\r\n\r\n        segmentBaseLoader.initialize();\r\n        webmSegmentBaseLoader.initialize();\r\n    }\r\n\r\n    function onInitSegmentBaseNeeded(eventObj) {\r\n        if (isWebM(eventObj.mimeType)) {\r\n            webmSegmentBaseLoader.loadInitialization(eventObj.representation);\r\n        } else {\r\n            segmentBaseLoader.loadInitialization(eventObj.representation);\r\n        }\r\n    }\r\n\r\n    function onSegmentsListSegmentBaseNeeded(eventObj) {\r\n        if (isWebM(eventObj.mimeType)) {\r\n            webmSegmentBaseLoader.loadSegments(eventObj.representation, eventObj.mediaType, eventObj.representation ? eventObj.representation.indexRange : null, eventObj.callback);\r\n        } else {\r\n            segmentBaseLoader.loadSegments(eventObj.representation, eventObj.mediaType, eventObj.representation ? eventObj.representation.indexRange : null, eventObj.callback);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\r\n        eventBus.off(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nSegmentBaseController.__dashjs_factory_name = 'SegmentBaseController';\r\nconst factory = FactoryMaker.getSingletonFactory(SegmentBaseController);\r\nexport default factory;\r\n"]}