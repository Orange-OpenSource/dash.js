{"version":3,"sources":["../../../../../src/dash/controllers/RepresentationController.js"],"names":["RepresentationController","context","eventBus","getInstance","instance","realAdaptation","realAdaptationIndex","updating","voAvailableRepresentations","currentVoRepresentation","abrController","indexHandler","playbackController","metricsModel","domStorage","timelineConverter","dashManifestModel","dashMetrics","streamProcessor","manifestModel","setup","resetInitialSettings","on","Events","QUALITY_CHANGE_REQUESTED","onQualityChanged","REPRESENTATION_UPDATED","onRepresentationUpdated","WALLCLOCK_TIME_UPDATED","onWallclockTimeUpdated","BUFFER_LEVEL_UPDATED","onBufferLevelUpdated","MANIFEST_VALIDITY_CHANGED","onManifestValidityChanged","setConfig","config","initialize","getIndexHandler","getStreamProcessor","getData","getDataIndex","isUpdating","getCurrentRepresentation","reset","off","updateData","newRealAdaptation","voAdaptation","type","streamInfo","getStreamInfo","maxQuality","getTopQualityIndexFor","id","minIdx","getMinAllowedIndexFor","quality","averageThroughput","bitrate","trigger","DATA_UPDATE_STARTED","sender","updateRepresentations","Constants","FRAGMENTED_TEXT","getThroughputHistory","getAverageThroughput","getInitialBitrateFor","getQualityForBitrate","getMediaInfo","getQualityFor","undefined","getRepresentationForQuality","VIDEO","AUDIO","DATA_UPDATE_COMPLETED","data","currentRepresentation","i","length","updateRepresentation","addRepresentationSwitch","now","Date","currentVideoTimeMs","getTime","adaptation","addDVRMetric","manifestInfo","isDynamic","range","calcSegmentAvailabilityRange","addDVRInfo","getType","getQualityForRepresentation","voRepresentation","indexOf","isAllRepresentationsUpdated","ln","segmentInfoType","segmentAvailabilityRange","Representation","hasInitialization","DashConstants","SEGMENT_BASE","BASE_URL","segments","voReps","getIndexForAdaptation","period","mpd","manifest","index","getRepresentationsForAdaptation","updateAvailabilityWindow","resetAvailabilityWindow","forEach","rep","postponeUpdate","postponeTimePeriod","delay","update","AST_IN_FUTURE","setTimeout","e","r","representation","streamMetrics","getMetricsFor","STREAM","metrics","manifestUpdateInfo","getCurrentManifestUpdate","alreadyAdded","repInfo","err","repSwitch","DYNAMIC","ignorePostponeTimePeriod","segmentAvailabilityTimePeriod","end","start","liveDelay","computeLiveDelay","segmentDuration","DVRWindowSize","DashJSError","Errors","SEGMENTS_UPDATE_FAILED_ERROR_CODE","SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE","error","representationInfo","mediaType","addManifestUpdateRepresentationInfo","presentationTimeOffset","startNumber","setPlaybackQuality","updateManifestUpdateInfo","latency","getCurrentRepresentationSwitch","getValue","doNotUpdateDVRWindowOnBufferUpdated","oldQuality","newQuality","isNaN","setSavedBitrateSettings","newDuration","duration","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"RepresentationController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../streaming/constants/Constants';\r\nimport Errors from '../../core/errors/Errors';\r\nimport DashConstants from '../constants/DashConstants';\r\nimport DashJSError from '../../streaming/vo/DashJSError';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Representation from '../vo/Representation';\r\n\r\nfunction RepresentationController() {\r\n\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        realAdaptation,\r\n        realAdaptationIndex,\r\n        updating,\r\n        voAvailableRepresentations,\r\n        currentVoRepresentation,\r\n        abrController,\r\n        indexHandler,\r\n        playbackController,\r\n        metricsModel,\r\n        domStorage,\r\n        timelineConverter,\r\n        dashManifestModel,\r\n        dashMetrics,\r\n        streamProcessor,\r\n        manifestModel;\r\n\r\n    function setup() {\r\n        resetInitialSettings();\r\n\r\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.on(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\r\n        eventBus.on(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\r\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\r\n        eventBus.on(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        // allow the abrController created in setup to be overidden\r\n        if (config.abrController) {\r\n            abrController = config.abrController;\r\n        }\r\n        if (config.domStorage) {\r\n            domStorage = config.domStorage;\r\n        }\r\n        if (config.metricsModel) {\r\n            metricsModel = config.metricsModel;\r\n        }\r\n        if (config.dashMetrics) {\r\n            dashMetrics = config.dashMetrics;\r\n        }\r\n        if (config.dashManifestModel) {\r\n            dashManifestModel = config.dashManifestModel;\r\n        }\r\n        if (config.playbackController) {\r\n            playbackController = config.playbackController;\r\n        }\r\n        if (config.timelineConverter) {\r\n            timelineConverter = config.timelineConverter;\r\n        }\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n        if (config.streamProcessor) {\r\n            streamProcessor = config.streamProcessor;\r\n        }\r\n    }\r\n\r\n    function initialize() {\r\n        indexHandler = streamProcessor.getIndexHandler();\r\n    }\r\n\r\n    function getStreamProcessor() {\r\n        return streamProcessor;\r\n    }\r\n\r\n    function getData() {\r\n        return realAdaptation;\r\n    }\r\n\r\n    function getDataIndex() {\r\n        return realAdaptationIndex;\r\n    }\r\n\r\n    function isUpdating() {\r\n        return updating;\r\n    }\r\n\r\n    function getCurrentRepresentation() {\r\n        return currentVoRepresentation;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        realAdaptation = null;\r\n        realAdaptationIndex = -1;\r\n        updating = true;\r\n        voAvailableRepresentations = [];\r\n        abrController = null;\r\n        playbackController = null;\r\n        metricsModel = null;\r\n        domStorage = null;\r\n        timelineConverter = null;\r\n        dashManifestModel = null;\r\n        dashMetrics = null;\r\n    }\r\n\r\n    function reset() {\r\n\r\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\r\n        eventBus.off(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\r\n        eventBus.off(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\r\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\r\n        eventBus.off(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function updateData(newRealAdaptation, voAdaptation, type) {\r\n        const streamInfo = streamProcessor.getStreamInfo();\r\n        const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\r\n        const minIdx = abrController.getMinAllowedIndexFor(type);\r\n\r\n        let quality,\r\n            averageThroughput;\r\n        let bitrate = null;\r\n\r\n        updating = true;\r\n        eventBus.trigger(Events.DATA_UPDATE_STARTED, {sender: this});\r\n\r\n        voAvailableRepresentations = updateRepresentations(voAdaptation);\r\n\r\n        if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\r\n            averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\r\n            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo);\r\n            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate);\r\n        } else {\r\n            quality = abrController.getQualityFor(type, streamInfo);\r\n        }\r\n\r\n        if (minIdx !== undefined && quality < minIdx) {\r\n            quality = minIdx;\r\n        }\r\n        if (quality > maxQuality) {\r\n            quality = maxQuality;\r\n        }\r\n\r\n        currentVoRepresentation = getRepresentationForQuality(quality);\r\n        realAdaptation = newRealAdaptation;\r\n\r\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO && type !== Constants.FRAGMENTED_TEXT) {\r\n            updating = false;\r\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < voAvailableRepresentations.length; i++) {\r\n            indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\r\n        }\r\n    }\r\n\r\n    function addRepresentationSwitch() {\r\n        const now = new Date();\r\n        const currentRepresentation = getCurrentRepresentation();\r\n        const currentVideoTimeMs = playbackController.getTime() * 1000;\r\n\r\n        metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\r\n    }\r\n\r\n    function addDVRMetric() {\r\n        const streamInfo = streamProcessor.getStreamInfo();\r\n        const manifestInfo = streamInfo ? streamInfo.manifestInfo : null;\r\n        const isDynamic = manifestInfo ? manifestInfo.isDynamic : null;\r\n        const range = timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation, isDynamic);\r\n        metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), manifestInfo, range);\r\n    }\r\n\r\n    function getRepresentationForQuality(quality) {\r\n        return quality === null || quality === undefined || quality >= voAvailableRepresentations.length ? null : voAvailableRepresentations[quality];\r\n    }\r\n\r\n    function getQualityForRepresentation(voRepresentation) {\r\n        return voAvailableRepresentations.indexOf(voRepresentation);\r\n    }\r\n\r\n    function isAllRepresentationsUpdated() {\r\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\r\n            let segmentInfoType = voAvailableRepresentations[i].segmentInfoType;\r\n            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !Representation.hasInitialization(voAvailableRepresentations[i]) ||\r\n                ((segmentInfoType === DashConstants.SEGMENT_BASE || segmentInfoType === DashConstants.BASE_URL) && !voAvailableRepresentations[i].segments)\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateRepresentations(voAdaptation) {\r\n        let voReps;\r\n\r\n        realAdaptationIndex = dashManifestModel.getIndexForAdaptation(realAdaptation, voAdaptation.period.mpd.manifest, voAdaptation.period.index);\r\n        voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\r\n\r\n        return voReps;\r\n    }\r\n\r\n    function updateAvailabilityWindow(isDynamic) {\r\n        let voRepresentation;\r\n\r\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\r\n            voRepresentation = voAvailableRepresentations[i];\r\n            voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic);\r\n        }\r\n    }\r\n\r\n    function resetAvailabilityWindow() {\r\n        voAvailableRepresentations.forEach(rep => {\r\n            rep.segmentAvailabilityRange = null;\r\n        });\r\n    }\r\n\r\n    function postponeUpdate(postponeTimePeriod) {\r\n        let delay = postponeTimePeriod;\r\n        let update = function () {\r\n            if (isUpdating()) return;\r\n\r\n            updating = true;\r\n            eventBus.trigger(Events.DATA_UPDATE_STARTED, { sender: instance });\r\n\r\n            // clear the segmentAvailabilityRange for all reps.\r\n            // this ensures all are updated before the live edge search starts\r\n            resetAvailabilityWindow();\r\n\r\n            for (let i = 0; i < voAvailableRepresentations.length; i++) {\r\n                indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\r\n            }\r\n        };\r\n\r\n        updating = false;\r\n        eventBus.trigger(Events.AST_IN_FUTURE, { delay: delay });\r\n        setTimeout(update, delay);\r\n    }\r\n\r\n    function onRepresentationUpdated(e) {\r\n        if (e.sender.getStreamProcessor() !== streamProcessor || !isUpdating()) return;\r\n\r\n        let r = e.representation;\r\n        let streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\r\n        var metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type);\r\n        let manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics);\r\n        let alreadyAdded = false;\r\n        let postponeTimePeriod = 0;\r\n        let repInfo,\r\n            err,\r\n            repSwitch;\r\n\r\n        if (r.adaptation.period.mpd.manifest.type === DashConstants.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod)\r\n        {\r\n            let segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;\r\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\r\n            let liveDelay = playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);\r\n            postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1000;\r\n        }\r\n\r\n        if (postponeTimePeriod > 0) {\r\n            addDVRMetric();\r\n            postponeUpdate(postponeTimePeriod);\r\n            err = new DashJSError(Errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE, Errors.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);\r\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation, error: err});\r\n\r\n            return;\r\n        }\r\n\r\n        if (manifestUpdateInfo) {\r\n            for (let i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {\r\n                repInfo = manifestUpdateInfo.representationInfo[i];\r\n                if (repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {\r\n                    alreadyAdded = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!alreadyAdded) {\r\n                metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index,\r\n                        streamProcessor.getType(),r.presentationTimeOffset, r.startNumber, r.segmentInfoType);\r\n            }\r\n        }\r\n\r\n        if (isAllRepresentationsUpdated()) {\r\n            updating = false;\r\n            abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentVoRepresentation));\r\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\r\n\r\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics);\r\n\r\n            if (!repSwitch) {\r\n                addRepresentationSwitch();\r\n            }\r\n\r\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\r\n        }\r\n    }\r\n\r\n    function onWallclockTimeUpdated(e) {\r\n        if (e.isDynamic) {\r\n            updateAvailabilityWindow(e.isDynamic);\r\n        }\r\n    }\r\n\r\n    function onBufferLevelUpdated(e) {\r\n        if (e.sender.getStreamProcessor() !== streamProcessor) return;\r\n        let manifest = manifestModel.getValue();\r\n        if (!manifest.doNotUpdateDVRWindowOnBufferUpdated) {\r\n            addDVRMetric();\r\n        }\r\n    }\r\n\r\n    function onQualityChanged(e) {\r\n        if (e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;\r\n\r\n        if (e.oldQuality !== e.newQuality) {\r\n            currentVoRepresentation = getRepresentationForQuality(e.newQuality);\r\n            const bitrate = abrController.getThroughputHistory().getAverageThroughput(e.mediaType);\r\n            if (!isNaN(bitrate)) {\r\n                domStorage.setSavedBitrateSettings(e.mediaType, bitrate);\r\n            }\r\n            addRepresentationSwitch();\r\n        }\r\n    }\r\n\r\n    function onManifestValidityChanged(e) {\r\n        if (e.newDuration) {\r\n            const representation = getCurrentRepresentation();\r\n            if (representation && representation.adaptation.period) {\r\n                const period = representation.adaptation.period;\r\n                period.duration = e.newDuration;\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setConfig: setConfig,\r\n        getData: getData,\r\n        getDataIndex: getDataIndex,\r\n        isUpdating: isUpdating,\r\n        updateData: updateData,\r\n        getStreamProcessor: getStreamProcessor,\r\n        getCurrentRepresentation: getCurrentRepresentation,\r\n        getRepresentationForQuality: getRepresentationForQuality,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\r\nexport default FactoryMaker.getClassFactory(RepresentationController);\r\n"]}