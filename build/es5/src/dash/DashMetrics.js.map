{"version":3,"sources":["../../../../src/dash/DashMetrics.js"],"names":["DashMetrics","config","instance","dashManifestModel","manifestModel","getPeriod","periodId","manifest","getValue","Period_asArray","getBandwidthForRepresentation","representationId","representation","period","findRepresentation","bandwidth","getIndexForRepresentation","periodIdx","findRepresentationIndex","getMaxIndexForBufferType","bufferType","findMaxBufferIndex","getCurrentRepresentationSwitch","metrics","getCurrent","MetricsConstants","TRACK_SWITCH","getLatestBufferLevelVO","BUFFER_LEVEL","getCurrentBufferLevel","vo","Round10","round10","level","getRequestsQueue","RequestsQueue","getCurrentHttpRequest","httpList","HttpList","currentHttpList","httpListLength","httpListLastIndex","length","responsecode","getHttpRequests","metricName","list","getCurrentDroppedFrames","DROPPED_FRAMES","getCurrentSchedulingInfo","SCHEDULING_INFO","getCurrentManifestUpdate","MANIFEST_UPDATE","getCurrentDVRInfo","DVR_INFO","getLatestMPDRequestHeaderValueByID","id","headers","httpRequestList","httpRequest","i","type","HTTPRequest","MPD_TYPE","parseResponseHeaders","_responseHeaders","undefined","getLatestFragmentRequestHeaderValueByID","headerStr","headerPairs","trim","split","ilen","headerPair","index","indexOf","substring","returnIndex","adaptationSet","adaptationSetArray","representationArray","adaptationSetArrayIndex","representationArrayIndex","AdaptationSet_asArray","Representation_asArray","adaptationIsType","adaptation","getIsTypeOf","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"DashMetrics.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\r\nimport Round10 from './utils/Round10';\r\n\r\n/**\r\n * @module DashMetrics\r\n * @param {object} config configuration passed to DashMetrics\r\n */\r\nfunction DashMetrics(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let dashManifestModel = config.dashManifestModel;\r\n    let manifestModel = config.manifestModel;\r\n\r\n    function getPeriod(periodId) {\r\n        const manifest = manifestModel.getValue();\r\n        if (!manifest) {\r\n            return -1;\r\n        }\r\n        return manifest.Period_asArray[periodId];\r\n    }\r\n\r\n    function getBandwidthForRepresentation(representationId, periodId) {\r\n        let representation;\r\n        let period = getPeriod(periodId);\r\n\r\n        representation = findRepresentation(period, representationId);\r\n\r\n        if (representation === null) {\r\n            return null;\r\n        }\r\n\r\n        return representation.bandwidth;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} representationId\r\n     * @param {number} periodIdx\r\n     * @returns {*}\r\n     */\r\n    function getIndexForRepresentation(representationId, periodIdx) {\r\n        let period = getPeriod(periodIdx);\r\n\r\n        return findRepresentationIndex(period, representationId);\r\n    }\r\n\r\n    /**\r\n     * This method returns the current max index based on what is defined in the MPD.\r\n     *\r\n     * @param {string} bufferType - String 'audio' or 'video',\r\n     * @param {number} periodIdx - Make sure this is the period index not id\r\n     * @return {number}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getMaxIndexForBufferType(bufferType, periodIdx) {\r\n        let period = getPeriod(periodIdx);\r\n\r\n        return findMaxBufferIndex(period, bufferType);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentRepresentationSwitch(metrics) {\r\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getLatestBufferLevelVO(metrics) {\r\n        return getCurrent(metrics, MetricsConstants.BUFFER_LEVEL);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {number}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentBufferLevel(metrics) {\r\n        const vo = getLatestBufferLevelVO(metrics);\r\n\r\n        if (vo) {\r\n            return Round10.round10(vo.level / 1000, -3);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {null|*|vo}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getRequestsQueue(metrics) {\r\n        return metrics ? metrics.RequestsQueue : null;\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentHttpRequest(metrics) {\r\n        if (!metrics) {\r\n            return null;\r\n        }\r\n\r\n        const httpList = metrics.HttpList;\r\n        let currentHttpList = null;\r\n\r\n        let httpListLength,\r\n            httpListLastIndex;\r\n\r\n        if (!httpList || httpList.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        httpListLength = httpList.length;\r\n        httpListLastIndex = httpListLength - 1;\r\n\r\n        while (httpListLastIndex >= 0) {\r\n            if (httpList[httpListLastIndex].responsecode) {\r\n                currentHttpList = httpList[httpListLastIndex];\r\n                break;\r\n            }\r\n            httpListLastIndex--;\r\n        }\r\n        return currentHttpList;\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getHttpRequests(metrics) {\r\n        if (!metrics) {\r\n            return [];\r\n        }\r\n\r\n        return !!metrics.HttpList ? metrics.HttpList : [];\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @param {string} metricName\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrent(metrics, metricName) {\r\n        if (!metrics) {\r\n            return null;\r\n        }\r\n\r\n        const list = metrics[metricName];\r\n\r\n        if (!list || list.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return list[list.length - 1];\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentDroppedFrames(metrics) {\r\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentSchedulingInfo(metrics) {\r\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentManifestUpdate(metrics) {\r\n        return getCurrent(metrics, MetricsConstants.MANIFEST_UPDATE);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getCurrentDVRInfo(metrics) {\r\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @param {string} id\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getLatestMPDRequestHeaderValueByID(metrics, id) {\r\n        let headers = {};\r\n        let httpRequestList,\r\n            httpRequest,\r\n            i;\r\n\r\n        httpRequestList = getHttpRequests(metrics);\r\n\r\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\r\n            httpRequest = httpRequestList[i];\r\n\r\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\r\n                headers = parseResponseHeaders(httpRequest._responseHeaders);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headers[id] === undefined ? null :  headers[id];\r\n    }\r\n\r\n    /**\r\n     * @param {MetricsList} metrics\r\n     * @param {string} id\r\n     * @returns {*}\r\n     * @memberof module:DashMetrics\r\n     * @instance\r\n     */\r\n    function getLatestFragmentRequestHeaderValueByID(metrics, id) {\r\n        let headers = {};\r\n        let httpRequest = getCurrentHttpRequest(metrics);\r\n        if (httpRequest) {\r\n            headers = parseResponseHeaders(httpRequest._responseHeaders);\r\n        }\r\n        return headers[id] === undefined ? null :  headers[id];\r\n    }\r\n\r\n    function parseResponseHeaders(headerStr) {\r\n        let headers = {};\r\n        if (!headerStr) {\r\n            return headers;\r\n        }\r\n\r\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\r\n        // which send a string starting with a \"\\n\" character\r\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\r\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\r\n            let headerPair = headerPairs[i];\r\n            let index = headerPair.indexOf('\\u003a\\u0020');\r\n            if (index > 0) {\r\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    function findRepresentationIndex(period, representationId) {\r\n        const index = findRepresentation(period, representationId, true);\r\n\r\n        if (index !== null) {\r\n            return index;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function findRepresentation(period, representationId, returnIndex) {\r\n        let adaptationSet,\r\n            adaptationSetArray,\r\n            representation,\r\n            representationArray,\r\n            adaptationSetArrayIndex,\r\n            representationArrayIndex;\r\n\r\n        if (period) {\r\n            adaptationSetArray = period.AdaptationSet_asArray;\r\n            for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\r\n                adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\r\n                representationArray = adaptationSet.Representation_asArray;\r\n                for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\r\n                    representation = representationArray[representationArrayIndex];\r\n                    if (representationId === representation.id) {\r\n                        if (returnIndex) {\r\n                            return representationArrayIndex;\r\n                        } else {\r\n                            return representation;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function adaptationIsType(adaptation, bufferType) {\r\n        return dashManifestModel.getIsTypeOf(adaptation, bufferType);\r\n    }\r\n\r\n    function findMaxBufferIndex(period, bufferType) {\r\n        let adaptationSet,\r\n            adaptationSetArray,\r\n            representationArray,\r\n            adaptationSetArrayIndex;\r\n\r\n        if (!period || !bufferType) return -1;\r\n\r\n        adaptationSetArray = period.AdaptationSet_asArray;\r\n        for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\r\n            adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\r\n            representationArray = adaptationSet.Representation_asArray;\r\n            if (adaptationIsType(adaptationSet, bufferType)) {\r\n                return representationArray.length;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    instance = {\r\n        getBandwidthForRepresentation: getBandwidthForRepresentation,\r\n        getIndexForRepresentation: getIndexForRepresentation,\r\n        getMaxIndexForBufferType: getMaxIndexForBufferType,\r\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\r\n        getLatestBufferLevelVO: getLatestBufferLevelVO,\r\n        getCurrentBufferLevel: getCurrentBufferLevel,\r\n        getCurrentHttpRequest: getCurrentHttpRequest,\r\n        getHttpRequests: getHttpRequests,\r\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\r\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\r\n        getCurrentDVRInfo: getCurrentDVRInfo,\r\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\r\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\r\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\r\n        getRequestsQueue: getRequestsQueue\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\r\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\r\n"]}