{"version":3,"sources":["../../../../src/mss/MssFragmentInfoController.js"],"names":["MssFragmentInfoController","config","context","instance","logger","fragmentModel","started","type","bufferTimeout","startTime","startFragmentTime","index","streamProcessor","eventBus","metricsModel","playbackController","ISOBoxer","baseURLController","debug","controllerType","setup","getLogger","initialize","registerExternalController","getType","getFragmentModel","doStart","on","MssEvents","FRAGMENT_INFO_LOADING_COMPLETED","onFragmentInfoLoadedCompleted","Date","getTime","loadNextFragmentInfo","doStop","off","clearTimeout","reset","unregisterExternalController","representation","getCurrentRepresentation","manifest","adaptation","period","mpd","Period_asArray","AdaptationSet_asArray","segments","SegmentTemplate","SegmentTimeline","S_asArray","segment","length","t","timescale","request","getRequestForSegment","requestFragment","call","delayLoadNextFragmentInfo","delay","setTimeout","FragmentRequest","mediaType","duration","d","quality","mediaInfo","getMediaInfo","adaptationIndex","representationId","id","url","resolve","path","media","replace","bandwidth","tManifest","representationController","getRepresentationController","isFragmentLoadedOrPending","executeRequest","e","fragmentInfo","response","error","deltaFragmentTime","deltaTime","mssFragmentMoofProcessor","create","updateSegmentList","Math","max","fatal","start","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"MssFragmentInfoController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MssEvents from './MssEvents';\r\nimport MSSFragmentMoofProcessor from './MssFragmentMoofProcessor';\r\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\r\n\r\nfunction MssFragmentInfoController(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        logger,\r\n        fragmentModel,\r\n        started,\r\n        type,\r\n        bufferTimeout,\r\n        startTime,\r\n        startFragmentTime,\r\n        index;\r\n\r\n    const streamProcessor = config.streamProcessor;\r\n    const eventBus = config.eventBus;\r\n    const metricsModel = config.metricsModel;\r\n    const playbackController = config.playbackController;\r\n    const ISOBoxer = config.ISOBoxer;\r\n    const baseURLController = config.baseURLController;\r\n    const debug = config.debug;\r\n    const controllerType = 'MssFragmentInfoController';\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n    }\r\n\r\n    function initialize() {\r\n        started = false;\r\n\r\n        startTime = null;\r\n        startFragmentTime = null;\r\n\r\n        // Register to StreamProcessor as external controller\r\n        streamProcessor.registerExternalController(instance);\r\n        type = streamProcessor.getType();\r\n        fragmentModel = streamProcessor.getFragmentModel();\r\n    }\r\n\r\n    function doStart() {\r\n        if (started === true) {\r\n            return;\r\n        }\r\n\r\n        logger.debug('Do start');\r\n\r\n        eventBus.on(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\r\n\r\n        started = true;\r\n        startTime = new Date().getTime();\r\n        index = 0;\r\n\r\n        loadNextFragmentInfo();\r\n    }\r\n\r\n    function doStop() {\r\n        if (!started) {\r\n            return;\r\n        }\r\n        logger.debug('Do stop');\r\n\r\n        eventBus.off(MssEvents.FRAGMENT_INFO_LOADING_COMPLETED, onFragmentInfoLoadedCompleted, instance);\r\n\r\n        // Stop buffering process\r\n        clearTimeout(bufferTimeout);\r\n        started = false;\r\n\r\n        startTime = null;\r\n        startFragmentTime = null;\r\n    }\r\n\r\n    function reset() {\r\n        doStop();\r\n        streamProcessor.unregisterExternalController(instance);\r\n    }\r\n\r\n    function loadNextFragmentInfo() {\r\n        // Check if running state\r\n        if (!started) {\r\n            return;\r\n        }\r\n\r\n        // Get last segment from SegmentTimeline\r\n        const representation = getCurrentRepresentation();\r\n        const manifest = representation.adaptation.period.mpd.manifest;\r\n        const adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\r\n        const segments = adaptation.SegmentTemplate.SegmentTimeline.S_asArray;\r\n        const segment = segments[segments.length - 1];\r\n\r\n        logger.debug('Last fragment time: ' + (segment.t / adaptation.SegmentTemplate.timescale));\r\n\r\n        // Generate segment request\r\n        const request = getRequestForSegment(adaptation, representation, segment);\r\n\r\n        // Send segment request\r\n        requestFragment.call(this, request);\r\n    }\r\n\r\n    function delayLoadNextFragmentInfo(delay) {\r\n        clearTimeout(bufferTimeout);\r\n        bufferTimeout = setTimeout(function () {\r\n            bufferTimeout = null;\r\n            loadNextFragmentInfo();\r\n        }, delay * 1000);\r\n    }\r\n\r\n    function getRequestForSegment(adaptation, representation, segment) {\r\n        let timescale = adaptation.SegmentTemplate.timescale;\r\n        let request = new FragmentRequest();\r\n\r\n        request.mediaType = type;\r\n        request.type = 'FragmentInfoSegment';\r\n        // request.range = segment.mediaRange;\r\n        request.startTime = segment.t / timescale;\r\n        request.duration = segment.d / timescale;\r\n        request.timescale = timescale;\r\n        // request.availabilityStartTime = segment.availabilityStartTime;\r\n        // request.availabilityEndTime = segment.availabilityEndTime;\r\n        // request.wallStartTime = segment.wallStartTime;\r\n        request.quality = representation.index;\r\n        request.index = index++;\r\n        request.mediaInfo = streamProcessor.getMediaInfo();\r\n        request.adaptationIndex = representation.adaptation.index;\r\n        request.representationId = representation.id;\r\n        request.url = baseURLController.resolve(representation.path).url + adaptation.SegmentTemplate.media;\r\n        request.url = request.url.replace('$Bandwidth$', representation.bandwidth);\r\n        request.url = request.url.replace('$Time$', segment.tManifest ? segment.tManifest : segment.t);\r\n        request.url = request.url.replace('/Fragments(', '/FragmentInfo(');\r\n\r\n        return request;\r\n    }\r\n\r\n    function getCurrentRepresentation() {\r\n        const representationController = streamProcessor.getRepresentationController();\r\n        const representation = representationController.getCurrentRepresentation();\r\n\r\n        return representation;\r\n    }\r\n\r\n    function requestFragment(request) {\r\n\r\n        logger.debug('Load fragment for time: ' + request.startTime);\r\n        if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\r\n            // We may have reached end of timeline in case of start-over streams\r\n            logger.debug('No more fragments');\r\n            return;\r\n        }\r\n\r\n        fragmentModel.executeRequest(request);\r\n    }\r\n\r\n    function onFragmentInfoLoadedCompleted(e) {\r\n        if (e.streamProcessor !== streamProcessor) {\r\n            return;\r\n        }\r\n\r\n        const request = e.fragmentInfo.request;\r\n        if (!e.fragmentInfo.response) {\r\n            logger.error('Load error', request.url);\r\n            return;\r\n        }\r\n\r\n        let deltaFragmentTime,\r\n            deltaTime;\r\n\r\n        logger.debug('FragmentInfo loaded: ', request.url);\r\n\r\n        if (!startFragmentTime) {\r\n            startFragmentTime = request.startTime;\r\n        }\r\n\r\n        try {\r\n            // Process FramgentInfo in order to update segment timeline (DVR window)\r\n            const mssFragmentMoofProcessor = MSSFragmentMoofProcessor(context).create({\r\n                metricsModel: metricsModel,\r\n                playbackController: playbackController,\r\n                ISOBoxer: ISOBoxer,\r\n                eventBus: eventBus,\r\n                debug: debug\r\n            });\r\n            mssFragmentMoofProcessor.updateSegmentList(e.fragmentInfo, streamProcessor);\r\n\r\n            deltaTime = (new Date().getTime() - startTime) / 1000;\r\n            deltaFragmentTime = (request.startTime + request.duration) - startFragmentTime;\r\n            delayLoadNextFragmentInfo(Math.max(0, (deltaFragmentTime - deltaTime)));\r\n        } catch (e) {\r\n            logger.fatal('Internal error while processing fragment info segment ');\r\n        }\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        controllerType: controllerType,\r\n        start: doStart,\r\n        getType: getType,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentInfoController); /* jshint ignore:line */\r\n"]}