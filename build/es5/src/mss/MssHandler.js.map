{"version":3,"sources":["../../../../src/mss/MssHandler.js"],"names":["DataChunk","FragmentRequest","MssFragmentInfoController","MssFragmentProcessor","MssParser","MssErrors","DashJSError","MssHandler","config","context","eventBus","events","constants","initSegmentType","metricsModel","playbackController","protectionController","mssFragmentProcessor","create","ISOBoxer","debug","errHandler","mssParser","instance","setup","onInitializationRequested","e","streamProcessor","sender","getStreamProcessor","request","representationController","getRepresentationController","representation","getCurrentRepresentation","mediaType","adaptation","type","range","quality","index","mediaInfo","getMediaInfo","representationId","id","chunk","createDataChunk","getStreamInfo","FRAGMENT_LOADING_PROGRESS","bytes","generateMoov","error","code","message","data","trigger","INIT_FRAGMENT_LOADED","fragmentModel","getFragmentModel","streamId","endFragment","segmentType","start","startTime","duration","end","startFragmentInfoControllers","streamController","getStreamController","processors","getActiveStreamProcessors","forEach","processor","getType","VIDEO","AUDIO","FRAGMENTED_TEXT","i","alreadyRegistered","externalControllers","getExternalControllers","length","controllerType","fragmentInfoController","baseURLController","initialize","onSegmentMediaLoaded","processFragment","streamInfo","manifestInfo","isDynamic","DVRWindowSize","Infinity","onPlaybackPaused","getIsDynamic","getTime","onPlaybackSeekAsked","onTTMLPreProcess","ttmlSubtitles","replace","registerEvents","on","INIT_REQUESTED","dashjs","FactoryMaker","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","PLAYBACK_PAUSED","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","TTML_TO_PARSE","reset","off","createMssParser","__dashjs_factory_name","factory","getClassFactory","errors","updateClassFactory"],"mappings":"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","file":"MssHandler.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DataChunk from '../streaming/vo/DataChunk';\r\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\r\nimport MssFragmentInfoController from './MssFragmentInfoController';\r\nimport MssFragmentProcessor from './MssFragmentProcessor';\r\nimport MssParser from './parser/MssParser';\r\nimport MssErrors from './errors/MssErrors';\r\nimport DashJSError from '../streaming/vo/DashJSError';\r\n\r\nfunction MssHandler(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n    let eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const constants = config.constants;\r\n    const initSegmentType = config.initSegmentType;\r\n    let metricsModel = config.metricsModel;\r\n    let playbackController = config.playbackController;\r\n    let protectionController = config.protectionController;\r\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\r\n        metricsModel: metricsModel,\r\n        playbackController: playbackController,\r\n        protectionController: protectionController,\r\n        eventBus: eventBus,\r\n        constants: constants,\r\n        ISOBoxer: config.ISOBoxer,\r\n        debug: config.debug,\r\n        errHandler: config.errHandler\r\n    });\r\n    let mssParser,\r\n        instance;\r\n\r\n    function setup() {}\r\n\r\n    function onInitializationRequested(e) {\r\n        let streamProcessor = e.sender.getStreamProcessor();\r\n        let request = new FragmentRequest();\r\n        let representationController = streamProcessor.getRepresentationController();\r\n        let representation = representationController.getCurrentRepresentation();\r\n\r\n        request.mediaType = representation.adaptation.type;\r\n        request.type = initSegmentType;\r\n        request.range = representation.range;\r\n        request.quality = representation.index;\r\n        request.mediaInfo = streamProcessor.getMediaInfo();\r\n        request.representationId = representation.id;\r\n\r\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id, e.type !== events.FRAGMENT_LOADING_PROGRESS);\r\n\r\n        try {\r\n            // Generate initialization segment (moov)\r\n            chunk.bytes = mssFragmentProcessor.generateMoov(representation);\r\n        } catch (e) {\r\n            config.errHandler.error(new DashJSError(e.code, e.message, e.data));\r\n        }\r\n\r\n        eventBus.trigger(events.INIT_FRAGMENT_LOADED, {\r\n            chunk: chunk,\r\n            fragmentModel: streamProcessor.getFragmentModel()\r\n        });\r\n\r\n        // Change the sender value to stop event to be propagated\r\n        e.sender = null;\r\n    }\r\n\r\n    function createDataChunk(request, streamId, endFragment) {\r\n        const chunk = new DataChunk();\r\n\r\n        chunk.streamId = streamId;\r\n        chunk.mediaInfo = request.mediaInfo;\r\n        chunk.segmentType = request.type;\r\n        chunk.start = request.startTime;\r\n        chunk.duration = request.duration;\r\n        chunk.end = chunk.start + chunk.duration;\r\n        chunk.index = request.index;\r\n        chunk.quality = request.quality;\r\n        chunk.representationId = request.representationId;\r\n        chunk.endFragment = endFragment;\r\n\r\n        return chunk;\r\n    }\r\n\r\n    function startFragmentInfoControllers() {\r\n\r\n        let streamController = playbackController.getStreamController();\r\n        if (!streamController) {\r\n            return;\r\n        }\r\n\r\n        // Create MssFragmentInfoControllers for each StreamProcessor of active stream (only for audio, video or fragmentedText)\r\n        let processors = streamController.getActiveStreamProcessors();\r\n        processors.forEach(function (processor) {\r\n            if (processor.getType() === constants.VIDEO ||\r\n                processor.getType() === constants.AUDIO ||\r\n                processor.getType() === constants.FRAGMENTED_TEXT) {\r\n\r\n                // Check MssFragmentInfoController already registered to StreamProcessor\r\n                let i;\r\n                let alreadyRegistered = false;\r\n                let externalControllers = processor.getExternalControllers();\r\n                for (i = 0; i < externalControllers.length; i++) {\r\n                    if (externalControllers[i].controllerType &&\r\n                        externalControllers[i].controllerType === 'MssFragmentInfoController') {\r\n                        alreadyRegistered = true;\r\n                    }\r\n                }\r\n\r\n                if (!alreadyRegistered) {\r\n                    let fragmentInfoController = MssFragmentInfoController(context).create({\r\n                        streamProcessor: processor,\r\n                        eventBus: eventBus,\r\n                        metricsModel: metricsModel,\r\n                        playbackController: playbackController,\r\n                        baseURLController: config.baseURLController,\r\n                        ISOBoxer: config.ISOBoxer,\r\n                        debug: config.debug\r\n                    });\r\n                    fragmentInfoController.initialize();\r\n                    fragmentInfoController.start();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function onSegmentMediaLoaded(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n        // Process moof to transcode it from MSS to DASH\r\n        let streamProcessor = e.sender.getStreamProcessor();\r\n        mssFragmentProcessor.processFragment(e, streamProcessor);\r\n\r\n        // Start MssFragmentInfoControllers in case of start-over streams\r\n        let streamInfo = streamProcessor.getStreamInfo();\r\n        if (!streamInfo.manifestInfo.isDynamic && streamInfo.manifestInfo.DVRWindowSize !== Infinity) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onPlaybackPaused() {\r\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onPlaybackSeekAsked() {\r\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onTTMLPreProcess(ttmlSubtitles) {\r\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\r\n            return;\r\n        }\r\n\r\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/http:\\/\\/www.w3.org\\/2006\\/10\\/ttaf1/gi, 'http://www.w3.org/ns/ttml');\r\n    }\r\n\r\n    function registerEvents() {\r\n        eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\r\n        eventBus.on(events.PLAYBACK_PAUSED, onPlaybackPaused, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\r\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\r\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\r\n        eventBus.on(events.TTML_TO_PARSE, onTTMLPreProcess, instance);\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this);\r\n        eventBus.off(events.PLAYBACK_PAUSED, onPlaybackPaused, this);\r\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\r\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\r\n        eventBus.off(events.TTML_TO_PARSE, onTTMLPreProcess, this);\r\n    }\r\n\r\n    function createMssParser() {\r\n        mssParser = MssParser(context).create(config);\r\n        return mssParser;\r\n    }\r\n\r\n    instance = {\r\n        reset: reset,\r\n        createMssParser: createMssParser,\r\n        registerEvents: registerEvents\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMssHandler.__dashjs_factory_name = 'MssHandler';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\r\nfactory.errors = MssErrors;\r\ndashjs.FactoryMaker.updateClassFactory(MssHandler.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory; /* jshint ignore:line */\r\n"]}