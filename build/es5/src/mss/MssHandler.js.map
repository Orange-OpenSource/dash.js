{"version":3,"sources":["../../../../src/mss/MssHandler.js"],"names":["MssHandler","config","context","eventBus","events","constants","initSegmentType","metricsModel","mediaPlayerModel","playbackController","protectionController","mssFragmentProcessor","create","ISOBoxer","debug","errHandler","mssParser","liveDelay","stableBufferTime","bufferTimeAtTopQuality","bufferTimeAtTopQualityLongForm","instance","setup","onInitializationRequested","e","streamProcessor","sender","getStreamProcessor","request","FragmentRequest","representationController","getRepresentationController","representation","getCurrentRepresentation","mediaType","adaptation","type","range","quality","index","mediaInfo","getMediaInfo","representationId","id","chunk","createDataChunk","getStreamInfo","FRAGMENT_LOADING_PROGRESS","bytes","generateMoov","error","DashJSError","code","message","data","trigger","INIT_FRAGMENT_LOADED","fragmentModel","getFragmentModel","streamId","endFragment","DataChunk","segmentType","start","startTime","duration","end","startFragmentInfoControllers","streamController","getStreamController","processors","getActiveStreamProcessors","forEach","processor","getType","VIDEO","AUDIO","FRAGMENTED_TEXT","i","alreadyRegistered","externalControllers","getExternalControllers","length","controllerType","fragmentInfoController","baseURLController","initialize","onSegmentMediaLoaded","processFragment","streamInfo","manifestInfo","isDynamic","DVRWindowSize","Infinity","onPlaybackPaused","getIsDynamic","getTime","onPlaybackSeekAsked","onTTMLPreProcess","ttmlSubtitles","replace","registerEvents","on","INIT_REQUESTED","dashjs","FactoryMaker","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","PLAYBACK_PAUSED","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","TTML_TO_PARSE","reset","setLiveDelay","setStableBufferTime","setBufferTimeAtTopQuality","setBufferTimeAtTopQualityLongForm","undefined","off","createMssParser","getLiveDelay","getStableBufferTime","getBufferTimeAtTopQuality","getBufferTimeAtTopQualityLongForm","__dashjs_factory_name","factory","getClassFactory","errors","MssErrors","updateClassFactory"],"mappings":"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","file":"MssHandler.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DataChunk from '../streaming/vo/DataChunk';\r\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\r\nimport MssFragmentInfoController from './MssFragmentInfoController';\r\nimport MssFragmentProcessor from './MssFragmentProcessor';\r\nimport MssParser from './parser/MssParser';\r\nimport MssErrors from './errors/MssErrors';\r\nimport DashJSError from '../streaming/vo/DashJSError';\r\n\r\nfunction MssHandler(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const constants = config.constants;\r\n    const initSegmentType = config.initSegmentType;\r\n    const metricsModel = config.metricsModel;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const playbackController = config.playbackController;\r\n    const protectionController = config.protectionController;\r\n    const mssFragmentProcessor = MssFragmentProcessor(context).create({\r\n        metricsModel: metricsModel,\r\n        playbackController: playbackController,\r\n        protectionController: protectionController,\r\n        eventBus: eventBus,\r\n        constants: constants,\r\n        ISOBoxer: config.ISOBoxer,\r\n        debug: config.debug,\r\n        errHandler: config.errHandler\r\n    });\r\n    let mssParser,\r\n        liveDelay,\r\n        stableBufferTime,\r\n        bufferTimeAtTopQuality,\r\n        bufferTimeAtTopQualityLongForm,\r\n        instance;\r\n\r\n    function setup() {}\r\n\r\n    function onInitializationRequested(e) {\r\n        let streamProcessor = e.sender.getStreamProcessor();\r\n        let request = new FragmentRequest();\r\n        let representationController = streamProcessor.getRepresentationController();\r\n        let representation = representationController.getCurrentRepresentation();\r\n\r\n        request.mediaType = representation.adaptation.type;\r\n        request.type = initSegmentType;\r\n        request.range = representation.range;\r\n        request.quality = representation.index;\r\n        request.mediaInfo = streamProcessor.getMediaInfo();\r\n        request.representationId = representation.id;\r\n\r\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id, e.type !== events.FRAGMENT_LOADING_PROGRESS);\r\n\r\n        try {\r\n            // Generate initialization segment (moov)\r\n            chunk.bytes = mssFragmentProcessor.generateMoov(representation);\r\n        } catch (e) {\r\n            config.errHandler.error(new DashJSError(e.code, e.message, e.data));\r\n        }\r\n\r\n        eventBus.trigger(events.INIT_FRAGMENT_LOADED, {\r\n            chunk: chunk,\r\n            fragmentModel: streamProcessor.getFragmentModel()\r\n        });\r\n\r\n        // Change the sender value to stop event to be propagated\r\n        e.sender = null;\r\n    }\r\n\r\n    function createDataChunk(request, streamId, endFragment) {\r\n        const chunk = new DataChunk();\r\n\r\n        chunk.streamId = streamId;\r\n        chunk.mediaInfo = request.mediaInfo;\r\n        chunk.segmentType = request.type;\r\n        chunk.start = request.startTime;\r\n        chunk.duration = request.duration;\r\n        chunk.end = chunk.start + chunk.duration;\r\n        chunk.index = request.index;\r\n        chunk.quality = request.quality;\r\n        chunk.representationId = request.representationId;\r\n        chunk.endFragment = endFragment;\r\n\r\n        return chunk;\r\n    }\r\n\r\n    function startFragmentInfoControllers() {\r\n\r\n        let streamController = playbackController.getStreamController();\r\n        if (!streamController) {\r\n            return;\r\n        }\r\n\r\n        // Create MssFragmentInfoControllers for each StreamProcessor of active stream (only for audio, video or fragmentedText)\r\n        let processors = streamController.getActiveStreamProcessors();\r\n        processors.forEach(function (processor) {\r\n            if (processor.getType() === constants.VIDEO ||\r\n                processor.getType() === constants.AUDIO ||\r\n                processor.getType() === constants.FRAGMENTED_TEXT) {\r\n\r\n                // Check MssFragmentInfoController already registered to StreamProcessor\r\n                let i;\r\n                let alreadyRegistered = false;\r\n                let externalControllers = processor.getExternalControllers();\r\n                for (i = 0; i < externalControllers.length; i++) {\r\n                    if (externalControllers[i].controllerType &&\r\n                        externalControllers[i].controllerType === 'MssFragmentInfoController') {\r\n                        alreadyRegistered = true;\r\n                    }\r\n                }\r\n\r\n                if (!alreadyRegistered) {\r\n                    let fragmentInfoController = MssFragmentInfoController(context).create({\r\n                        streamProcessor: processor,\r\n                        eventBus: eventBus,\r\n                        metricsModel: metricsModel,\r\n                        playbackController: playbackController,\r\n                        baseURLController: config.baseURLController,\r\n                        ISOBoxer: config.ISOBoxer,\r\n                        debug: config.debug\r\n                    });\r\n                    fragmentInfoController.initialize();\r\n                    fragmentInfoController.start();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function onSegmentMediaLoaded(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n        // Process moof to transcode it from MSS to DASH\r\n        let streamProcessor = e.sender.getStreamProcessor();\r\n        mssFragmentProcessor.processFragment(e, streamProcessor);\r\n\r\n        // Start MssFragmentInfoControllers in case of start-over streams\r\n        let streamInfo = streamProcessor.getStreamInfo();\r\n        if (!streamInfo.manifestInfo.isDynamic && streamInfo.manifestInfo.DVRWindowSize !== Infinity) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onPlaybackPaused() {\r\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onPlaybackSeekAsked() {\r\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\r\n            startFragmentInfoControllers();\r\n        }\r\n    }\r\n\r\n    function onTTMLPreProcess(ttmlSubtitles) {\r\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\r\n            return;\r\n        }\r\n\r\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/http:\\/\\/www.w3.org\\/2006\\/10\\/ttaf1/gi, 'http://www.w3.org/ns/ttml');\r\n    }\r\n\r\n    function registerEvents() {\r\n        eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\r\n        eventBus.on(events.PLAYBACK_PAUSED, onPlaybackPaused, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\r\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\r\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\r\n        eventBus.on(events.TTML_TO_PARSE, onTTMLPreProcess, instance);\r\n    }\r\n\r\n    function reset() {\r\n        // Restore default configuration parameters\r\n        if (mssParser) {\r\n            mediaPlayerModel.setLiveDelay(liveDelay);\r\n            mediaPlayerModel.setStableBufferTime(stableBufferTime);\r\n            mediaPlayerModel.setBufferTimeAtTopQuality(bufferTimeAtTopQuality);\r\n            mediaPlayerModel.setBufferTimeAtTopQualityLongForm(bufferTimeAtTopQualityLongForm);\r\n        }\r\n\r\n        mssParser = undefined;\r\n\r\n        eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this);\r\n        eventBus.off(events.PLAYBACK_PAUSED, onPlaybackPaused, this);\r\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\r\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\r\n        eventBus.off(events.TTML_TO_PARSE, onTTMLPreProcess, this);\r\n    }\r\n\r\n    function createMssParser() {\r\n        // Store default configuration parameters (that can be modified by parser)\r\n        liveDelay = mediaPlayerModel.getLiveDelay();\r\n        stableBufferTime = mediaPlayerModel.getStableBufferTime();\r\n        bufferTimeAtTopQuality = mediaPlayerModel.getBufferTimeAtTopQuality();\r\n        bufferTimeAtTopQualityLongForm = mediaPlayerModel.getBufferTimeAtTopQualityLongForm();\r\n\r\n        mssParser = MssParser(context).create(config);\r\n        return mssParser;\r\n    }\r\n\r\n    instance = {\r\n        reset: reset,\r\n        createMssParser: createMssParser,\r\n        registerEvents: registerEvents\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMssHandler.__dashjs_factory_name = 'MssHandler';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\r\nfactory.errors = MssErrors;\r\ndashjs.FactoryMaker.updateClassFactory(MssHandler.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory; /* jshint ignore:line */\r\n"]}