{"version":3,"sources":["../../../../src/streaming/FragmentProcessor.js"],"names":["FragmentProcessor","config","context","eventBus","getInstance","events","ISOBoxer","instance","processFragment","setup","on","FRAGMENT_LOADING_COMPLETED","onSegmentMediaLoaded","dashjs","FactoryMaker","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","reset","off","e","error","reduceSampleCount","newCount","request","type","mediaInfo","console","log","isoFile","parseBuffer","response","trun","fetch","sample_count","samples","slice","saiz","senc","entry","dataLength","i","sample_size","mdat","data","moof","length","getLength","data_offset","write","processNextFragment","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"FragmentProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from './../core/EventBus';\nimport FactoryMaker from '../core/FactoryMaker';\n\nfunction FragmentProcessor(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const events = config.events;\n    const ISOBoxer = config.ISOBoxer;\n\n    let instance,\n        processFragment;\n\n    function setup() {\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        processFragment = false;\n    }\n\n    function reset() {\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n    }\n\n    function onSegmentMediaLoaded(e) {\n        if (e.error) {\n            return;\n        }\n\n        reduceSampleCount(e, 20);\n    }\n\n    function reduceSampleCount(e, newCount) {\n\n        if (!processFragment) {\n            return;\n        }\n\n        if (e.request.type !== 'MediaSegment') {\n            return;\n        }\n\n        if (e.request.mediaInfo.type !== 'video') {\n            return;\n        }\n\n        console.log('####################################################################################');\n\n        // e.request contains request description object\n        // e.response contains fragment bytes\n        const isoFile = ISOBoxer.parseBuffer(e.response);\n\n        const trun = isoFile.fetch('trun');\n\n        // Update sample count and table\n        trun.sample_count = newCount;\n        trun.samples = trun.samples.slice(0, newCount);\n\n        // saiz\n        const saiz = isoFile.fetch('saiz');\n        saiz.sample_count = newCount;\n\n        // senc\n        const senc = isoFile.fetch('senc');\n        senc.sample_count = newCount;\n        senc.entry = senc.entry.slice(0, newCount);\n\n        // Calculate new mdat size\n        let dataLength = 0;\n        for (let i = 0; i < newCount; i++) {\n            dataLength += trun.samples[i].sample_size;\n        }\n\n        // Replace mdat data\n        const mdat = isoFile.fetch('mdat');\n        mdat.data = mdat.data.slice(0, dataLength);\n\n        // Update data_offset field that corresponds to first data byte (inside mdat box)\n        const moof = isoFile.fetch('moof');\n        let length = moof.getLength();\n        trun.data_offset = length + 8;\n\n        // Write transformed/processed fragment into request reponse data\n        e.response = isoFile.write();\n\n        processFragment = false;\n    }\n\n    function processNextFragment () {\n        processFragment = true;\n    }\n\n    instance = {\n        reset: reset,\n        processNextFragment\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentProcessor.__dashjs_factory_name = 'FragmentProcessor';\nexport default FactoryMaker.getClassFactory(FragmentProcessor);\n"]}