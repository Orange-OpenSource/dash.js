{"version":3,"sources":["../../../../src/streaming/MediaPlayer.js"],"names":["MediaPlayer","STREAMING_NOT_INITIALIZED_ERROR","PLAYBACK_NOT_INITIALIZED_ERROR","ELEMENT_NOT_ATTACHED_ERROR","SOURCE_NOT_ATTACHED_ERROR","MEDIA_PLAYER_NOT_INITIALIZED_ERROR","PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR","PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR","context","eventBus","getInstance","debug","instance","logger","source","protectionData","mediaPlayerInitialized","streamingInitialized","playbackInitialized","autoPlay","abrController","timelineConverter","mediaController","protectionController","metricsReportingController","mssHandler","adapter","metricsModel","mediaPlayerModel","errHandler","capabilities","streamController","playbackController","dashMetrics","dashManifestModel","manifestModel","videoModel","textController","uriFragmentModel","domStorage","setup","getLogger","Events","extend","MediaPlayerEvents","setConfig","config","initialize","view","AutoPlay","supportsMediaSource","capabilityError","error","DashJSError","Errors","CAPABILITY_MEDIASOURCE_ERROR_CODE","CAPABILITY_MEDIASOURCE_ERROR_MESSAGE","BASE64","restoreDefaultUTCTimingSources","setAutoPlay","undefined","attachView","attachSource","info","getVersion","reset","isReady","getElement","on","type","listener","scope","off","getDebug","preload","initializePlayback","play","isPaused","pause","seek","value","isNaN","Constants","BAD_ARGUMENT_ERROR","s","getIsDynamic","getDVRSeekOffset","isSeeking","isDynamic","setPlaybackRate","getVideoElement","playbackRate","getPlaybackRate","setCatchUpPlaybackRate","getCatchUpPlaybackRate","setLowLatencyMinDrift","getLowLatencyMinDrift","setLowLatencyMaxDriftBeforeSeeking","getLowLatencyMaxDriftBeforeSeeking","setMute","muted","isMuted","setVolume","volume","getVolume","getBufferLength","types","VIDEO","AUDIO","FRAGMENTED_TEXT","buffer","map","getTracksFor","t","length","getDashMetrics","getCurrentBufferLevel","getMetricsFor","Number","MAX_VALUE","reduce","p","c","Math","min","NaN","indexOf","warn","getDVRWindowSize","metric","getDVRInfoMetric","manifestInfo","DVRWindowSize","liveDelay","getLiveDelay","val","range","start","end","time","streamId","currentTime","getTimeRelativeToStreamId","duration","d","timeAsUTC","getAsUTC","durationAsUTC","setMaxAllowedBitrateFor","setMinAllowedBitrateFor","getMaxAllowedBitrateFor","getTopBitrateInfoFor","getMinAllowedBitrateFor","setMaxAllowedRepresentationRatioFor","getMaxAllowedRepresentationRatioFor","getQualityFor","IMAGE","activeStream","getActiveStream","thumbnailController","getThumbnailController","getCurrentTrackIndex","getActiveStreamInfo","setQualityFor","setTrackByIndex","setPlaybackQuality","updatePortalSize","setElementSize","setWindowResizeEventCalled","getLimitBitrateByPortal","setLimitBitrateByPortal","getUsePixelRatioInLimitBitrateByPortal","setUsePixelRatioInLimitBitrateByPortal","setInitialBitrateFor","getInitialBitrateFor","setInitialRepresentationRatioFor","getInitialRepresentationRatioFor","getAutoSwitchQualityFor","getAutoSwitchBitrateFor","setAutoSwitchQualityFor","setAutoSwitchBitrateFor","getUseDeadTimeLatencyForAbr","getUseDeadTimeLatency","setUseDeadTimeLatencyForAbr","useDeadTimeLatency","setUseDeadTimeLatency","getAutoPlay","setLiveDelayFragmentCount","setLiveDelay","getCurrentLiveLatency","useSuggestedPresentationDelay","setUseSuggestedPresentationDelay","enableLastBitrateCaching","enable","ttl","setLastBitrateCachingInfo","enableLastMediaSettingsCaching","setLastMediaSettingsCachingInfo","setScheduleWhilePaused","getScheduleWhilePaused","setFastSwitchEnabled","getFastSwitchEnabled","setABRStrategy","getABRStrategy","useDefaultABRRules","setUseDefaultABRRules","addABRCustomRule","rulename","rule","removeABRCustomRule","removeAllABRCustomRule","setMovingAverageMethod","getMovingAverageMethod","getLowLatencyEnabled","setLowLatencyEnabled","addUTCTimingSource","schemeIdUri","removeUTCTimingSource","clearDefaultUTCTimingSources","enableManifestDateHeaderTimeSource","setUseManifestDateHeaderTimeSource","setBufferToKeep","setBufferAheadToKeep","setBufferPruningInterval","setStableBufferTime","getStableBufferTime","setBufferTimeAtTopQuality","getBufferTimeAtTopQuality","setBufferTimeAtTopQualityLongForm","getBufferTimeAtTopQualityLongForm","setLongFormContentDurationThreshold","setSegmentOverlapToleranceTime","setCacheLoadThresholdForType","setBandwidthSafetyFactor","getBandwidthSafetyFactor","getAverageThroughput","throughputHistory","getThroughputHistory","setAbandonLoadTimeout","setFragmentLoaderRetryAttempts","setRetryAttemptsForType","HTTPRequest","MEDIA_SEGMENT_TYPE","setFragmentLoaderRetryInterval","setRetryIntervalForType","setManifestLoaderRetryAttempts","MPD_TYPE","setManifestLoaderRetryInterval","setXHRWithCredentialsForType","getXHRWithCredentialsForType","setJumpGaps","getJumpGaps","setSmallGapLimit","getSmallGapLimit","setManifestUpdateRetryInterval","getManifestUpdateRetryInterval","getReadOnlyMetricsFor","setTextDefaultLanguage","lang","getTextDefaultLanguage","setTextDefaultEnabled","getTextDefaultEnabled","enableText","enableForcedTextStreaming","isTextEnabled","setTextTrack","idx","getCurrentTextTrackIndex","getCurrentTrackIdx","displayCaptionsOnTop","textTracks","displayCConTop","attachVideoContainer","container","element","setElement","detectProtection","detectMetricsReporting","detectMss","switchToVideoElement","resetPlaybackControllers","getTTMLRenderingDiv","attachTTMLRenderingDiv","div","setTTMLRenderingDiv","getBitrateInfoListFor","stream","getBitrateListFor","getStreamsFromManifest","manifest","getStreamsInfo","streamInfo","getTracksForTypeFromManifest","getAllMediaInfoForType","getCurrentTrackFor","setInitialMediaSettingsFor","setInitialSettings","getInitialMediaSettingsFor","getInitialSettings","setCurrentTrack","track","setTrack","getTrackSwitchModeFor","getSwitchMode","setTrackSwitchModeFor","mode","setSwitchMode","setSelectionModeForInitialTrack","getSelectionModeForInitialTrack","getProtectionController","attachProtectionController","setProtectionData","getThumbnail","callback","getStreamForTime","timeInPeriod","getId","get","keepProtectionMediaKeys","setKeepProtectionMediaKeys","retrieveManifest","url","manifestLoader","createManifestLoader","self","handler","e","INTERNAL_MANIFEST_LOADED","load","getSource","urlOrManifest","formatUTC","locales","hour12","withDate","dt","Date","toLocaleDateString","toLocaleTimeString","convertToTimeCode","max","h","floor","m","toString","parentNameString","childInstance","override","FactoryMaker","getStreamById","id","getKeepProtectionMediaKeys","stop","createPlaybackControllers","createAbrRulesCollection","create","requestModifier","Protection","dashjs","protection","events","publicOnly","errors","createProtectionSystem","constants","MetricsReporting","metricsReporting","createMetricsReporting","mediaElement","metricsConstants","MetricsConstants","MssHandler","baseURLController","initSegmentType","INIT_SEGMENT_TYPE","ISOBoxer","getCurrentDVRInfo","valToConvert","availableFrom","utcValue","getTime","loadWithManifest","__dashjs_factory_name","factory","getClassFactory","updateClassFactory"],"mappings":"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","file":"MediaPlayer.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport MetricsConstants from './constants/MetricsConstants';\r\nimport PlaybackController from './controllers/PlaybackController';\r\nimport StreamController from './controllers/StreamController';\r\nimport MediaController from './controllers/MediaController';\r\nimport BaseURLController from './controllers/BaseURLController';\r\nimport ManifestLoader from './ManifestLoader';\r\nimport ErrorHandler from './utils/ErrorHandler';\r\nimport Capabilities from './utils/Capabilities';\r\nimport TextTracks from './text/TextTracks';\r\nimport RequestModifier from './utils/RequestModifier';\r\nimport TextController from './text/TextController';\r\nimport URIFragmentModel from './models/URIFragmentModel';\r\nimport ManifestModel from './models/ManifestModel';\r\nimport MediaPlayerModel from './models/MediaPlayerModel';\r\nimport MetricsModel from './models/MetricsModel';\r\nimport AbrController from './controllers/AbrController';\r\nimport VideoModel from './models/VideoModel';\r\nimport DOMStorage from './utils/DOMStorage';\r\nimport Debug from './../core/Debug';\r\nimport Errors from './../core/errors/Errors';\r\nimport EventBus from './../core/EventBus';\r\nimport Events from './../core/events/Events';\r\nimport MediaPlayerEvents from './MediaPlayerEvents';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport {\r\n    getVersionString\r\n}\r\nfrom './../core/Version';\r\n\r\n//Dash\r\nimport DashAdapter from '../dash/DashAdapter';\r\nimport DashManifestModel from '../dash/models/DashManifestModel';\r\nimport DashMetrics from '../dash/DashMetrics';\r\nimport TimelineConverter from '../dash/utils/TimelineConverter';\r\nimport {\r\n    HTTPRequest\r\n} from './vo/metrics/HTTPRequest';\r\nimport BASE64 from '../../externals/base64';\r\nimport ISOBoxer from 'codem-isoboxer';\r\nimport DashJSError from './vo/DashJSError';\r\nimport { checkParameterType } from './utils/SupervisorTools';\r\n\r\n/**\r\n * @module MediaPlayer\r\n * @description The MediaPlayer is the primary dash.js Module and a Facade to build your player around.\r\n * It will allow you access to all the important dash.js properties/methods via the public API and all the\r\n * events to build a robust DASH media player.\r\n */\r\nfunction MediaPlayer() {\r\n    /**\r\n    * @constant {string} STREAMING_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized\r\n    * @inner\r\n    */\r\n    const STREAMING_NOT_INITIALIZED_ERROR = 'You must first call initialize() and set a source before calling this method';\r\n    /**\r\n    * @constant {string} PLAYBACK_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized\r\n    * @inner\r\n    */\r\n    const PLAYBACK_NOT_INITIALIZED_ERROR = 'You must first call initialize() and set a valid source and view before calling this method';\r\n    /**\r\n    * @constant {string} ELEMENT_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a reference of an HTML5 video element\r\n    * @inner\r\n    */\r\n    const ELEMENT_NOT_ATTACHED_ERROR = 'You must first call attachView() to set the video element before calling this method';\r\n    /**\r\n    * @constant {string} SOURCE_NOT_ATTACHED_ERROR error string thrown when a function is called before the dash.js has received a valid source stream.\r\n    * @inner\r\n    */\r\n    const SOURCE_NOT_ATTACHED_ERROR = 'You must first call attachSource() with a valid source before calling this method';\r\n    /**\r\n    * @constant {string} MEDIA_PLAYER_NOT_INITIALIZED_ERROR error string thrown when a function is called before the dash.js has been fully initialized.\r\n    * @inner\r\n    */\r\n    const MEDIA_PLAYER_NOT_INITIALIZED_ERROR = 'MediaPlayer not initialized!';\r\n    /**\r\n    * @constant {string} PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR error string thrown when setLowLatencyMinDrift function is called with an invalid value.\r\n    * @inner\r\n    */\r\n    const PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR = 'Playback minimum drift has an invalid value! Use a number from 0 to 0.5';\r\n    /**\r\n    * @constant {string} PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR error string thrown when setLowLatencyMaxDriftBeforeSeeking function is called with an invalid value.\r\n    * @inner\r\n    */\r\n    const PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR = 'Playback maximum drift has an invalid value! Use a number greater or equal to 0';\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const debug = Debug(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        source,\r\n        protectionData,\r\n        mediaPlayerInitialized,\r\n        streamingInitialized,\r\n        playbackInitialized,\r\n        autoPlay,\r\n        abrController,\r\n        timelineConverter,\r\n        mediaController,\r\n        protectionController,\r\n        metricsReportingController,\r\n        mssHandler,\r\n        adapter,\r\n        metricsModel,\r\n        mediaPlayerModel,\r\n        errHandler,\r\n        capabilities,\r\n        streamController,\r\n        playbackController,\r\n        dashMetrics,\r\n        dashManifestModel,\r\n        manifestModel,\r\n        videoModel,\r\n        textController,\r\n        uriFragmentModel,\r\n        domStorage;\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        INIT FUNCTIONS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        mediaPlayerInitialized = false;\r\n        playbackInitialized = false;\r\n        streamingInitialized = false;\r\n        autoPlay = true;\r\n        protectionController = null;\r\n        protectionData = null;\r\n        adapter = null;\r\n        Events.extend(MediaPlayerEvents);\r\n        mediaPlayerModel = MediaPlayerModel(context).getInstance();\r\n        videoModel = VideoModel(context).getInstance();\r\n        uriFragmentModel = URIFragmentModel(context).getInstance();\r\n    }\r\n\r\n    /**\r\n     * Configure media player with customs controllers. Helpful for tests\r\n     *\r\n     * @param {object=} config controllers configuration\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.capabilities) {\r\n            capabilities = config.capabilities;\r\n        }\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.playbackController) {\r\n            playbackController = config.playbackController;\r\n        }\r\n        if (config.mediaPlayerModel) {\r\n            mediaPlayerModel = config.mediaPlayerModel;\r\n        }\r\n        if (config.abrController) {\r\n            abrController = config.abrController;\r\n        }\r\n        if (config.mediaController) {\r\n            mediaController = config.mediaController;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Upon creating the MediaPlayer you must call initialize before you call anything else.\r\n     * There is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}\r\n     * with all your extensions prior to calling initialize.\r\n     *\r\n     * ALL arguments are optional and there are individual methods to set each argument later on.\r\n     * The args in this method are just for convenience and should only be used for a simple player setup.\r\n     *\r\n     * @param {HTML5MediaElement=} view - Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}\r\n     * @param {string=} source - Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @param {boolean=} AutoPlay - Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}\r\n     * @see {@link module:MediaPlayer#attachView attachView()}\r\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @see {@link module:MediaPlayer#setAutoPlay setAutoPlay()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function initialize(view, source, AutoPlay) {\r\n        if (!capabilities) {\r\n            capabilities = Capabilities(context).getInstance();\r\n        }\r\n        errHandler = ErrorHandler(context).getInstance();\r\n\r\n        if (!capabilities.supportsMediaSource()) {\r\n            errHandler.capabilityError('mediasource');\r\n            errHandler.error(new DashJSError(Errors.CAPABILITY_MEDIASOURCE_ERROR_CODE, Errors.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        if (mediaPlayerInitialized) return;\r\n        mediaPlayerInitialized = true;\r\n\r\n        // init some controllers and models\r\n        timelineConverter = TimelineConverter(context).getInstance();\r\n        if (!abrController) {\r\n            abrController = AbrController(context).getInstance();\r\n        }\r\n\r\n        if (!playbackController) {\r\n            playbackController = PlaybackController(context).getInstance();\r\n        }\r\n\r\n        if (!mediaController) {\r\n            mediaController = MediaController(context).getInstance();\r\n        }\r\n\r\n        adapter = DashAdapter(context).getInstance();\r\n        dashManifestModel = DashManifestModel(context).getInstance({\r\n            timelineConverter: timelineConverter,\r\n            errHandler: errHandler,\r\n            BASE64: BASE64\r\n        });\r\n        manifestModel = ManifestModel(context).getInstance();\r\n        dashMetrics = DashMetrics(context).getInstance({\r\n            manifestModel: manifestModel,\r\n            dashManifestModel: dashManifestModel\r\n        });\r\n        metricsModel = MetricsModel(context).getInstance();\r\n\r\n        textController = TextController(context).getInstance();\r\n        domStorage = DOMStorage(context).getInstance({\r\n            mediaPlayerModel: mediaPlayerModel\r\n        });\r\n\r\n        adapter.setConfig({\r\n            dashManifestModel: dashManifestModel\r\n        });\r\n\r\n        timelineConverter.setConfig({\r\n            dashManifestModel: dashManifestModel\r\n        });\r\n\r\n        restoreDefaultUTCTimingSources();\r\n        setAutoPlay(AutoPlay !== undefined ? AutoPlay : true);\r\n\r\n        if (view) {\r\n            attachView(view);\r\n        }\r\n\r\n        if (source) {\r\n            attachSource(source);\r\n        }\r\n\r\n        logger.info('[dash.js ' + getVersion() + '] ' + 'MediaPlayer has been initialized');\r\n    }\r\n\r\n    /**\r\n     * Sets the MPD source and the video element to null. You can also reset the MediaPlayer by\r\n     * calling attachSource with a new source file.\r\n     *\r\n     * Calling this method is all that is necessary to destroy a MediaPlayer instance.\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function reset() {\r\n        attachSource(null);\r\n        attachView(null);\r\n        protectionData = null;\r\n        if (protectionController) {\r\n            protectionController.reset();\r\n            protectionController = null;\r\n        }\r\n        if (metricsReportingController) {\r\n            metricsReportingController.reset();\r\n            metricsReportingController = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The ready state of the MediaPlayer based on both the video element and MPD source being defined.\r\n     *\r\n     * @returns {boolean} The current ready state of the MediaPlayer\r\n     * @see {@link module:MediaPlayer#attachView attachView()}\r\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isReady() {\r\n        return (!!source && !!videoModel.getElement());\r\n    }\r\n\r\n    /**\r\n     * Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}\r\n     *\r\n     * @param {string} type - {@link MediaPlayerEvents}\r\n     * @param {Function} listener - callback method when the event fires.\r\n     * @param {Object} scope - context of the listener so it can be removed properly.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function on(type, listener, scope) {\r\n        eventBus.on(type, listener, scope);\r\n    }\r\n\r\n    /**\r\n     * Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}\r\n     *\r\n     * @param {string} type - {@link MediaPlayerEvents}\r\n     * @param {Function} listener - callback method when the event fires.\r\n     * @param {Object} scope - context of the listener so it can be removed properly.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function off(type, listener, scope) {\r\n        eventBus.off(type, listener, scope);\r\n    }\r\n\r\n    /**\r\n     * Current version of Dash.js\r\n     * @returns {string} the current dash.js version string.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getVersion() {\r\n        return getVersionString();\r\n    }\r\n\r\n    /**\r\n     * Use this method to access the dash.js logging class.\r\n     *\r\n     * @returns {Debug}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDebug() {\r\n        return debug;\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        PLAYBACK FUNCTIONS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Causes the player to begin streaming the media as set by the {@link module:MediaPlayer#attachSource attachSource()}\r\n     * method in preparation for playing. It specifically does not require a view to be attached with {@link module:MediaPlayer#attachSource attachView()} to begin preloading.\r\n     * When a view is attached after preloading, the buffered data is transferred to the attached mediaSource buffers.\r\n     *\r\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @see {@link module:MediaPlayer#attachView attachView()}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function\r\n     * @instance\r\n     */\r\n    function preload() {\r\n        if (videoModel.getElement() || streamingInitialized) {\r\n            return false;\r\n        }\r\n        if (source) {\r\n            initializePlayback();\r\n        } else {\r\n            throw SOURCE_NOT_ATTACHED_ERROR;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.\r\n     * This method will call play on the native Video Element.\r\n     *\r\n     * @see {@link module:MediaPlayer#attachSource attachSource()}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function play() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        if (!autoPlay || (isPaused() && playbackInitialized)) {\r\n            playbackController.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method will call pause on the native Video Element.\r\n     *\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function pause() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        playbackController.pause();\r\n    }\r\n\r\n    /**\r\n     * Returns a Boolean that indicates whether the Video Element is paused.\r\n     * @return {boolean}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isPaused() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return playbackController.isPaused();\r\n    }\r\n\r\n    /**\r\n     * Sets the currentTime property of the attached video element.  If it is a live stream with a\r\n     * timeShiftBufferLength, then the DVR window offset will be automatically calculated.\r\n     *\r\n     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected\r\n     * @see {@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type or is NaN.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function seek(value) {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        checkParameterType(value, 'number');\r\n\r\n        if (isNaN(value)) {\r\n            throw Constants.BAD_ARGUMENT_ERROR;\r\n        }\r\n\r\n        let s = playbackController.getIsDynamic() ? getDVRSeekOffset(value) : value;\r\n        playbackController.seek(s);\r\n    }\r\n\r\n    /**\r\n     * Returns a Boolean that indicates whether the media is in the process of seeking to a new position.\r\n     * @return {boolean}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isSeeking() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return playbackController.isSeeking();\r\n    }\r\n\r\n    /**\r\n     * Returns a Boolean that indicates whether the media is in the process of dynamic.\r\n     * @return {boolean}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isDynamic() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return playbackController.getIsDynamic();\r\n    }\r\n\r\n    /**\r\n     * Use this method to set the native Video Element's playback rate.\r\n     * @param {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setPlaybackRate(value) {\r\n        getVideoElement().playbackRate = value;\r\n    }\r\n\r\n    /**\r\n     * Returns the current playback rate.\r\n     * @returns {number}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getPlaybackRate() {\r\n        return getVideoElement().playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Use this method to set the maximum catch up rate, as a percentage, for low latency live streams. In low latency mode,\r\n     * when measured latency is higher/lower than the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),\r\n     * dash.js increases/decreases playback rate respectively up to (+/-) the percentage defined with this method until target is reached.\r\n     *\r\n     * Valid values for catch up rate are in range 0-0.5 (0-50%). Set it to 0 to turn off live catch up feature.\r\n     *\r\n     * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n     *\r\n     * @param {number} value Percentage in which playback rate is increased/decreased when live catch up mechanism is activated.\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}\r\n     * @default {number} 0.5\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type, or value is not between 0 and 0.5.\r\n     * @instance\r\n     */\r\n    function setCatchUpPlaybackRate(value) {\r\n        mediaPlayerModel.setCatchUpPlaybackRate(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the current catchup playback rate.\r\n     * @returns {number}\r\n     * @see {@link module:MediaPlayer#setCatchUpPlaybackRate setCatchUpPlaybackRate()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getCatchUpPlaybackRate() {\r\n        return mediaPlayerModel.getCatchUpPlaybackRate();\r\n    }\r\n\r\n\r\n    /**\r\n     * Use this method to set the minimum latency deviation allowed before activating catch-up mechanism. In low latency mode,\r\n     * when the difference between the measured latency and the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),\r\n     * as an absolute number, is higher than the one sets with this method, then dash.js increases/decreases\r\n     * playback rate until target latency is reached.\r\n     *\r\n     * LowLatencyMinDrift should be provided in seconds, and it uses values between 0.0 and 0.5.\r\n     *\r\n     * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n     *\r\n     * @param {number} value Maximum difference between measured latency and the target one before applying playback rate modifications.\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}\r\n     * @default {number} 0.05\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR} if called with an invalid argument\r\n     * @instance\r\n     */\r\n    function setLowLatencyMinDrift(value) {\r\n        if ( typeof value !== 'number' || isNaN(value) || value < 0.0 || value > 0.50) {\r\n            throw PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR;\r\n        }\r\n        mediaPlayerModel.setLowLatencyMinDrift(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the current latency minimum allowed drift.\r\n     * @returns {number}\r\n     * @see {@link module:MediaPlayer#setLowLatencyMinDrift setLowLatencyMinDrift()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getLowLatencyMinDrift() {\r\n        return mediaPlayerModel.getLowLatencyMinDrift();\r\n    }\r\n\r\n    /**\r\n     * Use this method to set the maximum latency deviation allowed before dash.js to do a seeking to live position. In low latency mode,\r\n     * when the difference between the measured latency and the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),\r\n     * as an absolute number, is higher than the one sets with this method, then dash.js does a seek to live edge position minus\r\n     * the target live delay.\r\n     *\r\n     * LowLatencyMaxDriftBeforeSeeking should be provided in seconds. If 0, then seeking operations won't be used for\r\n     * fixing latency deviations.\r\n     *\r\n     * Note: Catch-up mechanism is only applied when playing low latency live streams.\r\n     *\r\n     * @param {number} value Maximum difference between measured latency and the target one before using seek to\r\n     * fix drastically live latency deviations.\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}\r\n     * @default {number} 0\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR} if called with an invalid argument\r\n     * @instance\r\n     */\r\n    function setLowLatencyMaxDriftBeforeSeeking(value) {\r\n        if ( typeof value !== 'number' || isNaN(value) || value < 0) {\r\n            throw PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR;\r\n        }\r\n        mediaPlayerModel.setLowLatencyMaxDriftBeforeSeeking(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum latency drift before applying a seek operation to reduce the latency.\r\n     * @returns {number}\r\n     * @see {@link module:MediaPlayer#setLowLatencyMaxDriftBeforeSeeking setLowLatencyMaxDriftBeforeSeeking()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getLowLatencyMaxDriftBeforeSeeking() {\r\n        return mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking();\r\n    }\r\n\r\n    /**\r\n     * Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\r\n     * @instance\r\n     */\r\n    function setMute(value) {\r\n        checkParameterType(value, 'boolean');\r\n        getVideoElement().muted = value;\r\n    }\r\n\r\n    /**\r\n     * A Boolean that determines whether audio is muted.\r\n     * @returns {boolean}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isMuted() {\r\n        return getVideoElement().muted;\r\n    }\r\n\r\n    /**\r\n     * A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).\r\n     * @param {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type, or is NaN or not between 0 and 1.\r\n     * @instance\r\n     */\r\n    function setVolume(value) {\r\n        if ( typeof value !== 'number' || isNaN(value) || value < 0.0 || value > 1.0) {\r\n            throw Constants.BAD_ARGUMENT_ERROR;\r\n        }\r\n        getVideoElement().volume = value;\r\n    }\r\n\r\n    /**\r\n     * Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).\r\n     * @returns {number}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getVolume() {\r\n        return getVideoElement().volume;\r\n    }\r\n\r\n    /**\r\n     * The length of the buffer for a given media type, in seconds. Valid media\r\n     * types are \"video\", \"audio\" and \"fragmentedText\". If no type is passed\r\n     * in, then the minimum of video, audio and fragmentedText buffer length is\r\n     * returned. NaN is returned if an invalid type is requested, the\r\n     * presentation does not contain that type, or if no arguments are passed\r\n     * and the presentation does not include any adaption sets of valid media\r\n     * type.\r\n     *\r\n     * @param {string} type - the media type of the buffer\r\n     * @returns {number} The length of the buffer for the given media type, in\r\n     *  seconds, or NaN\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getBufferLength(type) {\r\n        const types = [Constants.VIDEO, Constants.AUDIO, Constants.FRAGMENTED_TEXT];\r\n        if (!type) {\r\n            const buffer = types.map(\r\n                t => getTracksFor(t).length > 0 ? getDashMetrics().getCurrentBufferLevel(getMetricsFor(t)) : Number.MAX_VALUE\r\n            ).reduce(\r\n                (p, c) => Math.min(p, c)\r\n            );\r\n            return buffer === Number.MAX_VALUE ? NaN : buffer;\r\n        } else {\r\n            if (types.indexOf(type) !== -1) {\r\n                const buffer = getDashMetrics().getCurrentBufferLevel(getMetricsFor(type));\r\n                return buffer ? buffer : NaN;\r\n            } else {\r\n                logger.warn('getBufferLength requested for invalid type');\r\n                return NaN;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The timeShiftBufferLength (DVR Window), in seconds.\r\n     *\r\n     * @returns {number} The window of allowable play time behind the live point of a live stream.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDVRWindowSize() {\r\n        let metric = getDVRInfoMetric();\r\n        if (!metric) {\r\n            return 0;\r\n        }\r\n        return metric.manifestInfo.DVRWindowSize;\r\n    }\r\n\r\n    /**\r\n     * This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).\r\n     * NOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method\r\n     * which will calculate this value for you and set the video element's currentTime property all in one simple call.\r\n     *\r\n     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.\r\n     * @returns {number} A value that is relative the available range within the timeShiftBufferLength (DVR Window).\r\n     * @see {@link module:MediaPlayer#seek seek()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDVRSeekOffset(value) {\r\n        let metric = getDVRInfoMetric();\r\n        if (!metric) {\r\n            return 0;\r\n        }\r\n\r\n        let liveDelay = playbackController.getLiveDelay();\r\n\r\n        let val = metric.range.start + value;\r\n\r\n        if (val > (metric.range.end - liveDelay)) {\r\n            val = metric.range.end - liveDelay;\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Current time of the playhead, in seconds.\r\n     *\r\n     * If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.\r\n     * However if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.\r\n     *\r\n     * @param {string} streamId - The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.\r\n     * @returns {number} The current playhead time of the media, or null.\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function time(streamId) {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let t = getVideoElement().currentTime;\r\n\r\n        if (streamId !== undefined) {\r\n            t = streamController.getTimeRelativeToStreamId(t, streamId);\r\n        } else if (playbackController.getIsDynamic()) {\r\n            let metric = getDVRInfoMetric();\r\n            t = (metric === null) ? 0 : duration() - (metric.range.end - metric.time);\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    /**\r\n     * Duration of the media's playback, in seconds.\r\n     *\r\n     * @returns {number} The current duration of the media.\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function duration() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let d = getVideoElement().duration;\r\n\r\n        if (playbackController.getIsDynamic()) {\r\n\r\n            let metric = getDVRInfoMetric();\r\n            let range;\r\n\r\n            if (!metric) {\r\n                return 0;\r\n            }\r\n\r\n            range = metric.range.end - metric.range.start;\r\n            d = range < metric.manifestInfo.DVRWindowSize ? range : metric.manifestInfo.DVRWindowSize;\r\n        }\r\n        return d;\r\n    }\r\n\r\n    /**\r\n     * Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\r\n     * Note - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.\r\n     *\r\n     * @returns {number} The current playhead time as UTC timestamp.\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function timeAsUTC() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        if (time() < 0) {\r\n            return NaN;\r\n        }\r\n        return getAsUTC(time());\r\n    }\r\n\r\n    /**\r\n     * Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.\r\n     * Note - this property only has meaning for live streams.\r\n     *\r\n     * @returns {number} The current duration as UTC timestamp.\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function durationAsUTC() {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return getAsUTC(duration());\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        AUTO BITRATE\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum bitrate allowed.\r\n     * If you set this property to a value lower than that currently playing, the switching engine will switch down to\r\n     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play\r\n     * that lowest bitrate.\r\n     *\r\n     * You can set or remove this bitrate cap at anytime before or during playback.  To clear this setting you must use the API\r\n     * and set the value param to NaN.\r\n     *\r\n     * This feature is typically used to reserve higher bitrates for playback only when the player is in large or full-screen format.\r\n     *\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @param {number} value - Value in kbps representing the maximum bitrate allowed.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setMaxAllowedBitrateFor(type, value) {\r\n        abrController.setMaxAllowedBitrateFor(type, value);\r\n    }\r\n\r\n    /**\r\n     * When switching multi-bitrate content (auto or manual mode) this property specifies the minimum bitrate allowed.\r\n     * If you set this property to a value higher than that currently playing, the switching engine will switch up to\r\n     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play\r\n     * that lowest bitrate.\r\n     *\r\n     * You can set or remove this bitrate limit at anytime before or during playback. To clear this setting you must use the API\r\n     * and set the value param to NaN.\r\n     *\r\n     * This feature is used to force higher quality playback.\r\n     *\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @param {number} value - Value in kbps representing the minimum bitrate allowed.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setMinAllowedBitrateFor(type, value) {\r\n        abrController.setMinAllowedBitrateFor(type, value);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setMaxAllowedBitrateFor setMaxAllowedBitrateFor()}\r\n     * @instance\r\n     */\r\n    function getMaxAllowedBitrateFor(type) {\r\n        return abrController.getMaxAllowedBitrateFor(type);\r\n    }\r\n\r\n    /**\r\n     * Gets the top quality BitrateInfo checking portal limit and max allowed.\r\n     *\r\n     * It calls getTopQualityIndexFor internally\r\n     *\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @memberof module:MediaPlayer\r\n     * @returns {BitrateInfo | null}\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getTopBitrateInfoFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return abrController.getTopBitrateInfoFor(type);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setMinAllowedBitrateFor setMinAllowedBitrateFor()}\r\n     * @instance\r\n     */\r\n    function getMinAllowedBitrateFor(type) {\r\n        return abrController.getMinAllowedBitrateFor(type);\r\n    }\r\n\r\n    /**\r\n     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum representation allowed,\r\n     * as a proportion of the size of the representation set.\r\n     *\r\n     * You can set or remove this cap at anytime before or during playback. To clear this setting you must use the API\r\n     * and set the value param to NaN.\r\n     *\r\n     * If both this and maxAllowedBitrate are defined, maxAllowedBitrate is evaluated first, then maxAllowedRepresentation,\r\n     * i.e. the lowest value from executing these rules is used.\r\n     *\r\n     * This feature is typically used to reserve higher representations for playback only when connected over a fast connection.\r\n     *\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @param {number} value - number between 0 and 1, where 1 is allow all representations, and 0 is allow only the lowest.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setMaxAllowedRepresentationRatioFor(type, value) {\r\n        abrController.setMaxAllowedRepresentationRatioFor(type, value);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type - 'video' or 'audio' are the type options.\r\n     * @returns {number} The current representation ratio cap.\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setMaxAllowedRepresentationRatioFor setMaxAllowedRepresentationRatioFor()}\r\n     * @instance\r\n     */\r\n    function getMaxAllowedRepresentationRatioFor(type) {\r\n        return abrController.getMaxAllowedRepresentationRatioFor(type);\r\n    }\r\n\r\n    /**\r\n     * Gets the current download quality for media type video, audio or images. For video and audio types the ABR\r\n     * rules update this value before every new download unless setAutoSwitchQualityFor(type, false) is called. For 'image'\r\n     * type, thumbnails, there is no ABR algorithm and quality is set manually.\r\n     *\r\n     * @param {string} type - 'video', 'audio' or 'image' (thumbnails)\r\n     * @returns {number} the quality index, 0 corresponding to the lowest bitrate\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}\r\n     * @see {@link module:MediaPlayer#setQualityFor setQualityFor()}\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getQualityFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        if (type === Constants.IMAGE) {\r\n            const activeStream = getActiveStream();\r\n            if (!activeStream) {\r\n                return -1;\r\n            }\r\n            const thumbnailController = activeStream.getThumbnailController();\r\n            if (!thumbnailController) {\r\n                return -1;\r\n            }\r\n            return thumbnailController.getCurrentTrackIndex();\r\n        }\r\n        return abrController.getQualityFor(type, streamController.getActiveStreamInfo());\r\n    }\r\n\r\n    /**\r\n     * Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.\r\n     * This value will be overwritten by the ABR rules unless setAutoSwitchQualityFor(type, false) is called.\r\n     *\r\n     * @param {string} type - 'video', 'audio' or 'image'\r\n     * @param {number} value - the quality index, 0 corresponding to the lowest bitrate\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}\r\n     * @see {@link module:MediaPlayer#getQualityFor getQualityFor()}\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function setQualityFor(type, value) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        if (type === Constants.IMAGE) {\r\n            const activeStream = getActiveStream();\r\n            if (!activeStream) {\r\n                return;\r\n            }\r\n            const thumbnailController = activeStream.getThumbnailController();\r\n            if (thumbnailController) {\r\n                thumbnailController.setTrackByIndex(value);\r\n            }\r\n        }\r\n        abrController.setPlaybackQuality(type, streamController.getActiveStreamInfo(), value);\r\n    }\r\n\r\n    /**\r\n     * Update the video element size variables\r\n     * Should be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.\r\n     *\r\n     * Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function updatePortalSize() {\r\n        abrController.setElementSize();\r\n        abrController.setWindowResizeEventCalled(true);\r\n    }\r\n\r\n    /**\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getLimitBitrateByPortal() {\r\n        return abrController.getLimitBitrateByPortal();\r\n    }\r\n\r\n    /**\r\n     * Sets whether to limit the representation used based on the size of the playback area\r\n     *\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setLimitBitrateByPortal(value) {\r\n        abrController.setLimitBitrateByPortal(value);\r\n    }\r\n\r\n    /**\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getUsePixelRatioInLimitBitrateByPortal() {\r\n        return abrController.getUsePixelRatioInLimitBitrateByPortal();\r\n    }\r\n\r\n    /**\r\n     * Sets whether to take into account the device's pixel ratio when defining the portal dimensions.\r\n     * Useful on, for example, retina displays.\r\n     *\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     * @default {boolean} false\r\n     */\r\n    function setUsePixelRatioInLimitBitrateByPortal(value) {\r\n        abrController.setUsePixelRatioInLimitBitrateByPortal(value);\r\n    }\r\n\r\n    /**\r\n     * Use this method to explicitly set the starting bitrate for audio | video\r\n     *\r\n     * @param {string} type\r\n     * @param {number} value - A value of the initial bitrate, kbps\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setInitialBitrateFor(type, value) {\r\n        abrController.setInitialBitrateFor(type, value);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {number} A value of the initial bitrate, kbps\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getInitialBitrateFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR; //abrController.getInitialBitrateFor is overloaded with ratioDict logic that needs manifest force it to not be callable pre play.\r\n        }\r\n        return abrController.getInitialBitrateFor(type);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {number} value - A value of the initial Representation Ratio\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setInitialRepresentationRatioFor(type, value) {\r\n        abrController.setInitialRepresentationRatioFor(type, value);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {number} A value of the initial Representation Ratio\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getInitialRepresentationRatioFor(type) {\r\n        return abrController.getInitialRepresentationRatioFor(type);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type - 'audio' | 'video'\r\n     * @returns {boolean} Current state of adaptive bitrate switching\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getAutoSwitchQualityFor(type) {\r\n        return abrController.getAutoSwitchBitrateFor(type);\r\n    }\r\n\r\n    /**\r\n     * Set to false to switch off adaptive bitrate switching.\r\n     *\r\n     * @param {string} type - 'audio' | 'video'\r\n     * @param {boolean} value\r\n     * @default true\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setAutoSwitchQualityFor(type, value) {\r\n        abrController.setAutoSwitchBitrateFor(type, value);\r\n    }\r\n\r\n    /**\r\n     * Get the value of useDeadTimeLatency in AbrController. @see setUseDeadTimeLatencyForAbr\r\n     *\r\n     * @returns {boolean}\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getUseDeadTimeLatencyForAbr() {\r\n        return abrController.getUseDeadTimeLatency();\r\n    }\r\n\r\n    /**\r\n     * Set the value of useDeadTimeLatency in AbrController. If true, only the download\r\n     * portion will be considered part of the download bitrate and latency will be\r\n     * regarded as static. If false, the reciprocal of the whole transfer time will be used.\r\n     * Defaults to true.\r\n     *\r\n     * @param {boolean=} useDeadTimeLatency - True or false flag.\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setUseDeadTimeLatencyForAbr(useDeadTimeLatency) {\r\n        abrController.setUseDeadTimeLatency(useDeadTimeLatency);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        MEDIA PLAYER CONFIGURATION\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * <p>Set to false to prevent stream from auto-playing when the view is attached.</p>\r\n     *\r\n     * @param {boolean} value\r\n     * @default true\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#attachView attachView()}\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\r\n     * @instance\r\n     *\r\n     */\r\n    function setAutoPlay(value) {\r\n        checkParameterType(value, 'boolean');\r\n        autoPlay = value;\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean} The current autoPlay state.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getAutoPlay() {\r\n        return autoPlay;\r\n    }\r\n\r\n    /**\r\n     * <p>Changing this value will lower or increase live stream latency.  The detected segment duration will be multiplied by this value\r\n     * to define a time in seconds to delay a live stream from the live edge.</p>\r\n     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>\r\n     *\r\n     * @param {number} value - Represents how many segment durations to delay the live stream.\r\n     * @default 4\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.\r\n     * @instance\r\n     */\r\n    function setLiveDelayFragmentCount(value) {\r\n        mediaPlayerModel.setLiveDelayFragmentCount(value);\r\n    }\r\n\r\n    /**\r\n     * <p>Equivalent in seconds of setLiveDelayFragmentCount</p>\r\n     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>\r\n     * <p>This value should be less than the manifest duration by a couple of segment durations to avoid playback issues</p>\r\n     * <p>If set, this parameter will take precedence over setLiveDelayFragmentCount and manifest info</p>\r\n     *\r\n     * @param {number} value - Represents how many seconds to delay the live stream.\r\n     * @default undefined\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value, if defined, is not number type.\r\n     * @instance\r\n     */\r\n    function setLiveDelay(value) {\r\n        mediaPlayerModel.setLiveDelay(value);\r\n    }\r\n\r\n    /**\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}\r\n     * @instance\r\n     * @returns {number|undefined} Current live stream delay in seconds when previously set, or `undefined`\r\n     */\r\n    function getLiveDelay() {\r\n        return mediaPlayerModel.getLiveDelay();\r\n    }\r\n\r\n    /**\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     * @returns {number|NaN} Current live stream latency in seconds. It is the difference between current time and time position at the playback head.\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     */\r\n    function getCurrentLiveLatency() {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        if (!playbackInitialized) {\r\n            return NaN;\r\n        }\r\n\r\n        return playbackController.getCurrentLiveLatency();\r\n    }\r\n\r\n    /**\r\n     * <p>Set to true if you would like to override the default live delay and honor the SuggestedPresentationDelay attribute in by the manifest.</p>\r\n     * @param {boolean} value\r\n     * @default false\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#setLiveDelayFragmentCount setLiveDelayFragmentCount()}\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.\r\n     * @instance\r\n     */\r\n    function useSuggestedPresentationDelay(value) {\r\n        mediaPlayerModel.setUseSuggestedPresentationDelay(value);\r\n    }\r\n\r\n    /**\r\n     * Set to false if you would like to disable the last known bit rate from being stored during playback and used\r\n     * to set the initial bit rate for subsequent playback within the expiration window.\r\n     *\r\n     * The default expiration is one hour, defined in milliseconds. If expired, the default initial bit rate (closest to 1000 kbps) will be used\r\n     * for that session and a new bit rate will be stored during that session.\r\n     *\r\n     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.\r\n     * @param {number=} ttl - (Optional) A value defined in milliseconds representing how long to cache the bit rate for. Time to live.\r\n     * @default enable = True, ttl = 360000 (1 hour)\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, enable is not boolean type and, if defined, ttl is not a number or is NaN.\r\n     * @instance\r\n     *\r\n     */\r\n    function enableLastBitrateCaching(enable, ttl) {\r\n        mediaPlayerModel.setLastBitrateCachingInfo(enable, ttl);\r\n    }\r\n\r\n    /**\r\n     * Set to false if you would like to disable the last known lang for audio (or camera angle for video) from being stored during playback and used\r\n     * to set the initial settings for subsequent playback within the expiration window.\r\n     *\r\n     * The default expiration is one hour, defined in milliseconds. If expired, the default settings will be used\r\n     * for that session and a new settings will be stored during that session.\r\n     *\r\n     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.\r\n     * @param {number=} [ttl] - (Optional) A value defined in milliseconds representing how long to cache the settings for. Time to live.\r\n     * @default enable = True, ttl = 360000 (1 hour)\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, enable is not boolean type and, if defined, ttl is not a number or is NaN.\r\n     * @instance\r\n     *\r\n     */\r\n    function enableLastMediaSettingsCaching(enable, ttl) {\r\n        mediaPlayerModel.setLastMediaSettingsCachingInfo(enable, ttl);\r\n    }\r\n\r\n    /**\r\n     * Set to true if you would like dash.js to keep downloading fragments in the background\r\n     * when the video element is paused.\r\n     *\r\n     * @default true\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.\r\n     * @instance\r\n     */\r\n    function setScheduleWhilePaused(value) {\r\n        mediaPlayerModel.setScheduleWhilePaused(value);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean of the current state of ScheduleWhilePaused.\r\n     * @returns {boolean}\r\n     * @see {@link module:MediaPlayer#setScheduleWhilePaused setScheduleWhilePaused()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getScheduleWhilePaused() {\r\n        return mediaPlayerModel.getScheduleWhilePaused();\r\n    }\r\n\r\n    /**\r\n     * When enabled, after an ABR up-switch in quality, instead of requesting and appending the next fragment\r\n     * at the end of the current buffer range it is requested and appended closer to the current time\r\n     * When enabled, The maximum time to render a higher quality is current time + (1.5 * fragment duration).\r\n     *\r\n     * Note, When ABR down-switch is detected, we appended the lower quality at the end of the buffer range to preserve the\r\n     * higher quality media for as long as possible.\r\n     *\r\n     * If enabled, it should be noted there are a few cases when the client will not replace inside buffer range but rather\r\n     * just append at the end.  1. When the buffer level is less than one fragment duration 2.  The client\r\n     * is in an Abandonment State due to recent fragment abandonment event.\r\n     *\r\n     * Known issues:\r\n     * 1. In IE11 with auto switching off, if a user switches to a quality they can not download in time the\r\n     * fragment may be appended in the same range as the playhead or even in the past, in IE11 it may cause a stutter\r\n     * or stall in playback.\r\n     *\r\n     *\r\n     * @param {boolean} value\r\n     * @default {boolean} false\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.\r\n     * @instance\r\n     */\r\n    function setFastSwitchEnabled(value) { //TODO we need to look at track switches for adaptation sets.  If always replace it works much like this but clears buffer. Maybe too many ways to do same thing.\r\n        mediaPlayerModel.setFastSwitchEnabled(value);\r\n    }\r\n\r\n    /**\r\n     * Disabled by default. Will return the current state of Fast Switch.\r\n     * @return {boolean} Returns true if FastSwitch ABR is enabled.\r\n     * @see {@link module:MediaPlayer#setFastSwitchEnabled setFastSwitchEnabled()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getFastSwitchEnabled() {\r\n        return mediaPlayerModel.getFastSwitchEnabled();\r\n    }\r\n\r\n    /**\r\n     * Sets the ABR strategy. Valid strategies are \"abrDynamic\", \"abrBola\" and \"abrThroughput\".\r\n     * The ABR strategy can also be changed during a streaming session.\r\n     * The call has no effect if an invalid method is passed.\r\n     *\r\n     * The BOLA strategy chooses bitrate based on current buffer level, with higher bitrates for higher buffer levels.\r\n     * The Throughput strategy chooses bitrate based on the recent throughput history.\r\n     * The Dynamic strategy switches smoothly between BOLA and Throughput in real time, playing to the strengths of both.\r\n     *\r\n     * @param {string} value\r\n     * @default \"abrDynamic\"\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setABRStrategy(value) {\r\n        mediaPlayerModel.setABRStrategy(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the current ABR strategy being used.\r\n     * @return {string} \"abrDynamic\", \"abrBola\" or \"abrThroughput\"\r\n     * @see {@link module:MediaPlayer#setABRStrategy setABRStrategy()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getABRStrategy() {\r\n        return mediaPlayerModel.getABRStrategy();\r\n    }\r\n\r\n    /**\r\n     * Enable/disable builtin dashjs ABR rules\r\n     * @param {boolean} value\r\n     * @default true\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not boolean type.\r\n     * @instance\r\n     */\r\n    function useDefaultABRRules(value) {\r\n        mediaPlayerModel.setUseDefaultABRRules(value);\r\n    }\r\n\r\n    /**\r\n     * Add a custom ABR Rule\r\n     * Rule will be apply on next stream if a stream is being played\r\n     *\r\n     * @param {string} type - rule type (one of ['qualitySwitchRules','abandonFragmentRules'])\r\n     * @param {string} rulename - name of rule (used to identify custom rule). If one rule of same name has been added, then existing rule will be updated\r\n     * @param {object} rule - the rule object instance\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments.\r\n     * @instance\r\n     */\r\n    function addABRCustomRule(type, rulename, rule) {\r\n        mediaPlayerModel.addABRCustomRule(type, rulename, rule);\r\n    }\r\n\r\n    /**\r\n     * Remove a custom ABR Rule\r\n     *\r\n     * @param {string} rulename - name of the rule to be removed\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function removeABRCustomRule(rulename) {\r\n        mediaPlayerModel.removeABRCustomRule(rulename);\r\n    }\r\n\r\n    /**\r\n     * Remove all custom rules\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function removeAllABRCustomRule() {\r\n        mediaPlayerModel.removeABRCustomRule();\r\n    }\r\n\r\n    /**\r\n     * Sets the moving average method used for smoothing throughput estimates. Valid methods are\r\n     * \"slidingWindow\" and \"ewma\". The call has no effect if an invalid method is passed.\r\n     *\r\n     * The sliding window moving average method computes the average throughput using the last four segments downloaded.\r\n     * If the stream is live (as opposed to VOD), then only the last three segments are used.\r\n     * If wide variations in throughput are detected, the number of segments can be dynamically increased to avoid oscillations.\r\n     *\r\n     * The exponentially weighted moving average (EWMA) method computes the average using exponential smoothing.\r\n     * Two separate estimates are maintained, a fast one with a three-second half life and a slow one with an eight-second half life.\r\n     * The throughput estimate at any time is the minimum of the fast and slow estimates.\r\n     * This allows a fast reaction to a bandwidth drop and prevents oscillations on bandwidth spikes.\r\n     *\r\n     * @param {string} value\r\n     * @default {string} 'slidingWindow'\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not slidingWindow or ewma.\r\n     * @instance\r\n     */\r\n    function setMovingAverageMethod(value) {\r\n        mediaPlayerModel.setMovingAverageMethod(value);\r\n    }\r\n\r\n    /**\r\n     * Return the current moving average method used for smoothing throughput estimates.\r\n     * @return {string} Returns \"slidingWindow\" or \"ewma\".\r\n     * @see {@link module:MediaPlayer#setMovingAverageMethod setMovingAverageMethod()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getMovingAverageMethod() {\r\n        return mediaPlayerModel.getMovingAverageMethod();\r\n    }\r\n\r\n    /**\r\n     * Returns if low latency mode is enabled. Disabled by default.\r\n     * @return {boolean} true - if enabled\r\n     * @see {@link module:MediaPlayer#setLowLatencyEnabled setLowLatencyEnabled()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getLowLatencyEnabled() {\r\n        return mediaPlayerModel.getLowLatencyEnabled();\r\n    }\r\n\r\n    /**\r\n     * Enables low latency mode for dynamic streams. If not specified, liveDelay is set to 3s of buffer.\r\n     * Browser compatibility (Check row 'ReadableStream response body'): https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.\r\n     * @instance\r\n     */\r\n    function setLowLatencyEnabled(value) {\r\n        mediaPlayerModel.setLowLatencyEnabled(value);\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.\r\n     * If UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>\r\n     * <p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.\r\n     * This will allow the date header on the manifest to be used instead of a time server</p>\r\n     * @param {string} schemeIdUri - <ul>\r\n     * <li>urn:mpeg:dash:utc:http-head:2014</li>\r\n     * <li>urn:mpeg:dash:utc:http-xsdate:2014</li>\r\n     * <li>urn:mpeg:dash:utc:http-iso:2014</li>\r\n     * <li>urn:mpeg:dash:utc:direct:2014</li>\r\n     * </ul>\r\n     * <p>Some specs referencing early ISO23009-1 drafts incorrectly use\r\n     * 2012 in the URI, rather than 2014. support these for now.</p>\r\n     * <ul>\r\n     * <li>urn:mpeg:dash:utc:http-head:2012</li>\r\n     * <li>urn:mpeg:dash:utc:http-xsdate:2012</li>\r\n     * <li>urn:mpeg:dash:utc:http-iso:2012</li>\r\n     * <li>urn:mpeg:dash:utc:direct:2012</li>\r\n     * </ul>\r\n     * @param {string} value - Path to a time source.\r\n     * @default\r\n     * <ul>\r\n     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\r\n     *     <li>value:http://time.akamai.com/?iso&ms/li>\r\n     * </ul>\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}\r\n     * @instance\r\n     */\r\n    function addUTCTimingSource(schemeIdUri, value) {\r\n        mediaPlayerModel.addUTCTimingSource(schemeIdUri, value);\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the\r\n     * entry to be removed from the array</p>\r\n     * @param {string} schemeIdUri - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\r\n     * @param {string} value - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, schemeIdUri and value are not string type.\r\n     * @instance\r\n     */\r\n    function removeUTCTimingSource(schemeIdUri, value) {\r\n        mediaPlayerModel.removeUTCTimingSource(schemeIdUri, value);\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to clear the stored array of time sources.</p>\r\n     * <p>Example use: If you have exposed the Date header, calling this method\r\n     * will allow the date header on the manifest to be used instead of the time server.</p>\r\n     * <p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back\r\n     * to using a binary search to discover the live edge</p>\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}\r\n     * @instance\r\n     */\r\n    function clearDefaultUTCTimingSources() {\r\n        mediaPlayerModel.clearDefaultUTCTimingSources();\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>\r\n     *\r\n     * @default\r\n     * <ul>\r\n     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>\r\n     *     <li>value:http://time.akamai.com/?iso&ms</li>\r\n     * </ul>\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\r\n     * @instance\r\n     */\r\n    function restoreDefaultUTCTimingSources() {\r\n        mediaPlayerModel.restoreDefaultUTCTimingSources();\r\n    }\r\n\r\n    /**\r\n     * <p>Allows you to enable the use of the Date Header, if exposed with CORS, as a timing source for live edge detection. The\r\n     * use of the date header will happen only after the other timing source that take precedence fail or are omitted as described.\r\n     * {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()} </p>\r\n     *\r\n     * @param {boolean} value - true to enable\r\n     * @default {boolean} True\r\n     * @memberof module:MediaPlayer\r\n     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.\r\n     * @instance\r\n     */\r\n    function enableManifestDateHeaderTimeSource(value) {\r\n        mediaPlayerModel.setUseManifestDateHeaderTimeSource(value);\r\n    }\r\n\r\n    /**\r\n     * This value influences the buffer pruning logic.\r\n     * Allows you to modify the buffer that is kept in source buffer in seconds.\r\n     * <pre>0|-----------bufferToPrune-----------|-----bufferToKeep-----|currentTime|</pre>\r\n     *\r\n     * @default 20 seconds\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n     */\r\n    function setBufferToKeep(value) {\r\n        mediaPlayerModel.setBufferToKeep(value);\r\n    }\r\n\r\n    /**\r\n     * This value influences the buffer pruning logic.\r\n     * Allows you to modify the buffer ahead of current time position that is kept in source buffer in seconds.\r\n     * <pre>0|--------|currentTime|-----bufferAheadToKeep----|----bufferToPrune-----------|end|</pre>\r\n     *\r\n     * @default 80 seconds\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n     */\r\n    function setBufferAheadToKeep(value) {\r\n        mediaPlayerModel.setBufferAheadToKeep(value);\r\n    }\r\n\r\n    /**\r\n     * This value influences the buffer pruning logic.\r\n     * Allows you to modify the interval of pruning buffer in seconds.\r\n     *\r\n     * @default 10 seconds\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not a number type.\r\n     * @instance\r\n     */\r\n    function setBufferPruningInterval(value) {\r\n        mediaPlayerModel.setBufferPruningInterval(value);\r\n    }\r\n\r\n    /**\r\n     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).\r\n     *\r\n     * When the time is set higher than the default you will have to wait longer\r\n     * to see automatic bitrate switches but will have a larger buffer which\r\n     * will increase stability.\r\n     *\r\n     * Note: The value set for Stable Buffer Time is not considered when Low Latency Mode is enabled.\r\n     * When in Low Latency mode dash.js takes ownership of Stable Buffer Time value to minimize latency\r\n     * that comes from buffer filling process.\r\n     *\r\n     * @default 12 seconds.\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n     */\r\n    function setStableBufferTime(value) {\r\n        mediaPlayerModel.setStableBufferTime(value);\r\n    }\r\n\r\n    /**\r\n     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).\r\n     *\r\n     * When the time is set higher than the default you will have to wait longer\r\n     * to see automatic bitrate switches but will have a larger buffer which\r\n     * will increase stability.\r\n     *\r\n     * @default 12 seconds.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getStableBufferTime() {\r\n        return mediaPlayerModel.getStableBufferTime();\r\n    }\r\n\r\n    /**\r\n     * The time that the internal buffer target will be set to once playing the top quality.\r\n     * If there are multiple bitrates in your adaptation, and the media is playing at the highest\r\n     * bitrate, then we try to build a larger buffer at the top quality to increase stability\r\n     * and to maintain media quality.\r\n     *\r\n     * @default 30 seconds.\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n     */\r\n    function setBufferTimeAtTopQuality(value) {\r\n        mediaPlayerModel.setBufferTimeAtTopQuality(value);\r\n    }\r\n\r\n    /**\r\n     * The time that the internal buffer target will be set to once playing the top quality.\r\n     * If there are multiple bitrates in your adaptation, and the media is playing at the highest\r\n     * bitrate, then we try to build a larger buffer at the top quality to increase stability\r\n     * and to maintain media quality.\r\n     *\r\n     * @default 30 seconds.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getBufferTimeAtTopQuality() {\r\n        return mediaPlayerModel.getBufferTimeAtTopQuality();\r\n    }\r\n\r\n    /**\r\n     * The time that the internal buffer target will be set to once playing the top quality for long form content.\r\n     *\r\n     * @default 60 seconds.\r\n     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}\r\n     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n     */\r\n    function setBufferTimeAtTopQualityLongForm(value) {\r\n        mediaPlayerModel.setBufferTimeAtTopQualityLongForm(value);\r\n    }\r\n\r\n    /**\r\n     * The time that the internal buffer target will be set to once playing the top quality for long form content.\r\n     *\r\n     * @default 60 seconds.\r\n     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}\r\n     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getBufferTimeAtTopQualityLongForm() {\r\n        return mediaPlayerModel.getBufferTimeAtTopQualityLongForm();\r\n    }\r\n\r\n    /**\r\n     * The threshold which defines if the media is considered long form content.\r\n     * This will directly affect the buffer targets when playing back at the top quality.\r\n     *\r\n     * @see {@link module:MediaPlayer#setBufferTimeAtTopQualityLongForm setBufferTimeAtTopQualityLongForm()}\r\n     * @default 600 seconds (10 minutes).\r\n     * @param {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n     */\r\n    function setLongFormContentDurationThreshold(value) {\r\n        mediaPlayerModel.setLongFormContentDurationThreshold(value);\r\n    }\r\n\r\n    /**\r\n     * The overlap tolerance time, at both the head and the tail of segments, considered when doing time to segment conversions.\r\n     *\r\n     * This is used when calculating which of the loaded segments of a representation corresponds with a given time position.\r\n     * Its value is never used for calculating the segment index in seeking operations in which it assumes overlap time threshold is zero.\r\n     *\r\n     * <pre>\r\n     * |-o-|--- segment X ----|-o-|\r\n     *                        |-o-|---- segment X+1 -----|-o-|\r\n     *                                                   |-o-|---- segment X+2 -----|-o-|\r\n     * </pre>\r\n     * @default 0.05 seconds.\r\n     * @param {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n    */\r\n    function setSegmentOverlapToleranceTime(value) {\r\n        mediaPlayerModel.setSegmentOverlapToleranceTime(value);\r\n    }\r\n\r\n    /**\r\n     * For a given media type, the threshold which defines if the response to a fragment\r\n     * request is coming from browser cache or not.\r\n     * Valid media types are \"video\", \"audio\"\r\n     *\r\n     * @default 50 milliseconds for video fragment requests; 5 milliseconds for audio fragment requests.\r\n     * @param {string} type 'video' or 'audio' are the type options.\r\n     * @param {number} value Threshold value in milliseconds.\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with invalid arguments, type not a string type and its value is not audio or video, value not number type.\r\n     * @instance\r\n     */\r\n    function setCacheLoadThresholdForType(type, value) {\r\n        mediaPlayerModel.setCacheLoadThresholdForType(type, value);\r\n    }\r\n\r\n    /**\r\n     * A percentage between 0.0 and 1 to reduce the measured throughput calculations.\r\n     * The default is 0.9. The lower the value the more conservative and restricted the\r\n     * measured throughput calculations will be. please use carefully. This will directly\r\n     * affect the ABR logic in dash.js\r\n     *\r\n     * @param {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n     */\r\n    function setBandwidthSafetyFactor(value) {\r\n        mediaPlayerModel.setBandwidthSafetyFactor(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of the current BandwidthSafetyFactor\r\n     *\r\n     * @return {number} value\r\n     * @see {@link module:MediaPlayer#setBandwidthSafetyFactor setBandwidthSafetyFactor()}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getBandwidthSafetyFactor() {\r\n        return mediaPlayerModel.getBandwidthSafetyFactor();\r\n    }\r\n\r\n    /**\r\n     * Returns the average throughput computed in the ABR logic\r\n     *\r\n     * @param {string} type\r\n     * @return {number} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getAverageThroughput(type) {\r\n        const throughputHistory = abrController.getThroughputHistory();\r\n        return throughputHistory ? throughputHistory.getAverageThroughput(type) : 0;\r\n    }\r\n\r\n    /**\r\n     * A timeout value in seconds, which during the ABRController will block switch-up events.\r\n     * This will only take effect after an abandoned fragment event occurs.\r\n     *\r\n     * @default 10 seconds\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, not number type.\r\n     * @instance\r\n     */\r\n    function setAbandonLoadTimeout(value) {\r\n        mediaPlayerModel.setAbandonLoadTimeout(value);\r\n    }\r\n\r\n    /**\r\n     * Total number of retry attempts that will occur on a fragment load before it fails.\r\n     * Increase this value to a maximum in order to achieve an automatic playback resume\r\n     * in case of completely lost internet connection.\r\n     *\r\n     * Note: This parameter is not taken into account when Low Latency Mode is enabled. For Low Latency\r\n     * Playback dash.js takes control and sets a number of retry attempts that ensures playback stability.\r\n     *\r\n     * @default 3\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.\r\n     * @instance\r\n     */\r\n    function setFragmentLoaderRetryAttempts(value) {\r\n        mediaPlayerModel.setRetryAttemptsForType(HTTPRequest.MEDIA_SEGMENT_TYPE, value);\r\n    }\r\n\r\n    /**\r\n     * Time in milliseconds of which to reload a failed fragment load attempt.\r\n     *\r\n     * @default 1000 milliseconds\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.\r\n     * @instance\r\n     */\r\n    function setFragmentLoaderRetryInterval(value) {\r\n        mediaPlayerModel.setRetryIntervalForType(HTTPRequest.MEDIA_SEGMENT_TYPE, value);\r\n    }\r\n\r\n    /**\r\n     * Total number of retry attempts that will occur on a manifest load before it fails.\r\n     *\r\n     * @default 4\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setManifestLoaderRetryAttempts(value) {\r\n        mediaPlayerModel.setRetryAttemptsForType(HTTPRequest.MPD_TYPE, value);\r\n    }\r\n\r\n    /**\r\n     * Time in milliseconds of which to reload a failed manifest load attempt.\r\n     *\r\n     * @default 1000 milliseconds\r\n     * @param {int} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setManifestLoaderRetryInterval(value) {\r\n        mediaPlayerModel.setRetryIntervalForType(HTTPRequest.MPD_TYPE, value);\r\n    }\r\n\r\n    /**\r\n     * Sets whether withCredentials on XHR requests for a particular request\r\n     * type is true or false\r\n     *\r\n     * @default false\r\n     * @param {string} type - one of HTTPRequest.*_TYPE\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setXHRWithCredentialsForType(type, value) {\r\n        mediaPlayerModel.setXHRWithCredentialsForType(type, value);\r\n    }\r\n\r\n    /**\r\n     * Gets whether withCredentials on XHR requests for a particular request\r\n     * type is true or false\r\n     *\r\n     * @param {string} type - one of HTTPRequest.*_TYPE\r\n     * @return {boolean}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getXHRWithCredentialsForType(type) {\r\n        return mediaPlayerModel.getXHRWithCredentialsForType(type);\r\n    }\r\n\r\n    /**\r\n     * Sets whether player should jump small gaps (discontinuities) in the buffer.\r\n     *\r\n     * @param {boolean} value\r\n     * @default false\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.\r\n     * @instance\r\n     *\r\n     */\r\n    function setJumpGaps(value) {\r\n        mediaPlayerModel.setJumpGaps(value);\r\n    }\r\n\r\n    /**\r\n     * Gets current status of jump gaps feature.\r\n     * @returns {boolean} The current jump gaps state.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getJumpGaps() {\r\n        return mediaPlayerModel.getJumpGaps();\r\n    }\r\n\r\n    /**\r\n     * Time in seconds for a gap to be considered small.\r\n     *\r\n     * @param {number} value\r\n     * @default 0.8\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.\r\n     * @instance\r\n     *\r\n     */\r\n    function setSmallGapLimit(value) {\r\n        mediaPlayerModel.setSmallGapLimit(value);\r\n    }\r\n\r\n    /**\r\n     * Time in seconds for a gap to be considered small.\r\n     * @returns {boolean} Current small gap limit\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getSmallGapLimit() {\r\n        return mediaPlayerModel.getSmallGapLimit();\r\n    }\r\n\r\n    /**\r\n     * For live streams, set the interval-frequency in milliseconds at which\r\n     * dash.js will check if the current manifest is still processed before\r\n     * downloading the next manifest once the minimumUpdatePeriod time has\r\n     * expired.\r\n     * @param {int} value\r\n     * @default 100\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not number type.\r\n     * @instance\r\n     * @see {@link module:MediaPlayer#getManifestUpdateRetryInterval getManifestUpdateRetryInterval()}\r\n     *\r\n     */\r\n    function setManifestUpdateRetryInterval(value) {\r\n        mediaPlayerModel.setManifestUpdateRetryInterval(value);\r\n    }\r\n\r\n    /**\r\n     * For live streams, get the interval-frequency in milliseconds at which\r\n     * dash.js will check if the current manifest is still processed before\r\n     * downloading the next manifest once the minimumUpdatePeriod time has\r\n     * expired.\r\n     * @returns {int} Current retry delay for manifest update\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     * @see {@link module:MediaPlayer#setManifestUpdateRetryInterval setManifestUpdateRetryInterval()}\r\n     */\r\n    function getManifestUpdateRetryInterval() {\r\n        return mediaPlayerModel.getManifestUpdateRetryInterval();\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        METRICS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics\r\n     * stored in dash.js\r\n     *\r\n     * @see {@link module:DashMetrics}\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getDashMetrics() {\r\n        return dashMetrics;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} type\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getMetricsFor(type) {\r\n        return metricsModel.getReadOnlyMetricsFor(type);\r\n    }\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        TEXT MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Set default language for text. If default language is not one of text tracks, dash will choose the first one.\r\n     *\r\n     * @param {string} lang - default language\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setTextDefaultLanguage(lang) {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.setTextDefaultLanguage(lang);\r\n    }\r\n\r\n    /**\r\n     * Get default language for text.\r\n     *\r\n     * @return {string} the default language if it has been set using setTextDefaultLanguage\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getTextDefaultLanguage() {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        return textController.getTextDefaultLanguage();\r\n    }\r\n\r\n    /**\r\n     * Set enabled default state.\r\n     * This is used to enable/disable text when a file is loaded.\r\n     * During playback, use enableText to enable text for the file\r\n     *\r\n     * @param {boolean} enable - true to enable text, false otherwise\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setTextDefaultEnabled(enable) {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.setTextDefaultEnabled(enable);\r\n    }\r\n\r\n    /**\r\n     * Get enabled default state.\r\n     *\r\n     * @return {boolean}  default enable state\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getTextDefaultEnabled() {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        return textController.getTextDefaultEnabled();\r\n    }\r\n\r\n    /**\r\n     * Enable/disable text\r\n     * When enabling text, dash will choose the previous selected text track\r\n     *\r\n     * @param {boolean} enable - true to enable text, false otherwise (same as setTextTrack(-1))\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function enableText(enable) {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.enableText(enable);\r\n    }\r\n\r\n    /**\r\n     * Enable/disable text\r\n     * When enabling dash will keep downloading and process fragmented text tracks even if all tracks are in mode \"hidden\"\r\n     *\r\n     * @param {boolean} enable - true to enable text streaming even if all text tracks are hidden.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function enableForcedTextStreaming(enable) {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.enableForcedTextStreaming(enable);\r\n    }\r\n\r\n    /**\r\n     * Return if text is enabled\r\n     *\r\n     * @return {boolean} return true if text is enabled, false otherwise\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function isTextEnabled() {\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        return textController.isTextEnabled();\r\n    }\r\n\r\n    /**\r\n     * Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to\r\n     * set the track mode on the video object to switch a track when using this method.\r\n     * @param {number} idx - Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.\r\n     * @see {@link MediaPlayerEvents#event:TEXT_TRACK_ADDED dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}\r\n     * @throws {@link module:MediaPlayer~PLAYBACK_NOT_INITIALIZED_ERROR PLAYBACK_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setTextTrack(idx) {\r\n        if (!playbackInitialized) {\r\n            throw PLAYBACK_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        if (textController === undefined) {\r\n            textController = TextController(context).getInstance();\r\n        }\r\n\r\n        textController.setTextTrack(idx);\r\n    }\r\n\r\n    function getCurrentTextTrackIndex() {\r\n        let idx = NaN;\r\n        if (textController) {\r\n            idx = textController.getCurrentTrackIdx();\r\n        }\r\n        return idx;\r\n    }\r\n\r\n    /**\r\n     * This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be\r\n     * displayed on top of other html elements. Default value is 'false' (z-index is not set).\r\n     * @param {boolean} value\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function displayCaptionsOnTop(value) {\r\n        let textTracks = TextTracks(context).getInstance();\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n        textTracks.displayCConTop(value);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        VIDEO ELEMENT MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Returns instance of Video Element that was attached by calling attachView()\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function\r\n     * @instance\r\n     */\r\n    function getVideoElement() {\r\n        if (!videoModel.getElement()) {\r\n            throw ELEMENT_NOT_ATTACHED_ERROR;\r\n        }\r\n        return videoModel.getElement();\r\n    }\r\n\r\n    /**\r\n     * Use this method to attach an HTML5 element that wraps the video element.\r\n     *\r\n     * @param {HTMLElement} container - The HTML5 element containing the video element.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     * @deprecated\r\n     */\r\n    function attachVideoContainer(container) { /* jshint ignore:line */\r\n        logger.warn('attachVideoContainer method has been deprecated and will be removed in dash.js v3.0.0');\r\n    }\r\n\r\n    /**\r\n     * Use this method to attach an HTML5 VideoElement for dash.js to operate upon.\r\n     *\r\n     * @param {Object} element - An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function attachView(element) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        videoModel.setElement(element);\r\n\r\n        if (element) {\r\n            detectProtection();\r\n            detectMetricsReporting();\r\n            detectMss();\r\n\r\n            if (streamController) {\r\n                streamController.switchToVideoElement();\r\n            }\r\n        }\r\n\r\n        if (playbackInitialized) { //Reset if we have been playing before, so this is a new element.\r\n            resetPlaybackControllers();\r\n        }\r\n\r\n        initializePlayback();\r\n    }\r\n\r\n    /**\r\n     * Returns instance of Div that was attached by calling attachTTMLRenderingDiv()\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getTTMLRenderingDiv() {\r\n        return videoModel ? videoModel.getTTMLRenderingDiv() : null;\r\n    }\r\n\r\n    /**\r\n     * Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.\r\n     *\r\n     * @param {HTMLDivElement} div - An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~ELEMENT_NOT_ATTACHED_ERROR ELEMENT_NOT_ATTACHED_ERROR} if called before attachView function\r\n     * @instance\r\n     */\r\n    function attachTTMLRenderingDiv(div) {\r\n        if (!videoModel.getElement()) {\r\n            throw ELEMENT_NOT_ATTACHED_ERROR;\r\n        }\r\n        videoModel.setTTMLRenderingDiv(div);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        STREAM AND TRACK MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * @param {string} type\r\n     * @returns {Array}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getBitrateInfoListFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let stream = getActiveStream();\r\n        return stream ? stream.getBitrateListFor(type) : [];\r\n    }\r\n\r\n    /**\r\n     * This method returns the list of all available streams from a given manifest\r\n     * @param {Object} manifest\r\n     * @returns {Array} list of {@link StreamInfo}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getStreamsFromManifest(manifest) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return adapter.getStreamsInfo(manifest);\r\n    }\r\n\r\n    /**\r\n     * This method returns the list of all available tracks for a given media type\r\n     * @param {string} type\r\n     * @returns {Array} list of {@link MediaInfo}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getTracksFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let streamInfo = streamController.getActiveStreamInfo();\r\n        return mediaController.getTracksFor(type, streamInfo);\r\n    }\r\n\r\n    /**\r\n     * This method returns the list of all available tracks for a given media type and streamInfo from a given manifest\r\n     * @param {string} type\r\n     * @param {Object} manifest\r\n     * @param {Object} streamInfo\r\n     * @returns {Array}  list of {@link MediaInfo}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getTracksForTypeFromManifest(type, manifest, streamInfo) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        streamInfo = streamInfo || adapter.getStreamsInfo(manifest, 1)[0];\r\n\r\n        return streamInfo ? adapter.getAllMediaInfoForType(streamInfo, type, manifest) : [];\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {Object|null} {@link MediaInfo}\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function getCurrentTrackFor(type) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let streamInfo = streamController.getActiveStreamInfo();\r\n        return mediaController.getCurrentTrackFor(type, streamInfo);\r\n    }\r\n\r\n    /**\r\n     * This method allows to set media settings that will be used to pick the initial track. Format of the settings\r\n     * is following:\r\n     * {lang: langValue,\r\n     *  viewpoint: viewpointValue,\r\n     *  audioChannelConfiguration: audioChannelConfigurationValue,\r\n     *  accessibility: accessibilityValue,\r\n     *  role: roleValue}\r\n     *\r\n     *\r\n     * @param {string} type\r\n     * @param {Object} value\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function setInitialMediaSettingsFor(type, value) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        mediaController.setInitialSettings(type, value);\r\n    }\r\n\r\n    /**\r\n     * This method returns media settings that is used to pick the initial track. Format of the settings\r\n     * is following:\r\n     * {lang: langValue,\r\n     *  viewpoint: viewpointValue,\r\n     *  audioChannelConfiguration: audioChannelConfigurationValue,\r\n     *  accessibility: accessibilityValue,\r\n     *  role: roleValue}\r\n     * @param {string} type\r\n     * @returns {Object}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function getInitialMediaSettingsFor(type) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return mediaController.getInitialSettings(type);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track - instance of {@link MediaInfo}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @instance\r\n     */\r\n    function setCurrentTrack(track) {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        mediaController.setTrack(track);\r\n    }\r\n\r\n    /**\r\n     * This method returns the current track switch mode.\r\n     *\r\n     * @param {string} type\r\n     * @returns {string} mode\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function getTrackSwitchModeFor(type) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return mediaController.getSwitchMode(type);\r\n    }\r\n\r\n    /**\r\n     * This method sets the current track switch mode. Available options are:\r\n     *\r\n     * MediaController.TRACK_SWITCH_MODE_NEVER_REPLACE\r\n     * (used to forbid clearing the buffered data (prior to current playback position) after track switch.\r\n     * Defers to fastSwitchEnabled for placement of new data. Default for video)\r\n     *\r\n     * MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE\r\n     * (used to clear the buffered data (prior to current playback position) after track switch. Default for audio)\r\n     *\r\n     * @param {string} type\r\n     * @param {string} mode\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function setTrackSwitchModeFor(type, mode) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        mediaController.setSwitchMode(type, mode);\r\n    }\r\n\r\n    /**\r\n     * This method sets the selection mode for the initial track. This mode defines how the initial track will be selected\r\n     * if no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:\r\n     *\r\n     * MediaController.TRACK_SELECTION_MODE_HIGHEST_BITRATE\r\n     * this mode makes the player select the track with a highest bitrate. This mode is a default mode.\r\n     *\r\n     * MediaController.TRACK_SELECTION_MODE_WIDEST_RANGE\r\n     * this mode makes the player select the track with a widest range of bitrates\r\n     *\r\n     * @param {string} mode\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function setSelectionModeForInitialTrack(mode) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        mediaController.setSelectionModeForInitialTrack(mode);\r\n    }\r\n\r\n    /**\r\n     * This method returns the track selection mode.\r\n     *\r\n     * @returns {string} mode\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     * @instance\r\n     */\r\n    function getSelectionModeForInitialTrack() {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n        return mediaController.getSelectionModeForInitialTrack();\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        PROTECTION MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    /**\r\n     * Detects if Protection is included and returns an instance of ProtectionController.js\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getProtectionController() {\r\n        return detectProtection();\r\n    }\r\n\r\n    /**\r\n     * Will override dash.js protection controller.\r\n     * @param {ProtectionController} value - valid protection controller instance.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function attachProtectionController(value) {\r\n        protectionController = value;\r\n    }\r\n\r\n    /**\r\n     * Sets Protection Data required to setup the Protection Module (DRM). Protection Data must\r\n     * be set before initializing MediaPlayer or, once initialized, before PROTECTION_CREATED event is fired.\r\n     * @see {@link module:MediaPlayer#initialize initialize()}\r\n     * @see {@link ProtectionEvents#event:PROTECTION_CREATED dashjs.Protection.events.PROTECTION_CREATED}\r\n     * @param {ProtectionData} value - object containing\r\n     * property names corresponding to key system name strings and associated\r\n     * values being instances of.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function setProtectionData(value) {\r\n        protectionData = value;\r\n\r\n        // Propagate changes in case StreamController is already created\r\n        if (streamController) {\r\n            streamController.setProtectionData(protectionData);\r\n        }\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        THUMBNAILS MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Return the thumbnail at time position.\r\n     * @returns {Thumbnail|null} - Thumbnail for the given time position. It returns null in case there are is not a thumbnails representation or\r\n     * if it doesn't contain a thumbnail for the given time position.\r\n     * @param {number} time - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected\r\n     * @param {function} callback - A Callback function provided when retrieving thumbnail\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getThumbnail(time, callback) {\r\n        if (time < 0) {\r\n            return null;\r\n        }\r\n        const s = playbackController.getIsDynamic() ? getDVRSeekOffset(time) : time;\r\n        const stream = streamController.getStreamForTime(s);\r\n        if (stream === null) {\r\n            return null;\r\n        }\r\n\r\n        const thumbnailController = stream.getThumbnailController();\r\n        if (!thumbnailController) {\r\n            return null;\r\n        }\r\n\r\n        const timeInPeriod = streamController.getTimeRelativeToStreamId(s, stream.getId());\r\n        return thumbnailController.get(timeInPeriod, callback);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        PROTECTION CONTROLLER MANAGEMENT\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Set the value for the ProtectionController and MediaKeys life cycle. If true, the\r\n     * ProtectionController and then created MediaKeys and MediaKeySessions will be preserved during\r\n     * the MediaPlayer lifetime.\r\n     *\r\n     * @param {boolean=} value - True or false flag.\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link Constants#BAD_ARGUMENT_ERROR BAD_ARGUMENT_ERROR} if called with an invalid argument, value is not boolean type.\r\n     * @instance\r\n     */\r\n    function keepProtectionMediaKeys(value) {\r\n        mediaPlayerModel.setKeepProtectionMediaKeys(value);\r\n    }\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n\r\n        TOOLS AND OTHERS FUNCTIONS\r\n\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Allows application to retrieve a manifest.  Manifest loading is asynchro\r\n     * nous and\r\n     * requires the app-provided callback function\r\n     *\r\n     * @param {string} url - url the manifest url\r\n     * @param {function} callback - A Callback function provided when retrieving manifests\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function retrieveManifest(url, callback) {\r\n        let manifestLoader = createManifestLoader();\r\n        let self = this;\r\n\r\n        const handler = function (e) {\r\n            if (!e.error) {\r\n                callback(e.manifest);\r\n            } else {\r\n                callback(null, e.error);\r\n            }\r\n            eventBus.off(Events.INTERNAL_MANIFEST_LOADED, handler, self);\r\n            manifestLoader.reset();\r\n        };\r\n\r\n        eventBus.on(Events.INTERNAL_MANIFEST_LOADED, handler, self);\r\n\r\n        uriFragmentModel.initialize(url);\r\n        manifestLoader.load(url);\r\n    }\r\n\r\n    /**\r\n     * Returns the source string or manifest that was attached by calling attachSource()\r\n     * @returns {string | manifest}\r\n     * @memberof module:MediaPlayer\r\n     * @throws {@link module:MediaPlayer~SOURCE_NOT_ATTACHED_ERROR SOURCE_NOT_ATTACHED_ERROR} if called before attachSource function\r\n     * @instance\r\n     */\r\n    function getSource() {\r\n        if (!source) {\r\n            throw SOURCE_NOT_ATTACHED_ERROR;\r\n        }\r\n        return source;\r\n    }\r\n\r\n    /**\r\n     * Use this method to set a source URL to a valid MPD manifest file OR\r\n     * a previously downloaded and parsed manifest object.  Optionally, can\r\n     * also provide protection information\r\n     *\r\n     * @param {string|Object} urlOrManifest - A URL to a valid MPD manifest file, or a\r\n     * parsed manifest object.\r\n     *\r\n     *\r\n     * @throws {@link module:MediaPlayer~MEDIA_PLAYER_NOT_INITIALIZED_ERROR MEDIA_PLAYER_NOT_INITIALIZED_ERROR} if called before initialize function\r\n     *\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function attachSource(urlOrManifest) {\r\n        if (!mediaPlayerInitialized) {\r\n            throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;\r\n        }\r\n\r\n        if (typeof urlOrManifest === 'string') {\r\n            uriFragmentModel.initialize(urlOrManifest);\r\n        }\r\n\r\n        source = urlOrManifest;\r\n\r\n        if (streamingInitialized || playbackInitialized) {\r\n            resetPlaybackControllers();\r\n        }\r\n\r\n        if (isReady()) {\r\n            initializePlayback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A utility methods which converts UTC timestamp value into a valid time and date string.\r\n     *\r\n     * @param {number} time - UTC timestamp to be converted into date and time.\r\n     * @param {string} locales - a region identifier (i.e. en_US).\r\n     * @param {boolean} hour12 - 12 vs 24 hour. Set to true for 12 hour time formatting.\r\n     * @param {boolean} withDate - default is false. Set to true to append current date to UTC time format.\r\n     * @returns {string} A formatted time and date string.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function formatUTC(time, locales, hour12, withDate = false) {\r\n        const dt = new Date(time * 1000);\r\n        const d = dt.toLocaleDateString(locales);\r\n        const t = dt.toLocaleTimeString(locales, {\r\n            hour12: hour12\r\n        });\r\n        return withDate ? t + ' ' + d : t;\r\n    }\r\n\r\n    /**\r\n     * A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).\r\n     *\r\n     * @param {number} value - A number in seconds to be converted into a formatted time code.\r\n     * @returns {string} A formatted time code string.\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function convertToTimeCode(value) {\r\n        value = Math.max(value, 0);\r\n\r\n        let h = Math.floor(value / 3600);\r\n        let m = Math.floor((value % 3600) / 60);\r\n        let s = Math.floor((value % 3600) % 60);\r\n        return (h === 0 ? '' : (h < 10 ? '0' + h.toString() + ':' : h.toString() + ':')) + (m < 10 ? '0' + m.toString() : m.toString()) + ':' + (s < 10 ? '0' + s.toString() : s.toString());\r\n    }\r\n\r\n    /**\r\n     * This method should be used to extend or replace internal dash.js objects.\r\n     * There are two ways to extend dash.js (determined by the override argument):\r\n     * <ol>\r\n     * <li>If you set override to true any public method or property in your custom object will\r\n     * override the dash.js parent object's property(ies) and will be used instead but the\r\n     * dash.js parent module will still be created.</li>\r\n     *\r\n     * <li>If you set override to false your object will completely replace the dash.js object.\r\n     * (Note: This is how it was in 1.x of Dash.js with Dijon).</li>\r\n     * </ol>\r\n     * <b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>\r\n     * <ul>\r\n     * <li><b>this.context</b> - can be used to pass context for singleton access.</li>\r\n     * <li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>\r\n     * <li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>\r\n     * </ul>\r\n     * <b>You must call extend before you call initialize</b>\r\n     * @see {@link module:MediaPlayer#initialize initialize()}\r\n     * @param {string} parentNameString - name of parent module\r\n     * @param {Object} childInstance - overriding object\r\n     * @param {boolean} override - replace only some methods (true) or the whole object (false)\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function extend(parentNameString, childInstance, override) {\r\n        FactoryMaker.extend(parentNameString, childInstance, override, context);\r\n    }\r\n\r\n    /**\r\n     * This method returns the active stream\r\n     *\r\n     * @throws {@link module:MediaPlayer~STREAMING_NOT_INITIALIZED_ERROR STREAMING_NOT_INITIALIZED_ERROR} if called before initializePlayback function\r\n     * @memberof module:MediaPlayer\r\n     * @instance\r\n     */\r\n    function getActiveStream() {\r\n        if (!streamingInitialized) {\r\n            throw STREAMING_NOT_INITIALIZED_ERROR;\r\n        }\r\n        let streamInfo = streamController.getActiveStreamInfo();\r\n        return streamInfo ? streamController.getStreamById(streamInfo.id) : null;\r\n    }\r\n\r\n    //***********************************\r\n    // PRIVATE METHODS\r\n    //***********************************\r\n\r\n    function resetPlaybackControllers() {\r\n        playbackInitialized = false;\r\n        streamingInitialized = false;\r\n        adapter.reset();\r\n        streamController.reset();\r\n        playbackController.reset();\r\n        abrController.reset();\r\n        mediaController.reset();\r\n        textController.reset();\r\n        if (protectionController) {\r\n            if (mediaPlayerModel.getKeepProtectionMediaKeys()) {\r\n                protectionController.stop();\r\n            } else {\r\n                protectionController.reset();\r\n                protectionController = null;\r\n                detectProtection();\r\n            }\r\n        }\r\n    }\r\n\r\n    function createPlaybackControllers() {\r\n        // creates or get objects instances\r\n        const manifestLoader = createManifestLoader();\r\n\r\n        if (!streamController) {\r\n            streamController = StreamController(context).getInstance();\r\n        }\r\n\r\n        // configure controllers\r\n        mediaController.setConfig({\r\n            domStorage: domStorage\r\n        });\r\n\r\n        streamController.setConfig({\r\n            capabilities: capabilities,\r\n            manifestLoader: manifestLoader,\r\n            manifestModel: manifestModel,\r\n            dashManifestModel: dashManifestModel,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            protectionController: protectionController,\r\n            adapter: adapter,\r\n            metricsModel: metricsModel,\r\n            dashMetrics: dashMetrics,\r\n            errHandler: errHandler,\r\n            timelineConverter: timelineConverter,\r\n            videoModel: videoModel,\r\n            playbackController: playbackController,\r\n            domStorage: domStorage,\r\n            abrController: abrController,\r\n            mediaController: mediaController,\r\n            textController: textController\r\n        });\r\n\r\n        playbackController.setConfig({\r\n            streamController: streamController,\r\n            metricsModel: metricsModel,\r\n            dashMetrics: dashMetrics,\r\n            manifestModel: manifestModel,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            dashManifestModel: dashManifestModel,\r\n            adapter: adapter,\r\n            videoModel: videoModel,\r\n            timelineConverter: timelineConverter,\r\n            uriFragmentModel: uriFragmentModel\r\n        });\r\n\r\n        abrController.setConfig({\r\n            streamController: streamController,\r\n            domStorage: domStorage,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            metricsModel: metricsModel,\r\n            dashMetrics: dashMetrics,\r\n            manifestModel: manifestModel,\r\n            videoModel: videoModel,\r\n            adapter: adapter\r\n        });\r\n        abrController.createAbrRulesCollection();\r\n\r\n        textController.setConfig({\r\n            errHandler: errHandler,\r\n            manifestModel: manifestModel,\r\n            dashManifestModel: dashManifestModel,\r\n            mediaController: mediaController,\r\n            streamController: streamController,\r\n            videoModel: videoModel\r\n        });\r\n\r\n        // initialises controller\r\n        streamController.initialize(autoPlay, protectionData);\r\n    }\r\n\r\n    function createManifestLoader() {\r\n        return ManifestLoader(context).create({\r\n            errHandler: errHandler,\r\n            metricsModel: metricsModel,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            requestModifier: RequestModifier(context).getInstance(),\r\n            mssHandler: mssHandler\r\n        });\r\n    }\r\n\r\n    function detectProtection() {\r\n        if (protectionController) {\r\n            return protectionController;\r\n        }\r\n        // do not require Protection as dependencies as this is optional and intended to be loaded separately\r\n        let Protection = dashjs.Protection; /* jshint ignore:line */\r\n        if (typeof Protection === 'function') { //TODO need a better way to register/detect plugin components\r\n            let protection = Protection(context).create();\r\n            Events.extend(Protection.events);\r\n            MediaPlayerEvents.extend(Protection.events, {\r\n                publicOnly: true\r\n            });\r\n            Errors.extend(Protection.errors);\r\n            if (!capabilities) {\r\n                capabilities = Capabilities(context).getInstance();\r\n            }\r\n            protectionController = protection.createProtectionSystem({\r\n                debug: debug,\r\n                errHandler: errHandler,\r\n                videoModel: videoModel,\r\n                capabilities: capabilities,\r\n                eventBus: eventBus,\r\n                events: Events,\r\n                BASE64: BASE64,\r\n                constants: Constants\r\n            });\r\n            return protectionController;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function detectMetricsReporting() {\r\n        if (metricsReportingController) {\r\n            return;\r\n        }\r\n        // do not require MetricsReporting as dependencies as this is optional and intended to be loaded separately\r\n        let MetricsReporting = dashjs.MetricsReporting; /* jshint ignore:line */\r\n        if (typeof MetricsReporting === 'function') { //TODO need a better way to register/detect plugin components\r\n            let metricsReporting = MetricsReporting(context).create();\r\n\r\n            metricsReportingController = metricsReporting.createMetricsReporting({\r\n                debug: debug,\r\n                eventBus: eventBus,\r\n                mediaElement: getVideoElement(),\r\n                dashManifestModel: dashManifestModel,\r\n                metricsModel: metricsModel,\r\n                events: Events,\r\n                constants: Constants,\r\n                metricsConstants: MetricsConstants\r\n            });\r\n        }\r\n    }\r\n\r\n    function detectMss() {\r\n        if (mssHandler) {\r\n            return;\r\n        }\r\n        // do not require MssHandler as dependencies as this is optional and intended to be loaded separately\r\n        let MssHandler = dashjs.MssHandler; /* jshint ignore:line */\r\n        if (typeof MssHandler === 'function') { //TODO need a better way to register/detect plugin components\r\n            Errors.extend(MssHandler.errors);\r\n            mssHandler = MssHandler(context).create({\r\n                eventBus: eventBus,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                metricsModel: metricsModel,\r\n                manifestModel: manifestModel,\r\n                playbackController: playbackController,\r\n                protectionController: protectionController,\r\n                baseURLController: BaseURLController(context).getInstance(),\r\n                errHandler: errHandler,\r\n                events: Events,\r\n                constants: Constants,\r\n                debug: debug,\r\n                initSegmentType: HTTPRequest.INIT_SEGMENT_TYPE,\r\n                BASE64: BASE64,\r\n                ISOBoxer: ISOBoxer\r\n            });\r\n        }\r\n    }\r\n\r\n    function getDVRInfoMetric() {\r\n        let metric = metricsModel.getReadOnlyMetricsFor(Constants.VIDEO) || metricsModel.getReadOnlyMetricsFor(Constants.AUDIO);\r\n        return dashMetrics.getCurrentDVRInfo(metric);\r\n    }\r\n\r\n    function getAsUTC(valToConvert) {\r\n        let metric = getDVRInfoMetric();\r\n        let availableFrom,\r\n            utcValue;\r\n\r\n        if (!metric) {\r\n            return 0;\r\n        }\r\n        availableFrom = metric.manifestInfo.availableFrom.getTime() / 1000;\r\n        utcValue = valToConvert + (availableFrom + metric.range.start);\r\n        return utcValue;\r\n    }\r\n\r\n    function initializePlayback() {\r\n        if (!streamingInitialized && source) {\r\n            streamingInitialized = true;\r\n            logger.info('Streaming Initialized');\r\n            createPlaybackControllers();\r\n\r\n            if (typeof source === 'string') {\r\n                streamController.load(source);\r\n            } else {\r\n                streamController.loadWithManifest(source);\r\n            }\r\n        }\r\n\r\n        if (!playbackInitialized && isReady()) {\r\n            playbackInitialized = true;\r\n            logger.info('Playback Initialized');\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setConfig: setConfig,\r\n        on: on,\r\n        off: off,\r\n        extend: extend,\r\n        attachView: attachView,\r\n        attachSource: attachSource,\r\n        isReady: isReady,\r\n        preload: preload,\r\n        play: play,\r\n        isPaused: isPaused,\r\n        pause: pause,\r\n        isSeeking: isSeeking,\r\n        isDynamic: isDynamic,\r\n        seek: seek,\r\n        setPlaybackRate: setPlaybackRate,\r\n        getPlaybackRate: getPlaybackRate,\r\n        setMute: setMute,\r\n        isMuted: isMuted,\r\n        setVolume: setVolume,\r\n        getVolume: getVolume,\r\n        time: time,\r\n        duration: duration,\r\n        timeAsUTC: timeAsUTC,\r\n        durationAsUTC: durationAsUTC,\r\n        getActiveStream: getActiveStream,\r\n        getDVRWindowSize: getDVRWindowSize,\r\n        getDVRSeekOffset: getDVRSeekOffset,\r\n        convertToTimeCode: convertToTimeCode,\r\n        formatUTC: formatUTC,\r\n        getVersion: getVersion,\r\n        getDebug: getDebug,\r\n        getBufferLength: getBufferLength,\r\n        getTTMLRenderingDiv: getTTMLRenderingDiv,\r\n        getVideoElement: getVideoElement,\r\n        getSource: getSource,\r\n        setLiveDelayFragmentCount: setLiveDelayFragmentCount,\r\n        setLiveDelay: setLiveDelay,\r\n        getLiveDelay: getLiveDelay,\r\n        getCurrentLiveLatency: getCurrentLiveLatency,\r\n        useSuggestedPresentationDelay: useSuggestedPresentationDelay,\r\n        enableLastBitrateCaching: enableLastBitrateCaching,\r\n        enableLastMediaSettingsCaching: enableLastMediaSettingsCaching,\r\n        setMaxAllowedBitrateFor: setMaxAllowedBitrateFor,\r\n        getMaxAllowedBitrateFor: getMaxAllowedBitrateFor,\r\n        getTopBitrateInfoFor: getTopBitrateInfoFor,\r\n        setMinAllowedBitrateFor: setMinAllowedBitrateFor,\r\n        getMinAllowedBitrateFor: getMinAllowedBitrateFor,\r\n        setMaxAllowedRepresentationRatioFor: setMaxAllowedRepresentationRatioFor,\r\n        getMaxAllowedRepresentationRatioFor: getMaxAllowedRepresentationRatioFor,\r\n        setAutoPlay: setAutoPlay,\r\n        getAutoPlay: getAutoPlay,\r\n        setScheduleWhilePaused: setScheduleWhilePaused,\r\n        getScheduleWhilePaused: getScheduleWhilePaused,\r\n        getDashMetrics: getDashMetrics,\r\n        getMetricsFor: getMetricsFor,\r\n        getQualityFor: getQualityFor,\r\n        setQualityFor: setQualityFor,\r\n        updatePortalSize: updatePortalSize,\r\n        getLimitBitrateByPortal: getLimitBitrateByPortal,\r\n        setLimitBitrateByPortal: setLimitBitrateByPortal,\r\n        getUsePixelRatioInLimitBitrateByPortal: getUsePixelRatioInLimitBitrateByPortal,\r\n        setUsePixelRatioInLimitBitrateByPortal: setUsePixelRatioInLimitBitrateByPortal,\r\n        setTextDefaultLanguage: setTextDefaultLanguage,\r\n        getTextDefaultLanguage: getTextDefaultLanguage,\r\n        setTextDefaultEnabled: setTextDefaultEnabled,\r\n        getTextDefaultEnabled: getTextDefaultEnabled,\r\n        enableText: enableText,\r\n        enableForcedTextStreaming: enableForcedTextStreaming,\r\n        isTextEnabled: isTextEnabled,\r\n        setTextTrack: setTextTrack,\r\n        getBitrateInfoListFor: getBitrateInfoListFor,\r\n        setInitialBitrateFor: setInitialBitrateFor,\r\n        getInitialBitrateFor: getInitialBitrateFor,\r\n        setInitialRepresentationRatioFor: setInitialRepresentationRatioFor,\r\n        getInitialRepresentationRatioFor: getInitialRepresentationRatioFor,\r\n        getStreamsFromManifest: getStreamsFromManifest,\r\n        getTracksFor: getTracksFor,\r\n        getTracksForTypeFromManifest: getTracksForTypeFromManifest,\r\n        getCurrentTrackFor: getCurrentTrackFor,\r\n        setInitialMediaSettingsFor: setInitialMediaSettingsFor,\r\n        getInitialMediaSettingsFor: getInitialMediaSettingsFor,\r\n        setCurrentTrack: setCurrentTrack,\r\n        getTrackSwitchModeFor: getTrackSwitchModeFor,\r\n        setTrackSwitchModeFor: setTrackSwitchModeFor,\r\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\r\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\r\n        setFastSwitchEnabled: setFastSwitchEnabled,\r\n        getFastSwitchEnabled: getFastSwitchEnabled,\r\n        setMovingAverageMethod: setMovingAverageMethod,\r\n        getMovingAverageMethod: getMovingAverageMethod,\r\n        getAutoSwitchQualityFor: getAutoSwitchQualityFor,\r\n        setAutoSwitchQualityFor: setAutoSwitchQualityFor,\r\n        setABRStrategy: setABRStrategy,\r\n        getABRStrategy: getABRStrategy,\r\n        useDefaultABRRules: useDefaultABRRules,\r\n        addABRCustomRule: addABRCustomRule,\r\n        removeABRCustomRule: removeABRCustomRule,\r\n        removeAllABRCustomRule: removeAllABRCustomRule,\r\n        setBandwidthSafetyFactor: setBandwidthSafetyFactor,\r\n        getBandwidthSafetyFactor: getBandwidthSafetyFactor,\r\n        getAverageThroughput: getAverageThroughput,\r\n        setAbandonLoadTimeout: setAbandonLoadTimeout,\r\n        retrieveManifest: retrieveManifest,\r\n        addUTCTimingSource: addUTCTimingSource,\r\n        removeUTCTimingSource: removeUTCTimingSource,\r\n        clearDefaultUTCTimingSources: clearDefaultUTCTimingSources,\r\n        restoreDefaultUTCTimingSources: restoreDefaultUTCTimingSources,\r\n        setBufferToKeep: setBufferToKeep,\r\n        setBufferAheadToKeep: setBufferAheadToKeep,\r\n        setBufferPruningInterval: setBufferPruningInterval,\r\n        setStableBufferTime: setStableBufferTime,\r\n        getStableBufferTime: getStableBufferTime,\r\n        setBufferTimeAtTopQuality: setBufferTimeAtTopQuality,\r\n        getBufferTimeAtTopQuality: getBufferTimeAtTopQuality,\r\n        setBufferTimeAtTopQualityLongForm: setBufferTimeAtTopQualityLongForm,\r\n        getBufferTimeAtTopQualityLongForm: getBufferTimeAtTopQualityLongForm,\r\n        setFragmentLoaderRetryAttempts: setFragmentLoaderRetryAttempts,\r\n        setFragmentLoaderRetryInterval: setFragmentLoaderRetryInterval,\r\n        setManifestLoaderRetryAttempts: setManifestLoaderRetryAttempts,\r\n        setManifestLoaderRetryInterval: setManifestLoaderRetryInterval,\r\n        setXHRWithCredentialsForType: setXHRWithCredentialsForType,\r\n        getXHRWithCredentialsForType: getXHRWithCredentialsForType,\r\n        setJumpGaps: setJumpGaps,\r\n        getJumpGaps: getJumpGaps,\r\n        setSmallGapLimit: setSmallGapLimit,\r\n        getSmallGapLimit: getSmallGapLimit,\r\n        setLowLatencyEnabled: setLowLatencyEnabled,\r\n        getLowLatencyEnabled: getLowLatencyEnabled,\r\n        setCatchUpPlaybackRate: setCatchUpPlaybackRate,\r\n        getCatchUpPlaybackRate: getCatchUpPlaybackRate,\r\n        setLowLatencyMinDrift: setLowLatencyMinDrift,\r\n        getLowLatencyMinDrift: getLowLatencyMinDrift,\r\n        setLowLatencyMaxDriftBeforeSeeking: setLowLatencyMaxDriftBeforeSeeking,\r\n        getLowLatencyMaxDriftBeforeSeeking: getLowLatencyMaxDriftBeforeSeeking,\r\n        setManifestUpdateRetryInterval: setManifestUpdateRetryInterval,\r\n        getManifestUpdateRetryInterval: getManifestUpdateRetryInterval,\r\n        setLongFormContentDurationThreshold: setLongFormContentDurationThreshold,\r\n        setSegmentOverlapToleranceTime: setSegmentOverlapToleranceTime,\r\n        setCacheLoadThresholdForType: setCacheLoadThresholdForType,\r\n        getProtectionController: getProtectionController,\r\n        attachProtectionController: attachProtectionController,\r\n        setProtectionData: setProtectionData,\r\n        enableManifestDateHeaderTimeSource: enableManifestDateHeaderTimeSource,\r\n        displayCaptionsOnTop: displayCaptionsOnTop,\r\n        attachVideoContainer: attachVideoContainer,\r\n        attachTTMLRenderingDiv: attachTTMLRenderingDiv,\r\n        getCurrentTextTrackIndex: getCurrentTextTrackIndex,\r\n        getUseDeadTimeLatencyForAbr: getUseDeadTimeLatencyForAbr,\r\n        setUseDeadTimeLatencyForAbr: setUseDeadTimeLatencyForAbr,\r\n        getThumbnail: getThumbnail,\r\n        keepProtectionMediaKeys: keepProtectionMediaKeys,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMediaPlayer.__dashjs_factory_name = 'MediaPlayer';\r\nconst factory = FactoryMaker.getClassFactory(MediaPlayer);\r\nfactory.events = MediaPlayerEvents;\r\nfactory.errors = Errors;\r\nFactoryMaker.updateClassFactory(MediaPlayer.__dashjs_factory_name, factory);\r\n\r\nexport default factory;\r\n"]}