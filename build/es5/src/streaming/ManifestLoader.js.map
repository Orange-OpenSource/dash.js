{"version":3,"sources":["../../../../src/streaming/ManifestLoader.js"],"names":["ManifestLoader","config","context","eventBus","getInstance","urlUtils","instance","logger","httpLoader","xlinkController","parser","mssHandler","errHandler","setup","getLogger","on","Events","XLINK_READY","onXlinkReady","create","metricsModel","mediaPlayerModel","requestModifier","event","trigger","INTERNAL_MANIFEST_LOADED","manifest","createParser","data","indexOf","createMssParser","registerEvents","load","url","request","TextRequest","HTTPRequest","MPD_TYPE","success","textStatus","responseURL","actualUrl","baseUri","parseBaseUrl","isRelative","resolve","window","location","href","error","DashJSError","Errors","MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE","setMatchers","getMatchers","setIron","getIron","parse","e","originalUrl","hasOwnProperty","Constants","LOCATION","Location_asArray","debug","loadedTime","Date","resolveManifestOnLoad","statusText","errorText","MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE","MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE","reset","off","abort","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"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","file":"ManifestLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport XlinkController from './controllers/XlinkController';\r\nimport HTTPLoader from './net/HTTPLoader';\r\nimport URLUtils from './utils/URLUtils';\r\nimport TextRequest from './vo/TextRequest';\r\nimport DashJSError from './vo/DashJSError';\r\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport Errors from '../core/errors/Errors';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport DashParser from '../dash/parser/DashParser';\r\nimport Debug from '../core/Debug';\r\n\r\nfunction ManifestLoader(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        httpLoader,\r\n        xlinkController,\r\n        parser;\r\n\r\n    let mssHandler = config.mssHandler;\r\n    let errHandler = config.errHandler;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        eventBus.on(Events.XLINK_READY, onXlinkReady, instance);\r\n\r\n        httpLoader = HTTPLoader(context).create({\r\n            errHandler: errHandler,\r\n            metricsModel: config.metricsModel,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier\r\n        });\r\n\r\n        xlinkController = XlinkController(context).create({\r\n            errHandler: errHandler,\r\n            metricsModel: config.metricsModel,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier\r\n        });\r\n\r\n        parser = null;\r\n    }\r\n\r\n    function onXlinkReady(event) {\r\n        eventBus.trigger(\r\n            Events.INTERNAL_MANIFEST_LOADED, {\r\n                manifest: event.manifest\r\n            }\r\n        );\r\n    }\r\n\r\n    function createParser(data) {\r\n        let parser = null;\r\n        // Analyze manifest content to detect protocol and select appropriate parser\r\n        if (data.indexOf('SmoothStreamingMedia') > -1) {\r\n            //do some business to transform it into a Dash Manifest\r\n            if (mssHandler) {\r\n                parser = mssHandler.createMssParser();\r\n                mssHandler.registerEvents();\r\n            }\r\n            return parser;\r\n        } else if (data.indexOf('MPD') > -1) {\r\n            return DashParser(context).create();\r\n        } else {\r\n            return parser;\r\n        }\r\n    }\r\n\r\n    function load(url) {\r\n        const request = new TextRequest(url, HTTPRequest.MPD_TYPE);\r\n\r\n        httpLoader.load({\r\n            request: request,\r\n            success: function (data, textStatus, responseURL) {\r\n                // Manage situations in which success is called after calling reset\r\n                if (!xlinkController) return;\r\n\r\n                let actualUrl,\r\n                    baseUri,\r\n                    manifest;\r\n\r\n                // Handle redirects for the MPD - as per RFC3986 Section 5.1.3\r\n                // also handily resolves relative MPD URLs to absolute\r\n                if (responseURL && responseURL !== url) {\r\n                    baseUri = urlUtils.parseBaseUrl(responseURL);\r\n                    actualUrl = responseURL;\r\n                } else {\r\n                    // usually this case will be caught and resolved by\r\n                    // responseURL above but it is not available for IE11 and Edge/12 and Edge/13\r\n                    // baseUri must be absolute for BaseURL resolution later\r\n                    if (urlUtils.isRelative(url)) {\r\n                        url = urlUtils.resolve(url, window.location.href);\r\n                    }\r\n\r\n                    baseUri = urlUtils.parseBaseUrl(url);\r\n                }\r\n\r\n                // Create parser according to manifest type\r\n                if (parser === null) {\r\n                    parser = createParser(data);\r\n                }\r\n\r\n                if (parser === null) {\r\n                    eventBus.trigger(\r\n                        Events.INTERNAL_MANIFEST_LOADED, {\r\n                            manifest: null,\r\n                            error: new DashJSError(\r\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\r\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\r\n                            )\r\n                        }\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                // init xlinkcontroller with matchers and iron object from created parser\r\n                xlinkController.setMatchers(parser.getMatchers());\r\n                xlinkController.setIron(parser.getIron());\r\n\r\n                try {\r\n                    manifest = parser.parse(data);\r\n                } catch (e) {\r\n                    eventBus.trigger(\r\n                        Events.INTERNAL_MANIFEST_LOADED, {\r\n                            manifest: null,\r\n                            error: new DashJSError(\r\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\r\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\r\n                           )\r\n                        }\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                if (manifest) {\r\n                    manifest.url = actualUrl || url;\r\n\r\n                    // URL from which the MPD was originally retrieved (MPD updates will not change this value)\r\n                    if (!manifest.originalUrl) {\r\n                        manifest.originalUrl = manifest.url;\r\n                    }\r\n\r\n                    // In the following, we only use the first Location entry even if many are available\r\n                    // Compare with ManifestUpdater/DashManifestModel\r\n                    if (manifest.hasOwnProperty(Constants.LOCATION)) {\r\n                        baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);\r\n                        logger.debug('BaseURI set by Location to: ' + baseUri);\r\n                    }\r\n\r\n                    manifest.baseUri = baseUri;\r\n                    manifest.loadedTime = new Date();\r\n                    xlinkController.resolveManifestOnLoad(manifest);\r\n                } else {\r\n                    eventBus.trigger(\r\n                        Events.INTERNAL_MANIFEST_LOADED, {\r\n                            manifest: null,\r\n                            error: new DashJSError(\r\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\r\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\r\n                            )\r\n                        }\r\n                    );\r\n                }\r\n            },\r\n            error: function (request, statusText, errorText) {\r\n                eventBus.trigger(\r\n                    Events.INTERNAL_MANIFEST_LOADED, {\r\n                        manifest: null,\r\n                        error: new DashJSError(\r\n                            Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE,\r\n                            Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + `${url}, ${errorText}`\r\n                        )\r\n                    }\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.XLINK_READY, onXlinkReady, instance);\r\n\r\n        if (xlinkController) {\r\n            xlinkController.reset();\r\n            xlinkController = null;\r\n        }\r\n\r\n        if (httpLoader) {\r\n            httpLoader.abort();\r\n            httpLoader = null;\r\n        }\r\n\r\n        if (mssHandler) {\r\n            mssHandler.reset();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nManifestLoader.__dashjs_factory_name = 'ManifestLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(ManifestLoader);\r\nexport default factory;\r\n"]}