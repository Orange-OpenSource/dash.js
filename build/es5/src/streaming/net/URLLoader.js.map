{"version":3,"sources":["../../../../../src/streaming/net/URLLoader.js"],"names":["FactoryMaker","SchemeLoaderFactory","URLLoader","cfg","context","instance","schemeLoaderFactory","loader","getInstance","load","config","loaderFactory","getLoader","request","url","create","errHandler","metricsModel","mediaPlayerModel","requestModifier","useFetch","getLowLatencyEnabled","boxParser","abort","__dashjs_factory_name","factory","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,aAAP,KAAyB,yBAAzB,CACA,MAAOC,oBAAP,KAAgC,yCAAhC,CAEA;;;;EAKA,QAASC,UAAT,CAAmBC,GAAnB,CAAwB,CAEpBA,IAAMA,KAAO,EAAb,CACA,KAAMC,SAAU,KAAKA,OAArB,CACA;AAEA,GAAIC,SAAJ,CACIC,mBADJ,CAEIC,MAFJ,CAIAD,oBAAsBL,oBAAoBG,OAApB,EAA6BI,WAA7B,EAAtB,CAEA,QAASC,KAAT,CAAcC,MAAd,CAAsB,CAElB,GAAIC,eAAgBL,oBAAoBM,SAApB,CAA8BF,OAAOG,OAAP,CAAeC,GAA7C,CAApB,CACAP,OAASI,cAAcP,OAAd,EAAuBW,MAAvB,CAA8B,CACnCC,WAAYb,IAAIa,UADmB,CAEnCC,aAAcd,IAAIc,YAFiB,CAGnCC,iBAAkBf,IAAIe,gBAHa,CAInCC,gBAAiBhB,IAAIgB,eAJc,CAKnCC,SAAUjB,IAAIe,gBAAJ,CAAuBf,IAAIe,gBAAJ,CAAqBG,oBAArB,EAAvB,CAAqE,IAL5C,CAMnCC,UAAWnB,IAAImB,SAAJ,CAAgBnB,IAAImB,SAApB,CAAgC,IANR,CAA9B,CAAT,CASAf,OAAOE,IAAP,CAAYC,MAAZ,EACH,CAED,QAASa,MAAT,EAAiB,CACb,GAAIhB,MAAJ,CAAY,CACRA,OAAOgB,KAAP,GACH,CACJ,CACDlB,SAAW,CACPI,KAAMA,IADC,CAEPc,MAAOA,KAFA,CAAX,CAKA,MAAOlB,SAAP,CAEH,CACDH,UAAUsB,qBAAV,CAAkC,WAAlC,CAEA,KAAMC,SAAUzB,aAAa0B,eAAb,CAA6BxB,SAA7B,CAAhB,CACA,cAAeuB,QAAf","file":"URLLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport SchemeLoaderFactory from '../../streaming/net/SchemeLoaderFactory';\r\n\r\n/**\r\n * @module URLLoader\r\n * @description  Call Offline Loader or Online Loader dependaing on URL\r\n * @param {Object} cfg - dependances\r\n*/\r\nfunction URLLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n    const context = this.context;\r\n    // const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        schemeLoaderFactory,\r\n        loader;\r\n\r\n    schemeLoaderFactory = SchemeLoaderFactory(context).getInstance();\r\n\r\n    function load(config) {\r\n\r\n        let loaderFactory = schemeLoaderFactory.getLoader(config.request.url);\r\n        loader = loaderFactory(context).create({\r\n            errHandler: cfg.errHandler,\r\n            metricsModel: cfg.metricsModel,\r\n            mediaPlayerModel: cfg.mediaPlayerModel,\r\n            requestModifier: cfg.requestModifier,\r\n            useFetch: cfg.mediaPlayerModel ? cfg.mediaPlayerModel.getLowLatencyEnabled() : null,\r\n            boxParser: cfg.boxParser ? cfg.boxParser : null\r\n        });\r\n\r\n        loader.load(config);\r\n    }\r\n\r\n    function abort() {\r\n        if (loader) {\r\n            loader.abort();\r\n        }\r\n    }\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    return instance;\r\n\r\n}\r\nURLLoader.__dashjs_factory_name = 'URLLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(URLLoader);\r\nexport default factory;\r\n"]}