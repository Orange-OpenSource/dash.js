{"version":3,"sources":["../../../../../src/streaming/net/HTTPLoader.js"],"names":["HTTPLoader","cfg","context","errHandler","metricsModel","mediaPlayerModel","requestModifier","boxParser","useFetch","instance","requests","delayedRequests","retryRequests","downloadErrorToRequestTypeMap","newDownloadErrorToRequestTypeMap","setup","HTTPRequest","MPD_TYPE","Errors","DOWNLOAD_ERROR_ID_MANIFEST","XLINK_EXPANSION_TYPE","DOWNLOAD_ERROR_ID_XLINK","INIT_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_INITIALIZATION","MEDIA_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_CONTENT","INDEX_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","OTHER_TYPE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","DOWNLOAD_ERROR_ID_XLINK_CODE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","DOWNLOAD_ERROR_ID_CONTENT_CODE","internalLoad","config","remainingAttempts","request","traces","firstProgress","needFailureReport","requestStartTime","Date","lastTraceTime","lastTraceReceivedCount","httpRequest","Error","handleLoaded","success","requestStartDate","requestEndDate","firstByteDate","checkExistenceOnly","addHttpRequest","mediaType","type","url","quality","response","responseURL","serviceLocation","range","status","duration","getAllResponseHeaders","responseHeaders","addManifestUpdate","onloadend","indexOf","splice","retryRequest","push","timeout","setTimeout","getRetryIntervalForType","downloadError","error","DashJSError","statusText","complete","progress","event","currentTime","lengthComputable","total","loaded","bytesLoaded","bytesTotal","noTrace","s","d","time","getTime","b","onload","onabort","abort","loader","window","fetch","responseType","create","modifiedUrl","modifyRequestURL","verb","HEAD","GET","withCredentials","getXHRWithCredentialsForType","method","onend","onerror","now","isNaN","delayLoadingTime","load","delayedRequest","delayTimeout","e","getRetryAttemptsForType","forEach","clearTimeout","t","x","onprogress","undefined","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"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","file":"HTTPLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport XHRLoader from './XHRLoader';\r\nimport FetchLoader from './FetchLoader';\r\nimport { HTTPRequest } from '../vo/metrics/HTTPRequest';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Errors from '../../core/errors/Errors';\r\nimport DashJSError from '../vo/DashJSError';\r\n\r\n/**\r\n * @module HTTPLoader\r\n * @description Manages download of resources via HTTP.\r\n * @param {Object} cfg - dependancies from parent\r\n */\r\nfunction HTTPLoader(cfg) {\r\n\r\n    cfg = cfg || {};\r\n\r\n    const context = this.context;\r\n    const errHandler = cfg.errHandler;\r\n    const metricsModel = cfg.metricsModel;\r\n    const mediaPlayerModel = cfg.mediaPlayerModel;\r\n    const requestModifier = cfg.requestModifier;\r\n    const boxParser = cfg.boxParser;\r\n    const useFetch = cfg.useFetch || false;\r\n\r\n    let instance,\r\n        requests,\r\n        delayedRequests,\r\n        retryRequests,\r\n        downloadErrorToRequestTypeMap,\r\n        newDownloadErrorToRequestTypeMap;\r\n\r\n    function setup() {\r\n        requests = [];\r\n        delayedRequests = [];\r\n        retryRequests = [];\r\n\r\n        downloadErrorToRequestTypeMap = {\r\n            [HTTPRequest.MPD_TYPE]: Errors.DOWNLOAD_ERROR_ID_MANIFEST,\r\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: Errors.DOWNLOAD_ERROR_ID_XLINK,\r\n            [HTTPRequest.INIT_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_INITIALIZATION,\r\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\r\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\r\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT,\r\n            [HTTPRequest.OTHER_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT\r\n        };\r\n\r\n        newDownloadErrorToRequestTypeMap = {\r\n            [HTTPRequest.MPD_TYPE]: Errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE,\r\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: Errors.DOWNLOAD_ERROR_ID_XLINK_CODE,\r\n            [HTTPRequest.INIT_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE,\r\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\r\n            [HTTPRequest.OTHER_TYPE]: Errors.DOWNLOAD_ERROR_ID_CONTENT_CODE\r\n        };\r\n    }\r\n\r\n    function internalLoad(config, remainingAttempts) {\r\n        const request = config.request;\r\n        const traces = [];\r\n        let firstProgress = true;\r\n        let needFailureReport = true;\r\n        let requestStartTime = new Date();\r\n        let lastTraceTime = requestStartTime;\r\n        let lastTraceReceivedCount = 0;\r\n        let httpRequest;\r\n\r\n        if (!requestModifier || !metricsModel || !errHandler) {\r\n            throw new Error('config object is not correct or missing');\r\n        }\r\n\r\n        const handleLoaded = function (success) {\r\n            needFailureReport = false;\r\n\r\n            request.requestStartDate = requestStartTime;\r\n            request.requestEndDate = new Date();\r\n            request.firstByteDate = request.firstByteDate || requestStartTime;\r\n\r\n            if (!request.checkExistenceOnly) {\r\n                metricsModel.addHttpRequest(\r\n                    request.mediaType,\r\n                    null,\r\n                    request.type,\r\n                    request.url,\r\n                    request.quality,\r\n                    httpRequest.response ? httpRequest.response.responseURL : null,\r\n                    request.serviceLocation || null,\r\n                    request.range || null,\r\n                    request.requestStartDate,\r\n                    request.firstByteDate,\r\n                    request.requestEndDate,\r\n                    httpRequest.response ? httpRequest.response.status : null,\r\n                    request.duration,\r\n                    httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() :\r\n                        httpRequest.response ? httpRequest.response.responseHeaders : [],\r\n                    success ? traces : null\r\n                );\r\n\r\n                if (request.type === HTTPRequest.MPD_TYPE) {\r\n                    metricsModel.addManifestUpdate('stream', request.type, request.requestStartDate, request.requestEndDate);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onloadend = function () {\r\n            if (requests.indexOf(httpRequest) === -1) {\r\n                return;\r\n            } else {\r\n                requests.splice(requests.indexOf(httpRequest), 1);\r\n            }\r\n\r\n            if (needFailureReport) {\r\n                handleLoaded(false);\r\n\r\n                if (remainingAttempts > 0) {\r\n                    remainingAttempts--;\r\n                    let retryRequest = { config: config };\r\n                    retryRequests.push(retryRequest);\r\n                    retryRequest.timeout = setTimeout(function () {\r\n                        if (retryRequests.indexOf(retryRequest) === -1) {\r\n                            return;\r\n                        } else {\r\n                            retryRequests.splice(retryRequests.indexOf(retryRequest), 1);\r\n                        }\r\n                        internalLoad(config, remainingAttempts);\r\n                    }, mediaPlayerModel.getRetryIntervalForType(request.type));\r\n                } else {\r\n                    errHandler.downloadError(\r\n                        downloadErrorToRequestTypeMap[request.type],\r\n                        request.url,\r\n                        request\r\n                    );\r\n\r\n                    errHandler.error(new DashJSError(newDownloadErrorToRequestTypeMap[request.type], request.url + ' is not available', {request: request, response: httpRequest.response}));\r\n\r\n                    if (config.error) {\r\n                        config.error(request, 'error', httpRequest.response.statusText);\r\n                    }\r\n\r\n                    if (config.complete) {\r\n                        config.complete(request, httpRequest.response.statusText);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const progress = function (event) {\r\n            const currentTime = new Date();\r\n\r\n            if (firstProgress) {\r\n                firstProgress = false;\r\n                if (!event.lengthComputable ||\r\n                    (event.lengthComputable && event.total !== event.loaded)) {\r\n                    request.firstByteDate = currentTime;\r\n                }\r\n            }\r\n\r\n            if (event.lengthComputable) {\r\n                request.bytesLoaded = event.loaded;\r\n                request.bytesTotal = event.total;\r\n            }\r\n\r\n            if (!event.noTrace) {\r\n                traces.push({\r\n                    s: lastTraceTime,\r\n                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),\r\n                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]\r\n                });\r\n\r\n                lastTraceTime = currentTime;\r\n                lastTraceReceivedCount = event.loaded;\r\n            }\r\n\r\n            if (config.progress && event) {\r\n                config.progress(event);\r\n            }\r\n        };\r\n\r\n        const onload = function () {\r\n            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {\r\n                handleLoaded(true);\r\n\r\n                if (config.success) {\r\n                    config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);\r\n                }\r\n\r\n                if (config.complete) {\r\n                    config.complete(request, httpRequest.response.statusText);\r\n                }\r\n            }\r\n        };\r\n\r\n        const onabort = function () {\r\n            if (config.abort) {\r\n                config.abort(request);\r\n            }\r\n        };\r\n\r\n        let loader;\r\n        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\r\n            loader = FetchLoader(context).create({\r\n                requestModifier: requestModifier,\r\n                boxParser: boxParser\r\n            });\r\n        } else {\r\n            loader = XHRLoader(context).create({\r\n                requestModifier: requestModifier,\r\n                boxParser: boxParser\r\n            });\r\n        }\r\n\r\n        const modifiedUrl = requestModifier.modifyRequestURL(request.url);\r\n        const verb = request.checkExistenceOnly ? HTTPRequest.HEAD : HTTPRequest.GET;\r\n        const withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);\r\n\r\n        httpRequest = {\r\n            url: modifiedUrl,\r\n            method: verb,\r\n            withCredentials: withCredentials,\r\n            request: request,\r\n            onload: onload,\r\n            onend: onloadend,\r\n            onerror: onloadend,\r\n            progress: progress,\r\n            onabort: onabort,\r\n            loader: loader\r\n        };\r\n\r\n        // Adds the ability to delay single fragment loading time to control buffer.\r\n        let now = new Date().getTime();\r\n        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {\r\n            // no delay - just send\r\n            requests.push(httpRequest);\r\n            loader.load(httpRequest);\r\n        } else {\r\n            // delay\r\n            let delayedRequest = { httpRequest: httpRequest };\r\n            delayedRequests.push(delayedRequest);\r\n            delayedRequest.delayTimeout = setTimeout(function () {\r\n                if (delayedRequests.indexOf(delayedRequest) === -1) {\r\n                    return;\r\n                } else {\r\n                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);\r\n                }\r\n                try {\r\n                    requestStartTime = new Date();\r\n                    lastTraceTime = requestStartTime;\r\n                    requests.push(delayedRequest.httpRequest);\r\n                    loader.load(delayedRequest.httpRequest);\r\n                } catch (e) {\r\n                    delayedRequest.httpRequest.onerror();\r\n                }\r\n            }, (request.delayLoadingTime - now));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initiates a download of the resource described by config.request\r\n     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks\r\n     * @memberof module:HTTPLoader\r\n     * @instance\r\n     */\r\n    function load(config) {\r\n        if (config.request) {\r\n            internalLoad(\r\n                config,\r\n                mediaPlayerModel.getRetryAttemptsForType(\r\n                    config.request.type\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Aborts any inflight downloads\r\n     * @memberof module:HTTPLoader\r\n     * @instance\r\n     */\r\n    function abort() {\r\n        retryRequests.forEach(t => {\r\n            clearTimeout(t.timeout);\r\n            // abort request in order to trigger LOADING_ABANDONED event\r\n            if (t.config.request && t.config.abort) {\r\n                t.config.abort(t.config.request);\r\n            }\r\n        });\r\n        retryRequests = [];\r\n\r\n        delayedRequests.forEach(x => clearTimeout(x.delayTimeout));\r\n        delayedRequests = [];\r\n\r\n        requests.forEach(x => {\r\n            // abort will trigger onloadend which we don't want\r\n            // when deliberately aborting inflight requests -\r\n            // set them to undefined so they are not called\r\n            x.onloadend = x.onerror = x.onprogress = undefined;\r\n            x.loader.abort(x);\r\n            x.onabort();\r\n        });\r\n        requests = [];\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        abort: abort\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nHTTPLoader.__dashjs_factory_name = 'HTTPLoader';\r\n\r\nconst factory = FactoryMaker.getClassFactory(HTTPLoader);\r\nexport default factory;\r\n"]}