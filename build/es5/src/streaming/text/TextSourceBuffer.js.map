{"version":3,"sources":["../../../../../src/streaming/text/TextSourceBuffer.js"],"names":["Constants","HTTPRequest","TextTrackInfo","BoxParser","CustomTimeRanges","FactoryMaker","Debug","TextTracks","EmbeddedTextHtmlRender","ISOBoxer","cea608parser","EventBus","Events","DashJSError","Errors","TextSourceBuffer","context","eventBus","getInstance","embeddedInitialized","instance","logger","boxParser","errHandler","dashManifestModel","manifestModel","mediaController","parser","vttParser","ttmlParser","mediaInfos","textTracks","fragmentedFragmentModel","initializationSegmentReceived","timescale","fragmentedTracks","videoModel","streamController","firstFragmentedSubtitleStart","currFragmentedTrackIdx","embeddedTracks","embeddedInitializationSegmentReceived","embeddedTimescale","embeddedLastSequenceNumber","embeddedSequenceNumbers","embeddedCea608FieldParsers","embeddedTextHtmlRender","mseTimeOffset","setup","getLogger","resetInitialSettings","resetFragmented","NaN","initialize","mimeType","streamProcessor","initEmbedded","setConfig","addMediaInfos","isFragmented","getIsTextTrack","concat","getMediaInfoArr","getFragmentModel","buffered","create","getTracksFor","FRAGMENTED_TEXT","getActiveStreamInfo","currFragTrack","getCurrentTrackFor","i","length","setCurrentFragmentedTrackIdx","createTextTrackFromMediaInfo","abort","deleteAllTextTracks","reset","onVideoChunkReceived","e","chunk","mediaInfo","embeddedCaptions","append","bytes","streamProcessors","getActiveStreamProcessors","getType","getRepresentationInfo","MSETimeOffset","on","VIDEO_CHUNK_RECEIVED","resetEmbedded","off","addEmbeddedTrack","id","CC1","CC3","push","warn","config","getConfig","fragmentModel","idx","captionData","textTrackInfo","trackKindMap","subtitle","caption","getKind","kind","roles","checkTTML","ttml","codec","search","STPP","TTML","lang","labels","index","isTTML","defaultTrack","getIsDefault","isEmbedded","accessibility","totalNrTracks","addTextTrack","result","sampleList","j","k","samplesInfo","ccContent","mediaType","type","codecType","error","getMediaTimescaleFromMoov","getSamplesInfo","cts","start","getParser","sample","sampleStart","sampleRelStart","add","duration","dataView","DataView","offset","subSizes","Utils","dataViewToString","UTF8","images","subOffset","inData","Uint8Array","raw","String","fromCharCode","apply","manifest","getValue","offsetTime","ttmlTimeIsRelative","parse","addCaptions","removeExecutedRequestsBeforeTime","remove","message","captionArray","sampleData","slice","size","sampleBoxes","parseBuffer","boxes","box1","debug","box2","cue_text","start_time","end_time","end","data","styles","TEXT","byteLength","getCurrentTrackIdx","timedTextError","TIMED_TEXT_ERROR_ID_PARSE_CODE","TIMED_TEXT_ERROR_MESSAGE_PARSE","VIDEO","segmentType","INIT_SEGMENT_TYPE","makeCueAdderForIndex","self","trackIndex","newCue","startTime","endTime","captionScreen","captionsArray","getTTMLRenderingDiv","createHTMLCaptionsFromScreen","getElement","text","getDisplayText","sequenceNumber","lastSequenceNumber","field","handler","trackIdx","getTrackIdxForId","Cea608Parser","indexOf","numSequences","allCcData","extractCea608Data","fieldNr","ccData","fields","fieldParser","addData","samples","splits","cea608Ranges","findCea608Nalus","lastSampleTime","extractCea608DataFromRange","forEach","sortField","sort","a","b","isDefault","substring","VTT","undefined","__dashjs_factory_name","getSingletonFactory"],"mappings":"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","file":"TextSourceBuffer.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\nimport TextTrackInfo from '../vo/TextTrackInfo';\r\nimport BoxParser from '../utils/BoxParser';\r\nimport CustomTimeRanges from '../utils/CustomTimeRanges';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport TextTracks from './TextTracks';\r\nimport EmbeddedTextHtmlRender from './EmbeddedTextHtmlRender';\r\nimport ISOBoxer from 'codem-isoboxer';\r\nimport cea608parser from '../../../externals/cea608-parser';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\n\r\nfunction TextSourceBuffer() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    let embeddedInitialized = false;\r\n\r\n    let instance,\r\n        logger,\r\n        boxParser,\r\n        errHandler,\r\n        dashManifestModel,\r\n        manifestModel,\r\n        mediaController,\r\n        parser,\r\n        vttParser,\r\n        ttmlParser,\r\n        mediaInfos,\r\n        textTracks,\r\n        fragmentedFragmentModel,\r\n        initializationSegmentReceived,\r\n        timescale,\r\n        fragmentedTracks,\r\n        videoModel,\r\n        streamController,\r\n        firstFragmentedSubtitleStart,\r\n        currFragmentedTrackIdx,\r\n        embeddedTracks,\r\n        embeddedInitializationSegmentReceived,\r\n        embeddedTimescale,\r\n        embeddedLastSequenceNumber,\r\n        embeddedSequenceNumbers,\r\n        embeddedCea608FieldParsers,\r\n        embeddedTextHtmlRender,\r\n        mseTimeOffset;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function resetFragmented () {\r\n        fragmentedFragmentModel = null;\r\n        timescale = NaN;\r\n        fragmentedTracks = [];\r\n        firstFragmentedSubtitleStart = null;\r\n        initializationSegmentReceived = false;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        resetFragmented();\r\n\r\n        mediaInfos = [];\r\n        parser = null;\r\n    }\r\n\r\n    function initialize(mimeType, streamProcessor) {\r\n        if (!embeddedInitialized) {\r\n            initEmbedded();\r\n        }\r\n\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n\r\n        if (!boxParser) {\r\n            boxParser = BoxParser(context).getInstance();\r\n        }\r\n\r\n        addMediaInfos(mimeType, streamProcessor);\r\n    }\r\n\r\n    function addMediaInfos(mimeType, streamProcessor) {\r\n        const isFragmented = !dashManifestModel.getIsTextTrack(mimeType);\r\n        if (streamProcessor) {\r\n            mediaInfos = mediaInfos.concat(streamProcessor.getMediaInfoArr());\r\n\r\n            if (isFragmented) {\r\n                fragmentedFragmentModel = streamProcessor.getFragmentModel();\r\n                instance.buffered = CustomTimeRanges(context).create();\r\n                fragmentedTracks = mediaController.getTracksFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\r\n                const currFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\r\n                for (let i = 0; i < fragmentedTracks.length; i++) {\r\n                    if (fragmentedTracks[i] === currFragTrack) {\r\n                        setCurrentFragmentedTrackIdx(i);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < mediaInfos.length; i++) {\r\n                createTextTrackFromMediaInfo(null, mediaInfos[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        textTracks.deleteAllTextTracks();\r\n        boxParser = null;\r\n        mediaInfos = [];\r\n        fragmentedFragmentModel = null;\r\n        initializationSegmentReceived = false;\r\n        fragmentedTracks = [];\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n\r\n        streamController = null;\r\n        videoModel = null;\r\n        textTracks = null;\r\n    }\r\n\r\n    function onVideoChunkReceived(e) {\r\n        const chunk = e.chunk;\r\n\r\n        if (chunk.mediaInfo.embeddedCaptions) {\r\n            append(chunk.bytes, chunk);\r\n        }\r\n    }\r\n\r\n    function initEmbedded() {\r\n        embeddedTracks = [];\r\n        textTracks = TextTracks(context).getInstance();\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n        boxParser = BoxParser(context).getInstance();\r\n        currFragmentedTrackIdx = null;\r\n        embeddedInitializationSegmentReceived = false;\r\n        embeddedTimescale = 0;\r\n        embeddedCea608FieldParsers = [];\r\n        embeddedSequenceNumbers = [];\r\n        embeddedLastSequenceNumber = null;\r\n        embeddedInitialized = true;\r\n        embeddedTextHtmlRender = EmbeddedTextHtmlRender(context).getInstance();\r\n\r\n        const streamProcessors = streamController.getActiveStreamProcessors();\r\n        for (const i in streamProcessors) {\r\n            if (streamProcessors[i].getType() === 'video') {\r\n                mseTimeOffset = streamProcessors[i].getRepresentationInfo().MSETimeOffset;\r\n                break;\r\n            }\r\n        }\r\n\r\n        eventBus.on(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\r\n    }\r\n\r\n    function resetEmbedded() {\r\n        eventBus.off(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\r\n        if (textTracks) {\r\n            textTracks.deleteAllTextTracks();\r\n        }\r\n        embeddedInitialized = false;\r\n        embeddedTracks = [];\r\n        embeddedCea608FieldParsers = [null, null];\r\n        embeddedSequenceNumbers = [];\r\n        embeddedLastSequenceNumber = null;\r\n    }\r\n\r\n    function addEmbeddedTrack(mediaInfo) {\r\n        if (!embeddedInitialized) {\r\n            initEmbedded();\r\n        }\r\n        if (mediaInfo) {\r\n            if (mediaInfo.id === Constants.CC1 || mediaInfo.id === Constants.CC3) {\r\n                for (let i = 0; i < embeddedTracks.length; i++) {\r\n                    if (embeddedTracks[i].id === mediaInfo.id) {\r\n                        return;\r\n                    }\r\n                }\r\n                embeddedTracks.push(mediaInfo);\r\n            } else {\r\n                logger.warn('Embedded track ' + mediaInfo.id + ' not supported!');\r\n            }\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n        if (config.dashManifestModel) {\r\n            dashManifestModel = config.dashManifestModel;\r\n        }\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n        if (config.mediaController) {\r\n            mediaController = config.mediaController;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.textTracks) {\r\n            textTracks = config.textTracks;\r\n        }\r\n        if (config.vttParser) {\r\n            vttParser = config.vttParser;\r\n        }\r\n        if (config.ttmlParser) {\r\n            ttmlParser = config.ttmlParser;\r\n        }\r\n    }\r\n\r\n    function getConfig() {\r\n        const config = {\r\n            fragmentModel: fragmentedFragmentModel,\r\n            fragmentedTracks: fragmentedTracks,\r\n            videoModel: videoModel\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    function setCurrentFragmentedTrackIdx(idx) {\r\n        currFragmentedTrackIdx = idx;\r\n    }\r\n\r\n    function createTextTrackFromMediaInfo(captionData, mediaInfo) {\r\n        const textTrackInfo = new TextTrackInfo();\r\n        const trackKindMap = { subtitle: 'subtitles', caption: 'captions' }; //Dash Spec has no \"s\" on end of KIND but HTML needs plural.\r\n        const getKind = function () {\r\n            let kind = (mediaInfo.roles.length > 0) ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;\r\n            kind = (kind === trackKindMap.caption || kind === trackKindMap.subtitle) ? kind : trackKindMap.caption;\r\n            return kind;\r\n        };\r\n\r\n        const checkTTML = function () {\r\n            let ttml = false;\r\n            if (mediaInfo.codec && mediaInfo.codec.search(Constants.STPP) >= 0) {\r\n                ttml = true;\r\n            }\r\n            if (mediaInfo.mimeType && mediaInfo.mimeType.search(Constants.TTML) >= 0) {\r\n                ttml = true;\r\n            }\r\n            return ttml;\r\n        };\r\n\r\n        textTrackInfo.captionData = captionData;\r\n        textTrackInfo.lang = mediaInfo.lang;\r\n        textTrackInfo.labels = mediaInfo.labels;\r\n        textTrackInfo.id = mediaInfo.id ? mediaInfo.id : mediaInfo.index; // AdaptationSet id (an unsigned int) as it's optional parameter, use mediaInfo.index\r\n        textTrackInfo.index = mediaInfo.index; // AdaptationSet index in manifest\r\n        textTrackInfo.isTTML = checkTTML();\r\n        textTrackInfo.defaultTrack = getIsDefault(mediaInfo);\r\n        textTrackInfo.isFragmented = !dashManifestModel.getIsTextTrack(mediaInfo.mimeType);\r\n        textTrackInfo.isEmbedded = mediaInfo.isEmbedded ? true : false;\r\n        textTrackInfo.kind = getKind();\r\n        textTrackInfo.roles = mediaInfo.roles;\r\n        textTrackInfo.accessibility = mediaInfo.accessibility;\r\n        const totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;\r\n        textTracks.addTextTrack(textTrackInfo, totalNrTracks);\r\n    }\r\n\r\n    function append(bytes, chunk) {\r\n        let result,\r\n            sampleList,\r\n            i, j, k,\r\n            samplesInfo,\r\n            ccContent;\r\n        const mediaInfo = chunk.mediaInfo;\r\n        const mediaType = mediaInfo.type;\r\n        const mimeType = mediaInfo.mimeType;\r\n        const codecType = mediaInfo.codec || mimeType;\r\n        if (!codecType) {\r\n            logger.error('No text type defined');\r\n            return;\r\n        }\r\n\r\n        if (mediaType === Constants.FRAGMENTED_TEXT) {\r\n            if (!initializationSegmentReceived) {\r\n                initializationSegmentReceived = true;\r\n                timescale = boxParser.getMediaTimescaleFromMoov(bytes);\r\n            } else {\r\n                samplesInfo = boxParser.getSamplesInfo(bytes);\r\n                sampleList = samplesInfo.sampleList;\r\n                if (firstFragmentedSubtitleStart === null && sampleList.length > 0) {\r\n                    firstFragmentedSubtitleStart = sampleList[0].cts - chunk.start * timescale;\r\n                }\r\n                if (codecType.search(Constants.STPP) >= 0) {\r\n                    parser = parser !== null ? parser : getParser(codecType);\r\n                    for (i = 0; i < sampleList.length; i++) {\r\n                        const sample = sampleList[i];\r\n                        const sampleStart = sample.cts;\r\n                        const sampleRelStart = sampleStart - firstFragmentedSubtitleStart;\r\n                        this.buffered.add(sampleRelStart / timescale, (sampleRelStart + sample.duration) / timescale);\r\n                        const dataView = new DataView(bytes, sample.offset, sample.subSizes[0]);\r\n                        ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\r\n                        const images = [];\r\n                        let subOffset = sample.offset + sample.subSizes[0];\r\n                        for (j = 1; j < sample.subSizes.length; j++) {\r\n                            const inData = new Uint8Array(bytes, subOffset, sample.subSizes[j]);\r\n                            const raw = String.fromCharCode.apply(null, inData);\r\n                            images.push(raw);\r\n                            subOffset += sample.subSizes[j];\r\n                        }\r\n                        try {\r\n                            // Only used for Miscrosoft Smooth Streaming support - caption time is relative to sample time. In this case, we apply an offset.\r\n                            const manifest = manifestModel.getValue();\r\n                            const offsetTime = manifest.ttmlTimeIsRelative ? sampleStart / timescale : 0;\r\n                            result = parser.parse(ccContent, offsetTime, sampleStart / timescale, (sampleStart + sample.duration) / timescale, images);\r\n                            textTracks.addCaptions(currFragmentedTrackIdx, firstFragmentedSubtitleStart / timescale, result);\r\n                        } catch (e) {\r\n                            fragmentedFragmentModel.removeExecutedRequestsBeforeTime();\r\n                            this.remove();\r\n                            logger.error('TTML parser error: ' + e.message);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // WebVTT case\r\n                    const captionArray = [];\r\n                    for (i = 0 ; i < sampleList.length; i++) {\r\n                        const sample = sampleList[i];\r\n                        sample.cts -= firstFragmentedSubtitleStart;\r\n                        this.buffered.add(sample.cts / timescale, (sample.cts + sample.duration) / timescale);\r\n                        const sampleData = bytes.slice(sample.offset, sample.offset + sample.size);\r\n                        // There are boxes inside the sampleData, so we need a ISOBoxer to get at it.\r\n                        const sampleBoxes = ISOBoxer.parseBuffer(sampleData);\r\n\r\n                        for (j = 0 ; j < sampleBoxes.boxes.length; j++) {\r\n                            const box1 = sampleBoxes.boxes[j];\r\n                            logger.debug('VTT box1: ' + box1.type);\r\n                            if (box1.type === 'vtte') {\r\n                                continue; //Empty box\r\n                            }\r\n                            if (box1.type === 'vttc') {\r\n                                logger.debug('VTT vttc boxes.length = ' + box1.boxes.length);\r\n                                for (k = 0 ; k < box1.boxes.length; k++) {\r\n                                    const box2 = box1.boxes[k];\r\n                                    logger.debug('VTT box2: ' + box2.type);\r\n                                    if (box2.type === 'payl') {\r\n                                        const cue_text = box2.cue_text;\r\n                                        logger.debug('VTT cue_text = ' + cue_text);\r\n                                        const start_time = sample.cts / timescale;\r\n                                        const end_time = (sample.cts + sample.duration) / timescale;\r\n                                        captionArray.push({\r\n                                            start: start_time,\r\n                                            end: end_time,\r\n                                            data: cue_text,\r\n                                            styles: {}\r\n                                        });\r\n                                        logger.debug('VTT ' + start_time + '-' + end_time + ' : ' + cue_text);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (captionArray.length > 0) {\r\n                        textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);\r\n                    }\r\n                }\r\n            }\r\n        } else if (mediaType === Constants.TEXT) {\r\n            const dataView = new DataView(bytes, 0, bytes.byteLength);\r\n            ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\r\n\r\n            try {\r\n                result = getParser(codecType).parse(ccContent, 0);\r\n                textTracks.addCaptions(textTracks.getCurrentTrackIdx(), 0, result);\r\n            } catch (e) {\r\n                errHandler.timedTextError(e, 'parse', ccContent);\r\n                errHandler.error(new DashJSError(Errors.TIMED_TEXT_ERROR_ID_PARSE_CODE, Errors.TIMED_TEXT_ERROR_MESSAGE_PARSE + e.message, ccContent));\r\n            }\r\n        } else if (mediaType === Constants.VIDEO) { //embedded text\r\n            if (chunk.segmentType === HTTPRequest.INIT_SEGMENT_TYPE) {\r\n                if (embeddedTimescale === 0) {\r\n                    embeddedTimescale = boxParser.getMediaTimescaleFromMoov(bytes);\r\n                    for (i = 0; i < embeddedTracks.length; i++) {\r\n                        createTextTrackFromMediaInfo(null, embeddedTracks[i]);\r\n                    }\r\n                }\r\n            } else { // MediaSegment\r\n                if (embeddedTimescale === 0) {\r\n                    logger.warn('CEA-608: No timescale for embeddedTextTrack yet');\r\n                    return;\r\n                }\r\n                const makeCueAdderForIndex = function (self, trackIndex) {\r\n                    function newCue(startTime, endTime, captionScreen) {\r\n                        let captionsArray = null;\r\n                        if (videoModel.getTTMLRenderingDiv()) {\r\n                            captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen);\r\n                        } else {\r\n                            const text = captionScreen.getDisplayText();\r\n                            captionsArray = [{\r\n                                start: startTime,\r\n                                end: endTime,\r\n                                data: text,\r\n                                styles: {}\r\n                            }];\r\n                        }\r\n                        if (captionsArray) {\r\n                            textTracks.addCaptions(trackIndex, 0, captionsArray);\r\n                        }\r\n                    }\r\n                    return newCue;\r\n                };\r\n\r\n                samplesInfo = boxParser.getSamplesInfo(bytes);\r\n\r\n                const sequenceNumber = samplesInfo.lastSequenceNumber;\r\n\r\n                if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {\r\n                    // Time to setup the CEA-608 parsing\r\n                    let field, handler, trackIdx;\r\n                    for (i = 0; i < embeddedTracks.length; i++) {\r\n                        if (embeddedTracks[i].id === Constants.CC1) {\r\n                            field = 0;\r\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC1);\r\n                        } else if (embeddedTracks[i].id === Constants.CC3) {\r\n                            field = 1;\r\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC3);\r\n                        }\r\n                        if (trackIdx === -1) {\r\n                            logger.warn('CEA-608: data before track is ready.');\r\n                            return;\r\n                        }\r\n                        handler = makeCueAdderForIndex(this, trackIdx);\r\n                        embeddedCea608FieldParsers[i] = new cea608parser.Cea608Parser(i + 1, {\r\n                            'newCue': handler\r\n                        }, null);\r\n                    }\r\n                }\r\n\r\n                if (embeddedTimescale && embeddedSequenceNumbers.indexOf(sequenceNumber) == -1) {\r\n                    if (embeddedLastSequenceNumber !== null && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences) {\r\n                        for (i = 0; i < embeddedCea608FieldParsers.length; i++) {\r\n                            if (embeddedCea608FieldParsers[i]) {\r\n                                embeddedCea608FieldParsers[i].reset();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const allCcData = extractCea608Data(bytes, samplesInfo.sampleList);\r\n\r\n                    for (let fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {\r\n                        const ccData = allCcData.fields[fieldNr];\r\n                        const fieldParser = embeddedCea608FieldParsers[fieldNr];\r\n                        if (fieldParser) {\r\n                            for (i = 0; i < ccData.length; i++) {\r\n                                fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);\r\n                            }\r\n                        }\r\n                    }\r\n                    embeddedLastSequenceNumber = sequenceNumber;\r\n                    embeddedSequenceNumbers.push(sequenceNumber);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Extract CEA-608 data from a buffer of data.\r\n     * @param {ArrayBuffer} data\r\n     * @param {Array} samples cue information\r\n     * @returns {Object|null} ccData corresponding to one segment.\r\n     */\r\n    function extractCea608Data(data, samples) {\r\n        if (samples.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const allCcData = {\r\n            splits: [],\r\n            fields: [[], []]\r\n        };\r\n        const raw = new DataView(data);\r\n        for (let i = 0; i < samples.length; i++) {\r\n            const sample = samples[i];\r\n            const cea608Ranges = cea608parser.findCea608Nalus(raw, sample.offset, sample.size);\r\n            let lastSampleTime = null;\r\n            let idx = 0;\r\n            for (let j = 0; j < cea608Ranges.length; j++) {\r\n                const ccData = cea608parser.extractCea608DataFromRange(raw, cea608Ranges[j]);\r\n                for (let k = 0; k < 2; k++) {\r\n                    if (ccData[k].length > 0) {\r\n                        if (sample.cts !== lastSampleTime) {\r\n                            idx = 0;\r\n                        } else {\r\n                            idx += 1;\r\n                        }\r\n                        allCcData.fields[k].push([sample.cts + (mseTimeOffset * embeddedTimescale), ccData[k], idx]);\r\n                        lastSampleTime = sample.cts;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sort by sampleTime ascending order\r\n        // If two packets have the same sampleTime, use them in the order\r\n        // they were received\r\n        allCcData.fields.forEach(function sortField(field) {\r\n            field.sort(function (a, b) {\r\n                if (a[0] === b[0]) {\r\n                    return a[2] - b[2];\r\n                }\r\n                return a[0] - b[0];\r\n            });\r\n        });\r\n\r\n        return allCcData;\r\n    }\r\n\r\n    function getIsDefault(mediaInfo) {\r\n        //TODO How to tag default. currently same order as listed in manifest.\r\n        // Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND\r\n        // Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.\r\n        let isDefault = false;\r\n        if (embeddedTracks.length > 1 && mediaInfo.isEmbedded) {\r\n            isDefault = (mediaInfo.id && mediaInfo.id === Constants.CC1); // CC1 if both CC1 and CC3 exist\r\n        } else if (embeddedTracks.length === 1) {\r\n            if (mediaInfo.id && typeof mediaInfo.id === 'string' && mediaInfo.id.substring(0, 2) === 'CC') { // Either CC1 or CC3\r\n                isDefault = true;\r\n            }\r\n        } else if (embeddedTracks.length === 0) {\r\n            isDefault = (mediaInfo.index === mediaInfos[0].index);\r\n        }\r\n        return isDefault;\r\n    }\r\n\r\n    function getParser(codecType) {\r\n        let parser;\r\n        if (codecType.search(Constants.VTT) >= 0) {\r\n            parser = vttParser;\r\n        } else if (codecType.search(Constants.TTML) >= 0 || codecType.search(Constants.STPP) >= 0) {\r\n            parser = ttmlParser;\r\n        }\r\n        return parser;\r\n    }\r\n\r\n    function remove(start, end) {\r\n        //if start and end are not defined, remove all\r\n        if ((start === undefined) && (start === end)) {\r\n            start = this.buffered.start(0);\r\n            end = this.buffered.end(this.buffered.length - 1);\r\n        }\r\n        this.buffered.remove(start, end);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        append: append,\r\n        abort: abort,\r\n        addEmbeddedTrack: addEmbeddedTrack,\r\n        resetEmbedded: resetEmbedded,\r\n        setConfig: setConfig,\r\n        getConfig: getConfig,\r\n        setCurrentFragmentedTrackIdx: setCurrentFragmentedTrackIdx,\r\n        remove: remove,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nTextSourceBuffer.__dashjs_factory_name = 'TextSourceBuffer';\r\nexport default FactoryMaker.getSingletonFactory(TextSourceBuffer);\r\n"]}