{"version":3,"sources":["../../../../../src/streaming/text/TextSourceBuffer.js"],"names":["TextSourceBuffer","context","eventBus","getInstance","embeddedInitialized","instance","logger","boxParser","errHandler","dashManifestModel","manifestModel","mediaController","parser","vttParser","ttmlParser","mediaInfos","textTracks","fragmentedFragmentModel","initializationSegmentReceived","timescale","fragmentedTracks","videoModel","streamController","firstFragmentedSubtitleStart","currFragmentedTrackIdx","embeddedTracks","embeddedInitializationSegmentReceived","embeddedTimescale","embeddedLastSequenceNumber","embeddedSequenceNumbers","embeddedCea608FieldParsers","embeddedTextHtmlRender","mseTimeOffset","setup","getLogger","resetInitialSettings","resetFragmented","NaN","initialize","mimeType","streamProcessor","initEmbedded","setConfig","addMediaInfos","isFragmented","getIsTextTrack","concat","getMediaInfoArr","getFragmentModel","buffered","create","getTracksFor","Constants","FRAGMENTED_TEXT","getActiveStreamInfo","currFragTrack","getCurrentTrackFor","i","length","setCurrentFragmentedTrackIdx","createTextTrackFromMediaInfo","abort","deleteAllTextTracks","reset","onVideoChunkReceived","e","chunk","mediaInfo","embeddedCaptions","append","bytes","streamProcessors","getActiveStreamProcessors","getType","getRepresentationInfo","MSETimeOffset","on","Events","VIDEO_CHUNK_RECEIVED","resetEmbedded","off","addEmbeddedTrack","id","CC1","CC3","push","warn","config","getConfig","fragmentModel","idx","captionData","textTrackInfo","TextTrackInfo","trackKindMap","subtitle","caption","getKind","kind","roles","checkTTML","ttml","codec","search","STPP","TTML","lang","labels","index","isTTML","defaultTrack","getIsDefault","isEmbedded","accessibility","totalNrTracks","addTextTrack","result","sampleList","j","k","samplesInfo","ccContent","mediaType","type","codecType","error","getMediaTimescaleFromMoov","getSamplesInfo","cts","start","getParser","sample","sampleStart","sampleRelStart","add","duration","dataView","DataView","offset","subSizes","ISOBoxer","Utils","dataViewToString","UTF8","images","subOffset","inData","Uint8Array","raw","String","fromCharCode","apply","manifest","getValue","offsetTime","ttmlTimeIsRelative","parse","addCaptions","removeExecutedRequestsBeforeTime","remove","message","captionArray","sampleData","slice","size","sampleBoxes","parseBuffer","boxes","box1","debug","box2","cue_text","start_time","end_time","end","data","styles","TEXT","byteLength","getCurrentTrackIdx","timedTextError","DashJSError","Errors","TIMED_TEXT_ERROR_ID_PARSE_CODE","TIMED_TEXT_ERROR_MESSAGE_PARSE","VIDEO","segmentType","HTTPRequest","INIT_SEGMENT_TYPE","makeCueAdderForIndex","self","trackIndex","newCue","startTime","endTime","captionScreen","captionsArray","getTTMLRenderingDiv","createHTMLCaptionsFromScreen","getElement","text","getDisplayText","sequenceNumber","lastSequenceNumber","field","handler","trackIdx","getTrackIdxForId","cea608parser","Cea608Parser","indexOf","numSequences","allCcData","extractCea608Data","fieldNr","ccData","fields","fieldParser","addData","samples","splits","cea608Ranges","findCea608Nalus","lastSampleTime","extractCea608DataFromRange","forEach","sortField","sort","a","b","isDefault","substring","VTT","undefined","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"TextSourceBuffer.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\nimport TextTrackInfo from '../vo/TextTrackInfo';\r\nimport BoxParser from '../utils/BoxParser';\r\nimport CustomTimeRanges from '../utils/CustomTimeRanges';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport TextTracks from './TextTracks';\r\nimport EmbeddedTextHtmlRender from './EmbeddedTextHtmlRender';\r\nimport ISOBoxer from 'codem-isoboxer';\r\nimport cea608parser from '../../../externals/cea608-parser';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport DashJSError from '../vo/DashJSError';\r\nimport Errors from '../../core/errors/Errors';\r\n\r\nfunction TextSourceBuffer() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    let embeddedInitialized = false;\r\n\r\n    let instance,\r\n        logger,\r\n        boxParser,\r\n        errHandler,\r\n        dashManifestModel,\r\n        manifestModel,\r\n        mediaController,\r\n        parser,\r\n        vttParser,\r\n        ttmlParser,\r\n        mediaInfos,\r\n        textTracks,\r\n        fragmentedFragmentModel,\r\n        initializationSegmentReceived,\r\n        timescale,\r\n        fragmentedTracks,\r\n        videoModel,\r\n        streamController,\r\n        firstFragmentedSubtitleStart,\r\n        currFragmentedTrackIdx,\r\n        embeddedTracks,\r\n        embeddedInitializationSegmentReceived,\r\n        embeddedTimescale,\r\n        embeddedLastSequenceNumber,\r\n        embeddedSequenceNumbers,\r\n        embeddedCea608FieldParsers,\r\n        embeddedTextHtmlRender,\r\n        mseTimeOffset;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function resetFragmented () {\r\n        fragmentedFragmentModel = null;\r\n        timescale = NaN;\r\n        fragmentedTracks = [];\r\n        firstFragmentedSubtitleStart = null;\r\n        initializationSegmentReceived = false;\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        resetFragmented();\r\n\r\n        mediaInfos = [];\r\n        parser = null;\r\n    }\r\n\r\n    function initialize(mimeType, streamProcessor) {\r\n        if (!embeddedInitialized) {\r\n            initEmbedded();\r\n        }\r\n\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n\r\n        if (!boxParser) {\r\n            boxParser = BoxParser(context).getInstance();\r\n        }\r\n\r\n        addMediaInfos(mimeType, streamProcessor);\r\n    }\r\n\r\n    function addMediaInfos(mimeType, streamProcessor) {\r\n        const isFragmented = !dashManifestModel.getIsTextTrack(mimeType);\r\n        if (streamProcessor) {\r\n            mediaInfos = mediaInfos.concat(streamProcessor.getMediaInfoArr());\r\n\r\n            if (isFragmented) {\r\n                fragmentedFragmentModel = streamProcessor.getFragmentModel();\r\n                instance.buffered = CustomTimeRanges(context).create();\r\n                fragmentedTracks = mediaController.getTracksFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\r\n                const currFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\r\n                for (let i = 0; i < fragmentedTracks.length; i++) {\r\n                    if (fragmentedTracks[i] === currFragTrack) {\r\n                        setCurrentFragmentedTrackIdx(i);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < mediaInfos.length; i++) {\r\n                createTextTrackFromMediaInfo(null, mediaInfos[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        textTracks.deleteAllTextTracks();\r\n        boxParser = null;\r\n        mediaInfos = [];\r\n        fragmentedFragmentModel = null;\r\n        initializationSegmentReceived = false;\r\n        fragmentedTracks = [];\r\n    }\r\n\r\n    function reset() {\r\n        resetInitialSettings();\r\n\r\n        streamController = null;\r\n        videoModel = null;\r\n        textTracks = null;\r\n    }\r\n\r\n    function onVideoChunkReceived(e) {\r\n        const chunk = e.chunk;\r\n\r\n        if (chunk.mediaInfo.embeddedCaptions) {\r\n            append(chunk.bytes, chunk);\r\n        }\r\n    }\r\n\r\n    function initEmbedded() {\r\n        embeddedTracks = [];\r\n        textTracks = TextTracks(context).getInstance();\r\n        textTracks.setConfig({\r\n            videoModel: videoModel\r\n        });\r\n        textTracks.initialize();\r\n        boxParser = BoxParser(context).getInstance();\r\n        currFragmentedTrackIdx = null;\r\n        embeddedInitializationSegmentReceived = false;\r\n        embeddedTimescale = 0;\r\n        embeddedCea608FieldParsers = [];\r\n        embeddedSequenceNumbers = [];\r\n        embeddedLastSequenceNumber = null;\r\n        embeddedInitialized = true;\r\n        embeddedTextHtmlRender = EmbeddedTextHtmlRender(context).getInstance();\r\n\r\n        const streamProcessors = streamController.getActiveStreamProcessors();\r\n        for (const i in streamProcessors) {\r\n            if (streamProcessors[i].getType() === 'video') {\r\n                mseTimeOffset = streamProcessors[i].getRepresentationInfo().MSETimeOffset;\r\n                break;\r\n            }\r\n        }\r\n\r\n        eventBus.on(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\r\n    }\r\n\r\n    function resetEmbedded() {\r\n        eventBus.off(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\r\n        if (textTracks) {\r\n            textTracks.deleteAllTextTracks();\r\n        }\r\n        embeddedInitialized = false;\r\n        embeddedTracks = [];\r\n        embeddedCea608FieldParsers = [null, null];\r\n        embeddedSequenceNumbers = [];\r\n        embeddedLastSequenceNumber = null;\r\n    }\r\n\r\n    function addEmbeddedTrack(mediaInfo) {\r\n        if (!embeddedInitialized) {\r\n            initEmbedded();\r\n        }\r\n        if (mediaInfo) {\r\n            if (mediaInfo.id === Constants.CC1 || mediaInfo.id === Constants.CC3) {\r\n                for (let i = 0; i < embeddedTracks.length; i++) {\r\n                    if (embeddedTracks[i].id === mediaInfo.id) {\r\n                        return;\r\n                    }\r\n                }\r\n                embeddedTracks.push(mediaInfo);\r\n            } else {\r\n                logger.warn('Embedded track ' + mediaInfo.id + ' not supported!');\r\n            }\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) {\r\n            return;\r\n        }\r\n        if (config.errHandler) {\r\n            errHandler = config.errHandler;\r\n        }\r\n        if (config.dashManifestModel) {\r\n            dashManifestModel = config.dashManifestModel;\r\n        }\r\n        if (config.manifestModel) {\r\n            manifestModel = config.manifestModel;\r\n        }\r\n        if (config.mediaController) {\r\n            mediaController = config.mediaController;\r\n        }\r\n        if (config.videoModel) {\r\n            videoModel = config.videoModel;\r\n        }\r\n        if (config.streamController) {\r\n            streamController = config.streamController;\r\n        }\r\n        if (config.textTracks) {\r\n            textTracks = config.textTracks;\r\n        }\r\n        if (config.vttParser) {\r\n            vttParser = config.vttParser;\r\n        }\r\n        if (config.ttmlParser) {\r\n            ttmlParser = config.ttmlParser;\r\n        }\r\n    }\r\n\r\n    function getConfig() {\r\n        const config = {\r\n            fragmentModel: fragmentedFragmentModel,\r\n            fragmentedTracks: fragmentedTracks,\r\n            videoModel: videoModel\r\n        };\r\n\r\n        return config;\r\n    }\r\n\r\n    function setCurrentFragmentedTrackIdx(idx) {\r\n        currFragmentedTrackIdx = idx;\r\n    }\r\n\r\n    function createTextTrackFromMediaInfo(captionData, mediaInfo) {\r\n        const textTrackInfo = new TextTrackInfo();\r\n        const trackKindMap = { subtitle: 'subtitles', caption: 'captions' }; //Dash Spec has no \"s\" on end of KIND but HTML needs plural.\r\n        const getKind = function () {\r\n            let kind = (mediaInfo.roles.length > 0) ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;\r\n            kind = (kind === trackKindMap.caption || kind === trackKindMap.subtitle) ? kind : trackKindMap.caption;\r\n            return kind;\r\n        };\r\n\r\n        const checkTTML = function () {\r\n            let ttml = false;\r\n            if (mediaInfo.codec && mediaInfo.codec.search(Constants.STPP) >= 0) {\r\n                ttml = true;\r\n            }\r\n            if (mediaInfo.mimeType && mediaInfo.mimeType.search(Constants.TTML) >= 0) {\r\n                ttml = true;\r\n            }\r\n            return ttml;\r\n        };\r\n\r\n        textTrackInfo.captionData = captionData;\r\n        textTrackInfo.lang = mediaInfo.lang;\r\n        textTrackInfo.labels = mediaInfo.labels;\r\n        textTrackInfo.id = mediaInfo.id ? mediaInfo.id : mediaInfo.index; // AdaptationSet id (an unsigned int) as it's optional parameter, use mediaInfo.index\r\n        textTrackInfo.index = mediaInfo.index; // AdaptationSet index in manifest\r\n        textTrackInfo.isTTML = checkTTML();\r\n        textTrackInfo.defaultTrack = getIsDefault(mediaInfo);\r\n        textTrackInfo.isFragmented = !dashManifestModel.getIsTextTrack(mediaInfo.mimeType);\r\n        textTrackInfo.isEmbedded = mediaInfo.isEmbedded ? true : false;\r\n        textTrackInfo.kind = getKind();\r\n        textTrackInfo.roles = mediaInfo.roles;\r\n        textTrackInfo.accessibility = mediaInfo.accessibility;\r\n        const totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;\r\n        textTracks.addTextTrack(textTrackInfo, totalNrTracks);\r\n    }\r\n\r\n    function append(bytes, chunk) {\r\n        let result,\r\n            sampleList,\r\n            i, j, k,\r\n            samplesInfo,\r\n            ccContent;\r\n        const mediaInfo = chunk.mediaInfo;\r\n        const mediaType = mediaInfo.type;\r\n        const mimeType = mediaInfo.mimeType;\r\n        const codecType = mediaInfo.codec || mimeType;\r\n        if (!codecType) {\r\n            logger.error('No text type defined');\r\n            return;\r\n        }\r\n\r\n        if (mediaType === Constants.FRAGMENTED_TEXT) {\r\n            if (!initializationSegmentReceived) {\r\n                initializationSegmentReceived = true;\r\n                timescale = boxParser.getMediaTimescaleFromMoov(bytes);\r\n            } else {\r\n                samplesInfo = boxParser.getSamplesInfo(bytes);\r\n                sampleList = samplesInfo.sampleList;\r\n                if (firstFragmentedSubtitleStart === null && sampleList.length > 0) {\r\n                    firstFragmentedSubtitleStart = sampleList[0].cts - chunk.start * timescale;\r\n                }\r\n                if (codecType.search(Constants.STPP) >= 0) {\r\n                    parser = parser !== null ? parser : getParser(codecType);\r\n                    for (i = 0; i < sampleList.length; i++) {\r\n                        const sample = sampleList[i];\r\n                        const sampleStart = sample.cts;\r\n                        const sampleRelStart = sampleStart - firstFragmentedSubtitleStart;\r\n                        this.buffered.add(sampleRelStart / timescale, (sampleRelStart + sample.duration) / timescale);\r\n                        const dataView = new DataView(bytes, sample.offset, sample.subSizes[0]);\r\n                        ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\r\n                        const images = [];\r\n                        let subOffset = sample.offset + sample.subSizes[0];\r\n                        for (j = 1; j < sample.subSizes.length; j++) {\r\n                            const inData = new Uint8Array(bytes, subOffset, sample.subSizes[j]);\r\n                            const raw = String.fromCharCode.apply(null, inData);\r\n                            images.push(raw);\r\n                            subOffset += sample.subSizes[j];\r\n                        }\r\n                        try {\r\n                            // Only used for Miscrosoft Smooth Streaming support - caption time is relative to sample time. In this case, we apply an offset.\r\n                            const manifest = manifestModel.getValue();\r\n                            const offsetTime = manifest.ttmlTimeIsRelative ? sampleStart / timescale : 0;\r\n                            result = parser.parse(ccContent, offsetTime, sampleStart / timescale, (sampleStart + sample.duration) / timescale, images);\r\n                            textTracks.addCaptions(currFragmentedTrackIdx, firstFragmentedSubtitleStart / timescale, result);\r\n                        } catch (e) {\r\n                            fragmentedFragmentModel.removeExecutedRequestsBeforeTime();\r\n                            this.remove();\r\n                            logger.error('TTML parser error: ' + e.message);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // WebVTT case\r\n                    const captionArray = [];\r\n                    for (i = 0 ; i < sampleList.length; i++) {\r\n                        const sample = sampleList[i];\r\n                        sample.cts -= firstFragmentedSubtitleStart;\r\n                        this.buffered.add(sample.cts / timescale, (sample.cts + sample.duration) / timescale);\r\n                        const sampleData = bytes.slice(sample.offset, sample.offset + sample.size);\r\n                        // There are boxes inside the sampleData, so we need a ISOBoxer to get at it.\r\n                        const sampleBoxes = ISOBoxer.parseBuffer(sampleData);\r\n\r\n                        for (j = 0 ; j < sampleBoxes.boxes.length; j++) {\r\n                            const box1 = sampleBoxes.boxes[j];\r\n                            logger.debug('VTT box1: ' + box1.type);\r\n                            if (box1.type === 'vtte') {\r\n                                continue; //Empty box\r\n                            }\r\n                            if (box1.type === 'vttc') {\r\n                                logger.debug('VTT vttc boxes.length = ' + box1.boxes.length);\r\n                                for (k = 0 ; k < box1.boxes.length; k++) {\r\n                                    const box2 = box1.boxes[k];\r\n                                    logger.debug('VTT box2: ' + box2.type);\r\n                                    if (box2.type === 'payl') {\r\n                                        const cue_text = box2.cue_text;\r\n                                        logger.debug('VTT cue_text = ' + cue_text);\r\n                                        const start_time = sample.cts / timescale;\r\n                                        const end_time = (sample.cts + sample.duration) / timescale;\r\n                                        captionArray.push({\r\n                                            start: start_time,\r\n                                            end: end_time,\r\n                                            data: cue_text,\r\n                                            styles: {}\r\n                                        });\r\n                                        logger.debug('VTT ' + start_time + '-' + end_time + ' : ' + cue_text);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (captionArray.length > 0) {\r\n                        textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);\r\n                    }\r\n                }\r\n            }\r\n        } else if (mediaType === Constants.TEXT) {\r\n            const dataView = new DataView(bytes, 0, bytes.byteLength);\r\n            ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\r\n\r\n            try {\r\n                result = getParser(codecType).parse(ccContent, 0);\r\n                textTracks.addCaptions(textTracks.getCurrentTrackIdx(), 0, result);\r\n            } catch (e) {\r\n                errHandler.timedTextError(e, 'parse', ccContent);\r\n                errHandler.error(new DashJSError(Errors.TIMED_TEXT_ERROR_ID_PARSE_CODE, Errors.TIMED_TEXT_ERROR_MESSAGE_PARSE + e.message, ccContent));\r\n            }\r\n        } else if (mediaType === Constants.VIDEO) { //embedded text\r\n            if (chunk.segmentType === HTTPRequest.INIT_SEGMENT_TYPE) {\r\n                if (embeddedTimescale === 0) {\r\n                    embeddedTimescale = boxParser.getMediaTimescaleFromMoov(bytes);\r\n                    for (i = 0; i < embeddedTracks.length; i++) {\r\n                        createTextTrackFromMediaInfo(null, embeddedTracks[i]);\r\n                    }\r\n                }\r\n            } else { // MediaSegment\r\n                if (embeddedTimescale === 0) {\r\n                    logger.warn('CEA-608: No timescale for embeddedTextTrack yet');\r\n                    return;\r\n                }\r\n                const makeCueAdderForIndex = function (self, trackIndex) {\r\n                    function newCue(startTime, endTime, captionScreen) {\r\n                        let captionsArray = null;\r\n                        if (videoModel.getTTMLRenderingDiv()) {\r\n                            captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen);\r\n                        } else {\r\n                            const text = captionScreen.getDisplayText();\r\n                            captionsArray = [{\r\n                                start: startTime,\r\n                                end: endTime,\r\n                                data: text,\r\n                                styles: {}\r\n                            }];\r\n                        }\r\n                        if (captionsArray) {\r\n                            textTracks.addCaptions(trackIndex, 0, captionsArray);\r\n                        }\r\n                    }\r\n                    return newCue;\r\n                };\r\n\r\n                samplesInfo = boxParser.getSamplesInfo(bytes);\r\n\r\n                const sequenceNumber = samplesInfo.lastSequenceNumber;\r\n\r\n                if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {\r\n                    // Time to setup the CEA-608 parsing\r\n                    let field, handler, trackIdx;\r\n                    for (i = 0; i < embeddedTracks.length; i++) {\r\n                        if (embeddedTracks[i].id === Constants.CC1) {\r\n                            field = 0;\r\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC1);\r\n                        } else if (embeddedTracks[i].id === Constants.CC3) {\r\n                            field = 1;\r\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC3);\r\n                        }\r\n                        if (trackIdx === -1) {\r\n                            logger.warn('CEA-608: data before track is ready.');\r\n                            return;\r\n                        }\r\n                        handler = makeCueAdderForIndex(this, trackIdx);\r\n                        embeddedCea608FieldParsers[i] = new cea608parser.Cea608Parser(i + 1, {\r\n                            'newCue': handler\r\n                        }, null);\r\n                    }\r\n                }\r\n\r\n                if (embeddedTimescale && embeddedSequenceNumbers.indexOf(sequenceNumber) == -1) {\r\n                    if (embeddedLastSequenceNumber !== null && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences) {\r\n                        for (i = 0; i < embeddedCea608FieldParsers.length; i++) {\r\n                            if (embeddedCea608FieldParsers[i]) {\r\n                                embeddedCea608FieldParsers[i].reset();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const allCcData = extractCea608Data(bytes, samplesInfo.sampleList);\r\n\r\n                    for (let fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {\r\n                        const ccData = allCcData.fields[fieldNr];\r\n                        const fieldParser = embeddedCea608FieldParsers[fieldNr];\r\n                        if (fieldParser) {\r\n                            for (i = 0; i < ccData.length; i++) {\r\n                                fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);\r\n                            }\r\n                        }\r\n                    }\r\n                    embeddedLastSequenceNumber = sequenceNumber;\r\n                    embeddedSequenceNumbers.push(sequenceNumber);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Extract CEA-608 data from a buffer of data.\r\n     * @param {ArrayBuffer} data\r\n     * @param {Array} samples cue information\r\n     * @returns {Object|null} ccData corresponding to one segment.\r\n     */\r\n    function extractCea608Data(data, samples) {\r\n        if (samples.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const allCcData = {\r\n            splits: [],\r\n            fields: [[], []]\r\n        };\r\n        const raw = new DataView(data);\r\n        for (let i = 0; i < samples.length; i++) {\r\n            const sample = samples[i];\r\n            const cea608Ranges = cea608parser.findCea608Nalus(raw, sample.offset, sample.size);\r\n            let lastSampleTime = null;\r\n            let idx = 0;\r\n            for (let j = 0; j < cea608Ranges.length; j++) {\r\n                const ccData = cea608parser.extractCea608DataFromRange(raw, cea608Ranges[j]);\r\n                for (let k = 0; k < 2; k++) {\r\n                    if (ccData[k].length > 0) {\r\n                        if (sample.cts !== lastSampleTime) {\r\n                            idx = 0;\r\n                        } else {\r\n                            idx += 1;\r\n                        }\r\n                        allCcData.fields[k].push([sample.cts + (mseTimeOffset * embeddedTimescale), ccData[k], idx]);\r\n                        lastSampleTime = sample.cts;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sort by sampleTime ascending order\r\n        // If two packets have the same sampleTime, use them in the order\r\n        // they were received\r\n        allCcData.fields.forEach(function sortField(field) {\r\n            field.sort(function (a, b) {\r\n                if (a[0] === b[0]) {\r\n                    return a[2] - b[2];\r\n                }\r\n                return a[0] - b[0];\r\n            });\r\n        });\r\n\r\n        return allCcData;\r\n    }\r\n\r\n    function getIsDefault(mediaInfo) {\r\n        //TODO How to tag default. currently same order as listed in manifest.\r\n        // Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND\r\n        // Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.\r\n        let isDefault = false;\r\n        if (embeddedTracks.length > 1 && mediaInfo.isEmbedded) {\r\n            isDefault = (mediaInfo.id && mediaInfo.id === Constants.CC1); // CC1 if both CC1 and CC3 exist\r\n        } else if (embeddedTracks.length === 1) {\r\n            if (mediaInfo.id && typeof mediaInfo.id === 'string' && mediaInfo.id.substring(0, 2) === 'CC') { // Either CC1 or CC3\r\n                isDefault = true;\r\n            }\r\n        } else if (embeddedTracks.length === 0) {\r\n            isDefault = (mediaInfo.index === mediaInfos[0].index);\r\n        }\r\n        return isDefault;\r\n    }\r\n\r\n    function getParser(codecType) {\r\n        let parser;\r\n        if (codecType.search(Constants.VTT) >= 0) {\r\n            parser = vttParser;\r\n        } else if (codecType.search(Constants.TTML) >= 0 || codecType.search(Constants.STPP) >= 0) {\r\n            parser = ttmlParser;\r\n        }\r\n        return parser;\r\n    }\r\n\r\n    function remove(start, end) {\r\n        //if start and end are not defined, remove all\r\n        if ((start === undefined) && (start === end)) {\r\n            start = this.buffered.start(0);\r\n            end = this.buffered.end(this.buffered.length - 1);\r\n        }\r\n        this.buffered.remove(start, end);\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        append: append,\r\n        abort: abort,\r\n        addEmbeddedTrack: addEmbeddedTrack,\r\n        resetEmbedded: resetEmbedded,\r\n        setConfig: setConfig,\r\n        getConfig: getConfig,\r\n        setCurrentFragmentedTrackIdx: setCurrentFragmentedTrackIdx,\r\n        remove: remove,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nTextSourceBuffer.__dashjs_factory_name = 'TextSourceBuffer';\r\nexport default FactoryMaker.getSingletonFactory(TextSourceBuffer);\r\n"]}