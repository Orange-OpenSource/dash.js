{"version":3,"sources":["../../../../../src/streaming/text/TextBufferController.js"],"names":["TextBufferController","config","context","_BufferControllerImpl","instance","setup","type","Constants","FRAGMENTED_TEXT","create","metricsModel","mediaPlayerModel","manifestModel","errHandler","streamController","mediaController","adapter","textController","abrController","playbackController","streamProcessor","mimeType","getBufferControllerType","initialize","source","StreamProcessor","createBuffer","mediaInfo","getType","getBuffer","setBuffer","value","getMediaSource","setMediaSource","getStreamProcessor","setSeekStartTime","getBufferLevel","reset","errored","getIsBufferingCompleted","switchInitData","streamId","representationId","getIsPruningInProgress","dischargePreBuffer","getRangeAt","time","updateTimestampOffset","MSETimeOffset","buffer","timestampOffset","isNaN","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"TextBufferController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport BufferController from './../controllers/BufferController';\r\nimport NotFragmentedTextBufferController from './NotFragmentedTextBufferController';\r\n\r\nfunction TextBufferController(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n\r\n    let _BufferControllerImpl,\r\n        instance;\r\n\r\n    function setup() {\r\n\r\n        // according to text type, we create corresponding buffer controller\r\n        if (config.type === Constants.FRAGMENTED_TEXT) {\r\n\r\n            // in this case, internal buffer ocntroller is a classical BufferController object\r\n            _BufferControllerImpl = BufferController(context).create({\r\n                type: config.type,\r\n                metricsModel: config.metricsModel,\r\n                mediaPlayerModel: config.mediaPlayerModel,\r\n                manifestModel: config.manifestModel,\r\n                errHandler: config.errHandler,\r\n                streamController: config.streamController,\r\n                mediaController: config.mediaController,\r\n                adapter: config.adapter,\r\n                textController: config.textController,\r\n                abrController: config.abrController,\r\n                playbackController: config.playbackController,\r\n                streamProcessor: config.streamProcessor\r\n            });\r\n        } else {\r\n\r\n            // in this case, internal buffer controller is a not fragmented text controller object\r\n            _BufferControllerImpl = NotFragmentedTextBufferController(context).create({\r\n                type: config.type,\r\n                mimeType: config.mimeType,\r\n                errHandler: config.errHandler,\r\n                streamProcessor: config.streamProcessor\r\n            });\r\n        }\r\n    }\r\n\r\n    function getBufferControllerType() {\r\n        return _BufferControllerImpl.getBufferControllerType();\r\n    }\r\n\r\n    function initialize(source, StreamProcessor) {\r\n        return _BufferControllerImpl.initialize(source, StreamProcessor);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo }mediaInfo\r\n     * @returns {Object} SourceBuffer object\r\n     * @memberof BufferController#\r\n     */\r\n    function createBuffer(mediaInfo) {\r\n        return _BufferControllerImpl.createBuffer(mediaInfo);\r\n    }\r\n\r\n    function getType() {\r\n        return _BufferControllerImpl.getType();\r\n    }\r\n\r\n    function getBuffer() {\r\n        return _BufferControllerImpl.getBuffer();\r\n    }\r\n\r\n    function setBuffer(value) {\r\n        _BufferControllerImpl.setBuffer(value);\r\n    }\r\n\r\n    function getMediaSource() {\r\n        return _BufferControllerImpl.getMediaSource();\r\n    }\r\n\r\n    function setMediaSource(value) {\r\n        _BufferControllerImpl.setMediaSource(value);\r\n    }\r\n\r\n    function getStreamProcessor() {\r\n        _BufferControllerImpl.getStreamProcessor();\r\n    }\r\n\r\n    function setSeekStartTime(value) {\r\n        _BufferControllerImpl.setSeekStartTime(value);\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        return _BufferControllerImpl.getBufferLevel();\r\n    }\r\n\r\n    function reset(errored) {\r\n        _BufferControllerImpl.reset(errored);\r\n    }\r\n\r\n    function getIsBufferingCompleted() {\r\n        return _BufferControllerImpl.getIsBufferingCompleted();\r\n    }\r\n\r\n    function switchInitData(streamId, representationId) {\r\n        _BufferControllerImpl.switchInitData(streamId, representationId);\r\n    }\r\n\r\n    function getIsPruningInProgress() {\r\n        return _BufferControllerImpl.getIsPruningInProgress();\r\n    }\r\n\r\n    function dischargePreBuffer() {\r\n        return _BufferControllerImpl.dischargePreBuffer();\r\n    }\r\n\r\n    function getRangeAt(time) {\r\n        return _BufferControllerImpl.getRangeAt(time);\r\n    }\r\n\r\n    function updateTimestampOffset(MSETimeOffset) {\r\n        const buffer = getBuffer();\r\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\r\n            buffer.timestampOffset = MSETimeOffset;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getBufferControllerType: getBufferControllerType,\r\n        initialize: initialize,\r\n        createBuffer: createBuffer,\r\n        getType: getType,\r\n        getStreamProcessor: getStreamProcessor,\r\n        setSeekStartTime: setSeekStartTime,\r\n        getBuffer: getBuffer,\r\n        setBuffer: setBuffer,\r\n        getBufferLevel: getBufferLevel,\r\n        setMediaSource: setMediaSource,\r\n        getMediaSource: getMediaSource,\r\n        getIsBufferingCompleted: getIsBufferingCompleted,\r\n        getIsPruningInProgress: getIsPruningInProgress,\r\n        dischargePreBuffer: dischargePreBuffer,\r\n        switchInitData: switchInitData,\r\n        getRangeAt: getRangeAt,\r\n        reset: reset,\r\n        updateTimestampOffset: updateTimestampOffset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nTextBufferController.__dashjs_factory_name = 'TextBufferController';\r\nexport default FactoryMaker.getClassFactory(TextBufferController);\r\n"]}