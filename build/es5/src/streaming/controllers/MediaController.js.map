{"version":3,"sources":["../../../../../src/streaming/controllers/MediaController.js"],"names":["Constants","Events","EventBus","FactoryMaker","Debug","TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_WIDEST_RANGE","DEFAULT_INIT_TRACK_SELECTION_MODE","MediaController","context","eventBus","getInstance","instance","logger","tracks","initialSettings","selectionMode","switchMode","domStorage","validTrackSwitchModes","validTrackSelectionModes","setup","getLogger","reset","checkInitialMediaSettingsForType","type","streamInfo","settings","getInitialSettings","tracksForType","getTracksFor","FRAGMENTED_TEXT","setTrack","getSavedMediaSettings","setInitialSettings","length","forEach","track","matchSettings","push","selectInitialTrack","addTrack","mediaType","isMultiTrackSupportedByType","streamId","id","createTrackInfo","mediaTracks","list","i","len","isTracksEqual","initSettings","getCurrentTrackFor","current","isCurrentTrack","trigger","CURRENT_TRACK_CHANGED","oldMediaInfo","newMediaInfo","extractSettings","storeLastSettings","roles","role","accessibility","audioChannelConfiguration","setSavedMediaSettings","value","setSwitchMode","mode","isModeSupported","indexOf","warn","getSwitchMode","setSelectionModeForInitialTrack","getSelectionModeForInitialTrack","AUDIO","VIDEO","TEXT","IMAGE","t1","t2","sameId","sameViewpoint","viewpoint","sameLang","lang","sameRoles","toString","sameAccessibility","sameAudioChannelConfiguration","setConfig","config","resetInitialSettings","resetSwitchMode","mediaInfo","notEmpty","matchLang","matchViewPoint","matchRole","filter","item","matchAccessibility","matchAudioChannelConfiguration","audio","video","tmpArr","getTracksWithHighestBitrate","trackArr","max","result","tmp","Math","apply","bitrateList","map","obj","bandwidth","getTracksWithWidestRange","representationCount","text","fragmentedText","image","__dashjs_factory_name","factory","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"MediaController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport Events from '../../core/events/Events';\r\nimport EventBus from '../../core/EventBus';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nconst TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\r\nconst TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\r\nconst TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\r\nconst TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\r\nconst DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\r\n\r\nfunction MediaController() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        tracks,\r\n        initialSettings,\r\n        selectionMode,\r\n        switchMode,\r\n        domStorage;\r\n\r\n    const validTrackSwitchModes = [\r\n        TRACK_SWITCH_MODE_ALWAYS_REPLACE,\r\n        TRACK_SWITCH_MODE_NEVER_REPLACE\r\n    ];\r\n\r\n    const validTrackSelectionModes = [\r\n        TRACK_SELECTION_MODE_HIGHEST_BITRATE,\r\n        TRACK_SELECTION_MODE_WIDEST_RANGE\r\n    ];\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        reset();\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @memberof MediaController#\r\n     */\r\n    function checkInitialMediaSettingsForType(type, streamInfo) {\r\n        let settings = getInitialSettings(type);\r\n        const tracksForType = getTracksFor(type, streamInfo);\r\n        const tracks = [];\r\n\r\n        if (type === Constants.FRAGMENTED_TEXT) {\r\n            // Choose the first track\r\n            setTrack(tracksForType[0]);\r\n            return;\r\n        }\r\n\r\n        if (!settings) {\r\n            settings = domStorage.getSavedMediaSettings(type);\r\n            setInitialSettings(type, settings);\r\n        }\r\n\r\n        if (!tracksForType || (tracksForType.length === 0)) return;\r\n\r\n        if (settings) {\r\n            tracksForType.forEach(function (track) {\r\n                if (matchSettings(settings, track)) {\r\n                    tracks.push(track);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (tracks.length === 0) {\r\n            setTrack(selectInitialTrack(tracksForType));\r\n        } else {\r\n            if (tracks.length > 1) {\r\n                setTrack(selectInitialTrack(tracks));\r\n            } else {\r\n                setTrack(tracks[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @memberof MediaController#\r\n     */\r\n    function addTrack(track) {\r\n        if (!track) return;\r\n\r\n        const mediaType = track.type;\r\n        if (!isMultiTrackSupportedByType(mediaType)) return;\r\n\r\n        let streamId = track.streamInfo.id;\r\n        if (!tracks[streamId]) {\r\n            tracks[streamId] = createTrackInfo();\r\n        }\r\n\r\n        const mediaTracks = tracks[streamId][mediaType].list;\r\n        for (let i = 0, len = mediaTracks.length; i < len; ++i) {\r\n            //track is already set.\r\n            if (isTracksEqual(mediaTracks[i], track)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        mediaTracks.push(track);\r\n\r\n        let initSettings = getInitialSettings(mediaType);\r\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\r\n            setTrack(track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @returns {Array}\r\n     * @memberof MediaController#\r\n     */\r\n    function getTracksFor(type, streamInfo) {\r\n        if (!type || !streamInfo) return [];\r\n\r\n        const id = streamInfo.id;\r\n\r\n        if (!tracks[id] || !tracks[id][type]) return [];\r\n\r\n        return tracks[id][type].list;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {StreamInfo} streamInfo\r\n     * @returns {Object|null}\r\n     * @memberof MediaController#\r\n     */\r\n    function getCurrentTrackFor(type, streamInfo) {\r\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\r\n        return tracks[streamInfo.id][type].current;\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isCurrentTrack(track) {\r\n        if (!track) {\r\n            return false;\r\n        }\r\n        const type = track.type;\r\n        const id = track.streamInfo.id;\r\n\r\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} track\r\n     * @memberof MediaController#\r\n     */\r\n    function setTrack(track) {\r\n        if (!track || !track.streamInfo) return;\r\n\r\n        const type = track.type;\r\n        const streamInfo = track.streamInfo;\r\n        const id = streamInfo.id;\r\n        const current = getCurrentTrackFor(type, streamInfo);\r\n\r\n        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;\r\n\r\n        tracks[id][type].current = track;\r\n\r\n        if (tracks[id][type].current) {\r\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {oldMediaInfo: current, newMediaInfo: track, switchMode: switchMode[type]});\r\n        }\r\n\r\n        let settings = extractSettings(track);\r\n\r\n        if (!settings || !tracks[id][type].storeLastSettings) return;\r\n\r\n        if (settings.roles) {\r\n            settings.role = settings.roles[0];\r\n            delete settings.roles;\r\n        }\r\n\r\n        if (settings.accessibility) {\r\n            settings.accessibility = settings.accessibility[0];\r\n        }\r\n\r\n        if (settings.audioChannelConfiguration) {\r\n            settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\r\n        }\r\n\r\n        domStorage.setSavedMediaSettings(type, settings);\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {Object} value\r\n     * @memberof MediaController#\r\n     */\r\n    function setInitialSettings(type, value) {\r\n        if (!type || !value) return;\r\n\r\n        initialSettings[type] = value;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {Object|null}\r\n     * @memberof MediaController#\r\n     */\r\n    function getInitialSettings(type) {\r\n        if (!type) return null;\r\n\r\n        return initialSettings[type];\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {string} mode\r\n     * @memberof MediaController#\r\n     */\r\n    function setSwitchMode(type, mode) {\r\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\r\n\r\n        if (!isModeSupported) {\r\n            logger.warn('Track switch mode is not supported: ' + mode);\r\n            return;\r\n        }\r\n\r\n        switchMode[type] = mode;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {string} mode\r\n     * @memberof MediaController#\r\n     */\r\n    function getSwitchMode(type) {\r\n        return switchMode[type];\r\n    }\r\n\r\n    /**\r\n     * @param {string} mode\r\n     * @memberof MediaController#\r\n     */\r\n    function setSelectionModeForInitialTrack(mode) {\r\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\r\n\r\n        if (!isModeSupported) {\r\n            logger.warn('Track selection mode is not supported: ' + mode);\r\n            return;\r\n        }\r\n        selectionMode = mode;\r\n    }\r\n\r\n    /**\r\n     * @returns {string} mode\r\n     * @memberof MediaController#\r\n     */\r\n    function getSelectionModeForInitialTrack() {\r\n        return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;\r\n    }\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isMultiTrackSupportedByType(type) {\r\n        return (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.TEXT ||\r\n            type === Constants.FRAGMENTED_TEXT || type === Constants.IMAGE);\r\n    }\r\n\r\n    /**\r\n     * @param {MediaInfo} t1 - first track to compare\r\n     * @param {MediaInfo} t2 - second track to compare\r\n     * @returns {boolean}\r\n     * @memberof MediaController#\r\n     */\r\n    function isTracksEqual(t1, t2) {\r\n        if (!t1 && !t2) {\r\n            return true;\r\n        }\r\n\r\n        if (!t1 || !t2) {\r\n            return false;\r\n        }\r\n\r\n        const sameId = t1.id === t2.id;\r\n        const sameViewpoint = t1.viewpoint === t2.viewpoint;\r\n        const sameLang = t1.lang === t2.lang;\r\n        const sameRoles = t1.roles.toString() === t2.roles.toString();\r\n        const sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\r\n        const sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\r\n\r\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.domStorage) {\r\n            domStorage = config.domStorage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @memberof MediaController#\r\n     */\r\n    function reset() {\r\n        tracks = {};\r\n        resetInitialSettings();\r\n        resetSwitchMode();\r\n    }\r\n\r\n    function extractSettings(mediaInfo) {\r\n        const settings = {\r\n            lang: mediaInfo.lang,\r\n            viewpoint: mediaInfo.viewpoint,\r\n            roles: mediaInfo.roles,\r\n            accessibility: mediaInfo.accessibility,\r\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\r\n        };\r\n        let notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\r\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\r\n\r\n        return notEmpty ? settings : null;\r\n    }\r\n\r\n    function matchSettings(settings, track) {\r\n        const matchLang = !settings.lang || (settings.lang === track.lang);\r\n        const matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\r\n        const matchRole = !settings.role || !!track.roles.filter(function (item) {\r\n            return item === settings.role;\r\n        })[0];\r\n        let matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\r\n            return item === settings.accessibility;\r\n        })[0];\r\n        let matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\r\n            return item === settings.audioChannelConfiguration;\r\n        })[0];\r\n\r\n        return (matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\r\n    }\r\n\r\n    function resetSwitchMode() {\r\n        switchMode = {\r\n            audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,\r\n            video: TRACK_SWITCH_MODE_NEVER_REPLACE\r\n        };\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        initialSettings = {\r\n            audio: null,\r\n            video: null\r\n        };\r\n    }\r\n\r\n    function selectInitialTrack(tracks) {\r\n        let mode = getSelectionModeForInitialTrack();\r\n        let tmpArr = [];\r\n        const getTracksWithHighestBitrate = function (trackArr) {\r\n            let max = 0;\r\n            let result = [];\r\n            let tmp;\r\n\r\n            trackArr.forEach(function (track) {\r\n                tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\r\n\r\n                if (tmp > max) {\r\n                    max = tmp;\r\n                    result = [track];\r\n                } else if (tmp === max) {\r\n                    result.push(track);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        };\r\n        const getTracksWithWidestRange = function (trackArr) {\r\n            let max = 0;\r\n            let result = [];\r\n            let tmp;\r\n\r\n            trackArr.forEach(function (track) {\r\n                tmp = track.representationCount;\r\n\r\n                if (tmp > max) {\r\n                    max = tmp;\r\n                    result = [track];\r\n                } else if (tmp === max) {\r\n                    result.push(track);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        };\r\n\r\n        switch (mode) {\r\n            case TRACK_SELECTION_MODE_HIGHEST_BITRATE:\r\n                tmpArr = getTracksWithHighestBitrate(tracks);\r\n\r\n                if (tmpArr.length > 1) {\r\n                    tmpArr = getTracksWithWidestRange(tmpArr);\r\n                }\r\n                break;\r\n            case TRACK_SELECTION_MODE_WIDEST_RANGE:\r\n                tmpArr = getTracksWithWidestRange(tracks);\r\n\r\n                if (tmpArr.length > 1) {\r\n                    tmpArr = getTracksWithHighestBitrate(tracks);\r\n                }\r\n                break;\r\n            default:\r\n                logger.warn('Track selection mode is not supported: ' + mode);\r\n                break;\r\n        }\r\n\r\n        return tmpArr[0];\r\n    }\r\n\r\n    function createTrackInfo() {\r\n        return {\r\n            audio: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            video: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            text: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            fragmentedText: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            },\r\n            image: {\r\n                list: [],\r\n                storeLastSettings: true,\r\n                current: null\r\n            }\r\n        };\r\n    }\r\n\r\n    instance = {\r\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\r\n        addTrack: addTrack,\r\n        getTracksFor: getTracksFor,\r\n        getCurrentTrackFor: getCurrentTrackFor,\r\n        isCurrentTrack: isCurrentTrack,\r\n        setTrack: setTrack,\r\n        setInitialSettings: setInitialSettings,\r\n        getInitialSettings: getInitialSettings,\r\n        setSwitchMode: setSwitchMode,\r\n        getSwitchMode: getSwitchMode,\r\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\r\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\r\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\r\n        isTracksEqual: isTracksEqual,\r\n        setConfig: setConfig,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMediaController.__dashjs_factory_name = 'MediaController';\r\nconst factory = FactoryMaker.getSingletonFactory(MediaController);\r\nfactory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;\r\nfactory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;\r\nfactory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\r\nfactory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;\r\nfactory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;\r\nFactoryMaker.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);\r\nexport default factory;\r\n"]}