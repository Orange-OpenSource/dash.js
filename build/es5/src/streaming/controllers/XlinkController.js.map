{"version":3,"sources":["../../../../../src/streaming/controllers/XlinkController.js"],"names":["RESOLVE_TYPE_ONLOAD","RESOLVE_TYPE_ONACTUATE","RESOLVE_TO_ZERO","XlinkController","config","context","eventBus","getInstance","urlUtils","instance","matchers","iron","manifest","converter","xlinkLoader","setup","on","Events","XLINK_ELEMENT_LOADED","onXlinkElementLoaded","create","errHandler","metricsModel","mediaPlayerModel","requestModifier","setMatchers","value","setIron","resolveManifestOnLoad","mpd","elements","X2JS","escapeMode","attributePrefix","arrayAccessForm","emptyNodeForm","stripWhitespaces","enableToStringFunc","ignoreRoot","getElementsToResolve","Period_asArray","DashConstants","PERIOD","resolve","reset","off","type","resolveType","resolveObject","element","url","length","onXlinkAllElementsLoaded","i","isHTTPURL","originalContent","BaseURL","load","event","openingTag","closingTag","mergedContent","resolvedContent","index","indexOf","substr","xml_str2json","isResolvingFinished","obj","mergeElementsBack","trigger","XLINK_READY","hasOwnProperty","ADAPTATION_SET","concat","EVENT_STREAM","parentElement","toResolve","xlinkObject","splice","createXlinkObject","push","resolvedElements","j","k","isInappropriateTarget","run","resolved","elementsToResolve","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,2C,uDACA,6C,iDACA,gD,6CACA,qD,yDACA,qD,iDACA,2C,iDACA,iE,8IAEA,GAAMA,qBAAsB,QAA5B,CAtCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCA,GAAMC,wBAAyB,WAA/B,CACA,GAAMC,iBAAkB,oCAAxB,CAEA,QAASC,gBAAT,CAAyBC,MAAzB,CAAiC,CAE7BA,OAASA,QAAU,EAAnB,CACA,GAAIC,SAAU,KAAKA,OAAnB,CACA,GAAIC,UAAW,uBAASD,OAAT,EAAkBE,WAAlB,EAAf,CACA,GAAMC,UAAW,uBAASH,OAAT,EAAkBE,WAAlB,EAAjB,CAEA,GAAIE,gBAAJ,CACIC,eADJ,CAEIC,WAFJ,CAGIC,eAHJ,CAIIC,gBAJJ,CAKIC,kBALJ,CAOA,QAASC,MAAT,EAAiB,CACbT,SAASU,EAAT,CAAYC,iBAAOC,oBAAnB,CAAyCC,oBAAzC,CAA+DV,QAA/D,EAEAK,YAAc,0BAAYT,OAAZ,EAAqBe,MAArB,CAA4B,CACtCC,WAAYjB,OAAOiB,UADmB,CAEtCC,aAAclB,OAAOkB,YAFiB,CAGtCC,iBAAkBnB,OAAOmB,gBAHa,CAItCC,gBAAiBpB,OAAOoB,eAJc,CAA5B,CAAd,CAMH,CAED,QAASC,YAAT,CAAqBC,KAArB,CAA4B,CACxB,GAAIA,KAAJ,CAAW,CACPhB,SAAWgB,KAAX,CACH,CACJ,CAED,QAASC,QAAT,CAAiBD,KAAjB,CAAwB,CACpB,GAAIA,KAAJ,CAAW,CACPf,KAAOe,KAAP,CACH,CACJ,CAED;;;OAIA,QAASE,sBAAT,CAA+BC,GAA/B,CAAoC,CAChC,GAAIC,gBAAJ,CACA;AACAjB,UAAY,GAAIkB,mBAAJ,CAAS,CACjBC,WAAoB,KADH,CAEjBC,gBAAoB,EAFH,CAGjBC,gBAAoB,UAHH,CAIjBC,cAAoB,QAJH,CAKjBC,iBAAoB,KALH,CAMjBC,mBAAoB,KANH,CAOjBC,WAAoB,IAPH,CAQjB5B,SAAoBA,QARH,CAAT,CAAZ,CAWAE,SAAWiB,GAAX,CACAC,SAAWS,qBAAqB3B,SAAS4B,cAA9B,CAA8C5B,QAA9C,CAAwD6B,wBAAcC,MAAtE,CAA8E1C,mBAA9E,CAAX,CACA2C,QAAQb,QAAR,CAAkBW,wBAAcC,MAAhC,CAAwC1C,mBAAxC,EACH,CAED,QAAS4C,MAAT,EAAiB,CACbtC,SAASuC,GAAT,CAAa5B,iBAAOC,oBAApB,CAA0CC,oBAA1C,CAAgEV,QAAhE,EAEA,GAAIK,WAAJ,CAAiB,CACbA,YAAY8B,KAAZ,GACA9B,YAAc,IAAd,CACH,CACJ,CAED,QAAS6B,QAAT,CAAiBb,QAAjB,CAA2BgB,IAA3B,CAAiCC,WAAjC,CAA8C,CAC1C,GAAIC,eAAgB,EAApB,CACA,GAAIC,eAAJ,CACIC,UADJ,CAGAF,cAAclB,QAAd,CAAyBA,QAAzB,CACAkB,cAAcF,IAAd,CAAqBA,IAArB,CACAE,cAAcD,WAAd,CAA4BA,WAA5B,CACA;AACA,GAAIC,cAAclB,QAAd,CAAuBqB,MAAvB,GAAkC,CAAtC,CAAyC,CACrCC,yBAAyBJ,aAAzB,EACH,CACD,IAAK,GAAIK,GAAI,CAAb,CAAgBA,EAAIL,cAAclB,QAAd,CAAuBqB,MAA3C,CAAmDE,GAAnD,CAAwD,CACpDJ,QAAUD,cAAclB,QAAd,CAAuBuB,CAAvB,CAAV,CACA,GAAI7C,SAAS8C,SAAT,CAAmBL,QAAQC,GAA3B,CAAJ,CAAqC,CACjCA,IAAMD,QAAQC,GAAd,CACH,CAFD,IAEO,CACHA,IAAMD,QAAQM,eAAR,CAAwBC,OAAxB,CAAkCP,QAAQC,GAAhD,CACH,CACDpC,YAAY2C,IAAZ,CAAiBP,GAAjB,CAAsBD,OAAtB,CAA+BD,aAA/B,EACH,CACJ,CAED,QAAS7B,qBAAT,CAA8BuC,KAA9B,CAAqC,CACjC,GAAIT,eAAJ,CACID,oBADJ,CAGA,GAAMW,YAAa,YAAnB,CACA,GAAMC,YAAa,aAAnB,CACA,GAAIC,eAAgB,EAApB,CAEAZ,QAAUS,MAAMT,OAAhB,CACAD,cAAgBU,MAAMV,aAAtB,CACA;AACA,GAAIC,QAAQa,eAAZ,CAA6B,CACzB,GAAIC,OAAQ,CAAZ,CACA;AACA,GAAId,QAAQa,eAAR,CAAwBE,OAAxB,CAAgC,OAAhC,IAA6C,CAAjD,CAAoD,CAChDD,MAAQd,QAAQa,eAAR,CAAwBE,OAAxB,CAAgC,IAAhC,EAAwC,CAAhD,CAAmD;AACtD,CACDH,cAAgBZ,QAAQa,eAAR,CAAwBG,MAAxB,CAA+B,CAA/B,CAAiCF,KAAjC,EAA0CJ,UAA1C,CAAuDV,QAAQa,eAAR,CAAwBG,MAAxB,CAA+BF,KAA/B,CAAvD,CAA+FH,UAA/G,CACAX,QAAQa,eAAR,CAA0BjD,UAAUqD,YAAV,CAAuBL,aAAvB,CAA1B,CACH,CACD,GAAIM,oBAAoBnB,aAApB,CAAJ,CAAwC,CACpCI,yBAAyBJ,aAAzB,EACH,CACJ,CAED;AACA,QAASI,yBAAT,CAAmCJ,aAAnC,CAAkD,CAC9C,GAAIlB,UAAW,EAAf,CACA,GAAIuB,SAAJ,CACIe,UADJ,CAGAC,kBAAkBrB,aAAlB,EACA,GAAIA,cAAcD,WAAd,GAA8B9C,sBAAlC,CAA0D,CACtDK,SAASgE,OAAT,CAAiBrD,iBAAOsD,WAAxB,CAAqC,CAAC3D,SAAUA,QAAX,CAArC,EACH,CACD,GAAIoC,cAAcD,WAAd,GAA8B/C,mBAAlC,CAAuD,CACnD,OAAQgD,cAAcF,IAAtB,EACI;AACA,IAAKL,yBAAcC,MAAnB,CACI,IAAKW,EAAI,CAAT,CAAYA,EAAIzC,SAAS6B,wBAAcC,MAAd,CAAuB,UAAhC,EAA4CS,MAA5D,CAAoEE,GAApE,CAAyE,CACrEe,IAAMxD,SAAS6B,wBAAcC,MAAd,CAAuB,UAAhC,EAA4CW,CAA5C,CAAN,CACA,GAAIe,IAAII,cAAJ,CAAmB/B,wBAAcgC,cAAd,CAA+B,UAAlD,CAAJ,CAAmE,CAC/D3C,SAAWA,SAAS4C,MAAT,CAAgBnC,qBAAqB6B,IAAI3B,wBAAcgC,cAAd,CAA+B,UAAnC,CAArB,CAAqEL,GAArE,CAA0E3B,wBAAcgC,cAAxF,CAAwGzE,mBAAxG,CAAhB,CAAX,CACH,CACD,GAAIoE,IAAII,cAAJ,CAAmB/B,wBAAckC,YAAd,CAA6B,UAAhD,CAAJ,CAAiE,CAC7D7C,SAAWA,SAAS4C,MAAT,CAAgBnC,qBAAqB6B,IAAI3B,wBAAckC,YAAd,CAA6B,UAAjC,CAArB,CAAmEP,GAAnE,CAAwE3B,wBAAckC,YAAtF,CAAoG3E,mBAApG,CAAhB,CAAX,CACH,CACJ,CACD2C,QAAQb,QAAR,CAAkBW,wBAAcgC,cAAhC,CAAgDzE,mBAAhD,EACA,MACJ,IAAKyC,yBAAcgC,cAAnB,CACI;AACAnE,SAASgE,OAAT,CAAiBrD,iBAAOsD,WAAxB,CAAqC,CAAC3D,SAAUA,QAAX,CAArC,EACA,MAjBR,CAmBH,CACJ,CAED;AACA,QAAS2B,qBAAT,CAA8BT,QAA9B,CAAwC8C,aAAxC,CAAuD9B,IAAvD,CAA6DC,WAA7D,CAA0E,CACtE,GAAI8B,WAAY,EAAhB,CACA,GAAI5B,eAAJ,CACII,QADJ,CAEIyB,kBAFJ,CAGA;AACA,IAAKzB,EAAIvB,SAASqB,MAAT,CAAkB,CAA3B,CAA8BE,GAAK,CAAnC,CAAsCA,GAAtC,CAA2C,CACvCJ,QAAUnB,SAASuB,CAAT,CAAV,CACA,GAAIJ,QAAQuB,cAAR,CAAuB,YAAvB,GAAwCvB,QAAQ,YAAR,IAA0B/C,eAAtE,CAAuF,CACnF4B,SAASiD,MAAT,CAAgB1B,CAAhB,CAAmB,CAAnB,EACH,CACJ,CACD;AACA,IAAKA,EAAI,CAAT,CAAYA,EAAIvB,SAASqB,MAAzB,CAAiCE,GAAjC,CAAsC,CAClCJ,QAAUnB,SAASuB,CAAT,CAAV,CACA,GAAIJ,QAAQuB,cAAR,CAAuB,YAAvB,GAAwCvB,QAAQuB,cAAR,CAAuB,eAAvB,CAAxC,EAAmFvB,QAAQ,eAAR,IAA6BF,WAApH,CAAiI,CAC7H+B,YAAcE,kBAAkB/B,QAAQ,YAAR,CAAlB,CAAyC2B,aAAzC,CAAwD9B,IAAxD,CAA8DO,CAA9D,CAAiEN,WAAjE,CAA8EE,OAA9E,CAAd,CACA4B,UAAUI,IAAV,CAAeH,WAAf,EACH,CACJ,CACD,MAAOD,UAAP,CACH,CAED,QAASR,kBAAT,CAA2BrB,aAA3B,CAA0C,CACtC,GAAIkC,kBAAmB,EAAvB,CACA,GAAIjC,eAAJ,CACIH,WADJ,CAEIsB,UAFJ,CAGIf,QAHJ,CAII8B,QAJJ,CAKIC,QALJ,CAMA;AACA,IAAK/B,EAAIL,cAAclB,QAAd,CAAuBqB,MAAvB,CAAgC,CAAzC,CAA4CE,GAAK,CAAjD,CAAoDA,GAApD,CAA0D,CACtDJ,QAAUD,cAAclB,QAAd,CAAuBuB,CAAvB,CAAV,CACAP,KAAOG,QAAQH,IAAR,CAAe,UAAtB,CAEA;AACA,GAAI,CAACG,QAAQa,eAAT,EAA4BuB,uBAAhC,CAAyD,CACrD,MAAOpC,SAAQM,eAAR,CAAwB,eAAxB,CAAP,CACA,MAAON,SAAQM,eAAR,CAAwB,YAAxB,CAAP,CACA2B,iBAAiBD,IAAjB,CAAsBhC,QAAQM,eAA9B,EACH,CACD;AALA,IAMK,IAAIN,QAAQa,eAAZ,CAA6B,CAC9B,IAAKqB,EAAI,CAAT,CAAYA,EAAIlC,QAAQa,eAAR,CAAwBhB,IAAxB,EAA8BK,MAA9C,CAAsDgC,GAAtD,CAA2D,CACvD;AACAf,IAAMnB,QAAQa,eAAR,CAAwBhB,IAAxB,EAA8BqC,CAA9B,CAAN,CACAD,iBAAiBD,IAAjB,CAAsBb,GAAtB,EACH,CACJ,CACD;AACAnB,QAAQ2B,aAAR,CAAsB9B,IAAtB,EAA4BiC,MAA5B,CAAmC9B,QAAQc,KAA3C,CAAkD,CAAlD,EACA,IAAKqB,EAAI,CAAT,CAAYA,EAAIF,iBAAiB/B,MAAjC,CAAyCiC,GAAzC,CAA8C,CAC1CnC,QAAQ2B,aAAR,CAAsB9B,IAAtB,EAA4BiC,MAA5B,CAAmC9B,QAAQc,KAAR,CAAgBqB,CAAnD,CAAsD,CAAtD,CAAyDF,iBAAiBE,CAAjB,CAAzD,EACH,CACDF,iBAAmB,EAAnB,CACH,CACD,GAAIlC,cAAclB,QAAd,CAAuBqB,MAAvB,CAAgC,CAApC,CAAuC,CACnCxC,KAAK2E,GAAL,CAAS1E,QAAT,EACH,CACJ,CAED,QAASoE,kBAAT,CAA2B9B,GAA3B,CAAgC0B,aAAhC,CAA+C9B,IAA/C,CAAqDiB,KAArD,CAA4DhB,WAA5D,CAAyEQ,eAAzE,CAA0F,CACtF,MAAO,CACHL,IAAKA,GADF,CAEH0B,cAAeA,aAFZ,CAGH9B,KAAMA,IAHH,CAIHiB,MAAOA,KAJJ,CAKHhB,YAAaA,WALV,CAMHQ,gBAAiBA,eANd,CAOHO,gBAAiB,IAPd,CAQHyB,SAAU,KARP,CAAP,CAUH,CAED;AACA,QAASpB,oBAAT,CAA6BqB,iBAA7B,CAAgD,CAC5C,GAAInC,SAAJ,CACIe,UADJ,CAEA,IAAKf,EAAI,CAAT,CAAYA,EAAImC,kBAAkB1D,QAAlB,CAA2BqB,MAA3C,CAAmDE,GAAnD,CAAwD,CACpDe,IAAMoB,kBAAkB1D,QAAlB,CAA2BuB,CAA3B,CAAN,CACA,GAAIe,IAAImB,QAAJ,GAAiB,KAArB,CAA4B,CACxB,MAAO,MAAP,CACH,CACJ,CACD,MAAO,KAAP,CACH,CAED;AACA,QAASF,sBAAT,EAAiC,CAC7B,MAAO,MAAP,CACH,CAED5E,SAAW,CACPmB,sBAAuBA,qBADhB,CAEPH,YAAaA,WAFN,CAGPE,QAASA,OAHF,CAIPiB,MAAOA,KAJA,CAAX,CAOA7B,QACA,MAAON,SAAP,CACH,CAEDN,gBAAgBsF,qBAAhB,CAAwC,iBAAxC,C,gBACeC,uBAAaC,eAAb,CAA6BxF,eAA7B,C","file":"XlinkController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport XlinkLoader from '../XlinkLoader';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport X2JS from '../../../externals/xml2json';\r\nimport URLUtils from '../utils/URLUtils';\r\nimport DashConstants from '../../dash/constants/DashConstants';\r\n\r\nconst RESOLVE_TYPE_ONLOAD = 'onLoad';\r\nconst RESOLVE_TYPE_ONACTUATE = 'onActuate';\r\nconst RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';\r\n\r\nfunction XlinkController(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n    let eventBus = EventBus(context).getInstance();\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        matchers,\r\n        iron,\r\n        manifest,\r\n        converter,\r\n        xlinkLoader;\r\n\r\n    function setup() {\r\n        eventBus.on(Events.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\r\n\r\n        xlinkLoader = XlinkLoader(context).create({\r\n            errHandler: config.errHandler,\r\n            metricsModel: config.metricsModel,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier\r\n        });\r\n    }\r\n\r\n    function setMatchers(value) {\r\n        if (value) {\r\n            matchers = value;\r\n        }\r\n    }\r\n\r\n    function setIron(value) {\r\n        if (value) {\r\n            iron = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>\r\n     * @param {Object} mpd - the manifest\r\n     */\r\n    function resolveManifestOnLoad(mpd) {\r\n        let elements;\r\n        // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided\r\n        converter = new X2JS({\r\n            escapeMode:         false,\r\n            attributePrefix:    '',\r\n            arrayAccessForm:    'property',\r\n            emptyNodeForm:      'object',\r\n            stripWhitespaces:   false,\r\n            enableToStringFunc: false,\r\n            ignoreRoot:         true,\r\n            matchers:           matchers\r\n        });\r\n\r\n        manifest = mpd;\r\n        elements = getElementsToResolve(manifest.Period_asArray, manifest, DashConstants.PERIOD, RESOLVE_TYPE_ONLOAD);\r\n        resolve(elements, DashConstants.PERIOD, RESOLVE_TYPE_ONLOAD);\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.XLINK_ELEMENT_LOADED, onXlinkElementLoaded, instance);\r\n\r\n        if (xlinkLoader) {\r\n            xlinkLoader.reset();\r\n            xlinkLoader = null;\r\n        }\r\n    }\r\n\r\n    function resolve(elements, type, resolveType) {\r\n        let resolveObject = {};\r\n        let element,\r\n            url;\r\n\r\n        resolveObject.elements = elements;\r\n        resolveObject.type = type;\r\n        resolveObject.resolveType = resolveType;\r\n        // If nothing to resolve, directly call allElementsLoaded\r\n        if (resolveObject.elements.length === 0) {\r\n            onXlinkAllElementsLoaded(resolveObject);\r\n        }\r\n        for (let i = 0; i < resolveObject.elements.length; i++) {\r\n            element = resolveObject.elements[i];\r\n            if (urlUtils.isHTTPURL(element.url)) {\r\n                url = element.url;\r\n            } else {\r\n                url = element.originalContent.BaseURL + element.url;\r\n            }\r\n            xlinkLoader.load(url, element, resolveObject);\r\n        }\r\n    }\r\n\r\n    function onXlinkElementLoaded(event) {\r\n        let element,\r\n            resolveObject;\r\n\r\n        const openingTag = '<response>';\r\n        const closingTag = '</response>';\r\n        let mergedContent = '';\r\n\r\n        element = event.element;\r\n        resolveObject = event.resolveObject;\r\n        // if the element resolved into content parse the content\r\n        if (element.resolvedContent) {\r\n            let index = 0;\r\n            // we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container\r\n            if (element.resolvedContent.indexOf('<?xml') === 0) {\r\n                index = element.resolvedContent.indexOf('?>') + 2; //find the closing position of the xml declaration, if it exists.\r\n            }\r\n            mergedContent = element.resolvedContent.substr(0,index) + openingTag + element.resolvedContent.substr(index) + closingTag;\r\n            element.resolvedContent = converter.xml_str2json(mergedContent);\r\n        }\r\n        if (isResolvingFinished(resolveObject)) {\r\n            onXlinkAllElementsLoaded(resolveObject);\r\n        }\r\n    }\r\n\r\n    // We got to wait till all elements of the current queue are resolved before merging back\r\n    function onXlinkAllElementsLoaded (resolveObject) {\r\n        let elements = [];\r\n        let i,\r\n            obj;\r\n\r\n        mergeElementsBack(resolveObject);\r\n        if (resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE) {\r\n            eventBus.trigger(Events.XLINK_READY, {manifest: manifest});\r\n        }\r\n        if (resolveObject.resolveType === RESOLVE_TYPE_ONLOAD) {\r\n            switch (resolveObject.type) {\r\n                // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel\r\n                case DashConstants.PERIOD:\r\n                    for (i = 0; i < manifest[DashConstants.PERIOD + '_asArray'].length; i++) {\r\n                        obj = manifest[DashConstants.PERIOD + '_asArray'][i];\r\n                        if (obj.hasOwnProperty(DashConstants.ADAPTATION_SET + '_asArray')) {\r\n                            elements = elements.concat(getElementsToResolve(obj[DashConstants.ADAPTATION_SET + '_asArray'], obj, DashConstants.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD));\r\n                        }\r\n                        if (obj.hasOwnProperty(DashConstants.EVENT_STREAM + '_asArray')) {\r\n                            elements = elements.concat(getElementsToResolve(obj[DashConstants.EVENT_STREAM + '_asArray'], obj, DashConstants.EVENT_STREAM, RESOLVE_TYPE_ONLOAD));\r\n                        }\r\n                    }\r\n                    resolve(elements, DashConstants.ADAPTATION_SET, RESOLVE_TYPE_ONLOAD);\r\n                    break;\r\n                case DashConstants.ADAPTATION_SET:\r\n                    // TODO: Resolve SegmentList here\r\n                    eventBus.trigger(Events.XLINK_READY, {manifest: manifest});\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Returns the elements with the specific resolve Type\r\n    function getElementsToResolve(elements, parentElement, type, resolveType) {\r\n        let toResolve = [];\r\n        let element,\r\n            i,\r\n            xlinkObject;\r\n        // first remove all the resolve-to-zero elements\r\n        for (i = elements.length - 1; i >= 0; i--) {\r\n            element = elements[i];\r\n            if (element.hasOwnProperty('xlink:href') && element['xlink:href'] === RESOLVE_TO_ZERO) {\r\n                elements.splice(i, 1);\r\n            }\r\n        }\r\n        // now get the elements with the right resolve type\r\n        for (i = 0; i < elements.length; i++) {\r\n            element = elements[i];\r\n            if (element.hasOwnProperty('xlink:href') && element.hasOwnProperty('xlink:actuate') && element['xlink:actuate'] === resolveType) {\r\n                xlinkObject = createXlinkObject(element['xlink:href'], parentElement, type, i, resolveType, element);\r\n                toResolve.push(xlinkObject);\r\n            }\r\n        }\r\n        return toResolve;\r\n    }\r\n\r\n    function mergeElementsBack(resolveObject) {\r\n        let resolvedElements = [];\r\n        let element,\r\n            type,\r\n            obj,\r\n            i,\r\n            j,\r\n            k;\r\n        // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending\r\n        for (i = resolveObject.elements.length - 1; i >= 0; i --) {\r\n            element = resolveObject.elements[i];\r\n            type = element.type + '_asArray';\r\n\r\n            // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes\r\n            if (!element.resolvedContent || isInappropriateTarget()) {\r\n                delete element.originalContent['xlink:actuate'];\r\n                delete element.originalContent['xlink:href'];\r\n                resolvedElements.push(element.originalContent);\r\n            }\r\n            // Element was successfully resolved\r\n            else if (element.resolvedContent) {\r\n                for (j = 0; j < element.resolvedContent[type].length; j++) {\r\n                    //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes\r\n                    obj = element.resolvedContent[type][j];\r\n                    resolvedElements.push(obj);\r\n                }\r\n            }\r\n            // Replace the old elements in the parent with the resolved ones\r\n            element.parentElement[type].splice(element.index, 1);\r\n            for (k = 0; k < resolvedElements.length; k++) {\r\n                element.parentElement[type].splice(element.index + k, 0, resolvedElements[k]);\r\n            }\r\n            resolvedElements = [];\r\n        }\r\n        if (resolveObject.elements.length > 0) {\r\n            iron.run(manifest);\r\n        }\r\n    }\r\n\r\n    function createXlinkObject(url, parentElement, type, index, resolveType, originalContent) {\r\n        return {\r\n            url: url,\r\n            parentElement: parentElement,\r\n            type: type,\r\n            index: index,\r\n            resolveType: resolveType,\r\n            originalContent: originalContent,\r\n            resolvedContent: null,\r\n            resolved: false\r\n        };\r\n    }\r\n\r\n    // Check if all pending requests are finished\r\n    function isResolvingFinished(elementsToResolve) {\r\n        let i,\r\n            obj;\r\n        for (i = 0; i < elementsToResolve.elements.length; i++) {\r\n            obj = elementsToResolve.elements[i];\r\n            if (obj.resolved === false) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // TODO : Do some syntax check here if the target is valid or not\r\n    function isInappropriateTarget() {\r\n        return false;\r\n    }\r\n\r\n    instance = {\r\n        resolveManifestOnLoad: resolveManifestOnLoad,\r\n        setMatchers: setMatchers,\r\n        setIron: setIron,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nXlinkController.__dashjs_factory_name = 'XlinkController';\r\nexport default FactoryMaker.getClassFactory(XlinkController);\r\n"]}