{"version":3,"sources":["../../../../../src/streaming/controllers/FragmentController.js"],"names":["FragmentController","config","context","eventBus","getInstance","errHandler","mediaPlayerModel","metricsModel","instance","logger","fragmentModels","setup","getLogger","resetInitialSettings","on","Events","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","FRAGMENT_LOADING_PROGRESS","getModel","type","model","create","fragmentLoader","requestModifier","isInitializationRequest","request","HTTPRequest","INIT_SEGMENT_TYPE","reset","off","createDataChunk","bytes","streamId","endFragment","chunk","DataChunk","mediaInfo","segmentType","start","startTime","duration","end","index","quality","representationId","e","mediaType","sender","response","isInit","streamInfo","error","Constants","AUDIO","VIDEO","FRAGMENTED_TEXT","trigger","SERVICE_LOCATION_BLACKLIST_ADD","entry","serviceLocation","warn","id","INIT_FRAGMENT_LOADED","MEDIA_FRAGMENT_LOADED","fragmentModel","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"FragmentController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\r\nimport DataChunk from '../vo/DataChunk';\r\nimport FragmentModel from '../models/FragmentModel';\r\nimport FragmentLoader from '../FragmentLoader';\r\nimport RequestModifier from '../utils/RequestModifier';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction FragmentController( config ) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    const errHandler = config.errHandler;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const metricsModel = config.metricsModel;\r\n\r\n    let instance,\r\n        logger,\r\n        fragmentModels;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\r\n        eventBus.on(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\r\n    }\r\n\r\n    function getModel(type) {\r\n        let model = fragmentModels[type];\r\n        if (!model) {\r\n            model = FragmentModel(context).create({\r\n                metricsModel: metricsModel,\r\n                fragmentLoader: FragmentLoader(context).create({\r\n                    metricsModel: metricsModel,\r\n                    mediaPlayerModel: mediaPlayerModel,\r\n                    errHandler: errHandler,\r\n                    requestModifier: RequestModifier(context).getInstance()\r\n                })\r\n            });\r\n\r\n            fragmentModels[type] = model;\r\n        }\r\n\r\n        return model;\r\n    }\r\n\r\n    function isInitializationRequest(request) {\r\n        return (request && request.type && request.type === HTTPRequest.INIT_SEGMENT_TYPE);\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        for (let model in fragmentModels) {\r\n            fragmentModels[model].reset();\r\n        }\r\n        fragmentModels = {};\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\r\n        eventBus.off(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function createDataChunk(bytes, request, streamId, endFragment) {\r\n        const chunk = new DataChunk();\r\n\r\n        chunk.streamId = streamId;\r\n        chunk.mediaInfo = request.mediaInfo;\r\n        chunk.segmentType = request.type;\r\n        chunk.start = request.startTime;\r\n        chunk.duration = request.duration;\r\n        chunk.end = chunk.start + chunk.duration;\r\n        chunk.bytes = bytes;\r\n        chunk.index = request.index;\r\n        chunk.quality = request.quality;\r\n        chunk.representationId = request.representationId;\r\n        chunk.endFragment = endFragment;\r\n\r\n        return chunk;\r\n    }\r\n\r\n    function onFragmentLoadingCompleted(e) {\r\n        if (fragmentModels[e.request.mediaType] !== e.sender) {\r\n            return;\r\n        }\r\n\r\n        const request = e.request;\r\n        const bytes = e.response;\r\n        const isInit = isInitializationRequest(request);\r\n        const streamInfo = request.mediaInfo.streamInfo;\r\n\r\n        if (e.error) {\r\n            if (e.request.mediaType === Constants.AUDIO || e.request.mediaType === Constants.VIDEO || e.request.mediaType === Constants.FRAGMENTED_TEXT) {\r\n                // add service location to blacklist controller - only for audio or video. text should not set errors\r\n                eventBus.trigger(Events.SERVICE_LOCATION_BLACKLIST_ADD, {entry: e.request.serviceLocation});\r\n            }\r\n        }\r\n\r\n        if (!bytes || !streamInfo) {\r\n            logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\r\n            return;\r\n        }\r\n        const chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== Events.FRAGMENT_LOADING_PROGRESS);\r\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED, {\r\n            chunk: chunk,\r\n            fragmentModel: e.sender\r\n        });\r\n    }\r\n\r\n    instance = {\r\n        getModel: getModel,\r\n        isInitializationRequest: isInitializationRequest,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nFragmentController.__dashjs_factory_name = 'FragmentController';\r\nexport default FactoryMaker.getClassFactory(FragmentController);\r\n"]}