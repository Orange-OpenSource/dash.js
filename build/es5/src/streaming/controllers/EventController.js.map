{"version":3,"sources":["../../../../../src/streaming/controllers/EventController.js"],"names":["EventController","MPD_RELOAD_SCHEME","MPD_RELOAD_VALUE","MPD_CALLBACK_SCHEME","MPD_CALLBACK_VALUE","context","eventBus","getInstance","instance","logger","inlineEvents","inbandEvents","activeEvents","eventInterval","refreshDelay","lastEventTimerCall","manifestUpdater","playbackController","isStarted","setup","getLogger","resetInitialSettings","Date","now","checkSetConfigCall","Error","stop","clearInterval","start","debug","isNaN","setInterval","onEventTimer","addInlineEvents","values","i","length","event","id","addInbandEvents","eventStream","schemeIdUri","undefined","handleManifestReloadEvent","value","timescale","validUntil","presentationTime","newDuration","NaN","duration","info","trigger","Events","MANIFEST_VALIDITY_CHANGED","newManifestValidAfter","removeEvents","currentVideoTime","getTime","eventIds","Object","keys","eventId","curr","presentationTimeThreshold","triggerEvents","refreshManifest","sendCallbackRequest","url","loader","create","load","method","request","responseType","events","presentationTimeDelta","messageData","setConfig","config","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"EventController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport XHRLoader from '../net/XHRLoader';\r\n\r\nfunction EventController() {\r\n\r\n    const MPD_RELOAD_SCHEME = 'urn:mpeg:dash:event:2012';\r\n    const MPD_RELOAD_VALUE = 1;\r\n\r\n    const MPD_CALLBACK_SCHEME = 'urn:mpeg:dash:event:callback:2015';\r\n    const MPD_CALLBACK_VALUE = 1;\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        logger,\r\n        inlineEvents, // Holds all Inline Events not triggered yet\r\n        inbandEvents, // Holds all Inband Events not triggered yet\r\n        activeEvents, // Holds all Events currently running\r\n        eventInterval, // variable holding the setInterval\r\n        refreshDelay, // refreshTime for the setInterval\r\n        lastEventTimerCall,\r\n        manifestUpdater,\r\n        playbackController,\r\n        isStarted;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        isStarted = false;\r\n        inlineEvents = {};\r\n        inbandEvents = {};\r\n        activeEvents = {};\r\n        eventInterval = null;\r\n        refreshDelay = 100;\r\n        lastEventTimerCall = Date.now() / 1000;\r\n    }\r\n\r\n    function checkSetConfigCall() {\r\n        if (!manifestUpdater || !playbackController) {\r\n            throw new Error('setConfig function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function stop() {\r\n        if (eventInterval !== null && isStarted) {\r\n            clearInterval(eventInterval);\r\n            eventInterval = null;\r\n            isStarted = false;\r\n        }\r\n    }\r\n\r\n    function start() {\r\n        checkSetConfigCall();\r\n        logger.debug('Start Event Controller');\r\n        if (!isStarted && !isNaN(refreshDelay)) {\r\n            isStarted = true;\r\n            eventInterval = setInterval(onEventTimer, refreshDelay);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted\r\n     * @param {Array.<Object>} values\r\n     */\r\n    function addInlineEvents(values) {\r\n        checkSetConfigCall();\r\n\r\n        inlineEvents = {};\r\n\r\n        if (values) {\r\n            for (let i = 0; i < values.length; i++) {\r\n                let event = values[i];\r\n                inlineEvents[event.id] = event;\r\n                logger.debug('Add inline event with id ' + event.id);\r\n            }\r\n        }\r\n        logger.debug('Added ' + values.length + ' inline events');\r\n    }\r\n\r\n    /**\r\n     * i.e. processing of any one event message box with the same id is sufficient\r\n     * @param {Array.<Object>} values\r\n     */\r\n    function addInbandEvents(values) {\r\n        checkSetConfigCall();\r\n\r\n        for (let i = 0; i < values.length; i++) {\r\n            let event = values[i];\r\n            if (!(event.id in inbandEvents)) {\r\n                if (event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && inbandEvents[event.id] === undefined) {\r\n                    handleManifestReloadEvent(event);\r\n                }\r\n                inbandEvents[event.id] = event;\r\n                logger.debug('Add inband event with id ' + event.id);\r\n            } else {\r\n                logger.debug('Repeated event with id ' + event.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleManifestReloadEvent(event) {\r\n        if (event.eventStream.value == MPD_RELOAD_VALUE) {\r\n            const timescale = event.eventStream.timescale || 1;\r\n            const validUntil = event.presentationTime / timescale;\r\n            let newDuration;\r\n            if (event.presentationTime == 0xFFFFFFFF) {//0xFF... means remaining duration unknown\r\n                newDuration = NaN;\r\n            } else {\r\n                newDuration = (event.presentationTime + event.duration) / timescale;\r\n            }\r\n            logger.info('Manifest validity changed: Valid until: ' + validUntil + '; remaining duration: ' + newDuration);\r\n            eventBus.trigger(Events.MANIFEST_VALIDITY_CHANGED, {\r\n                id: event.id,\r\n                validUntil: validUntil,\r\n                newDuration: newDuration,\r\n                newManifestValidAfter: NaN //event.message_data - this is an arraybuffer with a timestring in it, but not used yet\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove events which are over from the list\r\n     */\r\n    function removeEvents() {\r\n        if (activeEvents) {\r\n            let currentVideoTime = playbackController.getTime();\r\n            let eventIds = Object.keys(activeEvents);\r\n\r\n            for (let i = 0; i < eventIds.length; i++) {\r\n                let eventId = eventIds[i];\r\n                let curr = activeEvents[eventId];\r\n                if (curr !== null && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime) {\r\n                    logger.debug('Remove Event ' + eventId + ' at time ' + currentVideoTime);\r\n                    curr = null;\r\n                    delete activeEvents[eventId];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate through the eventList and trigger/remove the events\r\n     */\r\n    function onEventTimer() {\r\n        var currentVideoTime = playbackController.getTime();\r\n        var presentationTimeThreshold = (currentVideoTime - lastEventTimerCall);\r\n        lastEventTimerCall = currentVideoTime;\r\n\r\n        triggerEvents(inbandEvents, presentationTimeThreshold, currentVideoTime);\r\n        triggerEvents(inlineEvents, presentationTimeThreshold, currentVideoTime);\r\n        removeEvents();\r\n    }\r\n\r\n    function refreshManifest() {\r\n        checkSetConfigCall();\r\n        manifestUpdater.refreshManifest();\r\n    }\r\n\r\n    function sendCallbackRequest(url) {\r\n        let loader = XHRLoader(context).create({});\r\n        loader.load({\r\n            method: 'get',\r\n            url: url,\r\n            request: {\r\n                responseType: 'arraybuffer'\r\n            }});\r\n    }\r\n\r\n    function triggerEvents(events, presentationTimeThreshold, currentVideoTime) {\r\n        var presentationTime;\r\n\r\n        /* == Trigger events that are ready == */\r\n        if (events) {\r\n            let eventIds = Object.keys(events);\r\n            for (let i = 0; i < eventIds.length; i++) {\r\n                let eventId = eventIds[i];\r\n                let curr = events[eventId];\r\n\r\n                if (curr !== undefined) {\r\n                    presentationTime = curr.presentationTime / curr.eventStream.timescale;\r\n                    if (presentationTime === 0 || (presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime)) {\r\n                        logger.debug('Start Event ' + eventId + ' at ' + currentVideoTime);\r\n                        if (curr.duration > 0) {\r\n                            activeEvents[eventId] = curr;\r\n                        }\r\n                        if (curr.eventStream.schemeIdUri == MPD_RELOAD_SCHEME && curr.eventStream.value == MPD_RELOAD_VALUE) {\r\n                            if (curr.duration !== 0 || curr.presentationTimeDelta !== 0) { //If both are set to zero, it indicates the media is over at this point. Don't reload the manifest.\r\n                                refreshManifest();\r\n                            }\r\n                        } else if (curr.eventStream.schemeIdUri == MPD_CALLBACK_SCHEME && curr.eventStream.value == MPD_CALLBACK_VALUE) {\r\n                            sendCallbackRequest(curr.messageData);\r\n                        } else {\r\n                            eventBus.trigger(curr.eventStream.schemeIdUri, {event: curr});\r\n                        }\r\n                        delete events[eventId];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.manifestUpdater) {\r\n            manifestUpdater = config.manifestUpdater;\r\n        }\r\n\r\n        if (config.playbackController) {\r\n            playbackController = config.playbackController;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        stop();\r\n        resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        addInlineEvents: addInlineEvents,\r\n        addInbandEvents: addInbandEvents,\r\n        stop: stop,\r\n        start: start,\r\n        setConfig: setConfig,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nEventController.__dashjs_factory_name = 'EventController';\r\nexport default FactoryMaker.getClassFactory(EventController);\r\n"]}