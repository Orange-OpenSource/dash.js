{"version":3,"sources":["../../../../../src/streaming/controllers/MediaSourceController.js"],"names":["FactoryMaker","Debug","MediaSourceController","instance","logger","context","setup","getInstance","getLogger","createMediaSource","hasWebKit","window","hasMediaSource","MediaSource","WebKitMediaSource","attachMediaSource","source","videoModel","objectURL","URL","createObjectURL","setSource","detachMediaSource","setDuration","value","duration","setSeekable","start","end","setLiveSeekableRange","clearLiveSeekableRange","readyState","signalEndOfStream","buffers","sourceBuffers","ln","length","i","updating","buffered","info","endOfStream","__dashjs_factory_name","getSingletonFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,aAAP,KAAyB,yBAAzB,CACA,MAAOC,MAAP,KAAkB,kBAAlB,CAEA,QAASC,sBAAT,EAAiC,CAE7B,GAAIC,SAAJ,CACIC,MADJ,CAGA,KAAMC,SAAU,KAAKA,OAArB,CAEA,QAASC,MAAT,EAAiB,CACbF,OAASH,MAAMI,OAAN,EAAeE,WAAf,GAA6BC,SAA7B,CAAuCL,QAAvC,CAAT,CACH,CAED,QAASM,kBAAT,EAA6B,CAEzB,GAAIC,WAAa,qBAAuBC,OAAxC,CACA,GAAIC,gBAAkB,eAAiBD,OAAvC,CAEA,GAAIC,cAAJ,CAAoB,CAChB,MAAO,IAAIC,YAAJ,EAAP,CACH,CAFD,IAEO,IAAIH,SAAJ,CAAe,CAClB,MAAO,IAAII,kBAAJ,EAAP,CACH,CAED,MAAO,KAAP,CACH,CAED,QAASC,kBAAT,CAA2BC,MAA3B,CAAmCC,UAAnC,CAA+C,CAE3C,GAAIC,WAAYP,OAAOQ,GAAP,CAAWC,eAAX,CAA2BJ,MAA3B,CAAhB,CAEAC,WAAWI,SAAX,CAAqBH,SAArB,EAEA,MAAOA,UAAP,CACH,CAED,QAASI,kBAAT,CAA2BL,UAA3B,CAAuC,CACnCA,WAAWI,SAAX,CAAqB,IAArB,EACH,CAED,QAASE,YAAT,CAAqBP,MAArB,CAA6BQ,KAA7B,CAAoC,CAEhC,GAAIR,OAAOS,QAAP,EAAmBD,KAAvB,CACIR,OAAOS,QAAP,CAAkBD,KAAlB,CAEJ,MAAOR,QAAOS,QAAd,CACH,CAED,QAASC,YAAT,CAAqBV,MAArB,CAA6BW,KAA7B,CAAoCC,GAApC,CAAyC,CACrC,GAAIZ,QAAU,MAAOA,QAAOa,oBAAd,GAAuC,UAAjD,EAA+D,MAAOb,QAAOc,sBAAd,GAAyC,UAAxG,EACId,OAAOe,UAAP,GAAsB,MAD1B,EACoCJ,OAAS,CAD7C,EACkDA,MAAQC,GAD9D,CACmE,CAC/DZ,OAAOc,sBAAP,GACAd,OAAOa,oBAAP,CAA4BF,KAA5B,CAAmCC,GAAnC,EACH,CACJ,CAED,QAASI,kBAAT,CAA2BhB,MAA3B,CAAmC,CAE/B,GAAIiB,SAAUjB,OAAOkB,aAArB,CACA,KAAMC,IAAKF,QAAQG,MAAnB,CAEA,GAAIpB,OAAOe,UAAP,GAAsB,MAA1B,CAAkC,CAC9B,OACH,CAED,IAAK,GAAIM,GAAI,CAAb,CAAgBA,EAAIF,EAApB,CAAwBE,GAAxB,CAA6B,CACzB,GAAIJ,QAAQI,CAAR,EAAWC,QAAf,CAAyB,CACrB,OACH,CACD,GAAIL,QAAQI,CAAR,EAAWE,QAAX,CAAoBH,MAApB,GAA+B,CAAnC,CAAsC,CAClC,OACH,CACJ,CACDhC,OAAOoC,IAAP,CAAY,iCAAZ,EACAxB,OAAOyB,WAAP,GACH,CAEDtC,SAAW,CACPM,kBAAmBA,iBADZ,CAEPM,kBAAmBA,iBAFZ,CAGPO,kBAAmBA,iBAHZ,CAIPC,YAAaA,WAJN,CAKPG,YAAaA,WALN,CAMPM,kBAAmBA,iBANZ,CAAX,CASA1B,QAEA,MAAOH,SAAP,CACH,CAEDD,sBAAsBwC,qBAAtB,CAA8C,uBAA9C,CACA,cAAe1C,cAAa2C,mBAAb,CAAiCzC,qBAAjC,CAAf","file":"MediaSourceController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\n\r\nfunction MediaSourceController() {\r\n\r\n    let instance,\r\n        logger;\r\n\r\n    const context = this.context;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function createMediaSource() {\r\n\r\n        let hasWebKit = ('WebKitMediaSource' in window);\r\n        let hasMediaSource = ('MediaSource' in window);\r\n\r\n        if (hasMediaSource) {\r\n            return new MediaSource();\r\n        } else if (hasWebKit) {\r\n            return new WebKitMediaSource();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function attachMediaSource(source, videoModel) {\r\n\r\n        let objectURL = window.URL.createObjectURL(source);\r\n\r\n        videoModel.setSource(objectURL);\r\n\r\n        return objectURL;\r\n    }\r\n\r\n    function detachMediaSource(videoModel) {\r\n        videoModel.setSource(null);\r\n    }\r\n\r\n    function setDuration(source, value) {\r\n\r\n        if (source.duration != value)\r\n            source.duration = value;\r\n\r\n        return source.duration;\r\n    }\r\n\r\n    function setSeekable(source, start, end) {\r\n        if (source && typeof source.setLiveSeekableRange === 'function' && typeof source.clearLiveSeekableRange === 'function' &&\r\n                source.readyState === 'open' && start >= 0 && start < end) {\r\n            source.clearLiveSeekableRange();\r\n            source.setLiveSeekableRange(start, end);\r\n        }\r\n    }\r\n\r\n    function signalEndOfStream(source) {\r\n\r\n        let buffers = source.sourceBuffers;\r\n        const ln = buffers.length;\r\n\r\n        if (source.readyState !== 'open') {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < ln; i++) {\r\n            if (buffers[i].updating) {\r\n                return;\r\n            }\r\n            if (buffers[i].buffered.length === 0) {\r\n                return;\r\n            }\r\n        }\r\n        logger.info('call to mediaSource endOfStream');\r\n        source.endOfStream();\r\n    }\r\n\r\n    instance = {\r\n        createMediaSource: createMediaSource,\r\n        attachMediaSource: attachMediaSource,\r\n        detachMediaSource: detachMediaSource,\r\n        setDuration: setDuration,\r\n        setSeekable: setSeekable,\r\n        signalEndOfStream: signalEndOfStream\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nMediaSourceController.__dashjs_factory_name = 'MediaSourceController';\r\nexport default FactoryMaker.getSingletonFactory(MediaSourceController);\r\n"]}