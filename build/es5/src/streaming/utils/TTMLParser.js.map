{"version":3,"sources":["../../../../../src/streaming/utils/TTMLParser.js"],"names":["FactoryMaker","Debug","EventBus","Events","fromXML","generateISD","TTMLParser","context","eventBus","getInstance","instance","logger","cueCounter","setup","getLogger","getCueID","id","parse","data","offsetTime","startTimeSegment","endTimeSegment","images","errorMsg","captionArray","startTime","endTime","i","content","embeddedImages","currentImageId","accumulated_image_data","metadataHandler","onOpenTag","ns","name","attrs","value","warn","onCloseTag","trim","onText","contents","Error","trigger","TTML_TO_PARSE","imsc1doc","msg","TTML_PARSED","ttmlString","ttmlDoc","mediaTimeEvents","getMediaTimeEvents","length","isd","error","some","topLevelContents","push","start","end","type","cueID","__dashjs_factory_name","getSingletonFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,aAAP,KAAyB,yBAAzB,CACA,MAAOC,MAAP,KAAkB,kBAAlB,CACA,MAAOC,SAAP,KAAqB,qBAArB,CACA,MAAOC,OAAP,KAAmB,0BAAnB,CACA,OAASC,OAAT,CAAkBC,WAAlB,KAAqC,MAArC,CAEA,QAASC,WAAT,EAAsB,CAElB,KAAMC,SAAU,KAAKA,OAArB,CACA,KAAMC,UAAWN,SAASK,OAAT,EAAkBE,WAAlB,EAAjB,CAEA;;SAGA,GAAIC,SAAJ,CACIC,MADJ,CAGA,GAAIC,YAAa,CAAjB,CAAoB;AAEpB,QAASC,MAAT,EAAiB,CACbF,OAASV,MAAMM,OAAN,EAAeE,WAAf,GAA6BK,SAA7B,CAAuCJ,QAAvC,CAAT,CACH,CAED,QAASK,SAAT,EAAoB,CAChB,KAAMC,IAAK,YAAcJ,UAAzB,CACAA,aACA,MAAOI,GAAP,CACH,CAED;;;;;;;;OASA,QAASC,MAAT,CAAeC,IAAf,CAAqBC,UAArB,CAAiCC,gBAAjC,CAAmDC,cAAnD,CAAmEC,MAAnE,CAA2E,CACvE,GAAIC,UAAW,EAAf,CACA,KAAMC,cAAe,EAArB,CACA,GAAIC,UAAJ,CACIC,OADJ,CAEIC,CAFJ,CAIA,KAAMC,SAAU,EAAhB,CAEA,KAAMC,gBAAiB,EAAvB,CACA,GAAIC,gBAAiB,EAArB,CACA,GAAIC,wBAAyB,EAA7B,CACA,GAAIC,iBAAkB,CAElBC,UAAW,SAAUC,EAAV,CAAcC,IAAd,CAAoBC,KAApB,CAA2B,CAClC,GAAID,OAAS,OAAT,EAAoBD,KAAO,sDAA/B,CAAuF,CACnF,GAAI,CAACE,MAAM,YAAN,CAAD,EAAwBA,MAAM,YAAN,EAAoBC,KAApB,GAA8B,KAA1D,CAAiE,CAC7D1B,OAAO2B,IAAP,CAAY,sCAAZ,EACA,OACH,CACDR,eAAiBM,MAAM,yCAAN,EAAiDC,KAAlE,CACH,CACJ,CAViB,CAYlBE,WAAY,UAAY,CACpB,GAAIT,cAAJ,CAAoB,CAChBD,eAAeC,cAAf,EAAiCC,uBAAuBS,IAAvB,EAAjC,CACH,CACDT,uBAAyB,EAAzB,CACAD,eAAiB,EAAjB,CACH,CAlBiB,CAoBlBW,OAAQ,SAAUC,QAAV,CAAoB,CACxB,GAAIZ,cAAJ,CAAoB,CAChBC,uBAAyBA,uBAAyBW,QAAlD,CACH,CACJ,CAxBiB,CAAtB,CA2BA,GAAI,CAACxB,IAAL,CAAW,CACPK,SAAW,uBAAX,CACA,KAAM,IAAIoB,MAAJ,CAAUpB,QAAV,CAAN,CACH,CAEDK,QAAQV,IAAR,CAAeA,IAAf,CAEAV,SAASoC,OAAT,CAAiBzC,OAAO0C,aAAxB,CAAuCjB,OAAvC,EAEA,KAAMkB,UAAW1C,QAAQwB,QAAQV,IAAhB,CAAsB,SAAU6B,GAAV,CAAe,CAClDxB,SAAWwB,GAAX,CACH,CAFgB,CAEdf,eAFc,CAAjB,CAIAxB,SAASoC,OAAT,CAAiBzC,OAAO6C,WAAxB,CAAqC,CAACC,WAAYrB,QAAQV,IAArB,CAA2BgC,QAASJ,QAApC,CAArC,EAEA,KAAMK,iBAAkBL,SAASM,kBAAT,EAAxB,CAEA,IAAKzB,EAAI,CAAT,CAAYA,EAAIwB,gBAAgBE,MAAhC,CAAwC1B,GAAxC,CAA6C,CACzC,GAAI2B,KAAMjD,YAAYyC,QAAZ,CAAsBK,gBAAgBxB,CAAhB,CAAtB,CAA0C,SAAU4B,KAAV,CAAiB,CACjEhC,SAAWgC,KAAX,CACH,CAFS,CAAV,CAIA,GAAID,IAAIZ,QAAJ,CAAac,IAAb,CAAkBC,kBAAoBA,iBAAiBf,QAAjB,CAA0BW,MAAhE,CAAJ,CAA6E,CACzE;AACA5B,UAAa0B,gBAAgBxB,CAAhB,EAAqBR,UAAtB,CAAoCC,gBAApC,CAAuDA,gBAAvD,CAA2E+B,gBAAgBxB,CAAhB,EAAqBR,UAA5G,CACAO,QAAWyB,gBAAgBxB,EAAI,CAApB,EAAyBR,UAA1B,CAAwCE,cAAxC,CAAyDA,cAAzD,CAA2E8B,gBAAgBxB,EAAI,CAApB,EAAyBR,UAA9G,CAEA,GAAIM,UAAYC,OAAhB,CAAyB,CACrBF,aAAakC,IAAb,CAAkB,CACdC,MAAOlC,SADO,CAEdmC,IAAKlC,OAFS,CAGdmC,KAAM,MAHQ,CAIdC,MAAO/C,UAJO,CAKduC,IAAKA,GALS,CAMdhC,OAAQA,MANM,CAOdO,eAAgBA,cAPF,CAAlB,EASH,CACJ,CACJ,CAED,GAAIN,WAAa,EAAjB,CAAqB,CACjBZ,OAAO4C,KAAP,CAAahC,QAAb,EACA,KAAM,IAAIoB,MAAJ,CAAUpB,QAAV,CAAN,CACH,CAED,MAAOC,aAAP,CACH,CAEDd,SAAW,CACPO,MAAOA,KADA,CAAX,CAIAJ,QACA,MAAOH,SAAP,CACH,CACDJ,WAAWyD,qBAAX,CAAmC,YAAnC,CACA,cAAe/D,cAAagE,mBAAb,CAAiC1D,UAAjC,CAAf","file":"TTMLParser.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport { fromXML, generateISD } from 'imsc';\r\n\r\nfunction TTMLParser() {\r\n\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    /*\r\n     * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\r\n     * */\r\n    let instance,\r\n        logger;\r\n\r\n    let cueCounter = 0; // Used to give every cue a unique ID.\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function getCueID() {\r\n        const id = 'cue_TTML_' + cueCounter;\r\n        cueCounter++;\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Parse the raw data and process it to return the HTML element representing the cue.\r\n     * Return the region to be processed and controlled (hide/show) by the caption controller.\r\n     * @param {string} data - raw data received from the TextSourceBuffer\r\n     * @param {number} offsetTime - offset time to apply to cue time\r\n     * @param {integer} startTimeSegment - startTime for the current segment\r\n     * @param {integer} endTimeSegment - endTime for the current segment\r\n     * @param {Array} images - images array referenced by subs MP4 box\r\n     */\r\n    function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\r\n        let errorMsg = '';\r\n        const captionArray = [];\r\n        let startTime,\r\n            endTime,\r\n            i;\r\n\r\n        const content = {};\r\n\r\n        const embeddedImages = {};\r\n        let currentImageId = '';\r\n        let accumulated_image_data = '';\r\n        let metadataHandler = {\r\n\r\n            onOpenTag: function (ns, name, attrs) {\r\n                if (name === 'image' && ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt') {\r\n                    if (!attrs[' imagetype'] || attrs[' imagetype'].value !== 'PNG') {\r\n                        logger.warn('smpte-tt imagetype != PNG. Discarded');\r\n                        return;\r\n                    }\r\n                    currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\r\n                }\r\n            },\r\n\r\n            onCloseTag: function () {\r\n                if (currentImageId) {\r\n                    embeddedImages[currentImageId] = accumulated_image_data.trim();\r\n                }\r\n                accumulated_image_data = '';\r\n                currentImageId = '';\r\n            },\r\n\r\n            onText: function (contents) {\r\n                if (currentImageId) {\r\n                    accumulated_image_data = accumulated_image_data + contents;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (!data) {\r\n            errorMsg = 'no ttml data to parse';\r\n            throw new Error(errorMsg);\r\n        }\r\n\r\n        content.data = data;\r\n\r\n        eventBus.trigger(Events.TTML_TO_PARSE, content);\r\n\r\n        const imsc1doc = fromXML(content.data, function (msg) {\r\n            errorMsg = msg;\r\n        }, metadataHandler);\r\n\r\n        eventBus.trigger(Events.TTML_PARSED, {ttmlString: content.data, ttmlDoc: imsc1doc});\r\n\r\n        const mediaTimeEvents = imsc1doc.getMediaTimeEvents();\r\n\r\n        for (i = 0; i < mediaTimeEvents.length; i++) {\r\n            let isd = generateISD(imsc1doc, mediaTimeEvents[i], function (error) {\r\n                errorMsg = error;\r\n            });\r\n\r\n            if (isd.contents.some(topLevelContents => topLevelContents.contents.length)) {\r\n                //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\r\n                startTime = (mediaTimeEvents[i] + offsetTime) < startTimeSegment ? startTimeSegment : (mediaTimeEvents[i] + offsetTime);\r\n                endTime = (mediaTimeEvents[i + 1] + offsetTime) > endTimeSegment ? endTimeSegment : (mediaTimeEvents[i + 1] + offsetTime);\r\n\r\n                if (startTime < endTime) {\r\n                    captionArray.push({\r\n                        start: startTime,\r\n                        end: endTime,\r\n                        type: 'html',\r\n                        cueID: getCueID(),\r\n                        isd: isd,\r\n                        images: images,\r\n                        embeddedImages: embeddedImages\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errorMsg !== '') {\r\n            logger.error(errorMsg);\r\n            throw new Error(errorMsg);\r\n        }\r\n\r\n        return captionArray;\r\n    }\r\n\r\n    instance = {\r\n        parse: parse\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\r\nexport default FactoryMaker.getSingletonFactory(TTMLParser);\r\n"]}