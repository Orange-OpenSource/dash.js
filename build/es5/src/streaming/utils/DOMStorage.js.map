{"version":3,"sources":["../../../../../src/streaming/utils/DOMStorage.js"],"names":["FactoryMaker","Debug","Constants","legacyKeysAndReplacements","oldKey","newKey","LOCAL_STORAGE_BITRATE_KEY_TEMPLATE","LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE","STORAGE_TYPE_LOCAL","STORAGE_TYPE_SESSION","LAST_BITRATE","LAST_MEDIA_SETTINGS","DOMStorage","config","context","mediaPlayerModel","instance","logger","supported","setup","getInstance","getLogger","translateLegacyKeys","isSupported","type","undefined","testKey","testValue","storage","window","error","warn","message","setItem","removeItem","forEach","entry","value","localStorage","getItem","e","getTimestamp","ten_minutes_ms","Math","round","Date","getTime","canStore","storageType","key","enabled","checkConfig","hasOwnProperty","Error","MISSING_CONFIG_ERROR","getSavedMediaSettings","settings","replace","obj","JSON","parse","isExpired","parseInt","timestamp","getLastMediaSettingsCachingInfo","ttl","getSavedBitrateSettings","savedBitrate","NaN","bitrate","parseFloat","isNaN","debug","setSavedMediaSettings","stringify","setSavedBitrateSettings","toFixed","__dashjs_factory_name","factory","getSingletonFactory"],"mappings":"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","file":"DOMStorage.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Debug from '../../core/Debug';\r\nimport Constants from '../constants/Constants';\r\n\r\nconst legacyKeysAndReplacements = [\r\n    { oldKey: 'dashjs_vbitrate',  newKey: 'dashjs_video_bitrate' },\r\n    { oldKey: 'dashjs_abitrate',  newKey: 'dashjs_audio_bitrate' },\r\n    { oldKey: 'dashjs_vsettings', newKey: 'dashjs_video_settings' },\r\n    { oldKey: 'dashjs_asettings', newKey: 'dashjs_audio_settings' }\r\n];\r\n\r\nconst LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = 'dashjs_?_bitrate';\r\nconst LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = 'dashjs_?_settings';\r\n\r\nconst STORAGE_TYPE_LOCAL = 'localStorage';\r\nconst STORAGE_TYPE_SESSION = 'sessionStorage';\r\nconst LAST_BITRATE = 'LastBitrate';\r\nconst LAST_MEDIA_SETTINGS = 'LastMediaSettings';\r\n\r\nfunction DOMStorage(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n\r\n    let instance,\r\n        logger,\r\n        supported;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        translateLegacyKeys();\r\n    }\r\n\r\n    //type can be local, session\r\n    function isSupported(type) {\r\n        if (supported !== undefined) return supported;\r\n\r\n        supported = false;\r\n\r\n        const testKey = '1';\r\n        const testValue = '1';\r\n        let storage;\r\n\r\n        try {\r\n            if (typeof window !== 'undefined') {\r\n                storage = window[type];\r\n            }\r\n        } catch (error) {\r\n            logger.warn('DOMStorage access denied: ' + error.message);\r\n            return supported;\r\n        }\r\n\r\n        if (!storage || (type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION)) {\r\n            return supported;\r\n        }\r\n\r\n        /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.\r\n         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an\r\n\r\n         Check if the storage can be used\r\n         */\r\n        try {\r\n            storage.setItem(testKey, testValue);\r\n            storage.removeItem(testKey);\r\n            supported = true;\r\n        } catch (error) {\r\n            logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);\r\n        }\r\n\r\n        return supported;\r\n    }\r\n\r\n    function translateLegacyKeys() {\r\n        if (isSupported(STORAGE_TYPE_LOCAL)) {\r\n            legacyKeysAndReplacements.forEach(entry => {\r\n                const value = localStorage.getItem(entry.oldKey);\r\n\r\n                if (value) {\r\n                    localStorage.removeItem(entry.oldKey);\r\n\r\n                    try {\r\n                        localStorage.setItem(entry.newKey, value);\r\n                    } catch (e) {\r\n                        logger.error(e.message);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user\r\n    function getTimestamp() {\r\n        const ten_minutes_ms = 60 * 1000 * 10;\r\n        return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;\r\n    }\r\n\r\n    function canStore(storageType, key) {\r\n        return isSupported(storageType) && mediaPlayerModel['get' + key + 'CachingInfo']().enabled;\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!mediaPlayerModel || !mediaPlayerModel.hasOwnProperty('getLastMediaSettingsCachingInfo')) {\r\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\r\n        }\r\n    }\r\n\r\n    function getSavedMediaSettings(type) {\r\n        checkConfig();\r\n        //Checks local storage to see if there is valid, non-expired media settings\r\n        if (!canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) return null;\r\n\r\n        let settings = null;\r\n        const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\r\n        try {\r\n            const obj = JSON.parse(localStorage.getItem(key)) || {};\r\n            const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || false;\r\n            settings = obj.settings;\r\n\r\n            if (isExpired) {\r\n                localStorage.removeItem(key);\r\n                settings = null;\r\n            }\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n        return settings;\r\n    }\r\n\r\n    function getSavedBitrateSettings(type) {\r\n        let savedBitrate = NaN;\r\n\r\n        checkConfig();\r\n\r\n        //Checks local storage to see if there is valid, non-expired bit rate\r\n        //hinting from the last play session to use as a starting bit rate.\r\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {\r\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\r\n            try {\r\n                const obj = JSON.parse(localStorage.getItem(key)) || {};\r\n                const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || false;\r\n                const bitrate = parseFloat(obj.bitrate);\r\n\r\n                if (!isNaN(bitrate) && !isExpired) {\r\n                    savedBitrate = bitrate;\r\n                    logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);\r\n                } else if (isExpired) {\r\n                    localStorage.removeItem(key);\r\n                }\r\n            } catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n        return savedBitrate;\r\n    }\r\n\r\n    function setSavedMediaSettings(type, value) {\r\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\r\n            const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\r\n            try {\r\n                localStorage.setItem(key, JSON.stringify({settings: value, timestamp: getTimestamp()}));\r\n            } catch (e) {\r\n                logger.error(e.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setSavedBitrateSettings(type, bitrate) {\r\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {\r\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\r\n            try {\r\n                localStorage.setItem(key, JSON.stringify({bitrate: bitrate.toFixed(3), timestamp: getTimestamp()}));\r\n            } catch (e) {\r\n                logger.error(e.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        getSavedBitrateSettings: getSavedBitrateSettings,\r\n        setSavedBitrateSettings: setSavedBitrateSettings,\r\n        getSavedMediaSettings: getSavedMediaSettings,\r\n        setSavedMediaSettings: setSavedMediaSettings\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nDOMStorage.__dashjs_factory_name = 'DOMStorage';\r\nconst factory = FactoryMaker.getSingletonFactory(DOMStorage);\r\nexport default factory;\r\n"]}