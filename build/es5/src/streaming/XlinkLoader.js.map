{"version":3,"sources":["../../../../src/streaming/XlinkLoader.js"],"names":["XlinkLoader","config","RESOLVE_TO_ZERO","context","eventBus","getInstance","httpLoader","create","errHandler","metricsModel","mediaPlayerModel","requestModifier","instance","load","url","element","resolveObject","report","content","resolveToZero","resolved","resolvedContent","trigger","Events","XLINK_ELEMENT_LOADED","error","DashJSError","Errors","XLINK_LOADER_LOADING_FAILURE_ERROR_CODE","XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE","request","TextRequest","HTTPRequest","XLINK_EXPANSION_TYPE","success","data","reset","abort","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,6C,uDACA,4C,qDACA,qDACA,6C,uDACA,0C,iDACA,6C,6CACA,kD,yDACA,6C,gIArCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCA,QAASA,YAAT,CAAqBC,MAArB,CAA6B,CAEzBA,OAASA,QAAU,EAAnB,CACA,GAAMC,iBAAkB,oCAAxB,CAEA,GAAMC,SAAW,KAAKA,OAAtB,CACA,GAAMC,UAAW,uBAASD,OAAT,EAAkBE,WAAlB,EAAjB,CAEA,GAAIC,YAAa,yBAAWH,OAAX,EAAoBI,MAApB,CAA2B,CACxCC,WAAYP,OAAOO,UADqB,CAExCC,aAAcR,OAAOQ,YAFmB,CAGxCC,iBAAkBT,OAAOS,gBAHe,CAIxCC,gBAAiBV,OAAOU,eAJgB,CAA3B,CAAjB,CAOA,GAAIC,gBAAJ,CAEA,QAASC,KAAT,CAAcC,GAAd,CAAmBC,OAAnB,CAA4BC,aAA5B,CAA2C,CACvC,GAAMC,QAAS,QAATA,OAAS,CAAUC,OAAV,CAAmBC,aAAnB,CAAkC,CAC7CJ,QAAQK,QAAR,CAAmB,IAAnB,CACAL,QAAQM,eAAR,CAA0BH,QAAUA,OAAV,CAAoB,IAA9C,CAEAd,SAASkB,OAAT,CAAiBC,iBAAOC,oBAAxB,CAA8C,CAC1CT,QAASA,OADiC,CAE1CC,cAAeA,aAF2B,CAG1CS,MAAOP,SAAWC,aAAX,CACH,IADG,CAEH,GAAIO,sBAAJ,CACIC,iBAAOC,uCADX,CAEID,iBAAOE,0CAAP,CAAoDf,GAFxD,CALsC,CAA9C,EAUH,CAdD,CAgBA,GAAIA,MAAQZ,eAAZ,CAA6B,CACzBe,OAAO,IAAP,CAAa,IAAb,EACH,CAFD,IAEO,CACH,GAAMa,SAAU,GAAIC,sBAAJ,CAAgBjB,GAAhB,CAAqBkB,yBAAYC,oBAAjC,CAAhB,CAEA3B,WAAWO,IAAX,CAAgB,CACZiB,QAASA,OADG,CAEZI,QAAS,iBAAUC,IAAV,CAAgB,CACrBlB,OAAOkB,IAAP,EACH,CAJW,CAKZV,MAAO,gBAAY,CACfR,OAAO,IAAP,EACH,CAPW,CAAhB,EASH,CACJ,CAED,QAASmB,MAAT,EAAiB,CACb,GAAI9B,UAAJ,CAAgB,CACZA,WAAW+B,KAAX,GACA/B,WAAa,IAAb,CACH,CACJ,CAEDM,SAAW,CACPC,KAAMA,IADC,CAEPuB,MAAOA,KAFA,CAAX,CAKA,MAAOxB,SAAP,CACH,CAEDZ,YAAYsC,qBAAZ,CAAoC,aAApC,C,gBACeC,uBAAaC,eAAb,CAA6BxC,WAA7B,C","file":"XlinkLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport DashJSError from './vo/DashJSError';\r\nimport HTTPLoader from './net/HTTPLoader';\r\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\r\nimport TextRequest from './vo/TextRequest';\r\nimport EventBus from '../core/EventBus';\r\nimport Events from '../core/events/Events';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\nimport Errors from '../core/errors/Errors';\r\n\r\nfunction XlinkLoader(config) {\r\n\r\n    config = config || {};\r\n    const RESOLVE_TO_ZERO = 'urn:mpeg:dash:resolve-to-zero:2013';\r\n\r\n    const context  = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let httpLoader = HTTPLoader(context).create({\r\n        errHandler: config.errHandler,\r\n        metricsModel: config.metricsModel,\r\n        mediaPlayerModel: config.mediaPlayerModel,\r\n        requestModifier: config.requestModifier\r\n    });\r\n\r\n    let instance;\r\n\r\n    function load(url, element, resolveObject) {\r\n        const report = function (content, resolveToZero) {\r\n            element.resolved = true;\r\n            element.resolvedContent = content ? content : null;\r\n\r\n            eventBus.trigger(Events.XLINK_ELEMENT_LOADED, {\r\n                element: element,\r\n                resolveObject: resolveObject,\r\n                error: content || resolveToZero ?\r\n                    null :\r\n                    new DashJSError(\r\n                        Errors.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE,\r\n                        Errors.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE + url\r\n                    )\r\n            });\r\n        };\r\n\r\n        if (url === RESOLVE_TO_ZERO) {\r\n            report(null, true);\r\n        } else {\r\n            const request = new TextRequest(url, HTTPRequest.XLINK_EXPANSION_TYPE);\r\n\r\n            httpLoader.load({\r\n                request: request,\r\n                success: function (data) {\r\n                    report(data);\r\n                },\r\n                error: function () {\r\n                    report(null);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (httpLoader) {\r\n            httpLoader.abort();\r\n            httpLoader = null;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        load: load,\r\n        reset: reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nXlinkLoader.__dashjs_factory_name = 'XlinkLoader';\r\nexport default FactoryMaker.getClassFactory(XlinkLoader);"]}