{"version":3,"sources":["../../../../src/streaming/FragmentLoader.js"],"names":["HTTPLoader","HeadRequest","DashJSError","EventBus","BoxParser","Events","Errors","FactoryMaker","FragmentLoader","config","context","eventBus","getInstance","instance","httpLoader","setup","boxParser","create","errHandler","metricsModel","mediaPlayerModel","requestModifier","useFetch","getLowLatencyEnabled","checkForExistence","request","report","success","trigger","CHECK_FOR_EXISTENCE_COMPLETED","exists","headRequest","url","load","error","data","LOADING_COMPLETED","response","sender","progress","event","LOADING_PROGRESS","stream","LOADING_DATA_PROGRESS","statusText","errorText","undefined","FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE","abort","LOADING_ABANDONED","mediaType","FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE","reset","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"FragmentLoader.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport HTTPLoader from './net/HTTPLoader';\r\nimport HeadRequest from './vo/HeadRequest';\r\nimport DashJSError from './vo/DashJSError';\r\nimport EventBus from './../core/EventBus';\r\nimport BoxParser from '../streaming/utils/BoxParser';\r\nimport Events from './../core/events/Events';\r\nimport Errors from './../core/errors/Errors';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\n\r\nfunction FragmentLoader(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n\r\n    let instance,\r\n        httpLoader;\r\n\r\n    function setup() {\r\n        const boxParser = BoxParser(context).getInstance();\r\n        httpLoader = HTTPLoader(context).create({\r\n            errHandler: config.errHandler,\r\n            metricsModel: config.metricsModel,\r\n            mediaPlayerModel: config.mediaPlayerModel,\r\n            requestModifier: config.requestModifier,\r\n            boxParser: boxParser,\r\n            useFetch: config.mediaPlayerModel.getLowLatencyEnabled()\r\n        });\r\n    }\r\n\r\n    function checkForExistence(request) {\r\n        const report = function (success) {\r\n            eventBus.trigger(\r\n                Events.CHECK_FOR_EXISTENCE_COMPLETED, {\r\n                    request: request,\r\n                    exists: success\r\n                }\r\n            );\r\n        };\r\n\r\n        if (request) {\r\n            let headRequest = new HeadRequest(request.url);\r\n\r\n            httpLoader.load({\r\n                request: headRequest,\r\n                success: function () {\r\n                    report(true);\r\n                },\r\n                error: function () {\r\n                    report(false);\r\n                }\r\n            });\r\n        } else {\r\n            report(false);\r\n        }\r\n    }\r\n\r\n    function load(request) {\r\n        const report = function (data, error) {\r\n            eventBus.trigger(Events.LOADING_COMPLETED, {\r\n                request: request,\r\n                response: data || null,\r\n                error: error || null,\r\n                sender: instance\r\n            });\r\n        };\r\n\r\n        if (request) {\r\n            httpLoader.load({\r\n                request: request,\r\n                progress: function (event) {\r\n                    eventBus.trigger(Events.LOADING_PROGRESS, {\r\n                        request: request,\r\n                        stream: event.stream\r\n                    });\r\n                    if (event.data) {\r\n                        eventBus.trigger(Events.LOADING_DATA_PROGRESS, {\r\n                            request: request,\r\n                            response: event.data || null,\r\n                            error: null,\r\n                            sender: instance\r\n                        });\r\n                    }\r\n                },\r\n                success: function (data) {\r\n                    report(data);\r\n                },\r\n                error: function (request, statusText, errorText) {\r\n                    report(\r\n                        undefined,\r\n                        new DashJSError(\r\n                            Errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,\r\n                            errorText,\r\n                            statusText\r\n                        )\r\n                    );\r\n                },\r\n                abort: function (request) {\r\n                    if (request) {\r\n                        eventBus.trigger(Events.LOADING_ABANDONED, {request: request, mediaType: request.mediaType, sender: instance});\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            report(\r\n                undefined,\r\n                new DashJSError(\r\n                    Errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,\r\n                    Errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function abort() {\r\n        if (httpLoader) {\r\n            httpLoader.abort();\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (httpLoader) {\r\n            httpLoader.abort();\r\n            httpLoader = null;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        checkForExistence: checkForExistence,\r\n        load: load,\r\n        abort: abort,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\r\nexport default FactoryMaker.getClassFactory(FragmentLoader);\r\n"]}