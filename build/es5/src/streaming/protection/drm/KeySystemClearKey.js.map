{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemClearKey.js"],"names":["KeyPair","ClearKeyKeySet","CommonEncryption","ProtectionConstants","uuid","systemString","CLEARKEY_KEYSTEM_STRING","schemeIdURI","KeySystemClearKey","config","instance","BASE64","getClearKeysFromProtectionData","protectionData","message","clearkeySet","jsonMsg","JSON","parse","String","fromCharCode","apply","Uint8Array","keyPairs","i","kids","length","clearkeyID","clearkey","clearkeys","hasOwnProperty","Error","push","getInitData","cp","parseInitDataFromContentProtection","getRequestHeadersFromMessage","getLicenseRequestFromMessage","getLicenseServerURLFromInitData","getCDMData","getSessionId","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA,MAAOA,QAAP,KAAoB,eAApB,CACA,MAAOC,eAAP,KAA2B,sBAA3B,CACA,MAAOC,iBAAP,KAA6B,qBAA7B,CACA,MAAOC,oBAAP,KAAgC,qCAAhC,CAEA,KAAMC,MAAO,sCAAb,CACA,KAAMC,cAAeF,oBAAoBG,uBAAzC,CACA,KAAMC,aAAc,YAAcH,IAAlC,CAEA,QAASI,kBAAT,CAA2BC,MAA3B,CAAmC,CAE/BA,OAASA,QAAU,EAAnB,CACA,GAAIC,SAAJ,CACA,KAAMC,QAASF,OAAOE,MAAtB,CAEA;;;;;;;;;OAUA,QAASC,+BAAT,CAAwCC,cAAxC,CAAwDC,OAAxD,CAAiE,CAC7D,GAAIC,aAAc,IAAlB,CACA,GAAIF,cAAJ,CAAoB,CAChB;AACA;AACA,KAAMG,SAAUC,KAAKC,KAAL,CAAWC,OAAOC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,CAAgC,GAAIC,WAAJ,CAAeR,OAAf,CAAhC,CAAX,CAAhB,CACA,KAAMS,UAAW,EAAjB,CACA,IAAK,GAAIC,GAAI,CAAb,CAAgBA,EAAIR,QAAQS,IAAR,CAAaC,MAAjC,CAAyCF,GAAzC,CAA8C,CAC1C,KAAMG,YAAaX,QAAQS,IAAR,CAAaD,CAAb,CAAnB,CACA,KAAMI,UAAYf,eAAegB,SAAf,EAA4BhB,eAAegB,SAAf,CAAyBC,cAAzB,CAAwCH,UAAxC,CAA7B,CAAoFd,eAAegB,SAAf,CAAyBF,UAAzB,CAApF,CAA2H,IAA5I,CACA,GAAI,CAACC,QAAL,CAAe,CACX,KAAM,IAAIG,MAAJ,CAAU,wBAA0BJ,UAA1B,CAAuC,iBAAjD,CAAN,CACH,CACD;AACAJ,SAASS,IAAT,CAAc,GAAIhC,QAAJ,CAAY2B,UAAZ,CAAwBC,QAAxB,CAAd,EACH,CACDb,YAAc,GAAId,eAAJ,CAAmBsB,QAAnB,CAAd,CACH,CACD,MAAOR,YAAP,CACH,CAED,QAASkB,YAAT,CAAqBC,EAArB,CAAyB,CACrB,MAAOhC,kBAAiBiC,kCAAjB,CAAoDD,EAApD,CAAwDvB,MAAxD,CAAP,CACH,CAED,QAASyB,6BAAT,EAAsC,WAAa,CAC/C,MAAO,KAAP,CACH,CAED,QAASC,6BAAT,CAAsCvB,OAAtC,CAA+C,CAC3C,MAAO,IAAIQ,WAAJ,CAAeR,OAAf,CAAP,CACH,CAED,QAASwB,gCAAT,EAAyC,YAAc,CACnD,MAAO,KAAP,CACH,CAED,QAASC,WAAT,EAAsB,CAClB,MAAO,KAAP,CACH,CAED,QAASC,aAAT,EAAsB,MAAQ,CAC1B,MAAO,KAAP,CACH,CAED9B,SAAW,CACPN,KAAMA,IADC,CAEPG,YAAaA,WAFN,CAGPF,aAAcA,YAHP,CAIP4B,YAAaA,WAJN,CAKPG,6BAA8BA,4BALvB,CAMPC,6BAA8BA,4BANvB,CAOPC,gCAAiCA,+BAP1B,CAQPC,WAAYA,UARL,CASPC,aAAcA,YATP,CAUP5B,+BAAgCA,8BAVzB,CAAX,CAaA,MAAOF,SAAP,CACH,CAEDF,kBAAkBiC,qBAAlB,CAA0C,mBAA1C,CACA,cAAeC,QAAOC,YAAP,CAAoBC,mBAApB,CAAwCpC,iBAAxC,CAAf,CAA2E","file":"KeySystemClearKey.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemClearKey(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionData} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp) {\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(/*cp*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\r\n"]}