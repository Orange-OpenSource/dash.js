{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionController.js"],"names":["NEEDKEY_BEFORE_INITIALIZE_RETRIES","NEEDKEY_BEFORE_INITIALIZE_TIMEOUT","LICENSE_SERVER_REQUEST_RETRIES","LICENSE_SERVER_REQUEST_RETRY_INTERVAL","LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT","ProtectionController","config","protectionKeyController","protectionModel","eventBus","events","debug","BASE64","constants","needkeyRetries","instance","logger","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","keySystem","setup","getLogger","checkConfig","hasOwnProperty","Error","initializeForMedia","mediaInfo","on","INTERNAL_KEY_MESSAGE","onKeyMessage","INTERNAL_KEY_STATUS_CHANGED","onKeyStatusChanged","push","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","length","selectKeySystem","cps","createKeySession","initData","cdmData","initDataForKS","CommonEncryption","getPSSHForKeySystem","protData","getProtData","currentInitData","getAllInitData","i","initDataEquals","warn","getSessionType","error","trigger","KEY_SESSION_CREATED","data","DashJSError","ProtectionErrors","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","message","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","NEED_KEY","onNeedKey","off","setSessionType","value","setRobustnessLevel","level","setProtectionData","stop","reset","undefined","forEach","clearTimeout","retryTimeout","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","media","type","AUDIO","MediaCapability","codec","VIDEO","KeySystemConfiguration","fromManifest","self","requestedKeySystems","ksIdx","ks","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","info","sessionId","requestKeySystemAccess","keySystemAccess","INTERNAL_KEY_SYSTEM_SELECTED","onKeySystemSelected","getKeySystem","decodeArray","buffer","isClearKey","kids","Object","keys","clearkeys","TextEncoder","encode","JSON","stringify","sendLicenseRequestCompleteEvent","LICENSE_REQUEST_COMPLETE","e","KEY_STATUSES_CHANGED","status","keyMessage","KEY_MESSAGE","messageType","licenseServerData","getLicenseServer","eventData","byteLength","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","getSessionID","processClearKeyLicenseRequest","updateKeySession","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","reqHeaders","withCredentials","updateHeaders","headers","key","toLowerCase","httpRequestHeaders","getRequestHeadersFromMessage","reportError","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","onLoad","licenseMessage","getLicenseMessage","onAbort","onError","btoa","String","fromCharCode","apply","Uint8Array","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","responseType","getResponseType","timeout","isNaN","httpTimeout","doLicenseRequest","method","payload","retriesCount","XMLHttpRequest","open","setRequestHeader","retryRequest","setTimeout","onload","ontimeout","onerror","onabort","send","retry","initDataType","abInitData","ArrayBuffer","isView","getSupportedKeySystems","getKeySystems","setKeySystems","keySystems","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"ProtectionController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport MediaCapability from '../vo/MediaCapability';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\n\r\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\r\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\r\n\r\nconst LICENSE_SERVER_REQUEST_RETRIES = 0;\r\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\r\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 0;\r\n\r\n/**\r\n * @module ProtectionController\r\n * @description Provides access to media protection information and functionality.  Each\r\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\r\n * which encapsulates a set of protection information (EME APIs, selected key system,\r\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\r\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\r\n * functionality provided in {@link ProtectionKeyController}.\r\n * @todo ProtectionController does almost all of its tasks automatically after init() is\r\n * called.  Applications might want more control over this process and want to go through\r\n * each step manually (key system selection, session creation, session maintenance).\r\n * @param {Object} config\r\n */\r\n\r\nfunction ProtectionController(config) {\r\n\r\n    config = config || {};\r\n    const protectionKeyController = config.protectionKeyController;\r\n    let protectionModel = config.protectionModel;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const BASE64 = config.BASE64;\r\n    const constants = config.constants;\r\n    let needkeyRetries = [];\r\n\r\n    let instance,\r\n        logger,\r\n        pendingNeedKeyData,\r\n        mediaInfoArr,\r\n        protDataSet,\r\n        sessionType,\r\n        robustnessLevel,\r\n        keySystem;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        pendingNeedKeyData = [];\r\n        mediaInfoArr = [];\r\n        sessionType = 'temporary';\r\n        robustnessLevel = '';\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize this protection system with a given audio\r\n     * or video stream information.\r\n     *\r\n     * @param {StreamInfo} [mediaInfo] Media information\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @todo This API will change when we have better support for allowing applications\r\n     * to select different adaptation sets for playback.  Right now it is clunky for\r\n     * applications to create {@link StreamInfo} with the right information,\r\n     */\r\n    function initializeForMedia(mediaInfo) {\r\n        // Not checking here if a session for similar KS/KID combination is already created\r\n        // because still don't know which keysystem will be selected.\r\n        // Once Keysystem is selected and before creating the session, we will do that check\r\n        // so we create the strictly necessary DRM sessions\r\n        if (!mediaInfo) {\r\n            throw new Error('mediaInfo can not be null or undefined');\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n\r\n        mediaInfoArr.push(mediaInfo);\r\n\r\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\r\n        // and video will be the same.  Just use one valid MediaInfo object\r\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\r\n        if (supportedKS && supportedKS.length > 0) {\r\n            selectKeySystem(supportedKS, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\r\n    }\r\n\r\n    /**\r\n     * Create a new key session associated with the given initialization data from\r\n     * the MPD or from the PSSH box in the media\r\n     *\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\r\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\r\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\r\n     * to come up to speed with the latest EME standard\r\n     */\r\n    function createKeySession(initData, cdmData) {\r\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\r\n        const protData = getProtData(keySystem);\r\n        if (initDataForKS) {\r\n\r\n            // Check for duplicate initData\r\n            const currentInitData = protectionModel.getAllInitData();\r\n            for (let i = 0; i < currentInitData.length; i++) {\r\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                    logger.warn('DRM: Ignoring initData because we have already seen it!');\r\n                    return;\r\n                }\r\n            }\r\n            try {\r\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\r\n            } catch (error) {\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)});\r\n            }\r\n        } else if (initData) {\r\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\r\n        } else {\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!')});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a key session with the given session ID from persistent storage.  This\r\n     * essentially creates a new key session\r\n     *\r\n     * @param {string} sessionID\r\n     * @param {string} initData\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     */\r\n    function loadKeySession(sessionID, initData) {\r\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\r\n    }\r\n\r\n    /**\r\n     * Removes the given key session from persistent storage and closes the session\r\n     * as if {@link ProtectionController#closeKeySession}\r\n     * was called\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionRemoved\r\n     * @fires ProtectionController#KeySessionClosed\r\n     */\r\n    function removeKeySession(sessionToken) {\r\n        protectionModel.removeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Closes the key session and releases all associated decryption keys.  These\r\n     * keys will no longer be available for decrypting media\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionClosed\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        protectionModel.closeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Sets a server certificate for use by the CDM when signing key messages\r\n     * intended for a particular license server.  This will fire\r\n     * an error event if a key system has not yet been selected.\r\n     *\r\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\r\n     * certificate\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#ServerCertificateUpdated\r\n     */\r\n    function setServerCertificate(serverCertificate) {\r\n        protectionModel.setServerCertificate(serverCertificate);\r\n    }\r\n\r\n    /**\r\n     * Associate this protection system with the given HTMLMediaElement.  This\r\n     * causes the system to register for needkey/encrypted events from the given\r\n     * element and provides a destination for setting of MediaKeys\r\n     *\r\n     * @param {HTMLMediaElement} element the media element to which the protection\r\n     * system should be associated\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setMediaElement(element) {\r\n        if (element) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\r\n        } else if (element === null) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\r\n     * \"persistent-license\".  Default is \"temporary\".\r\n     *\r\n     * @param {string} value the session type\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setSessionType(value) {\r\n        sessionType = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\r\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\r\n     *\r\n     * @param {string} level the robustness level\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setRobustnessLevel(level) {\r\n        robustnessLevel = level;\r\n    }\r\n\r\n    /**\r\n     * Attach KeySystem-specific data to use for license acquisition with EME\r\n     *\r\n     * @param {Object} data an object containing property names corresponding to\r\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\r\n     * being instances of {@link ProtectionData}\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setProtectionData(data) {\r\n        protDataSet = data;\r\n        protectionKeyController.setProtectionData(data);\r\n    }\r\n\r\n    /**\r\n     * Stop method is called when current playback is stopped/resetted.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function stop() {\r\n        if (protectionModel) {\r\n            protectionModel.stop();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Destroys all protection data associated with this protection set.  This includes\r\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\r\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\r\n     * associated with a HTMLMediaElement, it will be detached from that element.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function reset() {\r\n\r\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n\r\n        setMediaElement(null);\r\n\r\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\r\n\r\n        if (protectionModel) {\r\n            protectionModel.reset();\r\n            protectionModel = null;\r\n        }\r\n\r\n        needkeyRetries.forEach( retryTimeout => clearTimeout(retryTimeout));\r\n        needkeyRetries = [];\r\n\r\n        mediaInfoArr = [];\r\n    }\r\n\r\n    ///////////////\r\n    // Private\r\n    ///////////////\r\n\r\n    function getProtData(keySystem) {\r\n        let protData = null;\r\n        if (keySystem) {\r\n            const keySystemString = keySystem.systemString;\r\n\r\n            if (protDataSet) {\r\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\r\n            }\r\n        }\r\n        return protData;\r\n    }\r\n\r\n    function getKeySystemConfiguration(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const audioCapabilities = [];\r\n        const videoCapabilities = [];\r\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\r\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\r\n        const ksSessionType = getSessionType(keySystem);\r\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\r\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\r\n\r\n        mediaInfoArr.forEach((media) => {\r\n            if (media.type === constants.AUDIO) {\r\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\r\n            } else if (media.type === constants.VIDEO) {\r\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\r\n            }\r\n        });\r\n\r\n        return new KeySystemConfiguration(\r\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\r\n            persistentState,\r\n            [ksSessionType]);\r\n    }\r\n\r\n    function getSessionType(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\r\n        return ksSessionType;\r\n    }\r\n\r\n    function selectKeySystem(supportedKS, fromManifest) {\r\n        const self = this;\r\n        const requestedKeySystems = [];\r\n\r\n        let ksIdx;\r\n        if (keySystem) {\r\n            // We have a key system\r\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\r\n                if (keySystem === supportedKS[ksIdx].ks) {\r\n\r\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\r\n\r\n                    // Ensure that we would be granted key system access using the key\r\n                    // system and codec information\r\n                    const onKeySystemAccessComplete = function (event) {\r\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                        if (event.error) {\r\n                            if (!fromManifest) {\r\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\r\n                            }\r\n                        } else {\r\n                            logger.info('DRM: KeySystem Access Granted');\r\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\r\n                            if (supportedKS[ksIdx].sessionId) {\r\n                                // Load MediaKeySession with sessionId\r\n                                loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\r\n                            } else if (supportedKS[ksIdx].initData) {\r\n                                // Create new MediaKeySession with initData\r\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\r\n                            }\r\n                        }\r\n                    };\r\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (keySystem === undefined) {\r\n            // First time through, so we need to select a key system\r\n            keySystem = null;\r\n            pendingNeedKeyData.push(supportedKS);\r\n\r\n            // Add all key systems to our request list since we have yet to select a key system\r\n            for (let i = 0; i < supportedKS.length; i++) {\r\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\r\n            }\r\n\r\n            let keySystemAccess;\r\n            const onKeySystemAccessComplete = function (event) {\r\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                if (event.error) {\r\n                    keySystem = undefined;\r\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n                    if (!fromManifest) {\r\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\r\n                    }\r\n                } else {\r\n                    keySystemAccess = event.data;\r\n                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\r\n                    protectionModel.selectKeySystem(keySystemAccess);\r\n                }\r\n            };\r\n            var onKeySystemSelected = function (event) {\r\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                if (!event.error) {\r\n                    if (!protectionModel) {\r\n                        return;\r\n                    }\r\n                    keySystem = protectionModel.getKeySystem();\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\r\n                    // Set server certificate from protData\r\n                    const protData = getProtData(keySystem);\r\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\r\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\r\n                    }\r\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\r\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\r\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\r\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                                if (protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty('clearkeys')) {\r\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\r\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                                }\r\n                                if (pendingNeedKeyData[i][ksIdx].sessionId) {\r\n                                    // Load MediaKeySession with sessionId\r\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\r\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\r\n                                    // Create new MediaKeySession with initData\r\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    keySystem = undefined;\r\n                    if (!fromManifest) {\r\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)});\r\n                    }\r\n                }\r\n            };\r\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n        } else {\r\n            // We are in the process of selecting a key system, so just save the data\r\n            pendingNeedKeyData.push(supportedKS);\r\n        }\r\n    }\r\n\r\n    function sendLicenseRequestCompleteEvent(data, error) {\r\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\r\n    }\r\n\r\n    function onKeyStatusChanged(e) {\r\n        if (e.error) {\r\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: null, error: e.error});\r\n        } else {\r\n            logger.debug('DRM: key status = ' + e.status);\r\n        }\r\n    }\r\n\r\n    function onKeyMessage(e) {\r\n        logger.debug('DRM: onKeyMessage');\r\n\r\n        // Dispatch event to applications indicating we received a key message\r\n        const keyMessage = e.data;\r\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\r\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\r\n        const message = keyMessage.message;\r\n        const sessionToken = keyMessage.sessionToken;\r\n        const protData = getProtData(keySystem);\r\n        const keySystemString = keySystem ? keySystem.systemString : null;\r\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\r\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\r\n\r\n        // Ensure message from CDM is not empty\r\n        if (!message || message.byteLength === 0) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Message not destined for license server\r\n        if (!licenseServerData) {\r\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\r\n            sendLicenseRequestCompleteEvent(eventData);\r\n            return;\r\n        }\r\n\r\n        // Perform any special handling for ClearKey\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\r\n            if (clearkeys)  {\r\n                logger.debug('DRM: ClearKey license request handled by application!');\r\n                sendLicenseRequestCompleteEvent(eventData);\r\n                protectionModel.updateKeySession(sessionToken, clearkeys);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // All remaining key system scenarios require a request to a remote license server\r\n        // Determine license server URL\r\n        let url = null;\r\n        if (protData && protData.serverURL) {\r\n            const serverURL = protData.serverURL;\r\n            if (typeof serverURL === 'string' && serverURL !== '') {\r\n                url = serverURL;\r\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\r\n                url = serverURL[messageType];\r\n            }\r\n        } else if (protData && protData.laURL && protData.laURL !== '') {\r\n            // TODO: Deprecated!\r\n            url = protData.laURL;\r\n        } else {\r\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\r\n            if (!url) {\r\n                url = e.data.laURL;\r\n            }\r\n        }\r\n        // Possibly update or override the URL based on the message\r\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\r\n\r\n        // Ensure valid license server URL\r\n        if (!url) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Set optional XMLHttpRequest headers from protection data and message\r\n        const reqHeaders = {};\r\n        let withCredentials = false;\r\n        const updateHeaders = function (headers) {\r\n            if (headers) {\r\n                for (const key in headers) {\r\n                    if ('authorization' === key.toLowerCase()) {\r\n                        withCredentials = true;\r\n                    }\r\n                    reqHeaders[key] = headers[key];\r\n                }\r\n            }\r\n        };\r\n        if (protData) {\r\n            updateHeaders(protData.httpRequestHeaders);\r\n        }\r\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\r\n\r\n        // Overwrite withCredentials property from protData if present\r\n        if (protData && typeof protData.withCredentials == 'boolean') {\r\n            withCredentials = protData.withCredentials;\r\n        }\r\n\r\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\r\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\r\n        };\r\n\r\n        const onLoad = function (xhr) {\r\n            if (!protectionModel) {\r\n                return;\r\n            }\r\n\r\n            if (xhr.status === 200) {\r\n                const licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);\r\n                if (licenseMessage !== null) {\r\n                    sendLicenseRequestCompleteEvent(eventData);\r\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\r\n                } else {\r\n                    reportError(xhr, eventData, keySystemString, messageType);\r\n                }\r\n            } else {\r\n                reportError(xhr, eventData, keySystemString, messageType);\r\n            }\r\n        };\r\n\r\n        const onAbort = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const onError = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        // Debug license message (=challenge)\r\n        logger.debug('DRM: challenge: ' + btoa(String.fromCharCode.apply(null, new Uint8Array(message))));\r\n\r\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\r\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\r\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\r\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\r\n\r\n        doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload,\r\n            LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);\r\n    }\r\n\r\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\r\n    function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError) {\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.open(method, url, true);\r\n        xhr.responseType = responseType;\r\n        xhr.withCredentials = withCredentials;\r\n        if (timeout > 0) {\r\n            xhr.timeout = timeout;\r\n        }\r\n        for (const key in headers) {\r\n            xhr.setRequestHeader(key, headers[key]);\r\n        }\r\n\r\n        const retryRequest = function () {\r\n            // fail silently and retry\r\n            retriesCount--;\r\n            setTimeout(function () {\r\n                doLicenseRequest(url, headers, method, responseType, withCredentials, payload,\r\n                    retriesCount, timeout, onLoad, onAbort, onError);\r\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\r\n        };\r\n\r\n        xhr.onload = function () {\r\n            if (this.status === 200 || retriesCount <= 0) {\r\n                onLoad(this);\r\n            } else {\r\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.ontimeout = xhr.onerror = function () {\r\n            if (retriesCount <= 0) {\r\n                onError(this);\r\n            } else {\r\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.onabort = function () {\r\n            onAbort(this);\r\n        };\r\n\r\n        xhr.send(payload);\r\n    }\r\n\r\n    function onNeedKey(event, retry) {\r\n        logger.debug('DRM: onNeedKey');\r\n        // Ignore non-cenc initData\r\n        if (event.key.initDataType !== 'cenc') {\r\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\r\n            return;\r\n        }\r\n\r\n        if (mediaInfoArr.length === 0) {\r\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\r\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\r\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\r\n                needkeyRetries.push(setTimeout(() => {\r\n                    onNeedKey(event, retry);\r\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\r\n        // Convert to ArrayBuffer\r\n        let abInitData = event.key.initData;\r\n        if (ArrayBuffer.isView(abInitData)) {\r\n            abInitData = abInitData.buffer;\r\n        }\r\n\r\n        // If key system has already been selected and initData already seen, then do nothing\r\n        if (keySystem) {\r\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\r\n            if (initDataForKS) {\r\n\r\n                // Check for duplicate initData\r\n                const currentInitData = protectionModel.getAllInitData();\r\n                for (let i = 0; i < currentInitData.length; i++) {\r\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                        logger.warn('DRM: Ignoring initData because we have already seen it!');\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\r\n\r\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\r\n        if (supportedKS.length === 0) {\r\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\r\n            return;\r\n        }\r\n\r\n        selectKeySystem(supportedKS, false);\r\n    }\r\n\r\n    function getKeySystems() {\r\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\r\n    }\r\n\r\n    function setKeySystems(keySystems) {\r\n        if (protectionKeyController) {\r\n            protectionKeyController.setKeySystems(keySystems);\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initializeForMedia: initializeForMedia,\r\n        createKeySession: createKeySession,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        setMediaElement: setMediaElement,\r\n        setSessionType: setSessionType,\r\n        setRobustnessLevel: setRobustnessLevel,\r\n        setProtectionData: setProtectionData,\r\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\r\n        getKeySystems: getKeySystems,\r\n        setKeySystems: setKeySystems,\r\n        stop: stop,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nProtectionController.__dashjs_factory_name = 'ProtectionController';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\r\n"]}