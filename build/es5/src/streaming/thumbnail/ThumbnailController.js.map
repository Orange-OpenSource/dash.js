{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailController.js"],"names":["FactoryMaker","Constants","Thumbnail","ThumbnailTracks","BitrateInfo","replaceTokenForTemplate","unescapeDollarsInTemplate","ThumbnailController","config","context","instance","thumbnailTracks","setup","reset","create","dashManifestModel","adapter","baseURLController","stream","timelineConverter","getThumbnail","time","callback","track","getCurrentTrack","segmentDuration","undefined","seq","Math","floor","offset","thumbIndex","tilesHor","tilesVert","thumbnail","width","widthPerTile","height","heightPerTile","x","y","readThumbnail","url","buildUrlFromTemplate","seqIdx","startNumber","templateUrl","bandwidth","setTrackByIndex","index","getCurrentTrackIndex","getBitrateList","tracks","getTracks","i","map","t","bitrateInfo","mediaType","IMAGE","qualityIndex","bitrate","get","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"ThumbnailController.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport Constants from '../constants/Constants';\r\nimport Thumbnail from '../vo/Thumbnail';\r\nimport ThumbnailTracks from './ThumbnailTracks';\r\nimport BitrateInfo from '../vo/BitrateInfo';\r\nimport {replaceTokenForTemplate, unescapeDollarsInTemplate} from '../../dash/utils/SegmentsUtils';\r\n\r\nfunction ThumbnailController(config) {\r\n\r\n    const context = this.context;\r\n\r\n    let instance,\r\n        thumbnailTracks;\r\n\r\n    function setup() {\r\n        reset();\r\n        thumbnailTracks = ThumbnailTracks(context).create({\r\n            dashManifestModel: config.dashManifestModel,\r\n            adapter: config.adapter,\r\n            baseURLController: config.baseURLController,\r\n            stream: config.stream,\r\n            timelineConverter: config.timelineConverter\r\n        });\r\n    }\r\n\r\n    function getThumbnail(time, callback) {\r\n        const track = thumbnailTracks.getCurrentTrack();\r\n        if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {\r\n            return null;\r\n        }\r\n\r\n        // Calculate index of the sprite given a time\r\n        const seq = Math.floor(time / track.segmentDuration);\r\n        const offset = time % track.segmentDuration;\r\n        const thumbIndex = Math.floor((offset * track.tilesHor * track.tilesVert) / track.segmentDuration);\r\n        // Create and return the thumbnail\r\n        const thumbnail = new Thumbnail();\r\n\r\n        thumbnail.width = Math.floor(track.widthPerTile);\r\n        thumbnail.height = Math.floor(track.heightPerTile);\r\n        thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;\r\n        thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;\r\n\r\n        if ('readThumbnail' in track) {\r\n            return track.readThumbnail(time, (url) => {\r\n                thumbnail.url = url;\r\n                if (callback)\r\n                    callback(thumbnail);\r\n            });\r\n        } else {\r\n            thumbnail.url = buildUrlFromTemplate(track, seq);\r\n            if (callback)\r\n                callback(thumbnail);\r\n            return thumbnail;\r\n        }\r\n    }\r\n\r\n    function buildUrlFromTemplate(track, seq) {\r\n        const seqIdx = seq + track.startNumber;\r\n        let url = replaceTokenForTemplate(track.templateUrl, 'Number', seqIdx);\r\n        url = replaceTokenForTemplate(url, 'Time', (seqIdx - 1) * track.segmentDuration);\r\n        url = replaceTokenForTemplate(url, 'Bandwidth', track.bandwidth);\r\n        return unescapeDollarsInTemplate(url);\r\n    }\r\n\r\n    function setTrackByIndex(index) {\r\n        thumbnailTracks.setTrackByIndex(index);\r\n    }\r\n\r\n    function getCurrentTrackIndex() {\r\n        return thumbnailTracks.getCurrentTrackIndex();\r\n    }\r\n\r\n    function getBitrateList() {\r\n        const tracks = thumbnailTracks.getTracks();\r\n        let i = 0;\r\n\r\n        return tracks.map((t) => {\r\n            const bitrateInfo = new BitrateInfo();\r\n            bitrateInfo.mediaType = Constants.IMAGE;\r\n            bitrateInfo.qualityIndex = i++;\r\n            bitrateInfo.bitrate = t.bitrate;\r\n            bitrateInfo.width = t.width;\r\n            bitrateInfo.height = t.height;\r\n            return bitrateInfo;\r\n        });\r\n    }\r\n\r\n    function reset() {\r\n        if (thumbnailTracks) {\r\n            thumbnailTracks.reset();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        get: getThumbnail,\r\n        setTrackByIndex: setTrackByIndex,\r\n        getCurrentTrackIndex: getCurrentTrackIndex,\r\n        getBitrateList: getBitrateList,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nThumbnailController.__dashjs_factory_name = 'ThumbnailController';\r\nexport default FactoryMaker.getClassFactory(ThumbnailController);"]}