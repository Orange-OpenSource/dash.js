{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailTracks.js"],"names":["THUMBNAILS_SCHEME_ID_URIS","ThumbnailTracks","config","context","dashManifestModel","adapter","baseURLController","stream","timelineConverter","metricsModel","mediaPlayerModel","errHandler","urlUtils","getInstance","instance","tracks","currentTrackIndex","loader","segmentBaseLoader","boxParser","initialize","reset","create","setConfig","addTracks","normalizeSegments","fragments","representation","segments","count","i","len","s","seg","length","getIsDynamic","startTime","duration","timescale","media","mediaRange","push","streamInfo","getStreamInfo","mediaInfo","getMediaInfoForType","Constants","IMAGE","voAdaptation","getDataForMedia","voReps","getRepresentationsForAdaptation","forEach","rep","segmentInfoType","DashConstants","SEGMENT_TEMPLATE","segmentDuration","createTrack","SEGMENT_BASE","sort","a","b","bitrate","useSegmentBase","track","ThumbnailTrackInfo","id","bandwidth","width","height","tilesHor","tilesVert","essentialProperties","p","indexOf","schemeIdUri","value","vars","split","isNaN","parseInt","loadSegments","indexRange","cache","readThumbnail","time","callback","cached","some","el","start","end","url","ss","mediaStartTime","baseURL","resolve","path","load","method","request","range","responseType","onload","e","info","getSamplesInfo","target","response","blob","Blob","slice","sampleList","offset","size","type","imageUrl","window","URL","createObjectURL","startNumber","templateUrl","buildTemplateUrl","widthPerTile","heightPerTile","isRelative","getTracks","getCurrentTrackIndex","getCurrentTrack","setTrackByIndex","index","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ThumbnailTracks.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\nimport DashConstants from '../../dash/constants/DashConstants';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\r\nimport URLUtils from '../../streaming/utils/URLUtils';\r\nimport {replaceIDForTemplate, getTimeBasedSegment} from '../../dash/utils/SegmentsUtils';\r\n\r\nimport SegmentBaseLoader from '../../dash/SegmentBaseLoader';\r\nimport BoxParser from '../../streaming/utils/BoxParser';\r\nimport XHRLoader from '../../streaming/net/XHRLoader';\r\n\r\nexport const THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile',\r\n                                   'http://dashif.org/guidelines/thumbnail_tile'];\r\n\r\nfunction ThumbnailTracks(config) {\r\n    const context = this.context;\r\n\r\n    const dashManifestModel = config.dashManifestModel;\r\n    const adapter = config.adapter;\r\n    const baseURLController = config.baseURLController;\r\n    const stream = config.stream;\r\n    const timelineConverter = config.timelineConverter;\r\n    const metricsModel = config.metricsModel;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const errHandler = config.errHandler;\r\n\r\n    const urlUtils = URLUtils(context).getInstance();\r\n\r\n    let instance,\r\n        tracks,\r\n        currentTrackIndex,\r\n        loader, segmentBaseLoader, boxParser;\r\n\r\n    function initialize() {\r\n        reset();\r\n        loader = XHRLoader(context).create({});\r\n        boxParser = BoxParser(context).getInstance();\r\n        segmentBaseLoader = SegmentBaseLoader(context).getInstance();\r\n        segmentBaseLoader.setConfig({\r\n            baseURLController: baseURLController,\r\n            metricsModel: metricsModel,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            errHandler: errHandler\r\n        });\r\n\r\n        // parse representation and create tracks\r\n        addTracks();\r\n    }\r\n\r\n    function normalizeSegments(fragments, representation) {\r\n        const segments = [];\r\n        let count = 0;\r\n\r\n        let i,\r\n            len,\r\n            s,\r\n            seg;\r\n\r\n        for (i = 0, len = fragments.length; i < len; i++) {\r\n            s = fragments[i];\r\n\r\n            seg = getTimeBasedSegment(\r\n                timelineConverter,\r\n                dashManifestModel.getIsDynamic(),\r\n                representation,\r\n                s.startTime,\r\n                s.duration,\r\n                s.timescale,\r\n                s.media,\r\n                s.mediaRange,\r\n                count);\r\n\r\n            segments.push(seg);\r\n\r\n            seg = null;\r\n            count++;\r\n        }\r\n        return segments;\r\n    }\r\n\r\n    function addTracks() {\r\n        if (!stream || !dashManifestModel || !adapter) {\r\n            return;\r\n        }\r\n\r\n        const streamInfo = stream.getStreamInfo();\r\n        if (!streamInfo) {\r\n            return;\r\n        }\r\n\r\n        // Extract thumbnail tracks\r\n        const mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\r\n        if (!mediaInfo) {\r\n            return;\r\n        }\r\n\r\n        const voAdaptation = adapter.getDataForMedia(mediaInfo);\r\n        if (!voAdaptation) {\r\n            return;\r\n        }\r\n\r\n        const voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\r\n        if (voReps && voReps.length > 0) {\r\n            voReps.forEach((rep) => {\r\n                if (rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media)\r\n                    createTrack(rep);\r\n                if (rep.segmentInfoType === DashConstants.SEGMENT_BASE)\r\n                    createTrack(rep, true);\r\n            });\r\n        }\r\n\r\n        if (tracks.length > 0) {\r\n            // Sort bitrates and select the lowest bitrate rendition\r\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\r\n            currentTrackIndex = tracks.length - 1;\r\n        }\r\n    }\r\n\r\n    function createTrack(representation, useSegmentBase) {\r\n        const track = new ThumbnailTrackInfo();\r\n        track.id = representation.id;\r\n        track.bitrate = representation.bandwidth;\r\n        track.width = representation.width;\r\n        track.height = representation.height;\r\n        track.tilesHor = 1;\r\n        track.tilesVert = 1;\r\n\r\n        if (representation.essentialProperties) {\r\n            representation.essentialProperties.forEach((p) => {\r\n                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\r\n                    const vars = p.value.split('x');\r\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\r\n                        track.tilesHor = parseInt(vars[0], 10);\r\n                        track.tilesVert = parseInt(vars[1], 10);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (useSegmentBase) {\r\n            segmentBaseLoader.loadSegments(representation, Constants.IMAGE, representation.indexRange, {}, function (segments, representation) {\r\n                var cache = [];\r\n                segments = normalizeSegments(segments, representation);\r\n                track.segmentDuration = segments[0].duration; //assume all segments have the same duration\r\n                track.readThumbnail = function (time, callback) {\r\n\r\n                    let cached = null;\r\n                    cache.some(el => {\r\n                        if (el.start <= time && el.end > time) {\r\n                            cached = el.url;\r\n                            return true;\r\n                        }\r\n                    });\r\n                    if (cached) {\r\n                        callback(cached);\r\n                    } else {\r\n                        segments.some((ss) => {\r\n                            if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\r\n                                const baseURL = baseURLController.resolve(representation.path);\r\n                                loader.load({\r\n                                    method: 'get',\r\n                                    url: baseURL.url,\r\n                                    request: {\r\n                                        range: ss.mediaRange,\r\n                                        responseType: 'arraybuffer'\r\n                                    },\r\n                                    onload: function (e) {\r\n                                        let info = boxParser.getSamplesInfo(e.target.response);\r\n                                        let blob = new Blob( [ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], { type: 'image/jpeg' } );\r\n                                        let imageUrl = window.URL.createObjectURL( blob );\r\n                                        cache.push({\r\n                                            start: ss.mediaStartTime,\r\n                                            end: ss.mediaStartTime + ss.duration,\r\n                                            url: imageUrl\r\n                                        });\r\n                                        if (callback)\r\n                                            callback(imageUrl);\r\n                                    }\r\n                                });\r\n                                return true;\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n            });\r\n        } else {\r\n            track.startNumber = representation.startNumber;\r\n            track.segmentDuration = representation.segmentDuration;\r\n            track.timescale = representation.timescale;\r\n            track.templateUrl = buildTemplateUrl(representation);\r\n        }\r\n\r\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\r\n            // Precalculate width and heigth per tile for perf reasons\r\n            track.widthPerTile = track.width / track.tilesHor;\r\n            track.heightPerTile = track.height / track.tilesVert;\r\n            tracks.push(track);\r\n        }\r\n    }\r\n\r\n    function buildTemplateUrl(representation) {\r\n        const templateUrl = urlUtils.isRelative(representation.media) ?\r\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\r\n\r\n        if (!templateUrl) {\r\n            return '';\r\n        }\r\n\r\n        return replaceIDForTemplate(templateUrl, representation.id);\r\n    }\r\n\r\n    function getTracks() {\r\n        return tracks;\r\n    }\r\n\r\n    function getCurrentTrackIndex() {\r\n        return currentTrackIndex;\r\n    }\r\n\r\n    function getCurrentTrack() {\r\n        if (currentTrackIndex < 0) {\r\n            return null;\r\n        }\r\n        return tracks[currentTrackIndex];\r\n    }\r\n\r\n    function setTrackByIndex(index) {\r\n        if (!tracks || tracks.length === 0) {\r\n            return;\r\n        }\r\n        // select highest bitrate in case selected index is higher than bitrate list length\r\n        if (index >= tracks.length) {\r\n            index = tracks.length - 1;\r\n        }\r\n        currentTrackIndex = index;\r\n    }\r\n\r\n    function reset() {\r\n        tracks = [];\r\n        currentTrackIndex = -1;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        getTracks: getTracks,\r\n        reset: reset,\r\n        setTrackByIndex: setTrackByIndex,\r\n        getCurrentTrack: getCurrentTrack,\r\n        getCurrentTrackIndex: getCurrentTrackIndex\r\n    };\r\n\r\n    initialize();\r\n\r\n    return instance;\r\n}\r\n\r\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\r\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\r\n"]}