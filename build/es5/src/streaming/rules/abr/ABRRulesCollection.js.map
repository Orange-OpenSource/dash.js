{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ABRRulesCollection.js"],"names":["ThroughputRule","InsufficientBufferRule","AbandonRequestsRule","DroppedFramesRule","SwitchHistoryRule","BolaRule","FactoryMaker","SwitchRequest","QUALITY_SWITCH_RULES","ABANDON_FRAGMENT_RULES","ABRRulesCollection","config","context","mediaPlayerModel","metricsModel","dashMetrics","instance","qualitySwitchRules","abandonFragmentRules","initialize","getUseDefaultABRRules","push","create","customRules","getABRCustomRules","forEach","rule","type","getActiveRules","srArray","filter","sr","quality","NO_CHANGE","getMinSwitchRequest","values","i","len","req","newQuality","length","PRIORITY","STRONG","WEAK","DEFAULT","priority","Math","min","getMaxQuality","rulesContext","switchRequestArray","map","getMaxIndex","activeRules","maxQuality","shouldAbandonFragment","abandonRequestArray","shouldAbandon","reset","rules","__dashjs_factory_name","factory","getClassFactory","updateSingletonFactory"],"mappings":"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","file":"ABRRulesCollection.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ThroughputRule from './ThroughputRule';\r\nimport InsufficientBufferRule from './InsufficientBufferRule';\r\nimport AbandonRequestsRule from './AbandonRequestsRule';\r\nimport DroppedFramesRule from './DroppedFramesRule';\r\nimport SwitchHistoryRule from './SwitchHistoryRule';\r\nimport BolaRule from './BolaRule';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport SwitchRequest from '../SwitchRequest';\r\n\r\nconst QUALITY_SWITCH_RULES = 'qualitySwitchRules';\r\nconst ABANDON_FRAGMENT_RULES = 'abandonFragmentRules';\r\n\r\nfunction ABRRulesCollection(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const metricsModel = config.metricsModel;\r\n    const dashMetrics = config.dashMetrics;\r\n\r\n    let instance,\r\n        qualitySwitchRules,\r\n        abandonFragmentRules;\r\n\r\n    function initialize() {\r\n        qualitySwitchRules = [];\r\n        abandonFragmentRules = [];\r\n\r\n        if (mediaPlayerModel.getUseDefaultABRRules()) {\r\n            // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE.\r\n            // This is controlled by useBufferOccupancyABR mechanism in AbrController.\r\n            qualitySwitchRules.push(\r\n                BolaRule(context).create({\r\n                    metricsModel: metricsModel,\r\n                    dashMetrics: dashMetrics,\r\n                    mediaPlayerModel: mediaPlayerModel\r\n                })\r\n            );\r\n            qualitySwitchRules.push(\r\n                ThroughputRule(context).create({\r\n                    metricsModel: metricsModel,\r\n                    dashMetrics: dashMetrics\r\n                })\r\n            );\r\n            qualitySwitchRules.push(\r\n                InsufficientBufferRule(context).create({\r\n                    metricsModel: metricsModel,\r\n                    dashMetrics: dashMetrics\r\n                })\r\n            );\r\n            qualitySwitchRules.push(\r\n                SwitchHistoryRule(context).create()\r\n            );\r\n            qualitySwitchRules.push(\r\n                DroppedFramesRule(context).create()\r\n            );\r\n            abandonFragmentRules.push(\r\n                AbandonRequestsRule(context).create({\r\n                    metricsModel: metricsModel,\r\n                    dashMetrics: dashMetrics,\r\n                    mediaPlayerModel: mediaPlayerModel\r\n                })\r\n            );\r\n        }\r\n\r\n        // add custom ABR rules if any\r\n        const customRules = mediaPlayerModel.getABRCustomRules();\r\n        customRules.forEach(function (rule) {\r\n            if (rule.type === QUALITY_SWITCH_RULES) {\r\n                qualitySwitchRules.push(rule.rule(context).create());\r\n            }\r\n\r\n            if (rule.type === ABANDON_FRAGMENT_RULES) {\r\n                abandonFragmentRules.push(rule.rule(context).create());\r\n            }\r\n        });\r\n    }\r\n\r\n    function getActiveRules(srArray) {\r\n        return srArray.filter(sr => sr.quality > SwitchRequest.NO_CHANGE);\r\n    }\r\n\r\n    function getMinSwitchRequest(srArray) {\r\n        const values = {};\r\n        let i,\r\n            len,\r\n            req,\r\n            newQuality,\r\n            quality;\r\n\r\n        if (srArray.length === 0) {\r\n            return;\r\n        }\r\n\r\n        values[SwitchRequest.PRIORITY.STRONG] = SwitchRequest.NO_CHANGE;\r\n        values[SwitchRequest.PRIORITY.WEAK] = SwitchRequest.NO_CHANGE;\r\n        values[SwitchRequest.PRIORITY.DEFAULT] = SwitchRequest.NO_CHANGE;\r\n\r\n        for (i = 0, len = srArray.length; i < len; i += 1) {\r\n            req = srArray[i];\r\n            if (req.quality !== SwitchRequest.NO_CHANGE) {\r\n                values[req.priority] = values[req.priority] > SwitchRequest.NO_CHANGE ? Math.min(values[req.priority], req.quality) : req.quality;\r\n            }\r\n        }\r\n\r\n        if (values[SwitchRequest.PRIORITY.WEAK] !== SwitchRequest.NO_CHANGE) {\r\n            newQuality = values[SwitchRequest.PRIORITY.WEAK];\r\n        }\r\n\r\n        if (values[SwitchRequest.PRIORITY.DEFAULT] !== SwitchRequest.NO_CHANGE) {\r\n            newQuality = values[SwitchRequest.PRIORITY.DEFAULT];\r\n        }\r\n\r\n        if (values[SwitchRequest.PRIORITY.STRONG] !== SwitchRequest.NO_CHANGE) {\r\n            newQuality = values[SwitchRequest.PRIORITY.STRONG];\r\n        }\r\n\r\n        if (newQuality !== SwitchRequest.NO_CHANGE) {\r\n            quality = newQuality;\r\n        }\r\n\r\n        return SwitchRequest(context).create(quality);\r\n    }\r\n\r\n    function getMaxQuality(rulesContext) {\r\n        const switchRequestArray = qualitySwitchRules.map(rule => rule.getMaxIndex(rulesContext));\r\n        const activeRules = getActiveRules(switchRequestArray);\r\n        const maxQuality = getMinSwitchRequest(activeRules);\r\n\r\n        return maxQuality || SwitchRequest(context).create();\r\n    }\r\n\r\n    function shouldAbandonFragment(rulesContext) {\r\n        const abandonRequestArray = abandonFragmentRules.map(rule => rule.shouldAbandon(rulesContext));\r\n        const activeRules = getActiveRules(abandonRequestArray);\r\n        const shouldAbandon = getMinSwitchRequest(activeRules);\r\n\r\n        return shouldAbandon || SwitchRequest(context).create();\r\n    }\r\n\r\n    function reset() {\r\n        [qualitySwitchRules, abandonFragmentRules].forEach(rules => {\r\n            if (rules && rules.length) {\r\n                rules.forEach(rule => rule.reset && rule.reset());\r\n            }\r\n        });\r\n        qualitySwitchRules = [];\r\n        abandonFragmentRules = [];\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset: reset,\r\n        getMaxQuality: getMaxQuality,\r\n        shouldAbandonFragment: shouldAbandonFragment\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nABRRulesCollection.__dashjs_factory_name = 'ABRRulesCollection';\r\nconst factory = FactoryMaker.getClassFactory(ABRRulesCollection);\r\nfactory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES;\r\nfactory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES;\r\nFactoryMaker.updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name, factory);\r\n\r\nexport default factory;\r\n"]}