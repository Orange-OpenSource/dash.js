{"version":3,"sources":["../../../../../src/streaming/rules/SwitchRequestHistory.js"],"names":["FactoryMaker","SwitchRequest","SWITCH_REQUEST_HISTORY_DEPTH","SwitchRequestHistory","switchRequests","srHistory","push","switchRequest","newValue","NO_CHANGE","oldValue","noDrops","drops","dropSize","indexDiff","drop","noDrop","idx","length","srHistoryFirst","shift","getSwitchRequests","reset","__dashjs_factory_name","factory","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BA,MAAOA,aAAP,KAAyB,yBAAzB,CACA,MAAOC,cAAP,KAA0B,iBAA1B,CAEA,KAAMC,8BAA+B,CAArC,CAAwC;AAExC,QAASC,qBAAT,EAAgC,CAC5B,GAAIC,gBAAiB,EAArB,CAAyB;AACzB,GAAIC,WAAY,EAAhB,CAAoB;AAEpB,QAASC,KAAT,CAAcC,aAAd,CAA6B,CACzB,GAAIA,cAAcC,QAAd,GAA2BP,cAAcQ,SAA7C,CAAwD,CACpDF,cAAcC,QAAd,CAAyBD,cAAcG,QAAvC,CACH,CACD,GAAI,CAACN,eAAeG,cAAcG,QAA7B,CAAL,CAA6C,CACzCN,eAAeG,cAAcG,QAA7B,EAAyC,CAACC,QAAS,CAAV,CAAaC,MAAO,CAApB,CAAuBC,SAAU,CAAjC,CAAzC,CACH,CAED;AACA,GAAIC,WAAYP,cAAcC,QAAd,CAAyBD,cAAcG,QAAvD,CACA,GAAIK,MAAQD,UAAY,CAAb,CAAkB,CAAlB,CAAsB,CAAjC,CACA,GAAID,UAAWE,KAAO,CAACD,SAAR,CAAoB,CAAnC,CACA,GAAIE,QAASD,KAAO,CAAP,CAAW,CAAxB,CAEA;AACAX,eAAeG,cAAcG,QAA7B,EAAuCE,KAAvC,EAAgDG,IAAhD,CACAX,eAAeG,cAAcG,QAA7B,EAAuCG,QAAvC,EAAmDA,QAAnD,CACAT,eAAeG,cAAcG,QAA7B,EAAuCC,OAAvC,EAAkDK,MAAlD,CAEA;AACAX,UAAUC,IAAV,CAAe,CAACW,IAAKV,cAAcG,QAApB,CAA8BM,OAAQA,MAAtC,CAA8CD,KAAMA,IAApD,CAA0DF,SAAUA,QAApE,CAAf,EAEA;AACA,GAAKR,UAAUa,MAAV,CAAmBhB,4BAAxB,CAAuD,CACnD,GAAIiB,gBAAiBd,UAAUe,KAAV,EAArB,CACAhB,eAAee,eAAeF,GAA9B,EAAmCL,KAAnC,EAA4CO,eAAeJ,IAA3D,CACAX,eAAee,eAAeF,GAA9B,EAAmCJ,QAAnC,EAA+CM,eAAeN,QAA9D,CACAT,eAAee,eAAeF,GAA9B,EAAmCN,OAAnC,EAA8CQ,eAAeH,MAA7D,CACH,CACJ,CAED,QAASK,kBAAT,EAA6B,CACzB,MAAOjB,eAAP,CACH,CAED,QAASkB,MAAT,EAAiB,CACblB,eAAiB,EAAjB,CACAC,UAAY,EAAZ,CACH,CAED,MAAO,CACHC,KAAMA,IADH,CAEHe,kBAAmBA,iBAFhB,CAGHC,MAAOA,KAHJ,CAAP,CAKH,CAEDnB,qBAAqBoB,qBAArB,CAA6C,sBAA7C,CACA,KAAMC,SAAUxB,aAAayB,eAAb,CAA6BtB,oBAA7B,CAAhB,CACA,cAAeqB,QAAf","file":"SwitchRequestHistory.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport SwitchRequest from './SwitchRequest';\r\n\r\nconst SWITCH_REQUEST_HISTORY_DEPTH = 8; // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule\r\n\r\nfunction SwitchRequestHistory() {\r\n    let switchRequests = []; // running total\r\n    let srHistory = []; // history of each switch\r\n\r\n    function push(switchRequest) {\r\n        if (switchRequest.newValue === SwitchRequest.NO_CHANGE) {\r\n            switchRequest.newValue = switchRequest.oldValue;\r\n        }\r\n        if (!switchRequests[switchRequest.oldValue]) {\r\n            switchRequests[switchRequest.oldValue] = {noDrops: 0, drops: 0, dropSize: 0};\r\n        }\r\n\r\n        // Set switch details\r\n        let indexDiff = switchRequest.newValue - switchRequest.oldValue;\r\n        let drop = (indexDiff < 0) ? 1 : 0;\r\n        let dropSize = drop ? -indexDiff : 0;\r\n        let noDrop = drop ? 0 : 1;\r\n\r\n        // Update running totals\r\n        switchRequests[switchRequest.oldValue].drops += drop;\r\n        switchRequests[switchRequest.oldValue].dropSize += dropSize;\r\n        switchRequests[switchRequest.oldValue].noDrops += noDrop;\r\n\r\n        // Save to history\r\n        srHistory.push({idx: switchRequest.oldValue, noDrop: noDrop, drop: drop, dropSize: dropSize});\r\n\r\n        // Shift earliest switch off srHistory and readjust to keep depth of running totals constant\r\n        if ( srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH ) {\r\n            let srHistoryFirst = srHistory.shift();\r\n            switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;\r\n            switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;\r\n            switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;\r\n        }\r\n    }\r\n\r\n    function getSwitchRequests() {\r\n        return switchRequests;\r\n    }\r\n\r\n    function reset() {\r\n        switchRequests = [];\r\n        srHistory = [];\r\n    }\r\n\r\n    return {\r\n        push: push,\r\n        getSwitchRequests: getSwitchRequests,\r\n        reset: reset\r\n    };\r\n}\r\n\r\nSwitchRequestHistory.__dashjs_factory_name = 'SwitchRequestHistory';\r\nconst factory = FactoryMaker.getClassFactory(SwitchRequestHistory);\r\nexport default factory;\r\n"]}