{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/NextFragmentRequestRule.js"],"names":["Constants","Debug","FactoryMaker","FragmentRequest","NextFragmentRequestRule","config","context","adapter","textController","playbackController","instance","logger","setup","getInstance","getLogger","execute","streamProcessor","seekTarget","requestToReplace","representationInfo","getRepresentationInfo","mediaType","getType","hasSeekTarget","isNaN","bufferController","getBufferController","currentTime","getNormalizedTime","time","getIndexHandlerTime","bufferIsDivided","request","FRAGMENTED_TEXT","isTextEnabled","range","getRangeAt","playingRange","hasDiscontinuities","getBuffer","hasDiscontinuitiesAfter","start","end","getFragmentModel","removeExecutedRequestsAfterTime","debug","startTime","duration","getFragmentRequest","timeThreshold","ignoreIsFinished","keepIdx","action","ACTION_COMPLETE","isFragmentLoaded","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"NextFragmentRequestRule.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../constants/Constants';\r\nimport Debug from '../../../core/Debug';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\nimport FragmentRequest from '../../../streaming/vo/FragmentRequest';\r\n\r\nfunction NextFragmentRequestRule(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const adapter = config.adapter;\r\n    const textController = config.textController;\r\n    const playbackController = config.playbackController;\r\n\r\n    let instance,\r\n        logger;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n    }\r\n\r\n    function execute(streamProcessor, seekTarget, requestToReplace) {\r\n        if (!streamProcessor) {\r\n            return null;\r\n        }\r\n        const representationInfo = streamProcessor.getRepresentationInfo();\r\n        const mediaType = streamProcessor.getType();\r\n        const hasSeekTarget = !isNaN(seekTarget);\r\n        const bufferController = streamProcessor.getBufferController();\r\n        const currentTime = playbackController.getNormalizedTime();\r\n        let time = hasSeekTarget ? seekTarget : adapter.getIndexHandlerTime(streamProcessor);\r\n        let bufferIsDivided = false;\r\n        let request;\r\n\r\n        if (isNaN(time) || (mediaType === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\r\n            return null;\r\n        }\r\n        /**\r\n         * This is critical for IE/Safari/EDGE\r\n         * */\r\n        if (bufferController) {\r\n            let range = bufferController.getRangeAt(time);\r\n            const playingRange = bufferController.getRangeAt(currentTime);\r\n            const hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);\r\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\r\n                if (!range || (playingRange && playingRange.start != range.start && playingRange.end != range.end)) {\r\n                    if (hasDiscontinuities && mediaType !== Constants.FRAGMENTED_TEXT) {\r\n                        streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(playingRange.end);\r\n                        bufferIsDivided = true;\r\n                    }\r\n                    range = playingRange;\r\n                }\r\n                if (time !== range.end) {\r\n                    logger.debug('Prior to making a request for time, NextFragmentRequestRule is aligning index handler\\'s currentTime with bufferedRange.end for', mediaType, '.', time, 'was changed to', range.end);\r\n                    time = range.end;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (requestToReplace) {\r\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\r\n            request = adapter.getFragmentRequest(streamProcessor, representationInfo, time, {\r\n                timeThreshold: 0,\r\n                ignoreIsFinished: true\r\n            });\r\n        } else {\r\n            request = adapter.getFragmentRequest(streamProcessor, representationInfo, time, {\r\n                keepIdx: !hasSeekTarget && !bufferIsDivided\r\n            });\r\n\r\n            // Then, check if this request was downloaded or not\r\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && streamProcessor.getFragmentModel().isFragmentLoaded(request)) {\r\n                // loop until we found not loaded fragment, or no fragment\r\n                request = adapter.getFragmentRequest(streamProcessor, representationInfo);\r\n            }\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    instance = {\r\n        execute: execute\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nNextFragmentRequestRule.__dashjs_factory_name = 'NextFragmentRequestRule';\r\nexport default FactoryMaker.getClassFactory(NextFragmentRequestRule);\r\n"]}