{"version":3,"sources":["../../../../../../src/streaming/rules/scheduling/BufferLevelRule.js"],"names":["BufferLevelRule","config","dashMetrics","metricsModel","mediaPlayerModel","textController","abrController","setup","execute","streamProcessor","videoTrackPresent","bufferLevel","getCurrentBufferLevel","getReadOnlyMetricsFor","getType","getBufferTarget","bufferTarget","NaN","type","representationInfo","getRepresentationInfo","Constants","FRAGMENTED_TEXT","isTextEnabled","fragmentDuration","AUDIO","videoBufferLevel","VIDEO","isNaN","Math","max","streamInfo","mediaInfo","isPlayingAtTopQuality","isLongFormContent","manifestInfo","duration","getLongFormContentDurationThreshold","getBufferTimeAtTopQualityLongForm","getBufferTimeAtTopQuality","getStableBufferTime","instance","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,oD,mDACA,wD,4IA/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCA,QAASA,gBAAT,CAAyBC,MAAzB,CAAiC,CAE7BA,OAASA,QAAU,EAAnB,CACA,GAAMC,aAAcD,OAAOC,WAA3B,CACA,GAAMC,cAAeF,OAAOE,YAA5B,CACA,GAAMC,kBAAmBH,OAAOG,gBAAhC,CACA,GAAMC,gBAAiBJ,OAAOI,cAA9B,CACA,GAAMC,eAAgBL,OAAOK,aAA7B,CAEA,QAASC,MAAT,EAAiB,CAChB,CAED,QAASC,QAAT,CAAiBC,eAAjB,CAAkCC,iBAAlC,CAAqD,CACjD,GAAI,CAACD,eAAL,CAAsB,CAClB,MAAO,KAAP,CACH,CACD,GAAME,aAAcT,YAAYU,qBAAZ,CAAkCT,aAAaU,qBAAb,CAAmCJ,gBAAgBK,OAAhB,EAAnC,CAAlC,CAApB,CACA,MAAOH,aAAcI,gBAAgBN,eAAhB,CAAiCC,iBAAjC,CAArB,CACH,CAED,QAASK,gBAAT,CAAyBN,eAAzB,CAA0CC,iBAA1C,CAA6D,CACzD,GAAIM,cAAeC,GAAnB,CAEA,GAAI,CAACR,eAAL,CAAsB,CAClB,MAAOO,aAAP,CACH,CACD,GAAME,MAAOT,gBAAgBK,OAAhB,EAAb,CACA,GAAMK,oBAAqBV,gBAAgBW,qBAAhB,EAA3B,CACA,GAAIF,OAASG,oBAAUC,eAAvB,CAAwC,CACpCN,aAAeX,eAAekB,aAAf,GAAiCJ,mBAAmBK,gBAApD,CAAuE,CAAtF,CACH,CAFD,IAEO,IAAIN,OAASG,oBAAUI,KAAnB,EAA4Bf,iBAAhC,CAAmD,CACtD,GAAMgB,kBAAmBxB,YAAYU,qBAAZ,CAAkCT,aAAaU,qBAAb,CAAmCQ,oBAAUM,KAA7C,CAAlC,CAAzB,CACA,GAAIC,MAAMT,mBAAmBK,gBAAzB,CAAJ,CAAgD,CAC5CR,aAAeU,gBAAf,CACH,CAFD,IAEO,CACHV,aAAea,KAAKC,GAAL,CAASJ,gBAAT,CAA2BP,mBAAmBK,gBAA9C,CAAf,CACH,CACJ,CAPM,IAOA,CACH,GAAMO,YAAaZ,mBAAmBa,SAAnB,CAA6BD,UAAhD,CACA,GAAIzB,cAAc2B,qBAAd,CAAoCF,UAApC,CAAJ,CAAqD,CACjD,GAAMG,mBAAoBH,WAAWI,YAAX,CAAwBC,QAAxB,EAAoChC,iBAAiBiC,mCAAjB,EAA9D,CACArB,aAAekB,kBAAoB9B,iBAAiBkC,iCAAjB,EAApB,CAA2ElC,iBAAiBmC,yBAAjB,EAA1F,CACH,CAHD,IAGO,CACHvB,aAAeZ,iBAAiBoC,mBAAjB,EAAf,CACH,CACJ,CACD,MAAOxB,aAAP,CACH,CAED,GAAMyB,UAAW,CACbjC,QAASA,OADI,CAEbO,gBAAiBA,eAFJ,CAAjB,CAKAR,QACA,MAAOkC,SAAP,CACH,CAEDzC,gBAAgB0C,qBAAhB,CAAwC,iBAAxC,C,gBACeC,uBAAaC,eAAb,CAA6B5C,eAA7B,C","file":"BufferLevelRule.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../../constants/Constants';\r\nimport FactoryMaker from '../../../core/FactoryMaker';\r\n\r\nfunction BufferLevelRule(config) {\r\n\r\n    config = config || {};\r\n    const dashMetrics = config.dashMetrics;\r\n    const metricsModel = config.metricsModel;\r\n    const mediaPlayerModel = config.mediaPlayerModel;\r\n    const textController = config.textController;\r\n    const abrController = config.abrController;\r\n\r\n    function setup() {\r\n    }\r\n\r\n    function execute(streamProcessor, videoTrackPresent) {\r\n        if (!streamProcessor) {\r\n            return true;\r\n        }\r\n        const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(streamProcessor.getType()));\r\n        return bufferLevel < getBufferTarget(streamProcessor, videoTrackPresent);\r\n    }\r\n\r\n    function getBufferTarget(streamProcessor, videoTrackPresent) {\r\n        let bufferTarget = NaN;\r\n\r\n        if (!streamProcessor) {\r\n            return bufferTarget;\r\n        }\r\n        const type = streamProcessor.getType();\r\n        const representationInfo = streamProcessor.getRepresentationInfo();\r\n        if (type === Constants.FRAGMENTED_TEXT) {\r\n            bufferTarget = textController.isTextEnabled() ? representationInfo.fragmentDuration : 0;\r\n        } else if (type === Constants.AUDIO && videoTrackPresent) {\r\n            const videoBufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(Constants.VIDEO));\r\n            if (isNaN(representationInfo.fragmentDuration)) {\r\n                bufferTarget = videoBufferLevel;\r\n            } else {\r\n                bufferTarget = Math.max(videoBufferLevel, representationInfo.fragmentDuration);\r\n            }\r\n        } else {\r\n            const streamInfo = representationInfo.mediaInfo.streamInfo;\r\n            if (abrController.isPlayingAtTopQuality(streamInfo)) {\r\n                const isLongFormContent = streamInfo.manifestInfo.duration >= mediaPlayerModel.getLongFormContentDurationThreshold();\r\n                bufferTarget = isLongFormContent ? mediaPlayerModel.getBufferTimeAtTopQualityLongForm() : mediaPlayerModel.getBufferTimeAtTopQuality();\r\n            } else {\r\n                bufferTarget = mediaPlayerModel.getStableBufferTime();\r\n            }\r\n        }\r\n        return bufferTarget;\r\n    }\r\n\r\n    const instance = {\r\n        execute: execute,\r\n        getBufferTarget: getBufferTarget\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nBufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';\r\nexport default FactoryMaker.getClassFactory(BufferLevelRule);\r\n"]}