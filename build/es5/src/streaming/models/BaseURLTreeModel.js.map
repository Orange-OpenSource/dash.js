{"version":3,"sources":["../../../../../src/streaming/models/BaseURLTreeModel.js"],"names":["ObjectUtils","FactoryMaker","DEFAULT_INDEX","NaN","Node","constructor","_baseUrls","_selectedIdx","data","baseUrls","selectedIdx","children","BaseURLTreeModel","instance","root","dashManifestModel","context","objectUtils","getInstance","setup","reset","setConfig","config","checkSetConfigCall","hasOwnProperty","Error","updateChildData","node","index","element","getBaseURLsFromElement","areEqual","getBaseURLCollectionsFromManifest","manifest","Period_asArray","forEach","p","pi","AdaptationSet_asArray","a","ai","Representation_asArray","sort","getRepresentationSortFunction","r","ri","walk","callback","target","child","invalidateSelectedIndexes","serviceLocation","isNaN","update","getForPath","path","nodes","push","filter","n","length","__dashjs_factory_name","getClassFactory"],"mappings":"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","file":"BaseURLTreeModel.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport ObjectUtils from '../utils/ObjectUtils';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\n\r\nconst DEFAULT_INDEX = NaN;\r\n\r\nclass Node {\r\n    constructor(_baseUrls, _selectedIdx) {\r\n        this.data = {\r\n            baseUrls: _baseUrls || null,\r\n            selectedIdx: _selectedIdx || DEFAULT_INDEX\r\n        };\r\n        this.children = [];\r\n    }\r\n}\r\n\r\nfunction BaseURLTreeModel() {\r\n    let instance,\r\n        root,\r\n        dashManifestModel;\r\n\r\n    const context = this.context;\r\n    const objectUtils = ObjectUtils(context).getInstance();\r\n\r\n    function setup() {\r\n        reset();\r\n    }\r\n\r\n    function setConfig(config) {\r\n        if (config.dashManifestModel) {\r\n            dashManifestModel = config.dashManifestModel;\r\n        }\r\n    }\r\n\r\n    function checkSetConfigCall() {\r\n        if (!dashManifestModel || !dashManifestModel.hasOwnProperty('getBaseURLsFromElement') || !dashManifestModel.hasOwnProperty('getRepresentationSortFunction')) {\r\n            throw new Error('setConfig function has to be called previously');\r\n        }\r\n    }\r\n\r\n    function updateChildData(node, index, element) {\r\n        let baseUrls = dashManifestModel.getBaseURLsFromElement(element);\r\n\r\n        if (!node[index]) {\r\n            node[index] = new Node(baseUrls);\r\n        } else {\r\n            if (!objectUtils.areEqual(baseUrls, node[index].data.baseUrls)) {\r\n                node[index].data.baseUrls = baseUrls;\r\n                node[index].data.selectedIdx = DEFAULT_INDEX;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBaseURLCollectionsFromManifest(manifest) {\r\n        checkSetConfigCall();\r\n        let baseUrls = dashManifestModel.getBaseURLsFromElement(manifest);\r\n\r\n        if (!objectUtils.areEqual(baseUrls, root.data.baseUrls)) {\r\n            root.data.baseUrls = baseUrls;\r\n            root.data.selectedIdx = DEFAULT_INDEX;\r\n        }\r\n\r\n        if (manifest && manifest.Period_asArray) {\r\n            manifest.Period_asArray.forEach((p, pi) => {\r\n                updateChildData(root.children, pi, p);\r\n\r\n                if (p.AdaptationSet_asArray) {\r\n                    p.AdaptationSet_asArray.forEach((a, ai) => {\r\n                        updateChildData(root.children[pi].children, ai, a);\r\n\r\n                        if (a.Representation_asArray) {\r\n                            a.Representation_asArray.sort(\r\n                                dashManifestModel.getRepresentationSortFunction()\r\n                            ).forEach((r, ri) => {\r\n                                updateChildData(\r\n                                    root.children[pi].children[ai].children,\r\n                                    ri,\r\n                                    r\r\n                                );\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function walk(callback, node) {\r\n        let target = node || root;\r\n\r\n        callback(target.data);\r\n\r\n        if (target.children) {\r\n            target.children.forEach(child => walk(callback, child));\r\n        }\r\n    }\r\n\r\n    function invalidateSelectedIndexes(serviceLocation) {\r\n        walk((data) => {\r\n            if (!isNaN(data.selectedIdx)) {\r\n                if (serviceLocation === data.baseUrls[data.selectedIdx].serviceLocation) {\r\n                    data.selectedIdx = DEFAULT_INDEX;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function update(manifest) {\r\n        getBaseURLCollectionsFromManifest(manifest);\r\n    }\r\n\r\n    function reset() {\r\n        root = new Node();\r\n    }\r\n\r\n    function getForPath(path) {\r\n        let target = root;\r\n        let nodes = [target.data];\r\n\r\n        if (path) {\r\n            path.forEach(p => {\r\n                target = target.children[p];\r\n\r\n                if (target) {\r\n                    nodes.push(target.data);\r\n                }\r\n            });\r\n        }\r\n\r\n        return nodes.filter(n => n.baseUrls.length);\r\n    }\r\n\r\n    instance = {\r\n        reset: reset,\r\n        update: update,\r\n        getForPath: getForPath,\r\n        invalidateSelectedIndexes: invalidateSelectedIndexes,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nBaseURLTreeModel.__dashjs_factory_name = 'BaseURLTreeModel';\r\nexport default FactoryMaker.getClassFactory(BaseURLTreeModel);\r\n"]}