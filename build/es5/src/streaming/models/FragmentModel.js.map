{"version":3,"sources":["../../../../../src/streaming/models/FragmentModel.js"],"names":["EventBus","Events","FactoryMaker","FragmentRequest","Debug","FRAGMENT_MODEL_LOADING","FRAGMENT_MODEL_EXECUTED","FRAGMENT_MODEL_CANCELED","FRAGMENT_MODEL_FAILED","FragmentModel","config","context","eventBus","getInstance","metricsModel","fragmentLoader","instance","logger","streamProcessor","executedRequests","loadingRequests","setup","getLogger","resetInitialSettings","on","LOADING_COMPLETED","onLoadingCompleted","LOADING_DATA_PROGRESS","onLoadingInProgress","LOADING_ABANDONED","onLoadingAborted","setStreamProcessor","value","getStreamProcessor","isFragmentLoaded","request","isEqualComplete","req1","req2","action","ACTION_COMPLETE","isEqualMedia","isNaN","index","startTime","adaptationIndex","type","isEqualInit","quality","check","requests","isLoaded","some","req","isFragmentLoadedOrPending","i","length","url","getRequests","filter","states","state","Array","filteredRequests","forEach","getRequestsForState","concat","filterRequests","getRequestThreshold","duration","Math","min","removeExecutedRequestsBeforeTime","time","threshold","undefined","removeExecutedRequestsAfterTime","removeExecutedRequestsInTimeRange","start","end","syncExecutedRequestsWithBufferedRange","bufferedRanges","streamDuration","ln","abortRequests","abort","executeRequest","push","addSchedulingInfoMetrics","debug","trigger","STREAM_COMPLETED","fragmentModel","ACTION_DOWNLOAD","loadCurrentFragment","warn","FRAGMENT_LOADING_STARTED","sender","load","getRequestForTime","arr","lastIdx","hasOwnProperty","prop","addSchedulingInfo","mediaType","Date","availabilityStartTime","range","addRequestsQueue","e","splice","indexOf","response","error","FRAGMENT_LOADING_COMPLETED","FRAGMENT_LOADING_PROGRESS","FRAGMENT_LOADING_ABANDONED","reset","off","addExecutedRequest","__dashjs_factory_name","factory","getClassFactory","updateClassFactory"],"mappings":"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","file":"FragmentModel.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n\r\nimport EventBus from '../../core/EventBus';\r\nimport Events from '../../core/events/Events';\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport FragmentRequest from '../vo/FragmentRequest';\r\nimport Debug from '../../core/Debug';\r\n\r\nconst FRAGMENT_MODEL_LOADING = 'loading';\r\nconst FRAGMENT_MODEL_EXECUTED = 'executed';\r\nconst FRAGMENT_MODEL_CANCELED = 'canceled';\r\nconst FRAGMENT_MODEL_FAILED = 'failed';\r\n\r\nfunction FragmentModel(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = EventBus(context).getInstance();\r\n    const metricsModel = config.metricsModel;\r\n    const fragmentLoader = config.fragmentLoader;\r\n\r\n    let instance,\r\n        logger,\r\n        streamProcessor,\r\n        executedRequests,\r\n        loadingRequests;\r\n\r\n    function setup() {\r\n        logger = Debug(context).getInstance().getLogger(instance);\r\n        resetInitialSettings();\r\n        eventBus.on(Events.LOADING_COMPLETED, onLoadingCompleted, instance);\r\n        eventBus.on(Events.LOADING_DATA_PROGRESS, onLoadingInProgress, instance);\r\n        eventBus.on(Events.LOADING_ABANDONED, onLoadingAborted, instance);\r\n    }\r\n\r\n    function setStreamProcessor(value) {\r\n        streamProcessor = value;\r\n    }\r\n\r\n    function getStreamProcessor() {\r\n        return streamProcessor;\r\n    }\r\n\r\n    function isFragmentLoaded(request) {\r\n        const isEqualComplete = function (req1, req2) {\r\n            return ((req1.action === FragmentRequest.ACTION_COMPLETE) && (req1.action === req2.action));\r\n        };\r\n\r\n        const isEqualMedia = function (req1, req2) {\r\n            return !isNaN(req1.index) && (req1.startTime === req2.startTime) && (req1.adaptationIndex === req2.adaptationIndex) && (req1.type === req2.type);\r\n        };\r\n\r\n        const isEqualInit = function (req1, req2) {\r\n            return isNaN(req1.index) && isNaN(req2.index) && (req1.quality === req2.quality);\r\n        };\r\n\r\n        const check = function (requests) {\r\n            let isLoaded = false;\r\n\r\n            requests.some(req => {\r\n                if (isEqualMedia(request, req) || isEqualInit(request, req) || isEqualComplete(request, req)) {\r\n                    isLoaded = true;\r\n                    return isLoaded;\r\n                }\r\n            });\r\n            return isLoaded;\r\n        };\r\n\r\n        if (!request) {\r\n            return false;\r\n        }\r\n\r\n        return check(executedRequests);\r\n    }\r\n\r\n    function isFragmentLoadedOrPending(request) {\r\n        let isLoaded = false;\r\n        let i = 0;\r\n        let req;\r\n\r\n        // First, check if the fragment has already been loaded\r\n        isLoaded = isFragmentLoaded(request);\r\n\r\n        // Then, check if the fragment is about to be loeaded\r\n        if (!isLoaded) {\r\n            for (i = 0; i < loadingRequests.length; i++) {\r\n                req = loadingRequests[i];\r\n                if ((request.url === req.url) && (request.startTime === req.startTime)) {\r\n                    isLoaded = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isLoaded;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Gets an array of {@link FragmentRequest} objects\r\n     *\r\n     * @param {Object} filter The object with properties by which the method filters the requests to be returned.\r\n     *  the only mandatory property is state, which must be a value from\r\n     *  other properties should match the properties of {@link FragmentRequest}. E.g.:\r\n     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns\r\n     *  all the requests from executedRequests array where requests.quality = filter.quality\r\n     *\r\n     * @returns {Array}\r\n     * @memberof FragmentModel#\r\n     */\r\n    function getRequests(filter) {\r\n        const states = filter ? filter.state instanceof Array ? filter.state : [filter.state] : [];\r\n\r\n        let filteredRequests = [];\r\n        states.forEach(state => {\r\n            const requests = getRequestsForState(state);\r\n            filteredRequests = filteredRequests.concat(filterRequests(requests, filter));\r\n        });\r\n\r\n        return filteredRequests;\r\n    }\r\n\r\n    function getRequestThreshold(req) {\r\n        return isNaN(req.duration) ? 0.25 : Math.min(req.duration / 8, 0.5);\r\n    }\r\n\r\n    function removeExecutedRequestsBeforeTime(time) {\r\n        executedRequests = executedRequests.filter(req => {\r\n            const threshold = getRequestThreshold(req);\r\n            return isNaN(req.startTime) || (time !== undefined ? req.startTime >= time - threshold : false);\r\n        });\r\n    }\r\n\r\n    function removeExecutedRequestsAfterTime(time) {\r\n        executedRequests = executedRequests.filter(req => {\r\n            return isNaN(req.startTime) || (time !== undefined ? req.startTime + req.duration < time : false);\r\n        });\r\n    }\r\n\r\n    function removeExecutedRequestsInTimeRange(start, end) {\r\n        if (end <= start + 0.5) {\r\n            return;\r\n        }\r\n\r\n        executedRequests = executedRequests.filter(req => {\r\n            const threshold = getRequestThreshold(req);\r\n            return (isNaN(req.startTime) || req.startTime >= (end - threshold)) ||\r\n                (isNaN(req.duration) || (req.startTime + req.duration) <= (start + threshold));\r\n        });\r\n    }\r\n\r\n    // Remove requests that are not \"represented\" by any of buffered ranges\r\n    function syncExecutedRequestsWithBufferedRange(bufferedRanges, streamDuration) {\r\n        if (!bufferedRanges || bufferedRanges.length === 0) {\r\n            removeExecutedRequestsBeforeTime();\r\n            return;\r\n        }\r\n\r\n        let start = 0;\r\n        for (let i = 0, ln = bufferedRanges.length; i < ln; i++) {\r\n            removeExecutedRequestsInTimeRange(start, bufferedRanges.start(i));\r\n            start = bufferedRanges.end(i);\r\n        }\r\n        if (streamDuration > 0) {\r\n            removeExecutedRequestsInTimeRange(start, streamDuration);\r\n        }\r\n    }\r\n\r\n    function abortRequests() {\r\n        fragmentLoader.abort();\r\n        loadingRequests = [];\r\n    }\r\n\r\n    function executeRequest(request) {\r\n        switch (request.action) {\r\n            case FragmentRequest.ACTION_COMPLETE:\r\n                executedRequests.push(request);\r\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED);\r\n                logger.debug('executeRequest trigger STREAM_COMPLETED');\r\n                eventBus.trigger(Events.STREAM_COMPLETED, {\r\n                    request: request,\r\n                    fragmentModel: this\r\n                });\r\n                break;\r\n            case FragmentRequest.ACTION_DOWNLOAD:\r\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING);\r\n                loadingRequests.push(request);\r\n                loadCurrentFragment(request);\r\n                break;\r\n            default:\r\n                logger.warn('Unknown request action.');\r\n        }\r\n    }\r\n\r\n    function loadCurrentFragment(request) {\r\n        eventBus.trigger(Events.FRAGMENT_LOADING_STARTED, {\r\n            sender: instance,\r\n            request: request\r\n        });\r\n        fragmentLoader.load(request);\r\n    }\r\n\r\n    function getRequestForTime(arr, time, threshold) {\r\n        // loop through the executed requests and pick the one for which the playback interval matches the given time\r\n        const lastIdx = arr.length - 1;\r\n        for (let i = lastIdx; i >= 0; i--) {\r\n            const req = arr[i];\r\n            const start = req.startTime;\r\n            const end = start + req.duration;\r\n            threshold = !isNaN(threshold) ? threshold : getRequestThreshold(req);\r\n            if ((!isNaN(start) && !isNaN(end) && ((time + threshold) >= start) && ((time - threshold) < end)) || (isNaN(start) && isNaN(time))) {\r\n                return req;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function filterRequests(arr, filter) {\r\n        // for time use a specific filtration function\r\n        if (filter.hasOwnProperty('time')) {\r\n            return [getRequestForTime(arr, filter.time, filter.threshold)];\r\n        }\r\n\r\n        return arr.filter(request => {\r\n            for (const prop in filter) {\r\n                if (prop === 'state') continue;\r\n                if (filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    function getRequestsForState(state) {\r\n        let requests;\r\n        switch (state) {\r\n            case FRAGMENT_MODEL_LOADING:\r\n                requests = loadingRequests;\r\n                break;\r\n            case FRAGMENT_MODEL_EXECUTED:\r\n                requests = executedRequests;\r\n                break;\r\n            default:\r\n                requests = [];\r\n        }\r\n        return requests;\r\n    }\r\n\r\n    function addSchedulingInfoMetrics(request, state) {\r\n        metricsModel.addSchedulingInfo(\r\n            request.mediaType,\r\n            new Date(),\r\n            request.type,\r\n            request.startTime,\r\n            request.availabilityStartTime,\r\n            request.duration,\r\n            request.quality,\r\n            request.range,\r\n            state);\r\n\r\n        metricsModel.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);\r\n    }\r\n\r\n    function onLoadingCompleted(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        loadingRequests.splice(loadingRequests.indexOf(e.request), 1);\r\n\r\n        if (e.response && !e.error) {\r\n            executedRequests.push(e.request);\r\n        }\r\n\r\n        addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED);\r\n\r\n        eventBus.trigger(Events.FRAGMENT_LOADING_COMPLETED, {\r\n            request: e.request,\r\n            response: e.response,\r\n            error: e.error,\r\n            sender: this\r\n        });\r\n    }\r\n\r\n    function onLoadingInProgress(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        eventBus.trigger(Events.FRAGMENT_LOADING_PROGRESS, {\r\n            request: e.request,\r\n            response: e.response,\r\n            error: e.error,\r\n            sender: this\r\n        });\r\n    }\r\n\r\n    function onLoadingAborted(e) {\r\n        if (e.sender !== fragmentLoader) return;\r\n\r\n        eventBus.trigger(Events.FRAGMENT_LOADING_ABANDONED, { streamProcessor: this.getStreamProcessor(), request: e.request, mediaType: e.mediaType });\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        executedRequests = [];\r\n        loadingRequests = [];\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.LOADING_COMPLETED, onLoadingCompleted, this);\r\n        eventBus.off(Events.LOADING_DATA_PROGRESS, onLoadingInProgress, this);\r\n        eventBus.off(Events.LOADING_ABANDONED, onLoadingAborted, this);\r\n\r\n        if (fragmentLoader) {\r\n            fragmentLoader.reset();\r\n        }\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function addExecutedRequest(request) {\r\n        executedRequests.push(request);\r\n    }\r\n\r\n    instance = {\r\n        setStreamProcessor: setStreamProcessor,\r\n        getStreamProcessor: getStreamProcessor,\r\n        getRequests: getRequests,\r\n        isFragmentLoaded: isFragmentLoaded,\r\n        isFragmentLoadedOrPending: isFragmentLoadedOrPending,\r\n        removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,\r\n        removeExecutedRequestsAfterTime: removeExecutedRequestsAfterTime,\r\n        syncExecutedRequestsWithBufferedRange: syncExecutedRequestsWithBufferedRange,\r\n        abortRequests: abortRequests,\r\n        executeRequest: executeRequest,\r\n        reset: reset,\r\n        addExecutedRequest: addExecutedRequest\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nFragmentModel.__dashjs_factory_name = 'FragmentModel';\r\nconst factory = FactoryMaker.getClassFactory(FragmentModel);\r\nfactory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING;\r\nfactory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED;\r\nfactory.FRAGMENT_MODEL_CANCELED = FRAGMENT_MODEL_CANCELED;\r\nfactory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED;\r\nFactoryMaker.updateClassFactory(FragmentModel.__dashjs_factory_name, factory);\r\nexport default factory;\r\n"]}