{"version":3,"sources":["../../../../src/streaming/StreamProcessor.js"],"names":["StreamProcessor","config","context","type","errHandler","mimeType","timelineConverter","adapter","manifestModel","mediaPlayerModel","stream","abrController","playbackController","streamController","mediaController","textController","domStorage","metricsModel","dashMetrics","dashManifestModel","instance","mediaInfo","mediaInfoArr","bufferController","scheduleController","liveEdgeFinder","representationController","fragmentModel","spExternalControllers","indexHandler","setup","getIsDynamic","create","streamProcessor","resetInitialSettings","initialize","mediaSource","baseURLController","registerStreamType","getFragmentController","getModel","setStreamProcessor","createBufferControllerForType","setConfig","registerExternalController","controller","push","unregisterExternalController","index","indexOf","splice","getExternalControllers","unregisterAllExternalController","reset","errored","keepBuffers","unRegisterStreamType","forEach","isUpdating","getType","getRepresentationController","getIndexHandler","getBuffer","setBuffer","buffer","getBufferController","getFragmentModel","getLiveEdgeFinder","getStreamInfo","addInbandEvents","events","selectMediaInfo","newMediaInfo","updateData","addMediaInfo","selectNewMediaInfo","getMediaInfoArr","getMediaInfo","getMediaSource","setMediaSource","dischargePreBuffer","getScheduleController","getRepresentationInfo","quality","isBufferingCompleted","getIsBufferingCompleted","timeIsBuffered","time","getRangeAt","getBufferLevel","switchInitData","representationId","bufferResetEnabled","id","createBuffer","previousBuffers","switchTrackAsked","Constants","VIDEO","AUDIO","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"StreamProcessor.js","sourcesContent":["/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from './constants/Constants';\r\nimport LiveEdgeFinder from './utils/LiveEdgeFinder';\r\nimport BufferController from './controllers/BufferController';\r\nimport TextBufferController from './text/TextBufferController';\r\nimport ScheduleController from './controllers/ScheduleController';\r\nimport RepresentationController from '../dash/controllers/RepresentationController';\r\nimport FactoryMaker from '../core/FactoryMaker';\r\n\r\nimport DashHandler from '../dash/DashHandler';\r\n\r\nfunction StreamProcessor(config) {\r\n\r\n    config = config || {};\r\n    let context = this.context;\r\n\r\n    let type = config.type;\r\n    let errHandler = config.errHandler;\r\n    let mimeType = config.mimeType;\r\n    let timelineConverter = config.timelineConverter;\r\n    let adapter = config.adapter;\r\n    let manifestModel = config.manifestModel;\r\n    let mediaPlayerModel = config.mediaPlayerModel;\r\n    let stream = config.stream;\r\n    let abrController = config.abrController;\r\n    let playbackController = config.playbackController;\r\n    let streamController = config.streamController;\r\n    let mediaController = config.mediaController;\r\n    let textController = config.textController;\r\n    let domStorage = config.domStorage;\r\n    let metricsModel = config.metricsModel;\r\n    let dashMetrics = config.dashMetrics;\r\n    let dashManifestModel = config.dashManifestModel;\r\n\r\n    let instance,\r\n        mediaInfo,\r\n        mediaInfoArr,\r\n        bufferController,\r\n        scheduleController,\r\n        liveEdgeFinder,\r\n        representationController,\r\n        fragmentModel,\r\n        spExternalControllers,\r\n        indexHandler;\r\n\r\n    function setup() {\r\n        if (playbackController && playbackController.getIsDynamic()) {\r\n            liveEdgeFinder = LiveEdgeFinder(context).create({\r\n                timelineConverter: timelineConverter,\r\n                streamProcessor: instance\r\n            });\r\n        }\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function initialize(mediaSource) {\r\n        indexHandler = DashHandler(context).create({\r\n            mimeType: mimeType,\r\n            timelineConverter: timelineConverter,\r\n            dashMetrics: dashMetrics,\r\n            metricsModel: metricsModel,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            baseURLController: config.baseURLController,\r\n            errHandler: errHandler\r\n        });\r\n\r\n        // initialize controllers\r\n        indexHandler.initialize(instance);\r\n        abrController.registerStreamType(type, instance);\r\n\r\n        fragmentModel = stream.getFragmentController().getModel(type);\r\n        fragmentModel.setStreamProcessor(instance);\r\n\r\n        bufferController = createBufferControllerForType(type);\r\n        scheduleController = ScheduleController(context).create({\r\n            type: type,\r\n            mimeType: mimeType,\r\n            metricsModel: metricsModel,\r\n            adapter: adapter,\r\n            dashMetrics: dashMetrics,\r\n            dashManifestModel: dashManifestModel,\r\n            timelineConverter: timelineConverter,\r\n            mediaPlayerModel: mediaPlayerModel,\r\n            abrController: abrController,\r\n            playbackController: playbackController,\r\n            streamController: streamController,\r\n            textController: textController,\r\n            streamProcessor: instance,\r\n            mediaController: mediaController\r\n        });\r\n        representationController = RepresentationController(context).create();\r\n        representationController.setConfig({\r\n            abrController: abrController,\r\n            domStorage: domStorage,\r\n            metricsModel: metricsModel,\r\n            dashMetrics: dashMetrics,\r\n            dashManifestModel: dashManifestModel,\r\n            manifestModel: manifestModel,\r\n            playbackController: playbackController,\r\n            timelineConverter: timelineConverter,\r\n            streamProcessor: instance\r\n        });\r\n        bufferController.initialize(mediaSource);\r\n        scheduleController.initialize();\r\n        representationController.initialize();\r\n    }\r\n\r\n    function registerExternalController(controller) {\r\n        spExternalControllers.push(controller);\r\n    }\r\n\r\n    function unregisterExternalController(controller) {\r\n        var index = spExternalControllers.indexOf(controller);\r\n\r\n        if (index !== -1) {\r\n            spExternalControllers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    function getExternalControllers() {\r\n        return spExternalControllers;\r\n    }\r\n\r\n    function unregisterAllExternalController() {\r\n        spExternalControllers = [];\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        mediaInfoArr = [];\r\n        mediaInfo = null;\r\n        unregisterAllExternalController();\r\n    }\r\n\r\n    function reset(errored, keepBuffers) {\r\n        indexHandler.reset();\r\n\r\n        if (bufferController) {\r\n            bufferController.reset(errored, keepBuffers);\r\n            bufferController = null;\r\n        }\r\n\r\n        if (scheduleController) {\r\n            scheduleController.reset();\r\n            scheduleController = null;\r\n        }\r\n\r\n        if (representationController) {\r\n            representationController.reset();\r\n            representationController = null;\r\n        }\r\n\r\n        if (abrController) {\r\n            abrController.unRegisterStreamType(type);\r\n        }\r\n        spExternalControllers.forEach(function (controller) {\r\n            controller.reset();\r\n        });\r\n\r\n        resetInitialSettings();\r\n        type = null;\r\n        stream = null;\r\n        if (liveEdgeFinder) {\r\n            liveEdgeFinder.reset();\r\n            liveEdgeFinder = null;\r\n        }\r\n    }\r\n\r\n    function isUpdating() {\r\n        return representationController ? representationController.isUpdating() : false;\r\n    }\r\n\r\n    function getType() {\r\n        return type;\r\n    }\r\n\r\n    function getRepresentationController() {\r\n        return representationController;\r\n    }\r\n\r\n    function getIndexHandler() {\r\n        return indexHandler;\r\n    }\r\n\r\n    function getFragmentController() {\r\n        return stream ? stream.getFragmentController() : null;\r\n    }\r\n\r\n    function getBuffer() {\r\n        return bufferController.getBuffer();\r\n    }\r\n\r\n    function setBuffer(buffer) {\r\n        bufferController.setBuffer(buffer);\r\n    }\r\n\r\n    function getBufferController() {\r\n        return bufferController;\r\n    }\r\n\r\n    function getFragmentModel() {\r\n        return fragmentModel;\r\n    }\r\n\r\n    function getLiveEdgeFinder() {\r\n        return liveEdgeFinder;\r\n    }\r\n\r\n    function getStreamInfo() {\r\n        return stream ? stream.getStreamInfo() : null;\r\n    }\r\n\r\n    function addInbandEvents(events) {\r\n        if (stream) {\r\n            stream.addInbandEvents(events);\r\n        }\r\n    }\r\n\r\n    function selectMediaInfo(newMediaInfo) {\r\n        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || (newMediaInfo.type === mediaInfo.type))) {\r\n            mediaInfo = newMediaInfo;\r\n        }\r\n        adapter.updateData(this);\r\n    }\r\n\r\n    function addMediaInfo(newMediaInfo, selectNewMediaInfo) {\r\n        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {\r\n            mediaInfoArr.push(newMediaInfo);\r\n        }\r\n\r\n        if (selectNewMediaInfo) {\r\n            this.selectMediaInfo(newMediaInfo);\r\n        }\r\n    }\r\n\r\n    function getMediaInfoArr() {\r\n        return mediaInfoArr;\r\n    }\r\n\r\n    function getMediaInfo() {\r\n        return mediaInfo;\r\n    }\r\n\r\n    function getMediaSource() {\r\n        return bufferController.getMediaSource();\r\n    }\r\n\r\n    function setMediaSource(mediaSource) {\r\n        bufferController.setMediaSource(mediaSource, getMediaInfo());\r\n    }\r\n\r\n    function dischargePreBuffer() {\r\n        bufferController.dischargePreBuffer();\r\n    }\r\n\r\n    function getScheduleController() {\r\n        return scheduleController;\r\n    }\r\n\r\n    function getRepresentationInfo(quality) {\r\n        return adapter.getRepresentationInfo(representationController, quality);\r\n    }\r\n\r\n    function isBufferingCompleted() {\r\n        if (bufferController) {\r\n            return bufferController.getIsBufferingCompleted();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function timeIsBuffered(time) {\r\n        if (bufferController) {\r\n            return bufferController.getRangeAt(time, 0) !== null;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function getBufferLevel() {\r\n        return bufferController.getBufferLevel();\r\n    }\r\n\r\n    function switchInitData(representationId, bufferResetEnabled) {\r\n        if (bufferController) {\r\n            bufferController.switchInitData(getStreamInfo().id, representationId, bufferResetEnabled);\r\n        }\r\n    }\r\n\r\n    function createBuffer(previousBuffers) {\r\n        return (bufferController.getBuffer() || bufferController.createBuffer(mediaInfo, previousBuffers));\r\n    }\r\n\r\n    function switchTrackAsked() {\r\n        scheduleController.switchTrackAsked();\r\n    }\r\n\r\n    function createBufferControllerForType(type) {\r\n        let controller = null;\r\n\r\n        if (type === Constants.VIDEO || type === Constants.AUDIO) {\r\n            controller = BufferController(context).create({\r\n                type: type,\r\n                metricsModel: metricsModel,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                manifestModel: manifestModel,\r\n                errHandler: errHandler,\r\n                streamController: streamController,\r\n                mediaController: mediaController,\r\n                adapter: adapter,\r\n                textController: textController,\r\n                abrController: abrController,\r\n                playbackController: playbackController,\r\n                streamProcessor: instance\r\n            });\r\n        } else {\r\n            controller = TextBufferController(context).create({\r\n                type: type,\r\n                mimeType: mimeType,\r\n                metricsModel: metricsModel,\r\n                mediaPlayerModel: mediaPlayerModel,\r\n                manifestModel: manifestModel,\r\n                errHandler: errHandler,\r\n                streamController: streamController,\r\n                mediaController: mediaController,\r\n                adapter: adapter,\r\n                textController: textController,\r\n                abrController: abrController,\r\n                playbackController: playbackController,\r\n                streamProcessor: instance\r\n            });\r\n        }\r\n\r\n        return controller;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        isUpdating: isUpdating,\r\n        getType: getType,\r\n        getBufferController: getBufferController,\r\n        getFragmentModel: getFragmentModel,\r\n        getScheduleController: getScheduleController,\r\n        getLiveEdgeFinder: getLiveEdgeFinder,\r\n        getFragmentController: getFragmentController,\r\n        getRepresentationController: getRepresentationController,\r\n        getIndexHandler: getIndexHandler,\r\n        getRepresentationInfo: getRepresentationInfo,\r\n        getBufferLevel: getBufferLevel,\r\n        switchInitData: switchInitData,\r\n        isBufferingCompleted: isBufferingCompleted,\r\n        timeIsBuffered: timeIsBuffered,\r\n        createBuffer: createBuffer,\r\n        getStreamInfo: getStreamInfo,\r\n        selectMediaInfo: selectMediaInfo,\r\n        addMediaInfo: addMediaInfo,\r\n        switchTrackAsked: switchTrackAsked,\r\n        getMediaInfoArr: getMediaInfoArr,\r\n        getMediaInfo: getMediaInfo,\r\n        getMediaSource: getMediaSource,\r\n        setMediaSource: setMediaSource,\r\n        dischargePreBuffer: dischargePreBuffer,\r\n        getBuffer: getBuffer,\r\n        setBuffer: setBuffer,\r\n        registerExternalController: registerExternalController,\r\n        unregisterExternalController: unregisterExternalController,\r\n        getExternalControllers: getExternalControllers,\r\n        unregisterAllExternalController: unregisterAllExternalController,\r\n        addInbandEvents: addInbandEvents,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\nStreamProcessor.__dashjs_factory_name = 'StreamProcessor';\r\nexport default FactoryMaker.getClassFactory(StreamProcessor);\r\n"]}